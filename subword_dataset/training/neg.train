<cls> <noptr> count free ( <ptr> map <dot> <noptr> block size <dot> <noptr> num bits )
<cls> <noptr> cluster is free ( <ptr> info )
<cls> <noptr> free pages prepare ( <ptr> page <dot> <noptr> order <dot> <noptr> check free )
<cls> <noptr> task will free mem ( <ptr> task )
<cls> <ptr> vc deallocate ( <noptr> curr cons )
<cls> <noptr> try to free pte page ( <ptr> pte )
<cls> <noptr> ext count free clusters ( <ptr> sb )
<cls> <noptr> ext free blocks count ( <ptr> es )
<cls> <noptr> ext trim all free ( <ptr> sb <dot> <noptr> group <dot> <noptr> start <dot> <noptr> max <dot> <noptr> min blocks )
<cls> <noptr> try to free c pbuf ( <ptr> j h )
<cls> <noptr> ag p generic free gatt table ( <ptr> bridge )
<cls> <noptr> bitmap find free region ( <ptr> bitmap <dot> <noptr> bits <dot> <noptr> order )
<cls> <noptr> buffer freed ( <ptr> b h )
<cls> <noptr> check free space ( <ptr> acct )
<cls> <noptr> dissolve free huge page ( <ptr> page )
<cls> <noptr> e crypt fs acquire free msg ctx ( <dptr> msg ctx )
<cls> <noptr> ext claim free clusters ( <ptr> sbi <dot> <noptr> n clusters <dot> <noptr> flags )
<cls> <noptr> ext has free clusters ( <ptr> sbi <dot> <noptr> n clusters <dot> <noptr> flags )
<cls> <noptr> fat count free clusters ( <ptr> sb )
<cls> <noptr> fat free clusters ( <ptr> inode <dot> <noptr> cluster )
<cls> <noptr> fat free ( <ptr> inode <dot> <noptr> skip )
<cls> <noptr> free pages check ( <ptr> page )
<cls> <noptr> cam if clk put ( <ptr> cam if )
<cls> <noptr> sci f cleanup sci f dev ( <ptr> dev )
<cls> <noptr> c x core put ( <ptr> core <dot> <ptr> pci )
<cls> <noptr> dvb front end put ( <ptr> fe )
<cls> <ptr> vc deallocate ( <noptr> curr cons )
<cls> <noptr> bd i put ( <ptr> bd i )
<cls> <noptr> wb con gest ed put ( <ptr> con gest ed )
<cls> <noptr> clean cache put page ( <ptr> page )
<cls> <noptr> z fold free ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> bd i unregister ( <ptr> bd i )
<cls> <noptr> em xx shutdown buttons ( <ptr> dev )
<cls> <noptr> huge tlb unregister node ( <ptr> node )
<cls> <noptr> l k dtm slab free double ( )
<cls> <noptr> huge tlb fs dec free inodes ( <ptr> sb info )
<cls> <noptr> ll deinit ( )
<cls> <noptr> cb do release ( <ptr> h dev <dot> <ptr> cb )
<cls> <noptr> sci frm alist unregister ( <ptr> window <dot> <noptr> offset <dot> <noptr> nr pages )
<cls> <noptr> kas an freep d ( <ptr> pd start <dot> <ptr> pgd )
<cls> <noptr> z fold destroy pool ( <ptr> pool )
<cls> <noptr> ln b h release ( <ptr> fe )
<cls> <noptr> q cade init ( )
<cls> <noptr> info bd q free ( <ptr> d quot <dot> <noptr> space )
<cls> <noptr> is page cache free able ( <ptr> page )
<cls> <noptr> num free chunks ( <ptr> z hdr )
<cls> <noptr> page block free ( <ptr> page )
<cls> <noptr> try to free swap ( <ptr> page )
<cls> <noptr> unusable free index ( <noptr> order <dot> <ptr> info )
<cls> <ptr> free irq ( <ptr> desc <dot> <ptr> devid )
<cls> <noptr> ext count free ( <ptr> bitmap <dot> <noptr> num chars )
<cls> <noptr> ext count free inodes ( <ptr> sb )
<cls> <noptr> isolate free pages range ( <ptr> cc <dot> <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> release free pages ( <ptr> free list )
<cls> <noptr> try to free mem cgroup pages ( <ptr> mem cg <dot> <noptr> nr pages <dot> <noptr> gfp mask <dot> <noptr> may swap )
<cls> <noptr> bpf prog free ( <ptr> fp )
<cls> <noptr> d free external ( <ptr> head )
<cls> <noptr> d quot free space ( <ptr> inode <dot> <noptr> number <dot> <noptr> flags )
<cls> <noptr> free filter ( <ptr> filter )
<cls> <noptr> free pages ok ( <ptr> page <dot> <noptr> order )
<cls> <noptr> free pages ( <ptr> page <dot> <noptr> order )
<cls> <noptr> v l clk put ( <ptr> clk )
<cls> <noptr> free reserved page ( <ptr> page )
<cls> <noptr> free subsystem filter ( <ptr> file )
<cls> <noptr> k fifo free ( <ptr> fifo )
<cls> <noptr> k free skb ( <ptr> skb )
<cls> <noptr> mem cgroup free ( <ptr> mem cg )
<cls> <noptr> mem block free late ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mod zone free page state ( <ptr> zone <dot> <noptr> nr pages <dot> <noptr> migrate type )
<cls> <noptr> m pol put ( <ptr> p )
<cls> <noptr> put user pages ( <dptr> pages <dot> <noptr> n pages )
<cls> <noptr> huge page put sub pool ( <ptr> spool )
<cls> <noptr> spc sis clk put ( <ptr> state )
<cls> <noptr> put back active huge page ( <ptr> page )
<cls> <noptr> vb v malloc put ( <ptr> buf priv )
<cls> <noptr> vb v malloc put user ptr ( <ptr> buf priv )
<cls> <noptr> fim c is put clocks ( <ptr> is )
<cls> <noptr> media request object put ( <ptr> obj )
<cls> <noptr> huge page sub pool put pages ( <ptr> spool <dot> <noptr> delta )
<cls> <noptr> put object ( <ptr> object )
<cls> <noptr> mem cg k mem put cache ( <ptr> cache p )
<cls> <noptr> mem c groupid put many ( <ptr> mem cg <dot> <noptr> n )
<cls> <noptr> put dev map managed page ( <ptr> page )
<cls> <noptr> put back movable page ( <ptr> page )
<cls> <noptr> put anon vma ( <ptr> anon vma )
<cls> <noptr> shmem put link ( <ptr> arg )
<cls> <noptr> put pages list ( <ptr> pages )
<cls> <noptr> put single page ( <ptr> page )
<cls> <noptr> put compound page ( <ptr> page )
<cls> <noptr> put swap page ( <ptr> page <dot> <noptr> entry )
<cls> <noptr> put back lru page ( <ptr> page )
<cls> <noptr> z fold page put back ( <ptr> page )
<cls> <noptr> put cred ( <ptr> cred )
<cls> <noptr> sig queue free ( <ptr> q )
<cls> <noptr> wait on freeing inode ( <ptr> inode )
<cls> <noptr> free event ( <ptr> event )
<cls> <noptr> abort creds ( <ptr> new )
<cls> <noptr> acpi gpio chip free interrupts ( <ptr> chip )
<cls> <noptr> a ead gen iv free ( <ptr> inst )
<cls> <noptr> ae adrequest free ( <ptr> req )
<cls> <noptr> ag p free memory ( <ptr> curr )
<cls> <noptr> ag p free page array ( <ptr> mem )
<cls> <noptr> ag p generic free by type ( <ptr> curr )
<cls> <noptr> a hash free instance ( <ptr> inst )
<cls> <noptr> fim c lite clk put ( <ptr> fim c )
<cls> <noptr> a hash request free ( <ptr> req )
<cls> <noptr> anon vma chain free ( <ptr> anon vma chain )
<cls> <noptr> omap isp put ( <ptr> isp <dot> <noptr> save ctx )
<cls> <noptr> anon vma free ( <ptr> anon vma )
<cls> <noptr> arch free page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> argv free ( <dptr> argv )
<cls> <noptr> array map free ( <ptr> map )
<cls> <noptr> asymmetric key free pre parse ( <ptr> prep )
<cls> <noptr> asymmetric key match free ( <ptr> match data )
<cls> <noptr> audit free ( <ptr> task )
<cls> <noptr> auto group free ( <ptr> tg )
<cls> <noptr> bio free ( <ptr> bio )
<cls> <noptr> bio integrity free ( <ptr> bio )
<cls> <noptr> bio set integrity free ( <ptr> bs )
<cls> <noptr> blk freed evt ( <noptr> dev t )
<cls> <noptr> blk free flush queue ( <ptr> f q )
<cls> <noptr> blk free queue rcu ( <ptr> callback head )
<cls> <noptr> blk m q free request ( <ptr> r q )
<cls> <noptr> blk m q free tag set ( <ptr> set )
<cls> <noptr> blk m q free tags ( <ptr> tags )
<cls> <noptr> blk cg css free ( <ptr> css )
<cls> <noptr> bpf jit free ( <ptr> fp )
<cls> <noptr> bpf prog free deferred ( <ptr> work )
<cls> <noptr> bpf prog free ( <ptr> fp )
<cls> <noptr> bpf prog unlock free ( <ptr> fp )
<cls> <noptr> call user mode helper free info ( <ptr> info )
<cls> <noptr> cgroup free root ( <ptr> root )
<cls> <noptr> clear buffer freed ( <ptr> b h )
<cls> <noptr> c learn link ( <ptr> inode )
<cls> <noptr> cpu cgroup css free ( <ptr> css )
<cls> <noptr> cpu acct css free ( <ptr> css )
<cls> <noptr> cpu freq policy free ( <ptr> policy )
<cls> <noptr> cpu freq stats free table ( <ptr> policy )
<cls> <noptr> cpu idle free state k obj ( <ptr> device <dot> <noptr> i )
<cls> <noptr> cpu set css free ( <ptr> css )
<cls> <noptr> crash free reserved phys range ( <noptr> begin <dot> <noptr> end )
<cls> <noptr> crypto free a ead ( <ptr> tfm )
<cls> <noptr> crypto free a hash ( <ptr> tfm )
<cls> <noptr> crypto free cipher ( <ptr> tfm )
<cls> <noptr> crypto free rng ( <ptr> tfm )
<cls> <noptr> crypto frees hash ( <ptr> tfm )
<cls> <noptr> crypto free tfm ( <ptr> tfm )
<cls> <noptr> d debug table free ( <ptr> dt )
<cls> <noptr> debug check no locks freed ( <ptr> mem from <dot> <noptr> mem len )
<cls> <noptr> delay acct tsk free ( <ptr> tsk )
<cls> <noptr> delayed free pid ns ( <ptr> p )
<cls> <noptr> delayed free vfs mnt ( <ptr> head )
<cls> <noptr> delayed free ( <ptr> p )
<cls> <noptr> dev cgroup css free ( <ptr> css )
<cls> <noptr> dev m gpio free ( <ptr> dev <dot> <noptr> gpio )
<cls> <noptr> dev res free ( <ptr> res )
<cls> <noptr> d put ( <ptr> dentry )
<cls> <noptr> d quot free block ( <ptr> inode <dot> <noptr> nr )
<cls> <noptr> d quot free reserved space ( <ptr> d quot <dot> <noptr> number )
<cls> <noptr> e crypt fs msg ctx alloc to free ( <ptr> msg ctx )
<cls> <noptr> e crypt fs msg ctx free to alloc ( <ptr> msg ctx )
<cls> <noptr> encrypted rcu free ( <ptr> rcu )
<cls> <noptr> ep free ( <ptr> ep )
<cls> <noptr> ev dev free ( <ptr> dev )
<cls> <noptr> event fd free ctx ( <ptr> ctx )
<cls> <noptr> event fd free ( <ptr> k ref )
<cls> <noptr> ext free blocks count set ( <ptr> es <dot> <noptr> blk )
<cls> <noptr> ext print free blocks ( <ptr> inode )
<cls> <noptr> fa notify free event ( <ptr> f sn event )
<cls> <noptr> fa notify free group priv ( <ptr> group )
<cls> <noptr> f async free rcu ( <ptr> head )
<cls> <noptr> f async free ( <ptr> new )
<cls> <noptr> fat cache free ( <ptr> cache )
<cls> <noptr> file free ( <ptr> f )
<cls> <noptr> firmware free data ( <ptr> fw )
<cls> <noptr> free aggr k probe ( <ptr> p )
<cls> <noptr> free area init ( <ptr> zones size )
<cls> <noptr> free arg pages ( <ptr> b prm )
<cls> <noptr> free b prm ( <ptr> b prm )
<cls> <noptr> free buffer head ( <ptr> b h )
<cls> <noptr> free buffer page ( <ptr> b page )
<cls> <noptr> free buf ( <ptr> buf <dot> <noptr> can sleep )
<cls> <noptr> free c grpc set links ( <ptr> links to free )
<cls> <noptr> free compound page ( <ptr> page )
<cls> <noptr> free cpu mask var ( <noptr> mask )
<cls> <noptr> freed cookie ( <ptr> dcs )
<cls> <noptr> free event filter ( <ptr> filter )
<cls> <noptr> free event rcu ( <ptr> head )
<cls> <noptr> free event ( <ptr> event )
<cls> <noptr> free fake cpu c ( <ptr> cpu c )
<cls> <noptr> free flex g d ( <ptr> flex g d )
<cls> <noptr> free fs struct ( <ptr> fs )
<cls> <noptr> free gigantic page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> free huge page ( <ptr> page )
<cls> <noptr> free init pages ( <ptr> what <dot> <noptr> begin <dot> <noptr> end )
<cls> <noptr> free insn page ( <ptr> page )
<cls> <noptr> free insn slot ( <ptr> slot <dot> <noptr> dirty )
<cls> <noptr> free io ctx reqs ( <ptr> ref )
<cls> <noptr> free io ctx users ( <ptr> ref )
<cls> <noptr> free ipc ns ( <ptr> ns )
<cls> <noptr> free k mem cache nodes ( <ptr> s )
<cls> <noptr> free ldt struct ( <ptr> ldt )
<cls> <noptr> free link state ( <ptr> link )
<cls> <noptr> free list ( <ptr> head )
<cls> <noptr> free loc track ( <ptr> t )
<cls> <noptr> free map boot mem ( <ptr> mem map )
<cls> <noptr> free masks ( <ptr> desc )
<cls> <noptr> freem m slot ( <ptr> mms lot )
<cls> <noptr> free mod probe argv ( <ptr> info )
<cls> <noptr> free module param attrs ( <ptr> mk )
<cls> <noptr> free module ( <ptr> mod )
<cls> <noptr> free msi irq s ( <ptr> dev )
<cls> <noptr> free ns proxy ( <ptr> ns )
<cls> <noptr> free opt insn slot ( <ptr> slot <dot> <noptr> dirty )
<cls> <noptr> free page and swap cache ( <ptr> page )
<cls> <noptr> free pages exact ( <ptr> virt <dot> <noptr> size )
<cls> <noptr> free page table ( <ptr> page <dot> <noptr> order )
<cls> <noptr> free part stats ( <ptr> part )
<cls> <noptr> free partitions ( <ptr> state )
<cls> <noptr> free per cpu ( <ptr> ptr )
<cls> <noptr> free pfn range ( <noptr> p addr <dot> <noptr> size )
<cls> <noptr> free pg tables ( <ptr> tlb <dot> <ptr> vma <dot> <noptr> floor <dot> <noptr> ceiling )
<cls> <noptr> free pid ns ( <ptr> k ref )
<cls> <noptr> free pid ( <ptr> pid )
<cls> <noptr> free pipe info ( <ptr> pipe )
<cls> <noptr> freep m u context ( <ptr> pm u )
<cls> <noptr> free poll entry ( <ptr> entry )
<cls> <noptr> free reserved page ( <ptr> page )
<cls> <noptr> free resource ( <ptr> v gpu )
<cls> <noptr> freer map item ( <ptr> r map item )
<cls> <noptr> free root domain ( <ptr> rcu )
<cls> <noptr> freer p inst ( <ptr> r p )
<cls> <noptr> free rts ched group ( <ptr> tg )
<cls> <noptr> free saved cmd lines buffer ( <ptr> s )
<cls> <noptr> free sched groups ( <ptr> sg <dot> <noptr> frees gc )
<cls> <noptr> free sect attrs ( <ptr> sect attrs )
<cls> <noptr> free signal struct ( <ptr> sig )
<cls> <noptr> frees table node ( <ptr> stable node )
<cls> <noptr> free states ( <ptr> env )
<cls> <noptr> free sub part ( <ptr> parts )
<cls> <noptr> free swap cache ( <ptr> page )
<cls> <noptr> free swap count continuation s ( <ptr> si )
<cls> <noptr> free task struct ( <ptr> tsk )
<cls> <noptr> free trace buffers ( <ptr> tr )
<cls> <noptr> free trace buffer ( <ptr> buf )
<cls> <noptr> free transition pg table ( <ptr> image )
<cls> <noptr> free tty struct ( <ptr> tty )
<cls> <noptr> free uid ( <ptr> up )
<cls> <noptr> free unmap v map area ( <ptr> va )
<cls> <noptr> free user ns ( <ptr> work )
<cls> <noptr> free user ( <ptr> up <dot> <noptr> flags )
<cls> <noptr> free ut sns ( <ptr> k ref )
<cls> <noptr> free vfs mnt ( <ptr> mnt )
<cls> <noptr> free vm area ( <ptr> area )
<cls> <noptr> free v map area no flush ( <ptr> va )
<cls> <noptr> free v map area ( <ptr> va )
<cls> <noptr> free v map block ( <ptr> vb )
<cls> <noptr> free work queue attrs ( <ptr> attrs )
<cls> <noptr> free zs page ( <ptr> pool <dot> <ptr> class <dot> <ptr> zs page )
<cls> <noptr> fuse file free ( <ptr> ff )
<cls> <noptr> gen pool free ( <ptr> pool <dot> <noptr> addr <dot> <noptr> size )
<cls> <noptr> gpio free array ( <ptr> array <dot> <noptr> num )
<cls> <noptr> gpio chip free own desc ( <ptr> desc )
<cls> <noptr> gpio d free ( <ptr> desc )
<cls> <noptr> groups free ( <ptr> group info )
<cls> <noptr> h tab map free ( <ptr> map )
<cls> <noptr> huge tlb cgroup css free ( <ptr> css )
<cls> <noptr> huge tlb free pgd range ( <ptr> tlb <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> floor <dot> <noptr> ceiling )
<cls> <noptr> ic q free ic qrc u ( <ptr> head )
<cls> <noptr> ima file free ( <ptr> file )
<cls> <noptr> ima free at f m ( <ptr> tfm )
<cls> <noptr> ima free pages ( <ptr> ptr <dot> <noptr> size )
<cls> <noptr> ima free template entry ( <ptr> entry )
<cls> <noptr> ima free tfm ( <ptr> tfm )
<cls> <noptr> inotify free event ( <ptr> f sn event )
<cls> <noptr> inotify free mark ( <ptr> f sn mark )
<cls> <noptr> input free device ( <ptr> dev )
<cls> <noptr> integrity inode free ( <ptr> inode )
<cls> <noptr> intel i free by type ( <ptr> curr )
<cls> <noptr> i put ( <ptr> inode )
<cls> <noptr> isolate free pages ( <ptr> cc )
<cls> <noptr> j bd free handle ( <ptr> handle )
<cls> <noptr> j bd journal free transaction ( <ptr> transaction )
<cls> <noptr> journal free journal head ( <ptr> j h )
<cls> <noptr> kit imer rcu free ( <ptr> head )
<cls> <noptr> keyring free pre parse ( <ptr> prep )
<cls> <noptr> k free hook ( <ptr> x )
<cls> <noptr> k free skb ( <ptr> skb )
<cls> <noptr> k image free extra pages ( <ptr> image )
<cls> <noptr> k image free page list ( <ptr> list )
<cls> <noptr> k image free pages ( <ptr> page )
<cls> <noptr> k image free ( <ptr> image )
<cls> <noptr> k mem leak free part ( <ptr> ptr <dot> <noptr> size )
<cls> <noptr> k mem leak free recursive ( <ptr> ptr <dot> <noptr> flags )
<cls> <noptr> k mem leak free ( <ptr> ptr )
<cls> <noptr> k object put ( <ptr> k obj )
<cls> <noptr> kv free ( <ptr> addr )
<cls> <noptr> kz free ( <ptr> p )
<cls> <noptr> ld m frag free ( <ptr> list )
<cls> <noptr> ld m free v blk s ( <ptr> l h )
<cls> <noptr> locks free lock ( <ptr> fl )
<cls> <noptr> mb buddy mark free ( <ptr> eb <dot> <noptr> first <dot> <noptr> last )
<cls> <noptr> m m free pgd ( <ptr> m m )
<cls> <noptr> m m drop ( <ptr> m m )
<cls> <noptr> mnt free id ( <ptr> mnt )
<cls> <noptr> mpi free limb space ( <noptr> a )
<cls> <noptr> mpi free ( <noptr> a )
<cls> <noptr> m pol free shared policy ( <ptr> p )
<cls> <noptr> msg rcu free ( <ptr> head )
<cls> <noptr> m srs free ( <ptr> m srs )
<cls> <noptr> paramarray free ( <ptr> arg )
<cls> <noptr> para virt free ldt ( <ptr> ldt <dot> <noptr> entries )
<cls> <noptr> parse freebsd ( <ptr> state <dot> <noptr> offset <dot> <noptr> size <dot> <noptr> origin )
<cls> <noptr> pci free cap save buffers ( <ptr> dev )
<cls> <noptr> pci free dyn ids ( <ptr> drv )
<cls> <noptr> pci free resource list ( <ptr> resources )
<cls> <noptr> pci free resources ( <ptr> dev )
<cls> <noptr> pcie hp free irq ( <ptr> ctrl )
<cls> <noptr> p cpu free alloc info ( <ptr> a i )
<cls> <noptr> p cpu free vm areas ( <dptr> vms <dot> <noptr> nr vms )
<cls> <noptr> per cpu mod free ( <ptr> mod )
<cls> <noptr> perf cgroup css free ( <ptr> css )
<cls> <noptr> perf event free filter ( <ptr> event )
<cls> <noptr> perf event free task ( <ptr> task )
<cls> <noptr> poll free wait ( <ptr> pw q )
<cls> <noptr> put super ( <ptr> sb )
<cls> <noptr> rb free cpu buffer ( <ptr> cpu buffer )
<cls> <noptr> rb free rcu ( <ptr> callback head )
<cls> <noptr> rb free ( <ptr> rb )
<cls> <noptr> rct gpio free ( <ptr> gc <dot> <noptr> offset )
<cls> <noptr> rcu free old probes ( <ptr> head )
<cls> <noptr> rcu free pool ( <ptr> rcu )
<cls> <noptr> rcu freep wq ( <ptr> rcu )
<cls> <noptr> rcu free slab ( <ptr> h )
<cls> <noptr> reg map debug fs free dump cache ( <ptr> map )
<cls> <noptr> reg map m mio free context ( <ptr> context )
<cls> <noptr> regulator bulk free ( <noptr> num consumers <dot> <ptr> consumers )
<cls> <noptr> relay free page array ( <dptr> array )
<cls> <noptr> remove freed quot ( <ptr> d quot )
<cls> <noptr> request key auth free pre parse ( <ptr> prep )
<cls> <noptr> ring buffer free ( <ptr> buffer )
<cls> <noptr> scsi free host dev ( <ptr> s dev )
<cls> <noptr> scsi m q frees g tables ( <ptr> cmd )
<cls> <noptr> security file free ( <ptr> file )
<cls> <noptr> security inode free ( <ptr> inode )
<cls> <noptr> security key free ( <ptr> key )
<cls> <noptr> security msg msg free ( <ptr> msg )
<cls> <noptr> security msg queue free ( <ptr> msq )
<cls> <noptr> security sb free ( <ptr> sb )
<cls> <noptr> security sem free ( <ptr> sma )
<cls> <noptr> security shm free ( <ptr> shp )
<cls> <noptr> security sk free ( <ptr> sk )
<cls> <noptr> security task free ( <ptr> task )
<cls> <noptr> security tun dev free security ( <ptr> security )
<cls> <noptr> sem rcu free ( <ptr> head )
<cls> <noptr> ser io free event ( <ptr> event )
<cls> <noptr> set buffer freed ( <ptr> b h )
<cls> <noptr> sg free table ( <ptr> table )
<cls> <noptr> sg k free ( <ptr> sg <dot> <noptr> n ents )
<cls> <noptr> shash free instance ( <ptr> inst )
<cls> <noptr> shm rcu free ( <ptr> head )
<cls> <noptr> shmem free inode ( <ptr> sb )
<cls> <noptr> sig queue free ( <ptr> q )
<cls> <noptr> simple x attrs free ( <ptr> x attrs )
<cls> <noptr> sp free ( <ptr> n )
<cls> <noptr> swap entry free ( <ptr> p <dot> <noptr> entry )
<cls> <noptr> task numa free ( <ptr> p <dot> <noptr> final )
<cls> <noptr> tlb flush mmu free ( <ptr> tlb )
<cls> <noptr> trace ext free blocks ( <ptr> inode <dot> <noptr> block <dot> <noptr> count <dot> <noptr> flags )
<cls> <noptr> trace ext free inode ( <ptr> inode )
<cls> <noptr> trace ext trim all free ( <ptr> sb <dot> <noptr> group <dot> <noptr> start <dot> <noptr> len )
<cls> <noptr> trace m m page free batched ( <ptr> page )
<cls> <noptr> trace m m page free ( <ptr> page <dot> <noptr> order )
<cls> <noptr> trace sched process free ( <ptr> p )
<cls> <noptr> trace probe free probe arg ( <ptr> arg )
<cls> <noptr> trigger data free ( <ptr> data )
<cls> <noptr> trusted rcu free ( <ptr> rcu )
<cls> <noptr> tty buffer free all ( <ptr> port )
<cls> <noptr> tty free file ( <ptr> file )
<cls> <noptr> tty port free x mit buf ( <ptr> port )
<cls> <noptr> u probe free u task ( <ptr> t )
<cls> <noptr> user free pre parse ( <ptr> prep )
<cls> <noptr> vb free ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> vcs poll data free ( <ptr> poll )
<cls> <noptr> v free ( <ptr> addr )
<cls> <noptr> x free certificate ( <ptr> cert )
<cls> <noptr> z bud free ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z bud z pool free ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> zone init free lists ( <ptr> zone )
<cls> <noptr> z pool free ( <ptr> z pool <dot> <noptr> handle )
<cls> <noptr> zs free ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z swap entry cache free ( <ptr> entry )
<cls> <noptr> z swap free entry ( <ptr> entry )
<cls> <noptr> blue card release ( <ptr> link )
<cls> <noptr> bt usb free frag s ( <ptr> data )
<cls> <noptr> reg m api bt free context ( <ptr> context )
<cls> <noptr> btm tks dio remove ( <ptr> func )
<cls> <noptr> bf usb disconnect ( <ptr> int f )
<cls> <noptr> bcm x disconnect ( <ptr> int f )
<cls> <noptr> b tmr v lsd io unregister dev ( <ptr> card )
<cls> <noptr> h cit i remove ( <ptr> ser dev )
<cls> <noptr> hci uart unregister device ( <ptr> hu )
<cls> <noptr> bt rtl free ( <ptr> bt rtl dev )
<cls> <noptr> intel remove ( <ptr> pdev )
<cls> <noptr> v hci release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> bt q com smd remove ( <ptr> pdev )
<cls> <noptr> bcm remove ( <ptr> pdev )
<cls> <noptr> bt usb disconnect ( <ptr> int f )
<cls> <noptr> bts dio remove ( <ptr> func )
<cls> <noptr> nokia bluetooth ser dev remove ( <ptr> ser dev )
<cls> <noptr> q case r dev remove ( <ptr> ser dev )
<cls> <noptr> bt usb shutdown intel ( <ptr> h dev )
<cls> <noptr> h ser dev remove ( <ptr> ser dev )
<cls> <noptr> dtl detach ( <ptr> link )
<cls> <noptr> btc release ( <ptr> link )
<cls> <noptr> b pax close ( <ptr> h dev )
<cls> <noptr> b pax driver exit ( )
<cls> <noptr> bcm close ( <ptr> hu )
<cls> <noptr> h close ( <ptr> hu )
<cls> <noptr> dtl driver exit ( )
<cls> <noptr> hci uart exit ( )
<cls> <noptr> dtl close ( <ptr> info )
<cls> <noptr> r six bt module exit ( )
<cls> <noptr> bf usb driver exit ( )
<cls> <noptr> btm tks dio driver exit ( )
<cls> <noptr> bt mtk uart driver exit ( )
<cls> <noptr> blue card driver exit ( )
<cls> <noptr> bcm x driver exit ( )
<cls> <noptr> bt q com smd driver exit ( )
<cls> <noptr> intel close ( <ptr> hu )
<cls> <noptr> blue card close ( <ptr> info )
<cls> <noptr> nokia bluetooth ser dev driver exit ( )
<cls> <noptr> bts dio close ( <ptr> h dev )
<cls> <noptr> ath close ( <ptr> hu )
<cls> <noptr> nokia close ( <ptr> hu )
<cls> <noptr> ll close ( <ptr> hu )
<cls> <noptr> hci uart tty close ( <ptr> tty )
<cls> <noptr> b csp close ( <ptr> hu )
<cls> <noptr> bt usb driver exit ( )
<cls> <noptr> bt intel exit mfg ( <ptr> h dev <dot> <noptr> reset <dot> <noptr> patched )
<cls> <noptr> qca close ( <ptr> hu )
<cls> <noptr> rsi hci detach ( <ptr> priv )
<cls> <noptr> dev freq event release e dev ( <ptr> dev )
<cls> <noptr> dev m dev freq event release ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> exy nos bus exit ( <ptr> dev )
<cls> <noptr> tegra dev freq remove ( <ptr> pdev )
<cls> <noptr> dev freq event remove e dev ( <ptr> e dev )
<cls> <noptr> dev m dev freq notifier release ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> dev freq remove device ( <ptr> dev freq )
<cls> <noptr> dev freq dev release ( <ptr> dev )
<cls> <noptr> dev m dev freq opp release ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> dev freq user space exit ( )
<cls> <noptr> dev freq passive exit ( )
<cls> <noptr> dev freq power save exit ( )
<cls> <noptr> dev freq performance exit ( )
<cls> <noptr> exy nos bus passive exit ( <ptr> dev )
<cls> <noptr> exy nos ppm u driver exit ( )
<cls> <noptr> dev freq unregister opp notifier ( <ptr> dev <dot> <ptr> dev freq )
<cls> <noptr> dev freq unregister notifier ( <ptr> dev freq <dot> <ptr> nb <dot> <noptr> list )
<cls> <noptr> dev m dev freq unregister opp notifier ( <ptr> dev <dot> <ptr> dev freq )
<cls> <noptr> dev m dev freq unregister notifier ( <ptr> dev <dot> <ptr> dev freq <dot> <ptr> nb <dot> <ptr> ptr )
<cls> <noptr> fsl if c ctrl remove ( <ptr> dev )
<cls> <noptr> j mb xms remove ( <ptr> dev )
<cls> <noptr> mem stick free card ( <ptr> dev )
<cls> <noptr> mem stick device remove ( <ptr> dev )
<cls> <noptr> ms pro block remove ( <ptr> card )
<cls> <noptr> msb disk release ( <ptr> disk )
<cls> <noptr> msb remove ( <ptr> card )
<cls> <noptr> rts x usb ms drv remove ( <ptr> pdev )
<cls> <noptr> ms bbd release ( <ptr> disk <dot> <noptr> mode )
<cls> <noptr> mem stick remove host ( <ptr> host )
<cls> <noptr> rts xpc ims drv remove ( <ptr> pdev )
<cls> <noptr> tif mms exit ( )
<cls> <noptr> mem stick exit ( )
<cls> <noptr> rpc i driver exit ( )
<cls> <noptr> rts x usb ms driver exit ( )
<cls> <noptr> msb exit ( )
<cls> <noptr> ms pro block disk release ( <ptr> disk )
<cls> <noptr> ms pro block exit ( )
<cls> <noptr> j mb xms driver exit ( )
<cls> <noptr> rts xpc ims driver exit ( )
<cls> <noptr> tif mms remove ( <ptr> sock )
<cls> <noptr> ms pro block bd release ( <ptr> disk <dot> <noptr> mode )
<cls> <noptr> mem stick unregister driver ( <ptr> drv )
<cls> <noptr> m pts as cleanup fw event q ( <ptr> ioc )
<cls> <noptr> mpt free fw memory ( <ptr> ioc )
<cls> <noptr> mpt spi target destroy ( <ptr> star get )
<cls> <noptr> mpt scsi h free chain buffers ( <ptr> ioc <dot> <noptr> req idx )
<cls> <noptr> mp tfc target destroy ( <ptr> star get )
<cls> <noptr> m pts as free fw event ( <ptr> ioc <dot> <ptr> fw event )
<cls> <noptr> mpt spi slave destroy ( <ptr> s dev )
<cls> <noptr> mpt ctl remove ( <ptr> pdev )
<cls> <noptr> mpt scsi h shutdown ( <ptr> pdev )
<cls> <noptr> mp tfc remove ( <ptr> pdev )
<cls> <noptr> m pts as volume delete ( <ptr> ioc <dot> <noptr> id )
<cls> <noptr> mpt scsi h remove ( <ptr> pdev )
<cls> <noptr> mpt lan close ( <ptr> dev )
<cls> <noptr> mpt detach ( <ptr> pdev )
<cls> <noptr> mp tfc exit ( )
<cls> <noptr> mpt ctl exit ( )
<cls> <noptr> fusion exit ( )
<cls> <noptr> mpt spi exit ( )
<cls> <noptr> mpt lan exit ( )
<cls> <noptr> m pts as exit ( )
<cls> <noptr> m pts as shutdown ( <ptr> pdev )
<cls> <noptr> m pts as delete expander siblings ( <ptr> ioc <dot> <ptr> parent <dot> <ptr> expander )
<cls> <noptr> m pts as port delete ( <ptr> ioc <dot> <ptr> port details )
<cls> <noptr> m pts as del device components ( <ptr> ioc )
<cls> <noptr> m pts as del end device ( <ptr> ioc <dot> <ptr> phy info )
<cls> <noptr> m c xxx irq free ( <ptr> m c xxx <dot> <noptr> irq <dot> <ptr> dev )
<cls> <noptr> arizona dev exit ( <ptr> arizona )
<cls> <noptr> c mod io pci remove ( <ptr> dev )
<cls> <noptr> tps x remove sub devs ( <ptr> tps x )
<cls> <noptr> sm remove sub ( <ptr> sm <dot> <ptr> sm dev )
<cls> <noptr> stmp e spi remove ( <ptr> spi )
<cls> <noptr> dev mmf ddev release ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> stmp e remove ( <ptr> stmp e )
<cls> <noptr> freer x slot ( <ptr> dln <dot> <noptr> handle <dot> <noptr> slot )
<cls> <noptr> pcf free irq ( <ptr> pcf <dot> <noptr> irq )
<cls> <noptr> da free irq ( <ptr> da <dot> <noptr> irq <dot> <ptr> data )
<cls> <noptr> sm gpio remove ( <ptr> sm )
<cls> <noptr> pm xxx remove child ( <ptr> dev <dot> <ptr> unused )
<cls> <noptr> tc x remove ( <ptr> client )
<cls> <noptr> tps remove ( <ptr> client )
<cls> <noptr> tw l remove ( <ptr> client )
<cls> <noptr> palm asi c remove ( <ptr> ic )
<cls> <noptr> max remove ( <ptr> client )
<cls> <noptr> remove sub dev ( <ptr> dev <dot> <ptr> unused )
<cls> <noptr> arizona spi remove ( <ptr> spi )
<cls> <noptr> reg map del irq chip ( <noptr> irq <dot> <ptr> d )
<cls> <noptr> bd m wv remove ( <ptr> client )
<cls> <noptr> stm timers remove ( <ptr> pdev )
<cls> <noptr> pcf adc remove ( <ptr> pdev )
<cls> <noptr> l mic remove ( <ptr> ic )
<cls> <noptr> made raspi remove ( <ptr> spi )
<cls> <noptr> v x remove ( <ptr> pdev )
<cls> <noptr> max ic remove ( <ptr> ic )
<cls> <noptr> pcf irq free ( <ptr> pcf )
<cls> <noptr> six core remove ( <ptr> client )
<cls> <noptr> ax pxi c remove ( <ptr> ic )
<cls> <noptr> stmp e ic remove ( <ptr> ic )
<cls> <noptr> hi xp mic remove ( <ptr> pdev )
<cls> <noptr> arizona ic remove ( <ptr> ic )
<cls> <noptr> dln freer x urb s ( <ptr> dln )
<cls> <noptr> ret u remove ( <ptr> ic )
<cls> <noptr> sm dev remove ( <ptr> sm )
<cls> <noptr> cro sec class release ( <ptr> dev )
<cls> <noptr> pas ic remove ( <ptr> pdev )
<cls> <noptr> dax remove sub devs ( <ptr> chip )
<cls> <noptr> stm f x chip exit ( <ptr> client )
<cls> <noptr> max remove ( <ptr> max )
<cls> <noptr> ec device remove ( <ptr> pdev )
<cls> <noptr> pcf remove ( <ptr> client )
<cls> <noptr> lpc sch remove ( <ptr> dev )
<cls> <noptr> arizona irq exit ( <ptr> arizona )
<cls> <noptr> sm pci remove ( <ptr> dev )
<cls> <noptr> c mod io pci driver exit ( )
<cls> <noptr> tim b remove ( <ptr> dev )
<cls> <noptr> rk remove ( <ptr> client )
<cls> <noptr> d asp i remove ( <ptr> spi )
<cls> <noptr> abx remove ops ( <ptr> dev )
<cls> <noptr> rn tic remove ( <ptr> ic )
<cls> <noptr> smp lat remove ( <ptr> dev )
<cls> <noptr> e z x pcap remove ( <ptr> spi )
<cls> <noptr> wmic remove ( <ptr> ic )
<cls> <noptr> v pr brd disconnect ( <ptr> interface )
<cls> <noptr> tps spi remove ( <ptr> spi )
<cls> <noptr> tit scad c remove ( <ptr> pdev )
<cls> <noptr> pm x remove ( <ptr> client )
<cls> <noptr> c smf d remove ( <ptr> pdev )
<cls> <noptr> pm remove ( <ptr> client )
<cls> <noptr> lp remove ( <ptr> cl )
<cls> <noptr> da remove ( <ptr> client )
<cls> <noptr> made r aic remove ( <ptr> ic )
<cls> <noptr> dln free ( <ptr> dln )
<cls> <noptr> ax px device remove ( <ptr> ax px )
<cls> <noptr> d aic remove ( <ptr> ic )
<cls> <noptr> lpc ich remove ( <ptr> dev )
<cls> <noptr> ucb core remove ( <ptr> dev )
<cls> <noptr> m cxx xic exit ( )
<cls> <noptr> tc x exit ( )
<cls> <noptr> abot p remove ( <ptr> pdev )
<cls> <noptr> pcap remove sub dev ( <ptr> dev <dot> <ptr> unused )
<cls> <noptr> pm xxx remove ( <ptr> pdev )
<cls> <noptr> intel quar kmf d remove ( <ptr> pdev )
<cls> <noptr> pm xic exit ( )
<cls> <noptr> bcm x xic driver exit ( )
<cls> <noptr> d aic remove ( <ptr> client )
<cls> <noptr> tps xic exit ( )
<cls> <noptr> dln disconnect ( <ptr> interface )
<cls> <noptr> intell pss pci remove ( <ptr> pdev )
<cls> <noptr> m xsl rad c remove ( <ptr> pdev )
<cls> <noptr> m fd remove devices fn ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> bd drv exit ( )
<cls> <noptr> hip mic driver exit ( )
<cls> <noptr> pcf exit ( )
<cls> <noptr> ret u driver exit ( )
<cls> <noptr> p mic exit ( )
<cls> <noptr> wmic driver exit ( )
<cls> <noptr> lpc ich driver exit ( )
<cls> <noptr> men f bmc driver exit ( )
<cls> <noptr> intell pss pci driver exit ( )
<cls> <noptr> tps exit ( )
<cls> <noptr> atmel h lcd c driver exit ( )
<cls> <noptr> st mlp timer driver exit ( )
<cls> <noptr> m xts adc driver exit ( )
<cls> <noptr> spr dp mic exit ( )
<cls> <noptr> r kic driver exit ( )
<cls> <noptr> dln driver exit ( )
<cls> <noptr> pas ic driver exit ( )
<cls> <noptr> til m u driver exit ( )
<cls> <noptr> da device exit ( <ptr> da )
<cls> <noptr> max ic driver exit ( )
<cls> <noptr> tw l audio driver exit ( )
<cls> <noptr> max ic exit ( )
<cls> <noptr> wm x irq exit ( <ptr> wm x )
<cls> <noptr> abot p exit debug fs ( <ptr> otp )
<cls> <noptr> d aic driver exit ( )
<cls> <noptr> tps driver exit ( )
<cls> <noptr> stw x driver exit ( )
<cls> <noptr> l px driver exit ( )
<cls> <noptr> da driver exit ( )
<cls> <noptr> b x tw c driver exit ( )
<cls> <noptr> m xsl rad c driver exit ( )
<cls> <noptr> d aic exit ( )
<cls> <noptr> ssb i driver exit ( )
<cls> <noptr> ucb core exit ( )
<cls> <noptr> timber dale pci driver exit ( )
<cls> <noptr> six core driver exit ( )
<cls> <noptr> bd m wv driver exit ( )
<cls> <noptr> tw l driver exit ( )
<cls> <noptr> abot p driver exit ( )
<cls> <noptr> made r aic driver exit ( )
<cls> <noptr> stp mic driver exit ( )
<cls> <noptr> c smf d driver exit ( )
<cls> <noptr> stm fxdriver exit ( )
<cls> <noptr> v pr brd driver exit ( )
<cls> <noptr> intel quar kmf d driver exit ( )
<cls> <noptr> atmel flex com driver exit ( )
<cls> <noptr> secp mic exit ( )
<cls> <noptr> pm xxx exit ( )
<cls> <noptr> tps spi driver exit ( )
<cls> <noptr> exy nos l pass driver exit ( )
<cls> <noptr> max device exit ( <ptr> chip )
<cls> <noptr> lp irq exit ( <ptr> lp )
<cls> <noptr> mt driver exit ( )
<cls> <noptr> pcf adc driver exit ( )
<cls> <noptr> rn tic driver exit ( )
<cls> <noptr> intel soc pmi cic driver exit ( )
<cls> <noptr> at usart m fd exit ( )
<cls> <noptr> stm timers driver exit ( )
<cls> <noptr> ax pxi c driver exit ( )
<cls> <noptr> pm pages exit ( <ptr> chip )
<cls> <noptr> lpc sch driver exit ( )
<cls> <noptr> act aic exit ( )
<cls> <noptr> hi xp mic driver exit ( )
<cls> <noptr> rav esp drv exit ( )
<cls> <noptr> dax exit ( )
<cls> <noptr> d air q exit ( <ptr> da )
<cls> <noptr> rt driver exit ( )
<cls> <noptr> m c xxx exit ( )
<cls> <noptr> sky driver exit ( )
<cls> <noptr> pm x device exit ( <ptr> chip )
<cls> <noptr> c pcap driver exit ( )
<cls> <noptr> rdc x sb driver exit ( )
<cls> <noptr> v x pci driver exit ( )
<cls> <noptr> tit scad c driver exit ( )
<cls> <noptr> wm irq exit ( <ptr> wm )
<cls> <noptr> l m device exit ( <ptr> l m )
<cls> <noptr> e z x pcap exit ( )
<cls> <noptr> palm asi c exit ( )
<cls> <noptr> stm f x irq exit ( <ptr> client )
<cls> <noptr> m c xxx common exit ( <ptr> dev )
<cls> <noptr> made ra dev exit ( <ptr> made ra )
<cls> <noptr> kemp ld remove ( <ptr> pdev )
<cls> <noptr> m c xxx spi remove ( <ptr> spi )
<cls> <noptr> tps xic remove ( <ptr> client )
<cls> <noptr> intell pss remove ( <ptr> dev )
<cls> <noptr> intel soc pmi cic remove ( <ptr> ic )
<cls> <noptr> m xts adc remove ( <ptr> pdev )
<cls> <noptr> b x tw c remove ( <ptr> pdev )
<cls> <noptr> adp remove sub devs ( <ptr> chip )
<cls> <noptr> intel msi c remove ( <ptr> pdev )
<cls> <noptr> stm timers dma remove ( <ptr> dev <dot> <ptr> d data )
<cls> <noptr> intell pss acpi remove ( <ptr> pdev )
<cls> <noptr> exy nos l pass remove ( <ptr> pdev )
<cls> <noptr> clk dev drop ( <ptr> cl )
<cls> <noptr> intell pss unregister clock ( <ptr> l pss )
<cls> <noptr> htc pld unregister chi pic ( <ptr> pdev <dot> <noptr> chip index )
<cls> <noptr> intel quar k unregister ic clk ( <ptr> dev )
<cls> <noptr> dln unregister event cb ( <ptr> pdev <dot> <noptr> id )
<cls> <noptr> blocking notifier chain unregister ( <ptr> nh <dot> <ptr> n )
<cls> <noptr> go yad map ool free ( <ptr> h dev <dot> <ptr> v addr <dot> <noptr> dma addr )
<cls> <noptr> mic dma free ( <ptr> dev <dot> <noptr> size <dot> <ptr> v addr <dot> <noptr> dma handle <dot> <noptr> attrs )
<cls> <noptr> mic free irq ( <ptr> m dev <dot> <ptr> cookie <dot> <ptr> data )
<cls> <noptr> mic free irq ( <ptr> sc dev <dot> <ptr> cookie <dot> <ptr> data )
<cls> <noptr> sci f free virt ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> xpc free msg slot uv ( <ptr> ch <dot> <ptr> msg slot )
<cls> <noptr> sci f remove client dev ( <ptr> dev <dot> <ptr> si )
<cls> <noptr> vmc i ctx d bell destroy ( <noptr> context id <dot> <noptr> handle )
<cls> <noptr> v op remove device ( <ptr> d <dot> <noptr> offset <dot> <ptr> v pdev )
<cls> <noptr> me id m amd scr free ( <ptr> dev <dot> <ptr> d scr )
<cls> <noptr> vmc i door bell destroy ( <noptr> handle )
<cls> <noptr> hl cb destroy ( <ptr> h dev <dot> <ptr> mgr <dot> <noptr> cb handle )
<cls> <noptr> gen wq e free consistent ( <ptr> cd <dot> <noptr> size <dot> <ptr> v addr <dot> <noptr> dma handle )
<cls> <noptr> mic free irq ( <ptr> mb dev <dot> <ptr> cookie <dot> <ptr> data )
<cls> <noptr> gen wq e free user pages ( <dptr> page list <dot> <noptr> nr pages <dot> <noptr> dirty )
<cls> <noptr> free hop ( <ptr> ctx <dot> <ptr> pg tinfo )
<cls> <noptr> free hop ( <ptr> ctx <dot> <noptr> hop addr )
<cls> <noptr> gen wq e free syncs gl ( <ptr> cd <dot> <ptr> s gl )
<cls> <noptr> unregister oom notifier ( <ptr> nb )
<cls> <noptr> unregister v map purge notifier ( <ptr> nb )
<cls> <noptr> vm pressure unregister event ( <ptr> mem cg <dot> <ptr> event fd )
<cls> <noptr> z fold unregister migration ( <ptr> pool )
<cls> <noptr> z sun register migration ( <ptr> pool )
<cls> <noptr> z sun register shrink er ( <ptr> pool )
<cls> <noptr> me icl bus remove device ( <ptr> cl dev )
<cls> <noptr> sci f destroy incomplete window ( <ptr> ep <dot> <ptr> window )
<cls> <noptr> vmc i handle arr destroy ( <ptr> array )
<cls> <noptr> sci f destroy window ( <ptr> ep <dot> <ptr> window )
<cls> <noptr> alco rpc i remove ( <ptr> pdev )
<cls> <noptr> vmc i guest remove device ( <ptr> pdev )
<cls> <noptr> hl device release ctrl ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> q p guest endpoint destroy ( <ptr> entry )
<cls> <noptr> mic delete card debug dir ( <ptr> m drv )
<cls> <noptr> fast rpc channel ctx free ( <ptr> ref )
<cls> <noptr> vmc i q pair consume free space ( <ptr> q pair )
<cls> <noptr> hl pci remove ( <ptr> pdev )
<cls> <noptr> xpc gru m q watchlist free uv ( <ptr> m q )
<cls> <noptr> me icl bus dev release ( <ptr> dev )
<cls> <noptr> vmc i data gram destroy handle ( <noptr> handle )
<cls> <noptr> lis lv d misc release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> go y a cpu accessible dma pool free ( <ptr> h dev <dot> <noptr> size <dot> <ptr> v addr )
<cls> <noptr> q p host free queue ( <ptr> queue <dot> <noptr> queue size )
<cls> <noptr> v op del v q ( <ptr> v q <dot> <noptr> n )
<cls> <noptr> mbus release dev ( <ptr> d )
<cls> <noptr> hl hw queues destroy ( <ptr> h dev )
<cls> <noptr> free device memory ( <ptr> ctx <dot> <noptr> handle )
<cls> <noptr> me icl bus dev destroy ( <ptr> cl dev )
<cls> <noptr> free gru resources ( <ptr> gru <dot> <ptr> gts )
<cls> <noptr> q p freep pn set ( <ptr> p pn set )
<cls> <noptr> v op virtio del device ( <ptr> v dev )
<cls> <noptr> hl ctx free ( <ptr> h dev <dot> <ptr> ctx )
<cls> <noptr> hl ctx do release ( <ptr> ref )
<cls> <noptr> eeprom remove ( <ptr> client )
<cls> <noptr> free phys pg pack ( <ptr> h dev <dot> <ptr> phys pg pack )
<cls> <noptr> sci f delete vma ( <ptr> ep <dot> <ptr> vma )
<cls> <noptr> gru free cpu resources ( <ptr> cb <dot> <ptr> dsr )
<cls> <noptr> gru free message ( <ptr> m q d <dot> <ptr> mesg )
<cls> <noptr> mic free irq ( <ptr> v pdev <dot> <ptr> cookie <dot> <ptr> ptr )
<cls> <noptr> tif m free ( <ptr> dev )
<cls> <noptr> m icio unmap ( <ptr> v pdev <dot> <ptr> va )
<cls> <noptr> vmc i resource remove ( <ptr> resource )
<cls> <noptr> fast rpc session free ( <ptr> c ctx <dot> <ptr> session )
<cls> <noptr> sram free partitions ( <ptr> sram )
<cls> <noptr> v op dev remove ( <ptr> d )
<cls> <noptr> sci f destroy pp ( <ptr> sci f dev )
<cls> <noptr> q p free queue ( <ptr> q <dot> <noptr> size )
<cls> <noptr> sci f destroy intr wq ( <ptr> sci f dev )
<cls> <noptr> sci frm a destroy tc wep ( <ptr> ep )
<cls> <noptr> mei iot x list free cl ( <ptr> head <dot> <ptr> cl )
<cls> <noptr> d bell index table remove ( <ptr> entry )
<cls> <noptr> ssc sound dai remove ( <ptr> ssc )
<cls> <noptr> tif m device remove ( <ptr> dev )
<cls> <noptr> altera free buffers ( <ptr> a state )
<cls> <noptr> fast rpc r pmsg remove ( <ptr> r pdev )
<cls> <noptr> me it xe shutdown ( <ptr> pdev )
<cls> <noptr> ctx free ctx ( <ptr> k ref )
<cls> <noptr> cosm dev remove ( <ptr> d )
<cls> <noptr> idt remove sysfs files ( <ptr> pdev )
<cls> <noptr> sci f free q p ( <ptr> dev )
<cls> <noptr> ee remove ( <ptr> client )
<cls> <noptr> hl fence release ( <ptr> fence )
<cls> <noptr> ctor double free ( <ptr> region )
<cls> <noptr> fast rpc buf free ( <ptr> buf )
<cls> <noptr> fast rpc release ( <ptr> dma buf )
<cls> <noptr> idt remove ( <ptr> client )
<cls> <noptr> tif m free device ( <ptr> dev )
<cls> <noptr> sci f destroy remote window ( <ptr> window )
<cls> <noptr> mbus dev remove ( <ptr> d )
<cls> <noptr> kim remove ( <ptr> pdev )
<cls> <noptr> c smf gpt free timer ( <ptr> timer )
<cls> <noptr> fast rpc device release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sci f peer release dev ( <ptr> d )
<cls> <noptr> mic remove ( <ptr> pdev )
<cls> <noptr> xsd fec dev release ( <ptr> i ptr <dot> <ptr> fptr )
<cls> <noptr> pv panic m mio remove ( <ptr> pdev )
<cls> <noptr> hla sid free ( <ptr> h dev <dot> <noptr> as id )
<cls> <noptr> gru free gru context ( <ptr> gts )
<cls> <noptr> enclosure release ( <ptr> c dev )
<cls> <noptr> enclosure remove device ( <ptr> <dot> <ptr> )
<cls> <noptr> sci f destroys cif dev ( )
<cls> <noptr> vmc i ctx d bell destroy all ( <noptr> context id )
<cls> <noptr> me ime shutdown ( <ptr> pdev )
<cls> <noptr> fast rpc context free ( <ptr> ref )
<cls> <noptr> fast rpc cb remove ( <ptr> pdev )
<cls> <noptr> me ime remove ( <ptr> pdev )
<cls> <noptr> fast rpc free map ( <ptr> ref )
<cls> <noptr> v op release dev ( <ptr> d )
<cls> <noptr> idt freep dev ( <ptr> pdev )
<cls> <noptr> d dcb requ free ( <ptr> cmd )
<cls> <noptr> eeprom xx remove ( <ptr> spi )
<cls> <noptr> device release func ( <ptr> dev )
<cls> <noptr> gen wq e ffdc buff s free ( <ptr> cd )
<cls> <noptr> os lec free ( <ptr> ec )
<cls> <noptr> hl debug fs remove device ( <ptr> h dev )
<cls> <noptr> pti release master channel ( <ptr> m c )
<cls> <noptr> freed dcb queue ( <ptr> cd <dot> <ptr> queue )
<cls> <noptr> isl remove ( <ptr> client )
<cls> <noptr> me id mam ring free ( <ptr> dev )
<cls> <noptr> me ime cl release ( <ptr> ref )
<cls> <noptr> gru free kernel contexts ( )
<cls> <noptr> cb remove one ( <ptr> pdev )
<cls> <noptr> v op driver remove ( <ptr> v pdev )
<cls> <noptr> ssc remove ( <ptr> pdev )
<cls> <noptr> lis lv dic remove ( <ptr> client )
<cls> <noptr> hmc remove ( <ptr> client )
<cls> <noptr> ibm asm remove one ( <ptr> pdev )
<cls> <noptr> mic freed mach ans ( <ptr> m drv )
<cls> <noptr> gen wq e release service layer ( <ptr> cd )
<cls> <noptr> sci frm a destroy windows ( )
<cls> <noptr> destroy h dev ( <ptr> h dev )
<cls> <noptr> a pds x remove ( <ptr> client )
<cls> <noptr> sci f destroy loopback q p ( <ptr> sci f dev )
<cls> <noptr> h priv release ( <ptr> ref )
<cls> <noptr> at remove ( <ptr> client )
<cls> <noptr> ds remove ( <ptr> client )
<cls> <noptr> me icl bus remove devices ( <ptr> bus )
<cls> <noptr> b h remove ( <ptr> client )
<cls> <noptr> tsl remove ( <ptr> client )
<cls> <noptr> i css remove ( <ptr> client )
<cls> <noptr> mei minor free ( <ptr> dev )
<cls> <noptr> a pds als remove ( <ptr> client )
<cls> <noptr> hl c q fini ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> me icl device remove ( <ptr> dev )
<cls> <noptr> cosm delete debug dir ( <ptr> c dev )
<cls> <noptr> cosm release dev ( <ptr> d )
<cls> <noptr> v op virtio release dev ( <ptr> d )
<cls> <noptr> cos msc if remove ( <ptr> sp dev )
<cls> <noptr> xsd fec remove ( <ptr> pdev )
<cls> <noptr> ssc free ( <ptr> ssc )
<cls> <noptr> phantom remove ( <ptr> pdev )
<cls> <noptr> gen wq e user v unmap ( <ptr> cd <dot> <ptr> m )
<cls> <noptr> hl device release ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> max remove ( <ptr> client )
<cls> <noptr> atexit ( )
<cls> <noptr> gen wq e remove mappings ( <ptr> c file )
<cls> <noptr> enclosure component release ( <ptr> dev )
<cls> <noptr> pv panic remove ( <ptr> device )
<cls> <noptr> sci f cleanup q p ( <ptr> dev )
<cls> <noptr> mic platform shutdown ( <ptr> pdev )
<cls> <noptr> hlf w cpu accessible dma pool free ( <ptr> h dev <dot> <noptr> size <dot> <ptr> v addr )
<cls> <noptr> tif m xx remove ( <ptr> dev )
<cls> <noptr> mic card unmap ( <ptr> m dev <dot> <ptr> addr )
<cls> <noptr> add pot remove ( <ptr> dev )
<cls> <noptr> gen wq e remove pinning s ( <ptr> c file )
<cls> <noptr> pti pci remove ( <ptr> pdev )
<cls> <noptr> xpc teardown ch structures ( <ptr> part )
<cls> <noptr> mic release callbacks ( <ptr> m dev )
<cls> <noptr> cosm client exit ( )
<cls> <noptr> pci endpoint test remove ( <ptr> pdev )
<cls> <noptr> l k dtm heap exit ( )
<cls> <noptr> vmc i q pair detach ( <dptr> q pair )
<cls> <noptr> ibm asm heartbeat exit ( <ptr> sp )
<cls> <noptr> gru proc exit ( )
<cls> <noptr> mei io list free fp ( <ptr> head <dot> <ptr> fp )
<cls> <noptr> cb release ( <ptr> ref )
<cls> <noptr> vmc i ctx remove notification ( <noptr> context id <dot> <noptr> remote cid )
<cls> <noptr> idt removed b gfs files ( <ptr> pdev )
<cls> <noptr> pch p hub remove ( <ptr> pdev )
<cls> <noptr> cch deallocate ( <ptr> cch )
<cls> <noptr> sci f exit ack ( <ptr> sci f dev <dot> <ptr> unused )
<cls> <noptr> sci f release m m ( <ptr> m m )
<cls> <noptr> dram pgpool do release ( <ptr> ref )
<cls> <noptr> v op exit ( )
<cls> <noptr> mei hdc p driver exit ( )
<cls> <noptr> dma unmap host va ( <ptr> h dev <dot> <ptr> user ptr )
<cls> <noptr> sci f free window offset ( <ptr> ep <dot> <ptr> window <dot> <noptr> offset )
<cls> <noptr> xpc exit uv ( )
<cls> <noptr> vmc i event exit ( )
<cls> <noptr> tif m exit ( )
<cls> <noptr> hmc driver exit ( )
<cls> <noptr> max driver exit ( )
<cls> <noptr> sci f exit debug fs ( )
<cls> <noptr> cosm exit debug fs ( )
<cls> <noptr> cosm exit ( )
<cls> <noptr> ssc driver exit ( )
<cls> <noptr> mic exit ( )
<cls> <noptr> mbus exit ( )
<cls> <noptr> isl driver exit ( )
<cls> <noptr> l k dtm user copy exit ( )
<cls> <noptr> c port exit ( )
<cls> <noptr> tif m xx driver exit ( )
<cls> <noptr> a pds als driver exit ( )
<cls> <noptr> v op driver exit ( )
<cls> <noptr> phantom exit ( )
<cls> <noptr> xpc exit ( )
<cls> <noptr> vm cidr v exit ( )
<cls> <noptr> gru exit ( )
<cls> <noptr> xsd fec exit ( )
<cls> <noptr> lattice ecp driver exit ( )
<cls> <noptr> i css driver exit ( )
<cls> <noptr> xp net exit ( )
<cls> <noptr> b h driver exit ( )
<cls> <noptr> vm balloon exit ( )
<cls> <noptr> lis lv dic driver exit ( )
<cls> <noptr> cos msc if exit ( )
<cls> <noptr> xp exit ( )
<cls> <noptr> kim platform driver exit ( )
<cls> <noptr> cos msc if connect exit ( )
<cls> <noptr> xp exit uv ( )
<cls> <noptr> rts x usb driver exit ( )
<cls> <noptr> mic exit card debug fs ( )
<cls> <noptr> alc or driver exit ( )
<cls> <noptr> me it xe driver exit ( )
<cls> <noptr> vmc i guest exit ( )
<cls> <noptr> vm balloon debug fs exit ( <ptr> b )
<cls> <noptr> l k dtm module exit ( )
<cls> <noptr> idt exit ( )
<cls> <noptr> gen wq e exit module ( )
<cls> <noptr> rts x pci driver exit ( )
<cls> <noptr> add pot spi driver exit ( )
<cls> <noptr> mei exit ( )
<cls> <noptr> sci f peer bus exit ( )
<cls> <noptr> vmc i q p guest endpoints exit ( )
<cls> <noptr> q com coin cell driver exit ( )
<cls> <noptr> pci endpoint test driver exit ( )
<cls> <noptr> eeprom driver exit ( )
<cls> <noptr> a pds x driver exit ( )
<cls> <noptr> hl exit ( )
<cls> <noptr> gru k services exit ( )
<cls> <noptr> ilo exit ( )
<cls> <noptr> cos msc if listen exit ( )
<cls> <noptr> fast rpc exit ( )
<cls> <noptr> ibm asm event buffer exit ( <ptr> sp )
<cls> <noptr> gen qwe exit debug fs ( <ptr> cd )
<cls> <noptr> pch p hub driver exit ( )
<cls> <noptr> st core exit ( <ptr> stg data )
<cls> <noptr> v op exit debug fs ( <ptr> vi )
<cls> <noptr> k ref put ( <ptr> k ref <dot> <ptr> ptr )
<cls> <noptr> k ref put mutex ( <ptr> k ref <dot> <ptr> ptr <dot> <ptr> lock )
<cls> <noptr> k ref put lock ( <ptr> k ref <dot> <ptr> ptr <dot> <ptr> lock )
<cls> <noptr> dynamic k obj release ( <ptr> k obj )
<cls> <noptr> k object release ( <ptr> k ref )
<cls> <noptr> k set put ( <ptr> k )
<cls> <noptr> bus put ( <ptr> bus )
<cls> <noptr> bus remove driver ( <ptr> drv )
<cls> <noptr> driver unregister ( <ptr> drv )
<cls> <noptr> ic del driver ( <ptr> driver )
<cls> <noptr> command put ( <ptr> cmd )
<cls> <noptr> cs put ( <ptr> cs )
<cls> <noptr> hl ctx put ( <ptr> ctx )
<cls> <noptr> hl cb put ( <ptr> cb )
<cls> <noptr> mei dev bus put ( <ptr> bus )
<cls> <noptr> put device ( <ptr> dev )
<cls> <noptr> me icl bus module put ( <ptr> cl dev )
<cls> <noptr> module put ( <ptr> module )
<cls> <noptr> vmc i resource put ( <ptr> resource )
<cls> <noptr> fast rpc map put ( <ptr> map )
<cls> <noptr> fast rpc channel ctx put ( <ptr> c ctx )
<cls> <noptr> sci f put pages ( <ptr> pages )
<cls> <noptr> put pte ( <ptr> ctx <dot> <noptr> hop addr )
<cls> <noptr> fast rpc context put ( <ptr> ctx )
<cls> <noptr> vmc i ctx put ( <ptr> context )
<cls> <noptr> fast rpc context put wq ( <ptr> work )
<cls> <noptr> hl h priv put ( <ptr> h priv )
<cls> <noptr> hl debug fs remove cb ( <ptr> cb )
<cls> <noptr> cosm driver remove ( <ptr> c dev )
<cls> <noptr> gen wq e device remove ( <ptr> cd )
<cls> <noptr> mei hdc p remove ( <ptr> cl dev )
<cls> <noptr> rts x pci remove ( <ptr> pci dev )
<cls> <noptr> gen wq e pci remove ( <ptr> cd )
<cls> <noptr> add p otic remove ( <ptr> client )
<cls> <noptr> gen wq e remove ( <ptr> pci dev )
<cls> <noptr> add pot spi remove ( <ptr> spi )
<cls> <noptr> sci f mmu notifier release ( <ptr> mn <dot> <ptr> m m )
<cls> <noptr> me ime hw reset release ( <ptr> dev )
<cls> <noptr> vm balloon release refused pages ( <ptr> b <dot> <ptr> ctl )
<cls> <noptr> q p release pages ( <dptr> pages <dot> <noptr> numpages <dot> <noptr> dirty )
<cls> <noptr> vmc i ctx rcv not ifications release ( <noptr> context id <dot> <ptr> dbhandle array <dot> <ptr> q phandle array <dot> <noptr> success )
<cls> <noptr> pci endpoint test release irq ( <ptr> test )
<cls> <noptr> mic delete debug dir ( <ptr> m dev )
<cls> <noptr> v op del v qs ( <ptr> dev )
<cls> <noptr> hl user ptr delete list ( <ptr> h dev <dot> <ptr> user ptr list )
<cls> <noptr> pti tty cleanup ( <ptr> tty )
<cls> <noptr> cos msc if close ( <ptr> c dev )
<cls> <noptr> sci ffd close ( <ptr> inode <dot> <ptr> f )
<cls> <noptr> lis lv d joystick close ( <ptr> input )
<cls> <noptr> st tty close ( <ptr> tty )
<cls> <noptr> event file close ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> vmc i host close ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> command file close ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> pti tty driver close ( <ptr> tty <dot> <ptr> filp )
<cls> <noptr> ilo close ( <ptr> ip <dot> <ptr> fp )
<cls> <noptr> iloc cb close ( <ptr> pdev <dot> <ptr> data )
<cls> <noptr> gru vma close ( <ptr> vma )
<cls> <noptr> gen wq e vma close ( <ptr> vma )
<cls> <noptr> me icl set dis connected ( <ptr> cl )
<cls> <noptr> vm balloon deinit batching ( <ptr> b )
<cls> <noptr> sci f deinit pp info ( <ptr> sci f dev <dot> <ptr> pp )
<cls> <noptr> sci f teardown ep ( <ptr> end pt )
<cls> <noptr> xpc teardown msg structure suv ( <ptr> ch )
<cls> <noptr> vm balloon unregister shrink er ( <ptr> b )
<cls> <noptr> sub sys interface unregister ( <ptr> sif )
<cls> <noptr> sci f client unregister ( <ptr> client )
<cls> <noptr> c port device unregister ( <ptr> c dev )
<cls> <noptr> mbus unregister driver ( <ptr> driver )
<cls> <noptr> cb unregister slot ( <ptr> chip <dot> <noptr> slot mask )
<cls> <noptr> cosm unregister driver ( <ptr> driver )
<cls> <noptr> v op unregister driver ( <ptr> driver )
<cls> <noptr> enclosure unregister ( <ptr> e dev )
<cls> <noptr> cosm unregister device ( <ptr> dev )
<cls> <noptr> q p host unregister user memory ( <ptr> produce q <dot> <ptr> consume q )
<cls> <noptr> sci f peer unregister device ( <ptr> sci f dev )
<cls> <noptr> sci fep unregister mmu notifier ( <ptr> ep )
<cls> <noptr> me icl dev driver unregister ( <ptr> cldr v )
<cls> <noptr> k mem cache shrink ( <ptr> cache p )
<cls> <noptr> k free const ( <ptr> x )
<cls> <noptr> v munmap ram ( <ptr> mem <dot> <noptr> count )
<cls> <noptr> v unmap ( <ptr> addr )
<cls> <noptr> try to release page ( <ptr> page <dot> <noptr> gfp mask )
<cls> <noptr> mem pool exit ( <ptr> pool )
<cls> <noptr> mem pool destroy ( <ptr> pool )
<cls> <noptr> mem pool free ( <ptr> element <dot> <ptr> pool )
<cls> <noptr> dma pool destroy ( <ptr> pool )
<cls> <noptr> kas an free pages ( <ptr> page <dot> <noptr> order )
<cls> <noptr> kas an free shadow ( <ptr> vm )
<cls> <noptr> kas an free pte ( <ptr> pte start <dot> <ptr> pmd )
<cls> <noptr> kas an free pmd ( <ptr> pmd start <dot> <ptr> pud )
<cls> <noptr> kas an free pud ( <ptr> pud start <dot> <ptr> pd )
<cls> <noptr> d ( <ptr> pd start <dot> <ptr> pgd )
<cls> <noptr> kas an remove pmd table ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> kas an remove pud table ( <ptr> pud <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> d table ( <ptr> pd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> kas an remove zero shadow ( <ptr> start <dot> <noptr> size )
<cls> <noptr> kas an add zero shadow ( <ptr> start <dot> <noptr> size )
<cls> <noptr> per cpu remove cache ( <ptr> arg )
<cls> <noptr> quar antine remove cache ( <ptr> cache )
<cls> <noptr> cma release ( <ptr> cma <dot> <ptr> pages <dot> <noptr> count )
<cls> <noptr> cma free write ( <ptr> data <dot> <noptr> val )
<cls> <noptr> pool free page ( <ptr> pool <dot> <ptr> page )
<cls> <noptr> dma m pool release ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> dma m pool destroy ( <ptr> pool )
<cls> <noptr> delete from page cache ( <ptr> page <dot> <ptr> shadow )
<cls> <noptr> page cache free page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> replace page cache page ( <ptr> old <dot> <ptr> new <dot> <noptr> gfp mask )
<cls> <noptr> frame vector destroy ( <ptr> vec )
<cls> <noptr> un pin dev map managed user page ( <ptr> page )
<cls> <noptr> un pin user page ( <ptr> page )
<cls> <noptr> un pin user pages ( <dptr> pages <dot> <noptr> n pages )
<cls> <noptr> undo dev page map ( <ptr> nr <dot> <noptr> nr start <dot> <noptr> flags <dot> <dptr> pages )
<cls> <noptr> ( )
<cls> <noptr> kas ans lab free ( <ptr> cache <dot> <ptr> object <dot> <noptr> ip <dot> <noptr> quar antine )
<cls> <noptr> kas an poison k free ( <ptr> ptr <dot> <noptr> ip )
<cls> <noptr> kas ank free large ( <ptr> ptr <dot> <noptr> ip )
<cls> <noptr> zap deposited table ( <ptr> m m <dot> <ptr> pmd )
<cls> <noptr> free trans huge page ( <ptr> page )
<cls> <noptr> unlock or release sub pool ( <ptr> spool )
<cls> <noptr> res v map release ( <ptr> ref )
<cls> <noptr> destroy compound gigantic page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> update and free page ( <ptr> h <dot> <ptr> page )
<cls> <noptr> free huge page ( <ptr> page )
<cls> <noptr> free pool huge page ( <ptr> h <dot> <ptr> nodes allowed <dot> <noptr> acct sur plus )
<cls> <noptr> dissolve free huge pages ( <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> try to free low ( <ptr> h <dot> <noptr> count <dot> <ptr> nodes allowed )
<cls> <noptr> collect mms lot ( <ptr> mms lot )
<cls> <noptr> free object rcu ( <ptr> rcu )
<cls> <noptr> delete object ( <ptr> object )
<cls> <noptr> delete object full ( <noptr> ptr )
<cls> <noptr> delete object part ( <noptr> ptr <dot> <noptr> size )
<cls> <noptr> k mem leak update trace ( <ptr> ptr )
<cls> <noptr> k sms lab free ( )
<cls> <noptr> stable node dup del ( <ptr> dup )
<cls> <noptr> remove trailing r map items ( <ptr> mms lot <dot> <dptr> r map list )
<cls> <noptr> removes table node ( <ptr> stable node )
<cls> <noptr> removes table node chain ( <ptr> stable node <dot> <ptr> root )
<cls> <noptr> remove all stable nodes ( )
<cls> <noptr> un merge and remove all r map items ( )
<cls> <ptr> stable node dup any ( <ptr> stable node <dot> <ptr> root )
<cls> <noptr> ks m exit ( <ptr> m m )
<cls> <noptr> stable node chain remove range ( <ptr> stable node <dot> <noptr> start pfn <dot> <noptr> end pfn <dot> <ptr> root )
<cls> <noptr> mem cg destroy list lru node ( <ptr> mem c gl rus <dot> <noptr> begin <dot> <noptr> end )
<cls> <noptr> kv free rcu ( <ptr> head )
<cls> <noptr> mem cg destroy list lru ( <ptr> lru )
<cls> <noptr> mem cg cancel update list lru ( <ptr> lru <dot> <noptr> old size <dot> <noptr> new size )
<cls> <noptr> list lru destroy ( <ptr> lru )
<cls> <noptr> mem block free ( <noptr> base <dot> <noptr> size )
<cls> <noptr> free memory core ( <noptr> start <dot> <noptr> end )
<cls> <noptr> mem block free all ( )
<cls> <noptr> mem cg free shrink er maps ( <ptr> mem cg )
<cls> <noptr> mem cg free cache id ( <noptr> id )
<cls> <noptr> mem cgroup force empty write ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> mem cg offline k mem ( <ptr> mem cg )
<cls> <noptr> mem cg free k mem ( <ptr> mem cg )
<cls> <noptr> mem cgevent remove ( <ptr> work )
<cls> <noptr> free mem cgroup per node info ( <ptr> mem cg <dot> <noptr> node )
<cls> <noptr> mem cgroup free ( <ptr> mem cg )
<cls> <noptr> mem cgroup css offline ( <ptr> css )
<cls> <noptr> pte free tlb ( <ptr> tlb <dot> <noptr> pte <dot> <noptr> address )
<cls> <noptr> free pte range ( <ptr> tlb <dot> <ptr> pmd <dot> <noptr> addr )
<cls> <noptr> free pmd range ( <ptr> tlb <dot> <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> floor <dot> <noptr> ceiling )
<cls> <noptr> free pud range ( <ptr> tlb <dot> <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> floor <dot> <noptr> ceiling )
<cls> <noptr> d range ( <ptr> tlb <dot> <ptr> pgd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> floor <dot> <noptr> ceiling )
<cls> <noptr> release memory resource ( <ptr> res )
<cls> <noptr> release memory resource ( <noptr> start <dot> <noptr> size )
<cls> <noptr> try remove memory ( <noptr> nid <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> remove memory ( <noptr> nid <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> remove memory ( <noptr> nid <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> kill procs ( <ptr> to kill <dot> <noptr> force kill <dot> <noptr> fail <dot> <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> me page cache clean ( <ptr> p <dot> <noptr> pfn )
<cls> <noptr> me swap cache clean ( <ptr> p <dot> <noptr> pfn )
<cls> <noptr> soft offline huge page ( <ptr> page <dot> <noptr> flags )
<cls> <noptr> soft offline page ( <ptr> page <dot> <noptr> flags )
<cls> <noptr> soft offline in use page ( <ptr> page <dot> <noptr> flags )
<cls> <noptr> soft offline page ( <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> vma replace policy ( <ptr> vma <dot> <ptr> pol )
<cls> <noptr> inode free by rcu ( <ptr> head )
<cls> <noptr> security ib free security ( <ptr> sec )
<cls> <noptr> security audit rule free ( <ptr> lsm rule )
<cls> <noptr> security bpf map free ( <ptr> map )
<cls> <noptr> mem pool free pages ( <ptr> element <dot> <ptr> pool data )
<cls> <noptr> mem pool free slab ( <ptr> element <dot> <ptr> pool data )
<cls> <noptr> mem pool k free ( <ptr> element <dot> <ptr> pool data )
<cls> <noptr> dev page map kill ( <ptr> pg map )
<cls> <noptr> dev page map cleanup ( <ptr> pg map )
<cls> <noptr> me munmap pages ( <ptr> pg map )
<cls> <noptr> dev m mem remap pages release ( <ptr> data )
<cls> <noptr> dev m me munmap pages ( <ptr> dev <dot> <ptr> pg map )
<cls> <noptr> user shm unlock ( <noptr> size <dot> <ptr> user )
<cls> <noptr> k object cleanup ( <ptr> k obj )
<cls> <noptr> k object delayed cleanup ( <ptr> work )
<cls> <noptr> k object move ( <ptr> k obj <dot> <ptr> new parent )
<cls> <noptr> vma interval tree remove ( <ptr> node <dot> <ptr> root )
<cls> <noptr> remove shared vm struct ( <ptr> vma <dot> <ptr> file <dot> <ptr> mapping )
<cls> <ptr> remove vma ( <ptr> vma )
<cls> <noptr> anon vma interval tree remove ( <ptr> node <dot> <ptr> root )
<cls> <noptr> vm area free ( <ptr> )
<cls> <noptr> remove vma list ( <ptr> m m <dot> <ptr> vma )
<cls> <noptr> unmap region ( <ptr> m m <dot> <ptr> vma <dot> <ptr> prev <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> do munmap ( <ptr> m m <dot> <noptr> start <dot> <noptr> len <dot> <ptr> u f )
<cls> <noptr> vm munmap ( <noptr> addr <dot> <noptr> len )
<cls> <noptr> tlb batch list free ( <ptr> tlb )
<cls> <noptr> tlb remove table free ( <ptr> batch )
<cls> <noptr> tlb remove table free ( <ptr> batch )
<cls> <noptr> tlb remove table one ( <ptr> table )
<cls> <noptr> pg table free tlb ( <ptr> tlb <dot> <ptr> table <dot> <noptr> is page )
<cls> <noptr> pte free tlb ( <ptr> tlb <dot> <ptr> pte <dot> <noptr> address )
<cls> <noptr> tlb table flush ( <ptr> tlb )
<cls> <noptr> tlb remove table ( <ptr> tlb <dot> <ptr> table )
<cls> <noptr> tlb batch pages flush ( <ptr> tlb )
<cls> <noptr> tlb finish mmu ( <ptr> tlb <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> mmu notifier free rcu ( <ptr> rcu )
<cls> <noptr> free page series ( <noptr> from <dot> <noptr> to )
<cls> <noptr> delete vma from m m ( <ptr> vma )
<cls> <noptr> delete vma ( <ptr> m m <dot> <ptr> vma )
<cls> <noptr> shrink vma ( <ptr> m m <dot> <ptr> vma <dot> <noptr> from <dot> <noptr> to )
<cls> <noptr> oom kill process ( <ptr> victim <dot> <ptr> message )
<cls> <noptr> oom kill mem cg member ( <ptr> task <dot> <ptr> message )
<cls> <noptr> oom kill process ( <ptr> oc <dot> <ptr> message )
<cls> <noptr> kas an free non deferred pages ( <ptr> page <dot> <noptr> order )
<cls> <noptr> free one page ( <ptr> page <dot> <noptr> pfn <dot> <ptr> zone <dot> <noptr> order <dot> <noptr> migrate type <dot> <noptr> report )
<cls> <noptr> bulk free pcp prepare ( <ptr> page )
<cls> <noptr> free pcp pages bulk ( <ptr> zone <dot> <noptr> count <dot> <ptr> pcp )
<cls> <noptr> free page score ( <ptr> page <dot> <noptr> order )
<cls> <noptr> mem block free pages ( <ptr> page <dot> <noptr> pfn <dot> <noptr> order )
<cls> <noptr> deferred free range ( <noptr> pfn <dot> <noptr> nr pages )
<cls> <noptr> deferred free pages ( <noptr> pfn <dot> <noptr> end pfn )
<cls> <noptr> free unref page prepare ( <ptr> page <dot> <noptr> pfn )
<cls> <noptr> free unref page commit ( <ptr> page <dot> <noptr> pfn )
<cls> <noptr> free unref page ( <ptr> page )
<cls> <noptr> free the page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> free pages ( <noptr> addr <dot> <noptr> order )
<cls> <noptr> page frag cache drain ( <ptr> page <dot> <noptr> count )
<cls> <noptr> page frag free ( <ptr> addr )
<cls> <noptr> free reserved area ( <ptr> start <dot> <ptr> end <dot> <noptr> poison <dot> <ptr> s )
<cls> <noptr> free contig range ( <noptr> pfn <dot> <noptr> nr pages )
<cls> <noptr> free page ext ( <ptr> addr )
<cls> <noptr> free page ext ( <noptr> pfn )
<cls> <noptr> offline page ext ( <noptr> start pfn <dot> <noptr> nr pages <dot> <noptr> nid )
<cls> <noptr> p cpu free area ( <ptr> chunk <dot> <noptr> off )
<cls> <noptr> p cpu dfl fc free ( <ptr> ptr <dot> <noptr> size )
<cls> <noptr> p cpu unmap pages ( <noptr> addr <dot> <noptr> nr pages )
<cls> <noptr> p cpu destroy chunk ( <ptr> chunk )
<cls> <noptr> p cpu free pages ( <ptr> chunk <dot> <dptr> pages <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> p cpu unmap pages ( <ptr> chunk <dot> <dptr> pages <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> exit swap address space ( <noptr> type )
<cls> <noptr> page remove file r map ( <ptr> page <dot> <noptr> compound )
<cls> <noptr> page remove anon compound r map ( <ptr> page )
<cls> <noptr> try to unmap one ( <ptr> page <dot> <ptr> vma <dot> <noptr> address <dot> <ptr> arg )
<cls> <noptr> try to unmap ( <ptr> page <dot> <noptr> flags )
<cls> <noptr> shmem delete from page cache ( <ptr> page <dot> <ptr> rad swap )
<cls> <noptr> shmem free swap ( <ptr> mapping <dot> <noptr> index <dot> <ptr> rad swap )
<cls> <noptr> free swap and cache ( <noptr> entry )
<cls> <noptr> shmem pseudo vma destroy ( <ptr> vma )
<cls> <noptr> shmem free in core inode ( <ptr> inode )
<cls> <noptr> shmem destroy inode cache ( )
<cls> <noptr> shmem free fc ( <ptr> fc )
<cls> <noptr> free alien cache ( <dptr> alc ptr )
<cls> <noptr> drain alien cache ( <ptr> cache p <dot> <ptr> ac <dot> <noptr> node <dot> <ptr> list )
<cls> <noptr> drain alien cache ( <ptr> cache p <dot> <dptr> alien )
<cls> <noptr> cache free alien ( <ptr> cache p <dot> <ptr> obj p <dot> <noptr> node <dot> <noptr> page node )
<cls> <noptr> cache free alien ( <ptr> cache p <dot> <ptr> obj p )
<cls> <noptr> drain cache node node ( <noptr> node )
<cls> <noptr> k mem free pages ( <ptr> cache p <dot> <ptr> page )
<cls> <noptr> s labs destroy ( <ptr> cache p <dot> <ptr> list )
<cls> <noptr> do drain ( <ptr> arg )
<cls> <noptr> drain cpu caches ( <ptr> cache p )
<cls> <noptr> drain free list ( <ptr> cache <dot> <ptr> n <dot> <noptr> to free )
<cls> <noptr> k mem cache release ( <ptr> s )
<cls> <noptr> free block ( <ptr> cache p <dot> <dptr> obj pp <dot> <noptr> nr objects <dot> <noptr> node <dot> <ptr> list )
<cls> <noptr> cache flush array ( <ptr> cache p <dot> <ptr> ac )
<cls> <noptr> cache free ( <ptr> cache p <dot> <ptr> obj p <dot> <noptr> caller )
<cls> <noptr> cache free ( <ptr> cache <dot> <ptr> x <dot> <noptr> addr )
<cls> <noptr> drain array ( <ptr> cache p <dot> <ptr> n <dot> <ptr> ac <dot> <noptr> node )
<cls> <noptr> k mem cache free bulk ( <ptr> s <dot> <noptr> nr <dot> <dptr> p )
<cls> <noptr> destroy mem cg params ( <ptr> s )
<cls> <noptr> free mem cg params ( <ptr> rcu )
<cls> <noptr> slab cache stor cu destroy work fn ( <ptr> work )
<cls> <noptr> shutdown cache ( <ptr> s )
<cls> <noptr> k mem cg cache shutdown fn ( <ptr> s )
<cls> <noptr> shutdown mem cg caches ( <ptr> s )
<cls> <noptr> slab k mem cache release ( <ptr> s )
<cls> <noptr> cache random seq destroy ( <ptr> cache p )
<cls> <noptr> slo b free ( <ptr> block <dot> <noptr> size )
<cls> <noptr> k mem cache free ( <ptr> b <dot> <noptr> size )
<cls> <noptr> slab free hook ( <ptr> s <dot> <ptr> x )
<cls> <noptr> free slab ( <ptr> s <dot> <ptr> page )
<cls> <noptr> free slab ( <ptr> s <dot> <ptr> page )
<cls> <noptr> discards lab ( <ptr> s <dot> <ptr> page )
<cls> <noptr> slab free ( <ptr> s <dot> <ptr> page <dot> <ptr> head <dot> <ptr> tail <dot> <noptr> cnt <dot> <noptr> addr )
<cls> <noptr> do slab free ( <ptr> s <dot> <ptr> page <dot> <ptr> head <dot> <ptr> tail <dot> <noptr> cnt <dot> <noptr> addr )
<cls> <noptr> slab free ( <ptr> s <dot> <ptr> page <dot> <ptr> head <dot> <ptr> tail <dot> <noptr> cnt <dot> <noptr> addr )
<cls> <noptr> free partial ( <ptr> s <dot> <ptr> n )
<cls> <noptr> sysfs slab release ( <ptr> s )
<cls> <noptr> de populate section mem map ( <noptr> pfn <dot> <noptr> nr pages <dot> <ptr> alt map )
<cls> <noptr> release pages ( <dptr> pages <dot> <noptr> nr )
<cls> <noptr> drain swap slots cache ( <noptr> type )
<cls> <noptr> free slot cache ( <noptr> cpu )
<cls> <noptr> free swap slot ( <noptr> entry )
<cls> <noptr> swap entry free ( <ptr> p <dot> <noptr> entry <dot> <noptr> usage )
<cls> <noptr> swap range free ( <ptr> si <dot> <noptr> offset <dot> <noptr> nr entries )
<cls> <noptr> swap free ( <noptr> entry )
<cls> <noptr> swap cache free entries ( <ptr> entries <dot> <noptr> n )
<cls> <noptr> destroy swap extents ( <ptr> sis )
<cls> <noptr> kv free sensitive ( <ptr> addr <dot> <noptr> len )
<cls> <ptr> remove vm area ( <ptr> addr )
<cls> <noptr> b disp remove ( <ptr> pdev )
<cls> <noptr> exy nos noc p driver exit ( )
<cls> <noptr> pti char release ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> mem stick free ( <ptr> dev )
<cls> <noptr> v free atomic ( <ptr> addr )
<cls> <noptr> v free ( <ptr> addr )
<cls> <noptr> free pre alloc ed shrink er ( <ptr> shrink er )
<cls> <noptr> shrinks lab ( <noptr> gfp mask <dot> <noptr> nid <dot> <ptr> mem cg <dot> <noptr> priority )
<cls> <noptr> remove mapping ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> do try to free pages ( <ptr> zone list <dot> <ptr> sc )
<cls> <noptr> try to free pages ( <ptr> zone list <dot> <noptr> order <dot> <noptr> gfp mask <dot> <ptr> node mask )
<cls> <noptr> sci f cleanup ep q p ( <ptr> ep )
<cls> <noptr> sparse buffer free ( <noptr> size )
<cls> <noptr> swap free cluster ( <ptr> si <dot> <noptr> idx )
<cls> <noptr> buffer release ( <ptr> q <dot> <ptr> vb )
<cls> <noptr> mem c groups k free ( <ptr> sk )
<cls> <noptr> mic dma un maps g ( <ptr> dev <dot> <ptr> sg <dot> <noptr> n ents <dot> <noptr> dir <dot> <noptr> attrs )
<cls> <noptr> vm stats top ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> free handle ( <noptr> handle )
<cls> <noptr> free z fold page ( <ptr> page <dot> <noptr> headless )
<cls> <noptr> free pages work ( <ptr> w )
<cls> <noptr> z fold destroy pool ( <ptr> pool )
<cls> <noptr> z fold z pool destroy ( <ptr> pool )
<cls> <noptr> z bud z pool destroy ( <ptr> pool )
<cls> <noptr> z bud destroy pool ( <ptr> pool )
<cls> <noptr> z pool shrink ( <ptr> z pool <dot> <noptr> pages <dot> <ptr> reclaimed )
<cls> <noptr> cache free handle ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> cache free zs page ( <ptr> pool <dot> <ptr> zs page )
<cls> <noptr> z sz pool destroy ( <ptr> pool )
<cls> <noptr> free zs page ( <ptr> pool <dot> <ptr> class <dot> <ptr> zs page )
<cls> <noptr> obj free ( <ptr> class <dot> <noptr> obj )
<cls> <noptr> async free zs page ( <ptr> work )
<cls> <noptr> zs destroy pool ( <ptr> pool )
<cls> <noptr> z swap entry cache destroy ( )
<cls> <noptr> z swap pool destroy ( <ptr> pool )
<cls> <noptr> z swap pool release ( <ptr> work )
<cls> <noptr> sys pkey free ( <ptr> regs )
<cls> <noptr> do sys pkey free ( <noptr> pkey )
<cls> <noptr> dev page mapper cpu release ( <ptr> ref )
<cls> <noptr> generic error remove page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> mpt scsi h free chain buffers ( <ptr> ioc <dot> <noptr> req idx )
<cls> <noptr> re queue free frames ( <ptr> ctx )
<cls> <noptr> cec gpio remove ( <ptr> pdev )
<cls> <noptr> c x request release ( <ptr> drv )
<cls> <noptr> vb free mem ( <ptr> q <dot> <noptr> buffers )
<cls> <noptr> media device unregister ( <ptr> m dev )
<cls> <noptr> tt usb dec disconnect ( <ptr> int f )
<cls> <noptr> net upc i exit ( <ptr> port )
<cls> <noptr> saa alsa dma free ( <ptr> dma )
<cls> <noptr> ce uv dev release ( <ptr> v dev )
<cls> <noptr> vim m release ( <ptr> file )
<cls> <noptr> saa unregister video ( <ptr> dev )
<cls> <noptr> saa dvb unregister ( <ptr> port )
<cls> <noptr> s disconnect ( <ptr> interface )
<cls> <noptr> ccd cls c free queue ( <ptr> c cdc <dot> <ptr> queue )
<cls> <noptr> net u pic unregister ( <ptr> n dev )
<cls> <noptr> media request release ( <ptr> k ref )
<cls> <noptr> flex cop usb disconnect ( <ptr> int f )
<cls> <noptr> media dev node release ( <ptr> cd )
<cls> <noptr> pvr v l release ( <ptr> file )
<cls> <noptr> vb buf mem free ( <ptr> vb )
<cls> <noptr> release sub device ( <ptr> dev )
<cls> <noptr> au usb disconnect ( <ptr> interface )
<cls> <noptr> ts release ( <ptr> fe )
<cls> <noptr> hack r f free urb s ( <ptr> dev )
<cls> <noptr> n gene command config free buf ( <ptr> dev <dot> <ptr> config )
<cls> <noptr> tt usb dec free is our bs ( <ptr> dec )
<cls> <noptr> usb vision release ( <ptr> usb vision )
<cls> <noptr> ks remove ( <ptr> client )
<cls> <noptr> aur c unregister ( <ptr> dev )
<cls> <noptr> pvr context disconnect ( <ptr> mp )
<cls> <noptr> me son a oce cga remove ( <ptr> pdev )
<cls> <noptr> sp mfc dec ctrls delete ( <ptr> ctx )
<cls> <noptr> sa aic unregister ( <ptr> bus )
<cls> <noptr> fc remove ( <ptr> client )
<cls> <noptr> any see c i release ( <ptr> d )
<cls> <noptr> dvb dmx dev release ( <ptr> dmx dev )
<cls> <noptr> tua release ( <ptr> fe )
<cls> <noptr> cobalt remove ( <ptr> pci dev )
<cls> <noptr> sp mfc release dec desc buffer v ( <ptr> ctx )
<cls> <noptr> uvc delete ( <ptr> k ref )
<cls> <noptr> mtk vcodec enc release ( <ptr> ctx )
<cls> <noptr> video close ( <ptr> dev <dot> <ptr> file )
<cls> <noptr> mtk vcodec dec release ( <ptr> ctx )
<cls> <noptr> v pfe release ( <ptr> file )
<cls> <noptr> fim c is remove ( <ptr> pdev )
<cls> <noptr> fim c is free cpu memory ( <ptr> is )
<cls> <noptr> vsp remove ( <ptr> pdev )
<cls> <noptr> alter aci release ( <ptr> dev <dot> <noptr> cin r )
<cls> <noptr> saa dma free ( <ptr> dev <dot> <ptr> q <dot> <ptr> buf )
<cls> <noptr> tc remove ( <ptr> client )
<cls> <noptr> mrs release ( <ptr> fe )
<cls> <noptr> pvr dvb destroy ( <ptr> adap )
<cls> <noptr> omap isp preview unregister entities ( <ptr> prev )
<cls> <noptr> vsp destroy entities ( <ptr> vsp )
<cls> <noptr> venus remove ( <ptr> pdev )
<cls> <noptr> x sys pkey free ( <ptr> regs )
<cls> <noptr> i asy sp key free ( <ptr> regs )
<cls> <noptr> device irq exit ( <ptr> chip )
<cls> <noptr> af remove ( <ptr> client )
<cls> <noptr> gru free tables ( )
<cls> <noptr> mic un init irq ( )
<cls> <noptr> z fold z pool destroy ( <ptr> pool )
<cls> <noptr> huge page exit sysfs ( <ptr> huge page k obj )
<cls> <noptr> l k dtm slab free cross ( )
<cls> <noptr> z swap debug fs exit ( )
<cls> <noptr> dib release ( <ptr> demo d )
<cls> <noptr> unmap v map area ( <ptr> va )
<cls> <noptr> freep d range ( <ptr> tlb <dot> <ptr> pgd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> floor <dot> <noptr> ceiling )
<cls> <noptr> sci f remove ( <ptr> s dev )
<cls> <noptr> free ring buffer ( <ptr> dev <dot> <ptr> rb )
<cls> <noptr> sms dvb debug fs data release ( <ptr> ref )
<cls> <noptr> stk camera disconnect ( <ptr> interface )
<cls> <noptr> k mem leak free part phys ( <noptr> phys <dot> <noptr> size )
<cls> <noptr> put page boot mem ( <ptr> page )
<cls> <noptr> dvb unregister ( <ptr> av )
<cls> <noptr> tw x dev release ( <ptr> v l dev )
<cls> <noptr> sp mfc release generic buf ( <ptr> dev <dot> <ptr> b )
<cls> <noptr> c x unregister driver ( <ptr> drv )
<cls> <noptr> m advise free huge pmd ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> next )
<cls> <noptr> m advise free pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> free z fold page ( <ptr> page <dot> <noptr> headless )
<cls> <noptr> z fold z pool free ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> mpt lan receive post free ( <ptr> dev <dot> <ptr> p recv rep )
<cls> <noptr> c cdc close ( <ptr> device )
<cls> <noptr> hack r f free stream buf s ( <ptr> dev )
<cls> <noptr> frees buf s ( <ptr> cam )
<cls> <noptr> release pte page ( <ptr> page )
<cls> <noptr> release pte pages ( <ptr> pte <dot> <ptr> pte )
<cls> <noptr> release z fold page ( <ptr> z hdr <dot> <noptr> locked )
<cls> <noptr> release z fold page ( <ptr> ref )
<cls> <noptr> vm balloon release page list ( <ptr> page list <dot> <ptr> n pages <dot> <noptr> page size )
<cls> <noptr> delta release ( <ptr> file )
<cls> <noptr> pvr sysfs class release ( <ptr> class )
<cls> <noptr> mic smp tun init ( <ptr> m dev )
<cls> <noptr> v op host un init ( <ptr> vi )
<cls> <noptr> mic drive run init ( <ptr> m drv )
<cls> <noptr> ttc i un init ( <ptr> d )
<cls> <noptr> t mun initi soc ( <ptr> dev )
<cls> <noptr> c xxx un init v bii soc ( <ptr> dev )
<cls> <noptr> em xx un init usb xfer ( <ptr> dev <dot> <noptr> mode )
<cls> <noptr> c xxx un initi soc ( <ptr> dev )
<cls> <noptr> c xxx un init bulk ( <ptr> dev )
<cls> <noptr> mpt device driver deregister ( <noptr> cb idx )
<cls> <noptr> me ide register ( <ptr> dev )
<cls> <noptr> device irq exit ( <ptr> chip )
<cls> <noptr> wb exit ( <ptr> wb )
<cls> <noptr> cg wb release work fn ( <ptr> work )
<cls> <noptr> cg wb release ( <ptr> ref cnt )
<cls> <noptr> exit z fold ( )
<cls> <noptr> b tmr v lsd io exit module ( )
<cls> <noptr> user space exit ( <ptr> dev freq )
<cls> <noptr> k huge paged destroy ( )
<cls> <noptr> mmu notifier m m destroy ( <ptr> m m )
<cls> <noptr> z spool stat destroy ( <ptr> pool )
<cls> <noptr> m pts as target destroy ( <ptr> star get )
<cls> <noptr> delete from page cache batch ( <ptr> mapping <dot> <ptr> p vec )
<cls> <noptr> cleanup module ( )
<cls> <noptr> k mem leak do cleanup ( )
<cls> <noptr> k mem leak do cleanup ( <ptr> work )
<cls> <noptr> x vip graph cleanup ( <ptr> x dev )
<cls> <noptr> module cleanup ( )
<cls> <noptr> c pia usb cleanup ( )
<cls> <noptr> omap v out cleanup ( )
<cls> <noptr> bt tv cleanup module ( )
<cls> <noptr> pcm cleanup ( )
<cls> <noptr> m x b cleanup module ( )
<cls> <noptr> uvc cleanup ( )
<cls> <noptr> buffer cleanup ( <ptr> vb )
<cls> <noptr> bt cleanup module ( )
<cls> <noptr> uvc debug fs cleanup ( )
<cls> <noptr> vp dma list cleanup ( <ptr> vp dma <dot> <noptr> list num <dot> <ptr> channels <dot> <noptr> size )
<cls> <noptr> x sys munmap ( <ptr> regs )
<cls> <noptr> se sys munmap ( <noptr> addr <dot> <noptr> len )
<cls> <noptr> do sys munmap ( <noptr> addr <dot> <noptr> len )
<cls> <noptr> i asys munmap ( <ptr> regs )
<cls> <noptr> unmap kernel range ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> release z fold page locked ( <ptr> ref )
<cls> <noptr> release z fold page locked list ( <ptr> ref )
<cls> <noptr> z fold unmap ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z fold z pool unmap ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z bud z pool unmap ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z pool unmap handle ( <ptr> z pool <dot> <noptr> handle )
<cls> <noptr> z sun map object ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z sz pool unmap ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> bd i debug unregister ( <ptr> bd i )
<cls> <noptr> compaction unregister node ( <ptr> node )
<cls> <noptr> tif m free adapter ( <ptr> f m )
<cls> <noptr> d ibm c release ( <ptr> fe )
<cls> <noptr> cafe pci remove ( <ptr> pdev )
<cls> <noptr> ak x remove ( <ptr> client )
<cls> <noptr> via cam remove ( <ptr> pdev )
<cls> <noptr> vb req release ( <ptr> obj )
<cls> <noptr> pvr sysfs class destroy ( <ptr> clp )
<cls> <noptr> adp remove ( <ptr> client )
<cls> <noptr> dvb dev check free adapter num ( <noptr> num )
<cls> <noptr> it d release ( <ptr> fe )
<cls> <noptr> vivid remove ( <ptr> pdev )
<cls> <noptr> tegra cec remove ( <ptr> pdev )
<cls> <noptr> c x remove ( <ptr> pci dev )
<cls> <noptr> wl f m radio remove ( <ptr> pdev )
<cls> <noptr> px a buffer cleanup ( <ptr> buf )
<cls> <noptr> c xxx release resources ( <ptr> dev )
<cls> <noptr> btc x risc mem free ( <ptr> pci <dot> <ptr> risc )
<cls> <noptr> sm ife exit ( <ptr> port )
<cls> <noptr> a remove ( <ptr> client )
<cls> <noptr> wb cir remove ( <ptr> device )
<cls> <noptr> exit iv t vic ( <ptr> it v )
<cls> <noptr> q mdb remove ( <ptr> client )
<cls> <noptr> dvb usb v adapter dvb exit ( <ptr> adap )
<cls> <noptr> dtt ufe release ( <ptr> fe )
<cls> <noptr> m chip dma free ( )
<cls> <noptr> snd c x dev free ( <ptr> card )
<cls> <noptr> siri r remove ( <ptr> dev )
<cls> <noptr> j pu release ( <ptr> file )
<cls> <noptr> adv x afe cleanup ( <ptr> afe )
<cls> <noptr> fim cmd pipelines free ( <ptr> f md )
<cls> <noptr> vivid dev release ( <ptr> v l dev )
<cls> <noptr> c x usb medio nvl release ( <ptr> v l dev )
<cls> <noptr> ene remove ( <ptr> pnp dev )
<cls> <noptr> snd c x hw free ( <ptr> sub stream )
<cls> <noptr> snd cards aah w free ( <ptr> sub stream )
<cls> <noptr> m chip free frame ( )
<cls> <noptr> l k dtm slab free page ( )
<cls> <noptr> v fe put output ( <ptr> line )
<cls> <noptr> c x unregister video ( <ptr> dev )
<cls> <noptr> fim cmd unregister entities ( <ptr> f md )
<cls> <noptr> vb queue free ( <ptr> q <dot> <noptr> buffers )
<cls> <noptr> fim c unregister driver ( )
<cls> <noptr> tea ic remove ( <ptr> client )
<cls> <noptr> dvb free device ( <ptr> dvb dev )
<cls> <noptr> v pe release ( <ptr> file )
<cls> <noptr> usb vision unregister video ( <ptr> usb vision )
<cls> <noptr> sh ve u release ( <ptr> file )
<cls> <noptr> x vip composite remove ( <ptr> pdev )
<cls> <noptr> fdp job free ( <ptr> fdp <dot> <ptr> job )
<cls> <noptr> coda remove ( <ptr> pdev )
<cls> <noptr> c x audio unregister ( <ptr> dev )
<cls> <noptr> t mic unregister ( <ptr> dev )
<cls> <noptr> msm video release ( <ptr> v dev )
<cls> <noptr> uvc debug fs cleanup stream ( <ptr> stream )
<cls> <noptr> rtl sdr free stream buf s ( <ptr> dev )
<cls> <noptr> smi remove ( <ptr> pdev )
<cls> <noptr> radio sip driver remove ( <ptr> pdev )
<cls> <noptr> ves x release ( <ptr> fe )
<cls> <noptr> px p remove ( <ptr> pdev )
<cls> <noptr> cec release ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> vsp device put ( <ptr> vsp )
<cls> <noptr> pvr video device release ( <ptr> v dev )
<cls> <noptr> dvb unregister device ( <ptr> dvb dev )
<cls> <noptr> mtk mdp m m release ( <ptr> file )
<cls> <noptr> m cam free dma buf s ( <ptr> cam )
<cls> <noptr> ddb remove ( <ptr> pdev )
<cls> <noptr> v pu free ext mem ( <ptr> v pu <dot> <noptr> fw type )
<cls> <noptr> c xstream free ( <ptr> s )
<cls> <noptr> hi x h dir remove ( <ptr> pdev )
<cls> <noptr> vp dma free desc buf ( <ptr> buf )
<cls> <noptr> scc am if remove ( <ptr> pdev )
<cls> <noptr> iv tv stream free ( <ptr> s )
<cls> <noptr> video buf vm close ( <ptr> vma )
<cls> <noptr> c sect pfe remove ( <ptr> pdev )
<cls> <noptr> vip gpio release ( <ptr> dev <dot> <noptr> pin <dot> <ptr> name )
<cls> <noptr> go usb disconnect ( <ptr> int f )
<cls> <noptr> ec release ( <ptr> fe )
<cls> <noptr> dvb ca private put ( <ptr> ca )
<cls> <noptr> s release sys buffers ( <ptr> vc )
<cls> <noptr> hex ium detach ( <ptr> dev )
<cls> <noptr> vim m device release ( <ptr> v dev )
<cls> <noptr> free input block ( <ptr> fe i <dot> <ptr> t sin )
<cls> <noptr> destroy urb s ( <ptr> gsp ca dev )
<cls> <noptr> mtk vcodec dec remove ( <ptr> pdev )
<cls> <noptr> pvr v l destroy nolock ( <ptr> vp )
<cls> <noptr> vps m px remove ( <ptr> client )
<cls> <noptr> mds release ( <ptr> fe )
<cls> <noptr> saa pg table free ( <ptr> pci <dot> <ptr> pt )
<cls> <noptr> cam if unregister sensor ( <ptr> cam if )
<cls> <noptr> avi pack free ( <ptr> p )
<cls> <noptr> bt tv remove ( <ptr> pci dev )
<cls> <noptr> uvc m c cleanup entity ( <ptr> entity )
<cls> <noptr> tea release ( <ptr> fe )
<cls> <noptr> sh vou remove ( <ptr> pdev )
<cls> <noptr> venus h fi destroy ( <ptr> core )
<cls> <noptr> saa unregister media device ( <ptr> dev )
<cls> <noptr> uvc disconnect ( <ptr> int f )
<cls> <noptr> xt pg remove ( <ptr> pdev )
<cls> <noptr> gsc remove ( <ptr> pdev )
<cls> <noptr> v l device release ( <ptr> cd )
<cls> <noptr> f m r remove ( <ptr> f m r )
<cls> <noptr> bt tv dma free ( <ptr> q <dot> <ptr> b tv <dot> <ptr> buf )
<cls> <noptr> isp video release ( <ptr> file )
<cls> <noptr> vivid free controls ( <ptr> dev )
<cls> <noptr> isl release ( <ptr> fe )
<cls> <noptr> cec gpio free ( <ptr> adap )
<cls> <noptr> tv audio remove ( <ptr> client )
<cls> <noptr> vp free inst ( <ptr> inst )
<cls> <noptr> vsp entity destroy ( <ptr> entity )
<cls> <noptr> c x d release ( <ptr> fe )
<cls> <noptr> smi port dma free ( <ptr> port )
<cls> <noptr> h va debug fs remove ( <ptr> h va )
<cls> <noptr> media entity remove link ( <ptr> entity <dot> <ptr> link )
<cls> <noptr> t dax release ( <ptr> fe )
<cls> <noptr> is dvb v del sys ( <noptr> del sys )
<cls> <noptr> omap isp video unregister ( <ptr> video )
<cls> <noptr> fdp remove ( <ptr> pdev )
<cls> <noptr> tm usb disconnect ( <ptr> interface )
<cls> <noptr> c xir remove ( <ptr> dev )
<cls> <noptr> pwc video release ( <ptr> v )
<cls> <noptr> rc unregister device ( <ptr> dev )
<cls> <noptr> via cam release ( <ptr> filp )
<cls> <noptr> pvr stream destroy ( <ptr> sp )
<cls> <noptr> vi u release ( <ptr> file )
<cls> <noptr> fd tvc a release ( <ptr> fdt v )
<cls> <noptr> dvb bt xx remove ( <ptr> sub )
<cls> <noptr> sony b tfm px remove ( <ptr> client )
<cls> <noptr> snd c x free ( <ptr> chip )
<cls> <noptr> h enc free work buf ( <ptr> inst )
<cls> <noptr> c x free buffer ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> uvc video stop transfer ( <ptr> stream <dot> <noptr> free buffers )
<cls> <noptr> vp free all s fre ffb ( <ptr> inst )
<cls> <noptr> cobalt free msi ( <ptr> cobalt <dot> <ptr> pci dev )
<cls> <noptr> video buf mmap free ( <ptr> q )
<cls> <noptr> coda free bitstream buffer ( <ptr> ctx )
<cls> <noptr> mtk vcodec mem free ( <ptr> data <dot> <ptr> mem )
<cls> <noptr> vi codec dev release ( <ptr> dev )
<cls> <noptr> vim c dev release ( <ptr> dev )
<cls> <noptr> cs remove ( <ptr> client )
<cls> <noptr> v l device unregister sub dev ( <ptr> sd )
<cls> <noptr> vi codec remove ( <ptr> pdev )
<cls> <noptr> sms dvb debug fs release ( <ptr> client )
<cls> <noptr> rca rfc p put ( <ptr> f cp )
<cls> <noptr> wl f m fops release ( <ptr> file )
<cls> <noptr> venc close ( <ptr> file )
<cls> <noptr> smi app free controls ( <ptr> sensor )
<cls> <noptr> t dax remove ( <ptr> client )
<cls> <noptr> x vt c unregister device ( <ptr> x vt c )
<cls> <noptr> venus free ( <ptr> h dev <dot> <ptr> mem )
<cls> <noptr> cec dev node release ( <ptr> cd )
<cls> <noptr> mtk vcodec release dec pm ( <ptr> dev )
<cls> <noptr> ln b p release ( <ptr> fe )
<cls> <noptr> vbd mas g dma buf ops release ( <ptr> d buf )
<cls> <noptr> usb vision disconnect ( <ptr> int f )
<cls> <noptr> ska a remove ( <ptr> client )
<cls> <noptr> dsp buffer free ( <ptr> chip )
<cls> <noptr> venus interface queues release ( <ptr> h dev )
<cls> <noptr> vbd mas g put ( <ptr> buf priv )
<cls> <noptr> it x remove ( <ptr> pdev )
<cls> <noptr> hdp vr free queue ( <ptr> q )
<cls> <noptr> mmp cam platform remove ( <ptr> pdev )
<cls> <noptr> v lic sub dev unregister ( <ptr> sd )
<cls> <noptr> ths remove ( <ptr> client )
<cls> <noptr> av detach ( <ptr> saa )
<cls> <noptr> at b m release ( <ptr> fe )
<cls> <noptr> em xx release resources ( <ptr> dev )
<cls> <noptr> techni sat usb disconnect ( <ptr> int f )
<cls> <noptr> stv release ( <ptr> fe )
<cls> <noptr> s rpc remove ( <ptr> client )
<cls> <noptr> p table free ( )
<cls> <noptr> msi video release ( <ptr> v )
<cls> <noptr> dvb front end free ( <ptr> fe )
<cls> <noptr> msm video unregister ( <ptr> video )
<cls> <noptr> vb dvb unregister bus ( <ptr> f )
<cls> <noptr> q mdc remove ( <ptr> client )
<cls> <noptr> flex cop device k free ( <ptr> fc )
<cls> <noptr> h vah close ( <ptr> p ctx )
<cls> <noptr> cal runtime put ( <ptr> dev )
<cls> <noptr> msp remove ( <ptr> client )
<cls> <noptr> affe release ( <ptr> fe )
<cls> <noptr> fim c is debug fs remove ( <ptr> is )
<cls> <noptr> via sensor power release ( <ptr> cam )
<cls> <noptr> uvc input unregister ( <ptr> dev )
<cls> <noptr> m eye release ( <ptr> file )
<cls> <noptr> pvr sysfs release ( <ptr> class dev )
<cls> <noptr> snd tm close ( <ptr> sub stream )
<cls> <noptr> usb vision frames free ( <ptr> usb vision )
<cls> <noptr> put fb to free ( <ptr> inst <dot> <ptr> fb )
<cls> <noptr> vpx remove ( <ptr> client )
<cls> <noptr> tea c remove ( <ptr> client )
<cls> <noptr> ir free table ( <ptr> r cmap )
<cls> <noptr> vivid fop release ( <ptr> file )
<cls> <noptr> vivid cec bus free work ( <ptr> dev )
<cls> <noptr> r jn remove ( <ptr> client )
<cls> <noptr> tvp remove ( <ptr> c )
<cls> <noptr> em xx unregister media device ( <ptr> dev )
<cls> <noptr> dib release ( <ptr> fe )
<cls> <noptr> six radio remove ( <ptr> pdev )
<cls> <noptr> p xac vb cleanup ( <ptr> vb )
<cls> <noptr> adv xx unregister clients ( <ptr> state )
<cls> <noptr> usb free stream buffers ( <ptr> stream )
<cls> <noptr> r cmap unregister ( <ptr> map )
<cls> <noptr> fim c is unregister ic driver ( )
<cls> <noptr> m eye remove ( <ptr> pci dev )
<cls> <noptr> r vin dma unregister ( <ptr> vin )
<cls> <noptr> media dev node remove ( <ptr> dev node )
<cls> <noptr> bt tv sub remove ( <ptr> dev )
<cls> <noptr> saa v v release ( <ptr> dev )
<cls> <noptr> vb queue release ( <ptr> q )
<cls> <noptr> m i pid remove ( <ptr> client )
<cls> <noptr> venus helper int buf s free ( <ptr> inst )
<cls> <noptr> v do a context destroy ( <ptr> ctx )
<cls> <noptr> l gs gl release ( <ptr> fe )
<cls> <noptr> as usb release ( <ptr> k ref )
<cls> <noptr> tuner remove ( <ptr> client )
<cls> <noptr> sp jpeg release ( <ptr> file )
<cls> <noptr> hack r f video release ( <ptr> v )
<cls> <noptr> m lv remove ( <ptr> client )
<cls> <noptr> free firmware ( <ptr> priv )
<cls> <noptr> video buf v malloc free ( <ptr> buf )
<cls> <noptr> sa ahs remove ( <ptr> client )
<cls> <noptr> coda free aux buf ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> rcs i remove ( <ptr> pdev )
<cls> <noptr> sms dvb unregister client ( <ptr> client )
<cls> <noptr> radio release ( <ptr> file )
<cls> <noptr> dvb usb v media device unregister ( <ptr> adap )
<cls> <noptr> pvr disconnect ( <ptr> int f )
<cls> <noptr> c pia free buffers ( <ptr> cam )
<cls> <noptr> sun i video cleanup ( <ptr> video )
<cls> <noptr> budget c i detach ( <ptr> dev )
<cls> <noptr> flex cop dma free ( <ptr> dma )
<cls> <noptr> h va remove ( <ptr> pdev )
<cls> <noptr> wl v dev release ( <ptr> dev )
<cls> <noptr> vsp histogram destroy ( <ptr> entity )
<cls> <noptr> af disconnect ( <ptr> d )
<cls> <noptr> m disconnect ( <ptr> int f )
<cls> <noptr> dma free ( <ptr> pdev <dot> <ptr> dma <dot> <noptr> dir )
<cls> <noptr> stk v l dev release ( <ptr> v d )
<cls> <noptr> descriptor list free ( <ptr> desc )
<cls> <noptr> uda remove ( <ptr> client )
<cls> <noptr> mtm remove ( <ptr> client )
<cls> <noptr> l gdt x release ( <ptr> fe )
<cls> <noptr> hw free ( <ptr> ctx <dot> <ptr> buf )
<cls> <noptr> cobalt flash remove ( <ptr> cobalt )
<cls> <noptr> in free run ( <ptr> sd )
<cls> <noptr> b disp unregister device ( <ptr> b disp )
<cls> <noptr> atmel is i remove ( <ptr> pdev )
<cls> <noptr> nxt x release ( <ptr> fe )
<cls> <noptr> au unregister media device ( <ptr> dev )
<cls> <noptr> snd tm hw free ( <ptr> sub stream )
<cls> <noptr> video ic release ( <ptr> v dev )
<cls> <noptr> ves release ( <ptr> fe )
<cls> <noptr> stk disconnect ( <ptr> interface )
<cls> <noptr> saa res free ( <ptr> f h <dot> <noptr> bits )
<cls> <noptr> v pbe display release ( <ptr> file )
<cls> <noptr> vim m dev release ( <ptr> dev )
<cls> <noptr> dvb unregister adapters ( <ptr> dev )
<cls> <noptr> usb vision remove sysfs ( <ptr> v dev )
<cls> <noptr> imx remove ( <ptr> client )
<cls> <noptr> adv x hdmi cleanup ( <ptr> hdmi )
<cls> <noptr> te f remove ( <ptr> client )
<cls> <noptr> c x d remove ( <ptr> client )
<cls> <noptr> hdp vr delete ( <ptr> dev )
<cls> <noptr> iv tv u dma free ( <ptr> it v )
<cls> <noptr> video buf dma contig free ( <ptr> q <dot> <ptr> buf )
<cls> <noptr> net up spi release ( <ptr> n dev )
<cls> <noptr> max release ( <ptr> fe )
<cls> <noptr> dmx c cdc remove ( <ptr> pdev )
<cls> <noptr> j pure move ( <ptr> pdev )
<cls> <noptr> c sit x remove ( <ptr> pdev )
<cls> <noptr> vim c sen release ( <ptr> sd )
<cls> <noptr> c x alsa dma free ( <ptr> buf )
<cls> <noptr> r card rif sdr unregister ( <ptr> sdr )
<cls> <noptr> sh ve u remove ( <ptr> pdev )
<cls> <noptr> bt xx dst release ( <ptr> fe )
<cls> <noptr> h v adb g ctx remove ( <ptr> ctx )
<cls> <noptr> vsp dlm destroy ( <ptr> dlm )
<cls> <noptr> dvb pll release ( <ptr> fe )
<cls> <noptr> tw x pcm hw free ( <ptr> ss )
<cls> <noptr> x box remote disconnect ( <ptr> interface )
<cls> <noptr> res free ( <ptr> dev <dot> <noptr> f type )
<cls> <noptr> gs remove ( <ptr> spi )
<cls> <noptr> gsp ca disconnect ( <ptr> int f )
<cls> <noptr> omap v out free vrf b buffers ( <ptr> v out )
<cls> <noptr> spc sis remove ( <ptr> pdev )
<cls> <noptr> adb remove ( <ptr> client )
<cls> <noptr> v fe put ( <ptr> v fe )
<cls> <noptr> d v bring buffer free ( <ptr> r buf )
<cls> <noptr> a speed video release ( <ptr> file )
<cls> <noptr> noon remove ( <ptr> client )
<cls> <noptr> usb ma radio release ( <ptr> v l dev )
<cls> <noptr> dib p release ( <ptr> demo d )
<cls> <noptr> put firmware ( <ptr> av )
<cls> <noptr> sa ago mod cleanup ( )
<cls> <noptr> c x v l close ( <ptr> filp )
<cls> <noptr> v l fw node endpoint free ( <ptr> ve p )
<cls> <noptr> k mem cg cache shutdown ( <ptr> per cpu ref )
<cls> <noptr> fin tek remove ( <ptr> pdev )
<cls> <noptr> msi remove ( <ptr> spi )
<cls> <noptr> freem v buf ( <ptr> inst )
<cls> <noptr> pvr h dw destroy ( <ptr> h dw )
<cls> <noptr> ddb ports detach ( <ptr> dev )
<cls> <noptr> pvr io read destroy ( <ptr> cp )
<cls> <noptr> s video device release ( <ptr> v dev )
<cls> <noptr> h va release ( <ptr> file )
<cls> <noptr> sp mfc mem dev release ( <ptr> dev )
<cls> <noptr> ava v unregister ( <ptr> av )
<cls> <noptr> saa v free destroy pg table ( <ptr> pci <dot> <ptr> mem <dot> <ptr> pt )
<cls> <noptr> snd cards aa runtime free ( <ptr> runtime )
<cls> <noptr> cam ss remove ( <ptr> pdev )
<cls> <noptr> omap isp video cleanup ( <ptr> video )
<cls> <noptr> vb destroy frame vec ( <ptr> vec )
<cls> <noptr> media device release ( <ptr> dev node )
<cls> <noptr> snd cobalt card free ( <ptr> c obsc )
<cls> <noptr> dvb ca en release ( <ptr> pub ca )
<cls> <noptr> ir raw event unregister ( <ptr> dev )
<cls> <noptr> sec oce c remove ( <ptr> pdev )
<cls> <noptr> c x usb video radio release ( <ptr> f )
<cls> <noptr> go snd hw free ( <ptr> sub stream )
<cls> <noptr> dvb dummy fe release ( <ptr> fe )
<cls> <noptr> mtk vcodec release enc pm ( <ptr> mtk dev )
<cls> <noptr> td a remove ( <ptr> client )
<cls> <noptr> v pen c free work buf ( <ptr> inst )
<cls> <noptr> c x dev unregister ( <ptr> dev )
<cls> <noptr> usb d sbr disconnect ( <ptr> int f )
<cls> <noptr> air spy free urb s ( <ptr> s )
<cls> <noptr> media entity enum cleanup ( <ptr> ent enum )
<cls> <noptr> media remove int flink ( <ptr> link )
<cls> <noptr> rtl sdr free urb s ( <ptr> dev )
<cls> <noptr> cro sec cec remove ( <ptr> pdev )
<cls> <noptr> nv t remove ( <ptr> pdev )
<cls> <noptr> r card rif release buf ( <ptr> sdr )
<cls> <noptr> irl irc close ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> fim c unregister capture sub dev ( <ptr> fim c )
<cls> <noptr> fim c unregister mmdevice ( <ptr> fim c )
<cls> <noptr> sub dev close ( <ptr> file )
<cls> <noptr> m bas release ( <ptr> fe )
<cls> <noptr> go usb release ( <ptr> go )
<cls> <noptr> tw x remove ( <ptr> pci dev )
<cls> <noptr> c sir x remove ( <ptr> pdev )
<cls> <noptr> go loader disconnect ( <ptr> interface )
<cls> <noptr> me so nir remove ( <ptr> pdev )
<cls> <noptr> radio isa common remove ( <ptr> isa <dot> <noptr> region size )
<cls> <noptr> stk free i soc ( <ptr> dev )
<cls> <noptr> fdt v dvb unregister ( <ptr> fdt v )
<cls> <noptr> get free fb ( <ptr> inst <dot> <dptr> out fb )
<cls> <noptr> c x black bird advise release ( <ptr> drv )
<cls> <noptr> usb vision decompress free ( <ptr> usb vision )
<cls> <noptr> isp unregister entities ( <ptr> isp )
<cls> <noptr> budget detach ( <ptr> dev )
<cls> <noptr> c x dvb unregister ( <ptr> port )
<cls> <noptr> fri io front end detach ( <ptr> adap )
<cls> <noptr> vbd cdma buf ops release ( <ptr> d buf )
<cls> <noptr> dvb ca private free ( <ptr> ca )
<cls> <noptr> img ir remove hw ( <ptr> priv )
<cls> <noptr> au usb v l media release ( <ptr> dev )
<cls> <noptr> usb tv disconnect ( <ptr> int f )
<cls> <noptr> mtk jpeg remove ( <ptr> pdev )
<cls> <noptr> stk ic unregister ( <ptr> dev )
<cls> <noptr> clean free buffer ( <ptr> ctx )
<cls> <noptr> dib disconnect ( <ptr> int f )
<cls> <noptr> v pbe display remove ( <ptr> pdev )
<cls> <noptr> sun ics i remove ( <ptr> pdev )
<cls> <noptr> v lst k release ( <ptr> fp )
<cls> <noptr> img ir remove ( <ptr> pdev )
<cls> <noptr> ir mce kbd unregister ( <ptr> dev )
<cls> <noptr> imx free controls ( <ptr> imx )
<cls> <noptr> c xxx unregister media device ( <ptr> dev )
<cls> <noptr> msi iso free ( <ptr> dev )
<cls> <noptr> release channel ( <ptr> chan )
<cls> <noptr> iv tvf b release buffers ( <ptr> it v )
<cls> <noptr> sp remove ( <ptr> client )
<cls> <noptr> is if remove ( <ptr> pdev )
<cls> <noptr> msi disconnect ( <ptr> int f )
<cls> <noptr> stb release ( <ptr> fe )
<cls> <noptr> hdp vr release ( <ptr> file )
<cls> <noptr> ske cg x remove ( <ptr> client )
<cls> <noptr> r card rif remove ( <ptr> pdev )
<cls> <noptr> em xx free device ( <ptr> ref )
<cls> <noptr> pwc i soc cleanup ( <ptr> pdev )
<cls> <noptr> dvb front end free ( <ptr> ref )
<cls> <noptr> remove dev ( <ptr> internal )
<cls> <noptr> fim cmd remove ( <ptr> pdev )
<cls> <noptr> r ga release ( <ptr> file )
<cls> <noptr> tt usb dec fe release ( <ptr> fe )
<cls> <noptr> or release ( <ptr> fe )
<cls> <noptr> f m v l fops release ( <ptr> file )
<cls> <noptr> uvc stream delete ( <ptr> stream )
<cls> <noptr> bt tv release ( <ptr> file )
<cls> <noptr> aud vb unregister ( <ptr> dev )
<cls> <noptr> v l f h release ( <ptr> filp )
<cls> <noptr> bt tv sub del devices ( <ptr> core )
<cls> <noptr> c xxx alsa unregister ( )
<cls> <noptr> adv xx remove ( <ptr> client )
<cls> <noptr> snd solo hw free ( <ptr> ss )
<cls> <noptr> gpp sk fe release ( <ptr> fe )
<cls> <noptr> ts remove ( <ptr> client )
<cls> <noptr> vb buf user ptr put ( <ptr> vb )
<cls> <noptr> saa h remove ( <ptr> client )
<cls> <noptr> upd remove ( <ptr> client )
<cls> <noptr> v dec session release ( <ptr> inst )
<cls> <noptr> pvr buffer remove ( <ptr> b p )
<cls> <noptr> v l sub dev release ( <ptr> sd )
<cls> <noptr> img ir free timing dynamic ( <noptr> s tft <dot> <ptr> filter )
<cls> <noptr> asf e release ( <ptr> fe )
<cls> <noptr> dt remove ( <ptr> pdev )
<cls> <noptr> sd disconnect ( <ptr> int f )
<cls> <noptr> usb vision radio close ( <ptr> file )
<cls> <noptr> c xir remove ( <ptr> sd )
<cls> <noptr> l release ( <ptr> fe )
<cls> <noptr> d ibm release ( <ptr> demo d )
<cls> <noptr> em xx audio free urb ( <ptr> dev )
<cls> <noptr> stm cec remove ( <ptr> pdev )
<cls> <noptr> c xic unregister ( <ptr> bus )
<cls> <noptr> vb core queue release ( <ptr> q )
<cls> <noptr> vp if remove ( <ptr> pdev )
<cls> <noptr> px a camera remove ( <ptr> pdev )
<cls> <noptr> scm remove ( <ptr> client )
<cls> <noptr> media device instance release ( <ptr> k ref )
<cls> <noptr> c x release stream ( <ptr> s )
<cls> <noptr> smi port detach ( <ptr> port )
<cls> <noptr> tw x video free ( <ptr> dev )
<cls> <noptr> ts release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> v pfe unregister c cdc device ( <ptr> dev )
<cls> <noptr> sp mfc release codec buffers v ( <ptr> ctx )
<cls> <noptr> m xlt release ( <ptr> fe )
<cls> <noptr> usb tv video free ( <ptr> usb tv )
<cls> <noptr> snd c x pcm hw free ( <ptr> sub stream )
<cls> <noptr> ddb ic release ( <ptr> dev )
<cls> <noptr> video release ( <ptr> file )
<cls> <noptr> dvb audio release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> l m remove ( <ptr> client )
<cls> <noptr> max i radio remove ( <ptr> pdev )
<cls> <noptr> mds remove ( <ptr> client )
<cls> <noptr> m xls f demo d release ( <ptr> fe )
<cls> <noptr> tim b radio remove ( <ptr> pdev )
<cls> <noptr> tm v l unregister ( <ptr> dev )
<cls> <noptr> tw remove ( <ptr> client )
<cls> <noptr> net up unid v bci unregister ( <ptr> dev <dot> <noptr> num )
<cls> <noptr> a speed video remove ( <ptr> pdev )
<cls> <noptr> irr x release ( <ptr> dev )
<cls> <noptr> coda release ( <ptr> file )
<cls> <noptr> img ir remove raw ( <ptr> priv )
<cls> <noptr> video buf dc free ( <ptr> dev <dot> <ptr> mem )
<cls> <noptr> pt free page ( <ptr> pt <dot> <ptr> page <dot> <noptr> addr )
<cls> <noptr> r vin group cleanup ( <ptr> group )
<cls> <noptr> fim c lite release ( <ptr> file )
<cls> <noptr> b disp hw free filters ( <ptr> dev )
<cls> <noptr> freem v buffers ( <ptr> ctx )
<cls> <noptr> vb i buffer release ( <ptr> q <dot> <ptr> vb )
<cls> <noptr> ske cg x free gpio s ( <ptr> priv )
<cls> <noptr> r vin release ( <ptr> file )
<cls> <noptr> snd c x card free ( <ptr> c x sc )
<cls> <noptr> vs pdl body pool destroy ( <ptr> pool )
<cls> <noptr> as dvb unregister ( <ptr> as dev )
<cls> <noptr> saa media release ( <ptr> dev )
<cls> <noptr> x vt c remove ( <ptr> pdev )
<cls> <noptr> isp detach io mmu ( <ptr> isp )
<cls> <noptr> lg dta remove ( <ptr> client )
<cls> <noptr> dvb net close ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> dw disconnect ( <ptr> int f )
<cls> <noptr> radio isa remove ( <ptr> pdev <dot> <noptr> dev )
<cls> <noptr> de interlace release ( <ptr> file )
<cls> <noptr> mtk jpeg release ( <ptr> file )
<cls> <noptr> c x der release ( <ptr> fe )
<cls> <noptr> c x video unregister ( <ptr> dev )
<cls> <noptr> dvb module release ( <ptr> client )
<cls> <noptr> usb si disconnect ( <ptr> int f )
<cls> <noptr> lg dta release ( <ptr> fe )
<cls> <noptr> usb vis ionic unregister ( <ptr> usb vision )
<cls> <noptr> m rst remove ( <ptr> client )
<cls> <noptr> s release ( <ptr> fe )
<cls> <noptr> hopper pci remove ( <ptr> pdev )
<cls> <noptr> six usb release ( <ptr> v l dev )
<cls> <noptr> sti h cec remove ( <ptr> pdev )
<cls> <noptr> class dev destroy ( <ptr> sfp )
<cls> <noptr> saa unregister device ( <ptr> v fd <dot> <ptr> dev )
<cls> <noptr> dvb generic release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> l gdt release ( <ptr> fe )
<cls> <noptr> n gene release buffers ( <ptr> dev )
<cls> <noptr> uvc debug fs stats release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> dvb sky front end detach ( <ptr> adap )
<cls> <noptr> sun ics i dma unregister ( <ptr> csi )
<cls> <noptr> usb am radio disconnect ( <ptr> int f )
<cls> <noptr> usb vision scratch free ( <ptr> usb vision )
<cls> <noptr> emma prp remove ( <ptr> pdev )
<cls> <noptr> de interlace remove ( <ptr> pdev )
<cls> <noptr> six usb driver disconnect ( <ptr> int f )
<cls> <noptr> mtk v pure move ( <ptr> pdev )
<cls> <noptr> mtk vcodec enc remove ( <ptr> pdev )
<cls> <noptr> v l async notifier unregister ( <ptr> notifier )
<cls> <noptr> rv free ( <ptr> mem <dot> <noptr> size )
<cls> <noptr> cam ss delete ( <ptr> cam ss )
<cls> <noptr> vim c sca release ( <ptr> sd )
<cls> <noptr> x vip cleanup resources ( <ptr> x vip )
<cls> <noptr> omap v out free buffer ( <noptr> virt addr <dot> <noptr> buf size )
<cls> <noptr> rc free device ( <ptr> dev )
<cls> <noptr> sp jpeg remove ( <ptr> pdev )
<cls> <noptr> pt unregister tables ( <ptr> pt )
<cls> <noptr> fim cmd put clocks ( <ptr> f md )
<cls> <noptr> media device cleanup ( <ptr> m dev )
<cls> <noptr> six radio fops release ( <ptr> file )
<cls> <noptr> m m ols remove ( <ptr> client )
<cls> <noptr> cec notifier unregister ( <ptr> n )
<cls> <noptr> ddb ports release ( <ptr> dev )
<cls> <noptr> bcm release ( <ptr> fe )
<cls> <noptr> r card rif sdr remove ( <ptr> sdr )
<cls> <noptr> vsp video cleanup ( <ptr> video )
<cls> <noptr> l irc release device ( <ptr> ld )
<cls> <noptr> si remove ( <ptr> client )
<cls> <noptr> pcm release ( <ptr> file )
<cls> <noptr> smi app remove ( <ptr> client )
<cls> <noptr> v fe release wm ( <ptr> v fe <dot> <noptr> wm )
<cls> <noptr> free imon context ( <ptr> i ctx )
<cls> <noptr> bt remove ( <ptr> client )
<cls> <noptr> dvb pll remove ( <ptr> client )
<cls> <noptr> omap v out remove ( <ptr> pdev )
<cls> <noptr> adv x remove ( <ptr> client )
<cls> <noptr> coda free context buffers ( <ptr> ctx )
<cls> <noptr> pluto remove ( <ptr> pdev )
<cls> <noptr> bt tv unregister video ( <ptr> b tv )
<cls> <noptr> v l async unregister sub dev ( <ptr> sd )
<cls> <noptr> black bird unregister video ( <ptr> dev )
<cls> <noptr> free solo dev ( <ptr> solo dev )
<cls> <noptr> sms core unregister device ( <ptr> core dev )
<cls> <noptr> vsp video pipeline release ( <ptr> k ref )
<cls> <noptr> tw x audio free ( <ptr> dev )
<cls> <noptr> fim c is ic remove ( <ptr> pdev )
<cls> <noptr> gsc ctrls delete ( <ptr> ctx )
<cls> <noptr> sms usb disconnect ( <ptr> int f )
<cls> <noptr> sun x iir remove ( <ptr> pdev )
<cls> <noptr> c xxx release analog resources ( <ptr> dev )
<cls> <noptr> tp g free ( <ptr> tp g )
<cls> <noptr> mtv remove ( <ptr> client )
<cls> <noptr> v dec vp deinit ( <ptr> h v dec )
<cls> <noptr> solo enc free ( <ptr> solo enc )
<cls> <noptr> wm remove ( <ptr> client )
<cls> <noptr> os d release layer ( <ptr> sd <dot> <noptr> layer )
<cls> <noptr> tt usb usb disconnect ( <ptr> int f )
<cls> <noptr> d m remove ( <ptr> pdev )
<cls> <noptr> irl irc unregister ( <ptr> dev )
<cls> <noptr> stk release ( <ptr> v l dev )
<cls> <noptr> cec notifier release ( <ptr> k ref )
<cls> <noptr> s destroy ( <ptr> dev )
<cls> <noptr> str c remove ( <ptr> pdev )
<cls> <noptr> tvp x remove ( <ptr> client )
<cls> <noptr> c x dvb remove ( <ptr> drv )
<cls> <noptr> m cam v l release ( <ptr> filp )
<cls> <noptr> c xxx v l close ( <ptr> filp )
<cls> <noptr> c x dma free ( <ptr> q <dot> <ptr> s <dot> <ptr> buf )
<cls> <noptr> nxt release ( <ptr> fe )
<cls> <noptr> sp mfc cleanup queue ( <ptr> l h <dot> <ptr> v q )
<cls> <noptr> free idle buffer ( <ptr> dev <dot> <ptr> rb <dot> <ptr> tb )
<cls> <noptr> rt release ( <ptr> fe )
<cls> <noptr> irr x remove ( <ptr> dev )
<cls> <noptr> em xx free v l ( <ptr> ref )
<cls> <noptr> dvb dmx release ( <ptr> dvb demux )
<cls> <noptr> usb urb free urb s ( <ptr> stream )
<cls> <noptr> mn remove ( <ptr> client )
<cls> <noptr> mmp cam remove ( <ptr> cam )
<cls> <noptr> b disp debug fs remove ( <ptr> b disp )
<cls> <noptr> video device release empty ( <ptr> v dev )
<cls> <noptr> vpx usb disconnect ( <ptr> int f )
<cls> <noptr> ad remove ( <ptr> client )
<cls> <noptr> snd cobalt pcm hw free ( <ptr> sub stream )
<cls> <noptr> omap isp ccp unregister entities ( <ptr> ccp )
<cls> <noptr> isp stat buf s free ( <ptr> stat )
<cls> <noptr> xcd vb release ( <ptr> fe )
<cls> <noptr> isp stat buf release ( <ptr> stat )
<cls> <noptr> skb af remove ( <ptr> c )
<cls> <noptr> m xlr f remove ( <ptr> client )
<cls> <noptr> stb detach ( <ptr> fe )
<cls> <noptr> ccd cls c free request ( <ptr> c cdc <dot> <ptr> req )
<cls> <noptr> usb am radio release ( <ptr> v l dev )
<cls> <noptr> ite remove ( <ptr> pdev )
<cls> <noptr> v pbe remove ( <ptr> device )
<cls> <noptr> v do a remove ( <ptr> pdev )
<cls> <noptr> video ic remove ( <ptr> client )
<cls> <noptr> au release ( <ptr> fe )
<cls> <noptr> v dec close ( <ptr> file )
<cls> <noptr> vps s remove ( <ptr> pdev )
<cls> <noptr> adv unregister clients ( <ptr> sd )
<cls> <noptr> tea remove ( <ptr> client )
<cls> <noptr> bt mem free ( <ptr> bt )
<cls> <noptr> pt free adapter ( <ptr> adap )
<cls> <noptr> free area init nodes ( <ptr> max zone pfn )
<cls> <noptr> z r xx release ( <ptr> v l dev )
<cls> <noptr> atmel isc remove ( <ptr> pdev )
<cls> <noptr> v bdc put user ptr ( <ptr> buf priv )
<cls> <noptr> stv x release ( <ptr> fe )
<cls> <noptr> sn div tv card free ( <ptr> it vsc )
<cls> <noptr> z xir dec remove ( <ptr> pdev )
<cls> <noptr> dvb remove device ( <ptr> dvb dev )
<cls> <noptr> sp mfc remove ( <ptr> pdev )
<cls> <noptr> ds release ( <ptr> fe )
<cls> <noptr> c x d spi remove ( <ptr> spi )
<cls> <noptr> saa remove one ( <ptr> pdev )
<cls> <noptr> saa x remove ( <ptr> client )
<cls> <noptr> omap isp put ( <ptr> isp )
<cls> <noptr> tango ir remove ( <ptr> pdev )
<cls> <noptr> rc dev release ( <ptr> device )
<cls> <noptr> v l ctrl request release ( <ptr> obj )
<cls> <noptr> m remove ( <ptr> client )
<cls> <noptr> as cote release ( <ptr> fe )
<cls> <noptr> go snd free ( <ptr> device )
<cls> <noptr> delta mjpeg close ( <ptr> p ctx )
<cls> <noptr> fim c lite remove ( <ptr> pdev )
<cls> <noptr> ddb output free ( <ptr> output )
<cls> <noptr> free common buffers ( <ptr> dev )
<cls> <noptr> sp release ( <ptr> fe )
<cls> <noptr> l gdt x remove ( <ptr> client )
<cls> <noptr> fim c isp sub dev destroy ( <ptr> isp )
<cls> <noptr> clu destroy ( <ptr> entity )
<cls> <noptr> spx release ( <ptr> fe )
<cls> <noptr> qt release ( <ptr> fe )
<cls> <noptr> sun ics i release ( <ptr> file )
<cls> <noptr> video buf free ( <ptr> q )
<cls> <noptr> uvc free urb buffers ( <ptr> stream )
<cls> <noptr> video unregister device ( <ptr> v dev )
<cls> <noptr> ccd cls c free table work ( <ptr> work )
<cls> <noptr> max remove ( <ptr> client )
<cls> <noptr> adv remove ( <ptr> client )
<cls> <noptr> px p release ( <ptr> file )
<cls> <noptr> isp remove ( <ptr> pdev )
<cls> <noptr> vi codec release ( <ptr> file )
<cls> <noptr> c x d detach ( <ptr> dev )
<cls> <noptr> fim cmd unregister clk provider ( <ptr> f md )
<cls> <noptr> c x release ( <ptr> fe )
<cls> <noptr> mt remove ( <ptr> client )
<cls> <noptr> tm free urb buffers ( <ptr> dev )
<cls> <noptr> coda free frame buffers ( <ptr> ctx )
<cls> <noptr> sn div tv pcm hw free ( <ptr> sub stream )
<cls> <noptr> ov free controls ( <ptr> ov )
<cls> <noptr> cec delete adapter ( <ptr> adap )
<cls> <noptr> fim cmm release ( <ptr> file )
<cls> <noptr> c pia close ( <ptr> file )
<cls> <noptr> stk free buffers ( <ptr> dev )
<cls> <noptr> hdp vr free buffers ( <ptr> dev )
<cls> <noptr> dvb front end release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> vsp wpf destroy ( <ptr> entity )
<cls> <noptr> v l m mctx release ( <ptr> m mctx )
<cls> <noptr> dvb dmx dev filter free ( <ptr> dmx dev <dot> <ptr> dmx dev filter )
<cls> <noptr> lut destroy ( <ptr> entity )
<cls> <noptr> g d remove ( <ptr> pdev )
<cls> <noptr> c x usb medi on video dev release ( <ptr> v dev )
<cls> <noptr> v l m m unregister media controller ( <ptr> m m dev )
<cls> <noptr> usb tv audio free ( <ptr> usb tv )
<cls> <noptr> fim c ctrls delete ( <ptr> ctx )
<cls> <noptr> h fi destroy ( <ptr> core )
<cls> <noptr> r card rif release dma channels ( <ptr> sdr )
<cls> <noptr> r vin group put ( <ptr> vin )
<cls> <noptr> media g obj destroy ( <ptr> g obj )
<cls> <noptr> red rat delete ( <ptr> r r <dot> <ptr> udev )
<cls> <noptr> ir spi remove ( <ptr> spi )
<cls> <noptr> vb cleanup file io ( <ptr> q )
<cls> <noptr> fim c isp video device unregister ( <ptr> isp <dot> <noptr> type )
<cls> <noptr> sh vou release ( <ptr> file )
<cls> <noptr> v pic remove ( <ptr> dev )
<cls> <noptr> snd cobalt card private free ( <ptr> sc )
<cls> <noptr> vim m remove ( <ptr> pdev )
<cls> <noptr> sp mfc enc ctrls delete ( <ptr> ctx )
<cls> <noptr> uvc status unregister ( <ptr> dev )
<cls> <noptr> snd usb tv hw free ( <ptr> sub stream )
<cls> <noptr> af tuner detach ( <ptr> adap )
<cls> <noptr> fim c capture release ( <ptr> file )
<cls> <noptr> snd c x card private free ( <ptr> sc )
<cls> <noptr> free vp if objs ( )
<cls> <noptr> as usb disconnect ( <ptr> int f )
<cls> <noptr> cade t release ( <ptr> file )
<cls> <noptr> sms dvb release ( <ptr> fe )
<cls> <noptr> pvr h dw remove usb stuff ( <ptr> h dw )
<cls> <noptr> v l release ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> ce u remove ( <ptr> pdev )
<cls> <noptr> b disp hw free nodes ( <ptr> ctx )
<cls> <noptr> hi remove ( <ptr> client )
<cls> <noptr> scratch free ( <ptr> usb vision )
<cls> <noptr> vp dma free desc list ( <ptr> list )
<cls> <noptr> v l device put ( <ptr> v l dev )
<cls> <noptr> altera hw filt release ( <ptr> main dev <dot> <noptr> filt nr )
<cls> <noptr> fmc release ( <ptr> f m dev )
<cls> <noptr> usb rare mono disconnect ( <ptr> int f )
<cls> <noptr> venc remove ( <ptr> pdev )
<cls> <noptr> put user pages dirty lock ( <dptr> pages <dot> <noptr> n pages <dot> <noptr> make dirty )
<cls> <noptr> v pfe remove ( <ptr> pdev )
<cls> <noptr> au usb v l release ( <ptr> v l dev )
<cls> <noptr> vivid pdev release ( <ptr> dev )
<cls> <noptr> em xx usb disconnect ( <ptr> int f )
<cls> <noptr> stax vip remove one ( <ptr> pdev )
<cls> <noptr> vp frees fre ffb ( <ptr> fb )
<cls> <noptr> cache freep f memalloc ( <ptr> cache p <dot> <ptr> page <dot> <ptr> obj p )
<cls> <noptr> scm spi remove ( <ptr> spi )
<cls> <noptr> img ir free timing ( <ptr> timing <dot> <noptr> clock hz )
<cls> <noptr> avc a unregister ( <ptr> av )
<cls> <noptr> free buffer ( <ptr> v q <dot> <ptr> buf )
<cls> <noptr> tw x memcpy dma free ( <ptr> vc <dot> <noptr> pb )
<cls> <noptr> z r xx disconnect ( <ptr> int f )
<cls> <noptr> tt usb disconnect ( <ptr> int f )
<cls> <noptr> remove inode ( <ptr> internal )
<cls> <noptr> media device delete ( <ptr> m dev <dot> <ptr> module name <dot> <ptr> owner )
<cls> <noptr> six ic remove ( <ptr> client )
<cls> <noptr> v pfe release ( <ptr> fe )
<cls> <noptr> rtl remove ( <ptr> client )
<cls> <noptr> e tek remove ( <ptr> client )
<cls> <noptr> au analog unregister ( <ptr> dev )
<cls> <noptr> pvr v l dev destroy ( <ptr> dip )
<cls> <noptr> c iner gy tfe release ( <ptr> fe )
<cls> <noptr> saa cmd free seqno ( <ptr> dev <dot> <noptr> seqno )
<cls> <noptr> usb vision rv free ( <ptr> mem <dot> <noptr> size )
<cls> <noptr> vp dma unmap desc buf ( <ptr> vp dma <dot> <ptr> buf )
<cls> <noptr> em xx v l media release ( <ptr> dev )
<cls> <noptr> solo pci remove ( <ptr> pdev )
<cls> <noptr> media request object release ( <ptr> k ref )
<cls> <noptr> release all page tables ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> ddb buffers free ( <ptr> dev )
<cls> <noptr> tua remove ( <ptr> client )
<cls> <noptr> dr xxx j release ( <ptr> fe )
<cls> <noptr> m xls release ( <ptr> fe )
<cls> <noptr> stv x remove ( <ptr> client )
<cls> <noptr> r vin parallel sub device detach ( <ptr> vin )
<cls> <noptr> uvc queue buffer release ( <ptr> buf )
<cls> <noptr> radio isa pnp remove ( <ptr> dev )
<cls> <noptr> omap v out release vrf b ( <ptr> v out )
<cls> <noptr> dvb cae nio release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sh release ( <ptr> fe )
<cls> <noptr> c x remove ( <ptr> client )
<cls> <noptr> ak remove ( <ptr> client )
<cls> <noptr> dvb dmx dev delete pids ( <ptr> dmx dev filter )
<cls> <noptr> sms dvb on remove ( <ptr> context )
<cls> <noptr> mba release ( <ptr> fe )
<cls> <noptr> go snd remove ( <ptr> go )
<cls> <noptr> emma prp release ( <ptr> file )
<cls> <noptr> dvb dvr release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> venus helper release buf ref ( <ptr> inst <dot> <noptr> idx )
<cls> <noptr> mn x remove ( <ptr> client )
<cls> <noptr> sp mfc release dev context buffer v ( <ptr> dev )
<cls> <noptr> scc am if unregister sub dev ( <ptr> cam if )
<cls> <noptr> au release state ( <ptr> state )
<cls> <noptr> hack r f disconnect ( <ptr> int f )
<cls> <noptr> ce u release ( <ptr> file )
<cls> <noptr> rca rfc p remove ( <ptr> pdev )
<cls> <noptr> net u pic register ( <ptr> n dev )
<cls> <noptr> c x unregister ( <ptr> dev )
<cls> <noptr> six x release ( <ptr> fe )
<cls> <noptr> smss dio remove ( <ptr> func )
<cls> <noptr> cec put device ( <ptr> dev node )
<cls> <noptr> snd c xxx hw capture free ( <ptr> sub stream )
<cls> <noptr> dvb ca private release ( <ptr> ref )
<cls> <noptr> msm csi phy unregister entity ( <ptr> csi phy )
<cls> <noptr> dvb net release ( <ptr> dvb net )
<cls> <noptr> isc clk cleanup ( <ptr> isc )
<cls> <noptr> x c release ( <ptr> fe )
<cls> <noptr> uvc queue release ( <ptr> queue )
<cls> <noptr> vsp drm cleanup ( <ptr> vsp )
<cls> <noptr> usb ma radio disconnect ( <ptr> int f )
<cls> <noptr> mod tec eeprom ( <ptr> b tv )
<cls> <noptr> dr x d release ( <ptr> fe )
<cls> <noptr> gsp ca release ( <ptr> v l device )
<cls> <noptr> delta ipc close ( <ptr> hdl )
<cls> <noptr> z d front end detach ( <ptr> adap )
<cls> <noptr> snd em xx hw capture free ( <ptr> sub stream )
<cls> <noptr> cio vb buf cleanup ( <ptr> vb )
<cls> <noptr> media request close ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> pt cleanup front ends ( <ptr> pt )
<cls> <noptr> omap is pcs i phy cleanup ( <ptr> isp )
<cls> <noptr> pt cleanup adapter ( <ptr> pt <dot> <noptr> index )
<cls> <noptr> omap is pc cdc unregister entities ( <ptr> c cdc )
<cls> <noptr> unregister dvb ( <ptr> demux )
<cls> <noptr> v bdc put ( <ptr> buf priv )
<cls> <noptr> r vin group release ( <ptr> k ref )
<cls> <noptr> d dbc i detach ( <ptr> port )
<cls> <noptr> c x io unmap ( <ptr> c x )
<cls> <noptr> tlv aic b remove ( <ptr> client )
<cls> <noptr> venus helper unregister buf s ( <ptr> inst )
<cls> <noptr> usb shark disconnect ( <ptr> int f )
<cls> <noptr> iv tv release stream ( <ptr> s )
<cls> <noptr> adv x unregister clients ( <ptr> state )
<cls> <noptr> budget unregister ( <ptr> budget )
<cls> <noptr> dvb dmx dev remove pid ( <ptr> dmx dev <dot> <ptr> filter <dot> <noptr> pid )
<cls> <noptr> rtl xx u tuner detach ( <ptr> adap )
<cls> <noptr> x vip composite v l cleanup ( <ptr> x dev )
<cls> <noptr> l irc prog detach ( <ptr> attr )
<cls> <noptr> c x video unregister ( <ptr> dev <dot> <noptr> chan num )
<cls> <noptr> dvb unregister front end ( <ptr> fe )
<cls> <noptr> sms core unregister hot plug ( <noptr> hot plug )
<cls> <noptr> adv x csi cleanup ( <ptr> tx )
<cls> <noptr> vim c unregister ( <ptr> vim c )
<cls> <noptr> igu an air disconnect ( <ptr> int f )
<cls> <noptr> v pen c deinit ( <ptr> handle )
<cls> <noptr> v levent sub dev unsubscribe ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> v l m m release ( <ptr> m m dev )
<cls> <noptr> media release ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> smi app cleanup ( <ptr> sensor )
<cls> <noptr> vs pdu un maps g ( <ptr> dev <dot> <ptr> sgt )
<cls> <noptr> iv tv io unmap ( <ptr> it v )
<cls> <noptr> red rat dev disconnect ( <ptr> int f )
<cls> <noptr> media graph walk cleanup ( <ptr> graph )
<cls> <noptr> af delic dev ( <ptr> d )
<cls> <noptr> it x tuner detach ( <ptr> adap )
<cls> <noptr> cafe shutdown ( <ptr> cam )
<cls> <noptr> usb keen e disconnect ( <ptr> int f )
<cls> <noptr> pt cleanup adapters ( <ptr> pt )
<cls> <noptr> px a camera sensor unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> sun ics iv l cleanup ( <ptr> csi )
<cls> <noptr> msm isp if unregister entities ( <ptr> isp if )
<cls> <noptr> saa alsa dma unmap ( <ptr> dev )
<cls> <noptr> video buf dma unmap ( <ptr> dev <dot> <ptr> dma )
<cls> <noptr> a uic unregister ( <ptr> dev )
<cls> <noptr> em xx v l close ( <ptr> filp )
<cls> <noptr> omap isp stat unregister entities ( <ptr> stat )
<cls> <noptr> shark unregister leds ( <ptr> shark )
<cls> <noptr> af front end detach ( <ptr> adap )
<cls> <noptr> igor plug usb disconnect ( <ptr> int f )
<cls> <noptr> snd em xx pcm close ( <ptr> sub stream )
<cls> <noptr> media dev node unregister ( <ptr> dev node )
<cls> <noptr> v dec h deinit ( <ptr> h v dec )
<cls> <noptr> dvb front end invoke release ( <ptr> fe <dot> <ptr> ptr )
<cls> <noptr> cec dev node unregister ( <ptr> adap )
<cls> <noptr> fim c clk put ( <ptr> fim c )
<cls> <noptr> i x v release ( <ptr> fe )
<cls> <noptr> omap is pcs i unregister entities ( <ptr> csi )
<cls> <noptr> dvb input detach ( <ptr> input )
<cls> <noptr> fops vcodec release ( <ptr> file )
<cls> <noptr> c ill release ( <ptr> cir buf <dot> <ptr> c i w buf )
<cls> <noptr> sms core unregister client ( <ptr> client )
<cls> <noptr> isc sub dev cleanup ( <ptr> isc )
<cls> <noptr> omap isp preview cleanup ( <ptr> isp )
<cls> <noptr> omap is pcs i phy release ( <ptr> phy )
<cls> <noptr> tt usb ir disconnect ( <ptr> int f )
<cls> <noptr> omap is pres izer cleanup ( <ptr> isp )
<cls> <noptr> delta unregister device ( <ptr> delta )
<cls> <noptr> saa encoder unregister ( <ptr> port )
<cls> <noptr> v l device disconnect ( <ptr> v l dev )
<cls> <noptr> dvb demux release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> d m dma unmap ( <ptr> dev )
<cls> <noptr> iv tv streams cleanup ( <ptr> it v )
<cls> <noptr> rain disconnect ( <ptr> ser io )
<cls> <noptr> pt cleanup front end ( <ptr> adap )
<cls> <noptr> omap isp hist cleanup ( <ptr> isp )
<cls> <noptr> v l m m buf remove by buf ( <ptr> q ctx <dot> <ptr> v buf )
<cls> <noptr> smi delic client ( <ptr> client )
<cls> <noptr> cec notifier put ( <ptr> n )
<cls> <noptr> iv tv u dma unmap ( <ptr> it v )
<cls> <noptr> ak sub dev cleanup ( <ptr> ak dev )
<cls> <noptr> vsp video pipeline put ( <ptr> pipe )
<cls> <noptr> msm v fe unregister entities ( <ptr> v fe )
<cls> <noptr> rc close ( <ptr> r dev )
<cls> <noptr> uvc video clock cleanup ( <ptr> stream )
<cls> <noptr> omap v out cleanup device ( <ptr> v out )
<cls> <noptr> node remove ( <ptr> unit )
<cls> <noptr> dvb net remove if ( <ptr> dvb net <dot> <noptr> num )
<cls> <noptr> vb v malloc dma buf ops release ( <ptr> d buf )
<cls> <noptr> dev mrc alloc release ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> fops release ( <ptr> file )
<cls> <noptr> msi i soc cleanup ( <ptr> dev )
<cls> <noptr> g scm m cleanup queue ( <ptr> ctx )
<cls> <noptr> rtl sdr cleanup queued buf s ( <ptr> dev )
<cls> <noptr> vsp histogram cleanup ( <ptr> histo )
<cls> <noptr> pt cleanup buffer ( <ptr> pt <dot> <ptr> buf )
<cls> <noptr> uvc ctrl cleanup mappings ( <ptr> dev <dot> <ptr> ctrl )
<cls> <noptr> c x streams cleanup ( <ptr> c x <dot> <noptr> unregister )
<cls> <noptr> om api sph aae wb cleanup ( <ptr> isp )
<cls> <noptr> cobalt buf cleanup ( <ptr> vb )
<cls> <noptr> isp cleanup modules ( <ptr> isp )
<cls> <noptr> vsp video cleanup pipeline ( <ptr> pipe )
<cls> <noptr> pt cleanup tables ( <ptr> pt )
<cls> <noptr> m cam vbs g buf cleanup ( <ptr> vb )
<cls> <noptr> v l async notifier cleanup ( <ptr> notifier )
<cls> <noptr> iv tvf b callback cleanup ( <ptr> dev <dot> <ptr> p )
<cls> <noptr> v dec buf cleanup ( <ptr> vb )
<cls> <noptr> is px clk cleanup ( <ptr> isp )
<cls> <noptr> sn div tv pcm capture close ( <ptr> sub stream )
<cls> <noptr> snd c x pcm capture close ( <ptr> sub stream )
<cls> <noptr> vb common vm close ( <ptr> vma )
<cls> <noptr> vbd cdma buf ops detach ( <ptr> d buf <dot> <ptr> db attach )
<cls> <noptr> vb v malloc dma buf ops detach ( <ptr> d buf <dot> <ptr> db attach )
<cls> <noptr> rtl xx u front end detach ( <ptr> adap )
<cls> <noptr> vbd mas g dma buf ops detach ( <ptr> d buf <dot> <ptr> db attach )
<cls> <noptr> fri io tuner detach ( <ptr> adap )
<cls> <noptr> vb v malloc detach dma buf ( <ptr> mem priv )
<cls> <noptr> vbd mas g detach dma buf ( <ptr> mem priv )
<cls> <noptr> pulse disconnect ( <ptr> ser io )
<cls> <noptr> venus firmware deinit ( <ptr> core )
<cls> <noptr> vp bed e initialize ( <ptr> dev <dot> <ptr> v pbe dev )
<cls> <noptr> v dec ctrl deinit ( <ptr> inst )
<cls> <noptr> v pu enc deinit ( <ptr> v pu )
<cls> <noptr> h enc deinit ( <ptr> handle )
<cls> <noptr> m spir deinit ( <ptr> budget c i )
<cls> <noptr> c xxx bulk audio deinit ( <ptr> dev )
<cls> <noptr> c xxx i soc audio deinit ( <ptr> dev )
<cls> <noptr> venc ctrl deinit ( <ptr> inst )
<cls> <noptr> gsc unregister mmdevice ( <ptr> gsc )
<cls> <noptr> fim c lite sub dev un registered ( <ptr> sd )
<cls> <noptr> smi app un registered ( <ptr> sub dev )
<cls> <noptr> c sect pfe tuner unregister front end ( <ptr> c sect pfe <dot> <ptr> fe i )
<cls> <noptr> cec unregister adapter ( <ptr> adap )
<cls> <noptr> cam if unregister media entities ( <ptr> cam if )
<cls> <noptr> saa vb i unregister ( <ptr> port )
<cls> <noptr> scm o i fun registered ( <ptr> sd )
<cls> <noptr> rv inv l unregister ( <ptr> vin )
<cls> <noptr> skb a fun registered ( <ptr> sd )
<cls> <noptr> cams sun register entities ( <ptr> cam ss )
<cls> <noptr> adv un registered ( <ptr> sd )
<cls> <noptr> c x usb medi on unregister analog ( <ptr> dvb dev )
<cls> <noptr> msm c sid unregister entity ( <ptr> c sid )
<cls> <noptr> cam if unregister video nodes ( <ptr> cam if )
<cls> <noptr> fim c lite unregister capture sub dev ( <ptr> fim c )
<cls> <noptr> dvb unregister adapter ( <ptr> adap )
<cls> <noptr> scm unregister spi driver ( <ptr> state )
<cls> <noptr> fim c capture sub dev un registered ( <ptr> sd )
<cls> <noptr> cobalt nodes unregister ( <ptr> cobalt )
<cls> <noptr> em xx unregister extension ( <ptr> ops )
<cls> <noptr> cxx xic unregister ( <ptr> bus )
<cls> <noptr> saa vb i buffers de alloc ( <ptr> port )
<cls> <noptr> de alloc channel ( <ptr> fdt v <dot> <noptr> i )
<cls> <noptr> vbd v bde alloc front ends ( <ptr> f )
<cls> <noptr> saa buffer de alloc ( <ptr> buf )
<cls> <noptr> s stop read pipe ( <ptr> dev )
<cls> <noptr> sa ago stream stop ( <ptr> go )
<cls> <noptr> cobalt pci io unmap ( <ptr> cobalt <dot> <ptr> pci dev )
<cls> <noptr> vbd cdma buf ops unmap ( <ptr> db attach <dot> <ptr> sgt <dot> <noptr> dma dir )
<cls> <noptr> vb v malloc unmap dma buf ( <ptr> mem priv )
<cls> <noptr> vbd mas g dma buf ops unmap ( <ptr> db attach <dot> <ptr> sgt <dot> <noptr> dma dir )
<cls> <noptr> vb v malloc dma buf ops unmap ( <ptr> db attach <dot> <ptr> sgt <dot> <noptr> dma dir )
<cls> <noptr> v bdc unmap dma buf ( <ptr> mem priv )
<cls> <noptr> vbd mas gun map dma buf ( <ptr> mem priv )
<cls> <noptr> pluto dma unmap ( <ptr> pluto )
<cls> <noptr> set wb con gest ed ( <ptr> con gest ed <dot> <noptr> sync )
<cls> <noptr> bd i register ( <ptr> bd i <dot> <ptr> fmt )
<cls> <noptr> wb wakeup delayed ( <ptr> wb )
<cls> <noptr> congestion wait ( <noptr> sync <dot> <noptr> timeout )
<cls> <noptr> wait iff con gest ed ( <noptr> sync <dot> <noptr> timeout )
<cls> <ptr> wb get create ( <ptr> bd i <dot> <ptr> mem cg css <dot> <noptr> gfp )
<cls> <noptr> wb mem cg offline ( <ptr> mem cg )
<cls> <noptr> wb blk cg offline ( <ptr> blk cg )
<cls> <noptr> bd i debug init ( )
<cls> <noptr> bd i debug stats show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> bd i debug stats open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> bd i debug register ( <ptr> bd i <dot> <ptr> name )
<cls> <noptr> read ahead kb show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> page )
<cls> <noptr> min ratio store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> min ratio show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> page )
<cls> <noptr> max ratio store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> max ratio show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> page )
<cls> <noptr> stable pages required show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> page )
<cls> <noptr> bd i class init ( )
<cls> <noptr> default bd i init ( )
<cls> <noptr> wb init ( <ptr> wb <dot> <ptr> bd i <dot> <noptr> blk cgi d <dot> <noptr> gfp )
<cls> <noptr> cg wb remove from bd ilist ( <ptr> wb )
<cls> <noptr> wb shutdown ( <ptr> wb )
<cls> <noptr> cg w bbd i init ( <ptr> bd i )
<cls> <noptr> cg w bbd i unregister ( <ptr> bd i )
<cls> <noptr> cg w bbd i register ( <ptr> bd i )
<cls> <noptr> cg wb init ( )
<cls> <dptr> bd i lookup rb node ( <noptr> id <dot> <dptr> parent p )
<cls> <noptr> bd i remove from list ( <ptr> bd i )
<cls> <noptr> release bd i ( <ptr> ref )
<cls> <noptr> balloon page enqueue ( <ptr> b dev info <dot> <ptr> page )
<cls> <ptr> balloon page dequeue ( <ptr> b dev info )
<cls> <noptr> balloon page list enqueue ( <ptr> b dev info <dot> <ptr> pages )
<cls> <noptr> balloon page list dequeue ( <ptr> b dev info <dot> <ptr> pages <dot> <noptr> n req pages )
<cls> <noptr> balloon page isolate ( <ptr> page <dot> <noptr> mode )
<cls> <noptr> balloon page put back ( <ptr> page )
<cls> <noptr> balloon page migrate ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> balloon page enqueue one ( <ptr> b dev info <dot> <ptr> page )
<cls> <noptr> clean cache register ops ( <ptr> ops )
<cls> <noptr> clean cache init fs ( <ptr> sb )
<cls> <noptr> clean cache init shared fs ( <ptr> sb )
<cls> <noptr> clean cache get page ( <ptr> page )
<cls> <noptr> clean cache invalidate page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> clean cache invalidate inode ( <ptr> mapping )
<cls> <noptr> clean cache invalidate fs ( <ptr> sb )
<cls> <noptr> clean cache register ops sb ( <ptr> sb <dot> <ptr> unused )
<cls> <noptr> clean cache get key ( <ptr> inode <dot> <ptr> key )
<cls> <noptr> init clean cache ( )
<cls> <noptr> cma get base ( <ptr> cma )
<cls> <noptr> cma get size ( <ptr> cma )
<cls> <ptr> cma get name ( <ptr> cma )
<cls> <noptr> cma declare contiguous ( <noptr> base <dot> <noptr> size <dot> <noptr> limit <dot> <noptr> alignment <dot> <noptr> order per bit <dot> <noptr> fixed <dot> <ptr> name <dot> <dptr> res cma )
<cls> <noptr> c main it reserved mem ( <noptr> base <dot> <noptr> size <dot> <noptr> order per bit <dot> <ptr> name <dot> <dptr> res cma )
<cls> <noptr> cma bitmap aligned mask ( <ptr> cma <dot> <noptr> align order )
<cls> <noptr> cma bitmap aligned offset ( <ptr> cma <dot> <noptr> align order )
<cls> <noptr> cma clear bitmap ( <ptr> cma <dot> <noptr> pfn <dot> <noptr> count )
<cls> <noptr> cma activate area ( <ptr> cma )
<cls> <noptr> c main it reserved areas ( )
<cls> <noptr> cma debug show areas ( <ptr> cma )
<cls> <noptr> cma debug fs get ( <ptr> data <dot> <ptr> val )
<cls> <noptr> cma debug fs fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> cma used get ( <ptr> data <dot> <ptr> val )
<cls> <noptr> cma max chunk get ( <ptr> data <dot> <ptr> val )
<cls> <noptr> cma max chunk fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> cma add to cma mem list ( <ptr> cma <dot> <ptr> mem )
<cls> <ptr> cma get entry from list ( <ptr> cma )
<cls> <noptr> cma free fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> cma alloc fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> cma debug fs add one ( <ptr> cma <dot> <ptr> root dentry )
<cls> <noptr> cma debug fs init ( )
<cls> <noptr> kas an check read ( <ptr> p <dot> <noptr> size )
<cls> <noptr> kas an check write ( <ptr> p <dot> <noptr> size )
<cls> <ptr> memcpy ( <ptr> dest <dot> <ptr> src <dot> <noptr> len )
<cls> <ptr> mem set ( <ptr> addr <dot> <noptr> c <dot> <noptr> len )
<cls> <noptr> kas an enable current ( )
<cls> <noptr> kas an disable current ( )
<cls> <noptr> kas an un poison task stack ( <ptr> task )
<cls> <noptr> kas an un poison stack above sp to ( <ptr> watermark )
<cls> <noptr> kas an cache create ( <ptr> cache <dot> <ptr> size <dot> <ptr> flags )
<cls> <ptr> kas an init slab obj ( <ptr> cache <dot> <ptr> object )
<cls> <noptr> kas an metadata size ( <ptr> cache )
<cls> <noptr> kas an release v malloc ( <noptr> start <dot> <noptr> end <dot> <noptr> free region start <dot> <noptr> free region end )
<cls> <ptr> get alloc info ( <ptr> cache <dot> <ptr> object )
<cls> <ptr> get free info ( <ptr> cache <dot> <ptr> object )
<cls> <noptr> kas an report ( <noptr> addr <dot> <noptr> size <dot> <noptr> is write <dot> <noptr> ip )
<cls> <noptr> kas an un poison task stack below ( <ptr> watermark )
<cls> <noptr> in irq entry text ( <noptr> ptr )
<cls> <noptr> save stack ( <noptr> flags )
<cls> <noptr> set track ( <ptr> track <dot> <noptr> flags )
<cls> <noptr> assign tag ( <ptr> cache <dot> <ptr> object <dot> <noptr> init <dot> <noptr> keep tag )
<cls> <noptr> shadow invalid ( <noptr> tag <dot> <noptr> shadow byte )
<cls> <noptr> shadow mapped ( <noptr> addr )
<cls> <noptr> kas an mem notifier ( <ptr> nb <dot> <noptr> action <dot> <ptr> data )
<cls> <noptr> kas an mem hot plugin it ( )
<cls> <noptr> page movable ( <ptr> page )
<cls> <noptr> set page movable ( <ptr> page <dot> <ptr> mapping )
<cls> <noptr> sysctl compaction handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> try to compact pages ( <noptr> gfp mask <dot> <noptr> order <dot> <noptr> alloc flags <dot> <ptr> ac <dot> <noptr> prio <dot> <dptr> capture )
<cls> <noptr> reset isolation suitable ( <ptr> pg dat )
<cls> <noptr> defer compaction ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> compaction deferred ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> compaction defer reset ( <ptr> zone <dot> <noptr> order <dot> <noptr> alloc success )
<cls> <noptr> compaction restarting ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> k compact d stop ( <noptr> nid )
<cls> <noptr> wakeup k compact d ( <ptr> pg dat <dot> <noptr> order <dot> <noptr> class zoneid x )
<cls> <noptr> compaction register node ( <ptr> node )
<cls> <noptr> split map pages ( <ptr> list )
<cls> <noptr> isolation suitable ( <ptr> cc <dot> <ptr> page )
<cls> <noptr> reset cached positions ( <ptr> zone )
<cls> <noptr> reset isolation pfn ( <ptr> zone <dot> <noptr> pfn <dot> <noptr> check source <dot> <noptr> check target )
<cls> <noptr> reset isolation suitable ( <ptr> zone )
<cls> <noptr> update cached migrate ( <ptr> cc <dot> <noptr> pfn )
<cls> <noptr> update page block skip ( <ptr> cc <dot> <ptr> page <dot> <noptr> pfn )
<cls> <noptr> compact unlock should abort ( <ptr> lock <dot> <noptr> flags <dot> <ptr> locked <dot> <ptr> cc )
<cls> <noptr> isolate free pages block ( <ptr> cc <dot> <ptr> start pfn <dot> <noptr> end pfn <dot> <ptr> free list <dot> <noptr> stride <dot> <noptr> strict )
<cls> <noptr> too many isolated ( <ptr> pg dat )
<cls> <noptr> isolate migrate pages block ( <ptr> cc <dot> <noptr> low pfn <dot> <noptr> end pfn <dot> <noptr> isolate mode )
<cls> <noptr> suitable migration source ( <ptr> cc <dot> <ptr> page )
<cls> <noptr> suitable migration target ( <ptr> cc <dot> <ptr> page )
<cls> <noptr> free lists can limit ( <ptr> cc )
<cls> <noptr> fast isolate around ( <ptr> cc <dot> <noptr> pfn <dot> <noptr> nr isolated )
<cls> <noptr> isolate migrate pages ( <ptr> cc )
<cls> <noptr> is via compact memory ( <noptr> order )
<cls> <noptr> compact finished ( <ptr> cc )
<cls> <noptr> compaction suitable ( <ptr> zone <dot> <noptr> order <dot> <noptr> alloc flags <dot> <noptr> class zoneid x <dot> <noptr> w mark target )
<cls> <noptr> compact zone ( <ptr> cc <dot> <ptr> cap c )
<cls> <noptr> compact node ( <noptr> nid )
<cls> <noptr> compact nodes ( )
<cls> <noptr> k compact d work requested ( <ptr> pg dat )
<cls> <noptr> k compact d node suitable ( <ptr> pg dat )
<cls> <noptr> k compact d dowork ( <ptr> pg dat )
<cls> <noptr> k compact d cpu online ( <noptr> cpu )
<cls> <noptr> k compact d init ( )
<cls> <noptr> dump page ( <ptr> page <dot> <ptr> reason )
<cls> <noptr> dump page ( <ptr> page <dot> <ptr> reason )
<cls> <noptr> pageinit poison ( <ptr> page <dot> <noptr> size )
<cls> <noptr> setup vm debug ( <ptr> str )
<cls> <noptr> page ref set ( <ptr> page <dot> <noptr> v )
<cls> <noptr> page ref mod ( <ptr> page <dot> <noptr> v )
<cls> <noptr> page ref mod and return ( <ptr> page <dot> <noptr> v <dot> <noptr> ret )
<cls> <noptr> page ref mod unless ( <ptr> page <dot> <noptr> v <dot> <noptr> u )
<cls> <noptr> page ref freeze ( <ptr> page <dot> <noptr> v <dot> <noptr> ret )
<cls> <noptr> page ref un freeze ( <ptr> page <dot> <noptr> v )
<cls> <noptr> show pools ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pool initialise page ( <ptr> pool <dot> <ptr> page )
<cls> <ptr> pool find page ( <ptr> pool <dot> <noptr> dma )
<cls> <ptr> early io remap ( <noptr> phys addr <dot> <noptr> size )
<cls> <ptr> early mem remap ( <noptr> phys addr <dot> <noptr> size )
<cls> <ptr> early mem rem apro ( <noptr> phys addr <dot> <noptr> size )
<cls> <ptr> early mem remap prot ( <noptr> phys addr <dot> <noptr> size <dot> <noptr> prot val )
<cls> <noptr> early io unmap ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> early me munmap ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> early io remap setup ( )
<cls> <noptr> early io remap reset ( )
<cls> <noptr> copy from early mem ( <ptr> dest <dot> <noptr> src <dot> <noptr> size )
<cls> <noptr> early io remap debug setup ( <ptr> str )
<cls> <noptr> early mem rem app g prot adjust ( <noptr> phys addr <dot> <noptr> size <dot> <noptr> prot )
<cls> <ptr> early io remap ( <noptr> phys addr <dot> <noptr> size <dot> <noptr> prot )
<cls> <noptr> generic f advise ( <ptr> file <dot> <noptr> offset <dot> <noptr> len <dot> <noptr> advice )
<cls> <noptr> k sys f advise ( <noptr> fd <dot> <noptr> offset <dot> <noptr> len <dot> <noptr> advice )
<cls> <noptr> x sys f advise ( <ptr> regs )
<cls> <noptr> se sys f advise ( <noptr> fd <dot> <noptr> offset <dot> <noptr> len <dot> <noptr> advice )
<cls> <noptr> do sys f advise ( <noptr> fd <dot> <noptr> offset <dot> <noptr> len <dot> <noptr> advice )
<cls> <noptr> i asy sf advise ( <ptr> regs )
<cls> <noptr> x sys f advise ( <ptr> regs )
<cls> <noptr> se sys f advise ( <noptr> fd <dot> <noptr> offset <dot> <noptr> len <dot> <noptr> advice )
<cls> <noptr> do sys f advise ( <noptr> fd <dot> <noptr> offset <dot> <noptr> len <dot> <noptr> advice )
<cls> <noptr> i asy sf advise ( <ptr> regs )
<cls> <noptr> should fails lab ( <ptr> s <dot> <noptr> gfp flags )
<cls> <noptr> setup fails lab ( <ptr> str )
<cls> <noptr> fails lab debug fs init ( )
<cls> <noptr> page cache write begin ( <ptr> file <dot> <ptr> mapping <dot> <noptr> pos <dot> <noptr> len <dot> <noptr> flags <dot> <dptr> page p <dot> <dptr> fs data )
<cls> <noptr> page cache write end ( <ptr> file <dot> <ptr> mapping <dot> <noptr> pos <dot> <noptr> len <dot> <noptr> copied <dot> <ptr> page <dot> <ptr> fs data )
<cls> <noptr> file map f data write ( <ptr> mapping )
<cls> <noptr> file map flush ( <ptr> mapping )
<cls> <noptr> file map f data wait range ( <ptr> mapping <dot> <noptr> start byte <dot> <noptr> end byte )
<cls> <noptr> file map f data wait range keep errors ( <ptr> mapping <dot> <noptr> start byte <dot> <noptr> end byte )
<cls> <noptr> file map range has page ( <ptr> mapping <dot> <noptr> start byte <dot> <noptr> end byte )
<cls> <noptr> file map write and wait range ( <ptr> mapping <dot> <noptr> l start <dot> <noptr> lend )
<cls> <noptr> file map f data write range ( <ptr> mapping <dot> <noptr> start <dot> <noptr> end <dot> <noptr> sync mode )
<cls> <noptr> file map f data write range ( <ptr> mapping <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> file map check errors ( <ptr> mapping )
<cls> <noptr> file map set wb err ( <ptr> mapping <dot> <noptr> err )
<cls> <noptr> file f data wait range ( <ptr> file <dot> <noptr> start byte <dot> <noptr> end byte )
<cls> <noptr> file check and advance wb err ( <ptr> file )
<cls> <noptr> file write and wait range ( <ptr> file <dot> <noptr> l start <dot> <noptr> lend )
<cls> <noptr> generic file mmap ( <ptr> file <dot> <ptr> vma )
<cls> <noptr> generic file read only mmap ( <ptr> file <dot> <ptr> vma )
<cls> <noptr> generic write checks ( <ptr> ioc b <dot> <ptr> from )
<cls> <noptr> generic remap checks ( <ptr> file in <dot> <noptr> pos in <dot> <ptr> file out <dot> <noptr> pos out <dot> <ptr> req count <dot> <noptr> remap flags )
<cls> <noptr> generic file rw checks ( <ptr> file in <dot> <ptr> file out )
<cls> <noptr> generic copy file checks ( <ptr> file in <dot> <noptr> pos in <dot> <ptr> file out <dot> <noptr> pos out <dot> <ptr> req count <dot> <noptr> flags )
<cls> <noptr> generic file read iter ( <ptr> ioc b <dot> <ptr> iter )
<cls> <noptr> generic file write iter ( <ptr> ioc b <dot> <ptr> from )
<cls> <noptr> generic file write iter ( <ptr> ioc b <dot> <ptr> from )
<cls> <noptr> dio warn stale page cache ( <ptr> filp )
<cls> <noptr> file map map pages ( <ptr> vm f <dot> <noptr> start pg off <dot> <noptr> end pg off )
<cls> <noptr> file map page mk write ( <ptr> vm f )
<cls> <noptr> page cache prev miss ( <ptr> mapping <dot> <noptr> index <dot> <noptr> max scan )
<cls> <ptr> find get entry ( <ptr> mapping <dot> <noptr> offset )
<cls> <ptr> find lock entry ( <ptr> mapping <dot> <noptr> offset )
<cls> <noptr> find get entries ( <ptr> mapping <dot> <noptr> start <dot> <noptr> nr entries <dot> <dptr> entries <dot> <ptr> indices )
<cls> <noptr> find get pages range ( <ptr> mapping <dot> <ptr> start <dot> <noptr> end <dot> <noptr> nr pages <dot> <dptr> pages )
<cls> <noptr> find get pages contig ( <ptr> mapping <dot> <noptr> index <dot> <noptr> nr pages <dot> <dptr> pages )
<cls> <noptr> find get pages range tag ( <ptr> mapping <dot> <ptr> index <dot> <noptr> end <dot> <noptr> tag <dot> <noptr> nr pages <dot> <dptr> pages )
<cls> <ptr> grab cache page write begin ( <ptr> mapping <dot> <noptr> index <dot> <noptr> flags )
<cls> <ptr> read cache page ( <ptr> mapping <dot> <noptr> index <dot> <ptr> filler <dot> <ptr> data )
<cls> <ptr> read cache page gfp ( <ptr> mapping <dot> <noptr> index <dot> <noptr> gfp )
<cls> <noptr> lock page ( <ptr> page )
<cls> <noptr> lock page kill able ( <ptr> page )
<cls> <noptr> lock page or retry ( <ptr> page <dot> <ptr> m m <dot> <noptr> flags )
<cls> <noptr> unlock page ( <ptr> page )
<cls> <noptr> wait on page bit kill able ( <ptr> page <dot> <noptr> bit nr )
<cls> <noptr> end page write back ( <ptr> page )
<cls> <noptr> add page wait queue ( <ptr> page <dot> <ptr> waiter )
<cls> <noptr> add to page cache locked ( <ptr> page <dot> <ptr> mapping <dot> <noptr> offset <dot> <noptr> gfp mask )
<cls> <noptr> add to page cache lru ( <ptr> page <dot> <ptr> mapping <dot> <noptr> offset <dot> <noptr> gfp mask )
<cls> <noptr> un account page cache page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> page cache delete batch ( <ptr> mapping <dot> <ptr> p vec )
<cls> <noptr> file map check and keep errors ( <ptr> mapping )
<cls> <noptr> file map f data write ( <ptr> mapping <dot> <noptr> sync mode )
<cls> <noptr> file map f data wait range ( <ptr> mapping <dot> <noptr> start byte <dot> <noptr> end byte )
<cls> <noptr> mapping needs write back ( <ptr> mapping )
<cls> <noptr> add to page cache locked ( <ptr> page <dot> <ptr> mapping <dot> <noptr> offset <dot> <noptr> gfp mask <dot> <dptr> shadow p )
<cls> <ptr> page wait queue ( <ptr> page )
<cls> <noptr> wake page function ( <ptr> wait <dot> <noptr> mode <dot> <noptr> sync <dot> <ptr> arg )
<cls> <noptr> wakeup page bit ( <ptr> page <dot> <noptr> bit nr )
<cls> <noptr> wakeup page ( <ptr> page <dot> <noptr> bit )
<cls> <noptr> wait on page bit common ( <ptr> q <dot> <ptr> page <dot> <noptr> bit nr <dot> <noptr> state <dot> <noptr> behavior )
<cls> <noptr> shrink read ahead size eio ( <ptr> filp <dot> <ptr> ra )
<cls> <noptr> generic file buffered read ( <ptr> ioc b <dot> <ptr> iter <dot> <noptr> written )
<cls> <noptr> lock page maybe drop mmap ( <ptr> vm f <dot> <ptr> page <dot> <dptr> f pin )
<cls> <ptr> do sync mmap read ahead ( <ptr> vm f )
<cls> <ptr> do async mmap read ahead ( <ptr> vm f <dot> <ptr> page )
<cls> <ptr> do read cache page ( <ptr> mapping <dot> <noptr> index <dot> <ptr> filler <dot> <ptr> data <dot> <noptr> gfp )
<cls> <noptr> generic write check limits ( <ptr> file <dot> <noptr> pos <dot> <ptr> count )
<cls> <noptr> frame vector top fns ( <ptr> vec )
<cls> <noptr> front swap register ops ( <ptr> ops )
<cls> <noptr> front swap shrink ( <noptr> target pages )
<cls> <noptr> front swap curr pages ( )
<cls> <noptr> front swap write through ( <noptr> enable )
<cls> <noptr> front swap t mem exclusive gets ( <noptr> enable )
<cls> <noptr> front swap test ( <ptr> sis <dot> <noptr> offset )
<cls> <noptr> front swap init ( <noptr> type <dot> <ptr> map )
<cls> <noptr> front swap load ( <ptr> page )
<cls> <noptr> front swap invalidate page ( <noptr> type <dot> <noptr> offset )
<cls> <noptr> front swap invalidate area ( <noptr> type )
<cls> <noptr> inc front swap loads ( )
<cls> <noptr> inc front swap succ stores ( )
<cls> <noptr> inc front swap failed stores ( )
<cls> <noptr> front swap set ( <ptr> sis <dot> <noptr> offset )
<cls> <noptr> front swap clear ( <ptr> sis <dot> <noptr> offset )
<cls> <noptr> front swap un use pages ( <noptr> total <dot> <ptr> unused <dot> <ptr> swap id )
<cls> <noptr> init front swap ( )
<cls> <noptr> kas an cache shrink ( <ptr> cache )
<cls> <noptr> check memory region ( <noptr> addr <dot> <noptr> size <dot> <noptr> write <dot> <noptr> re tip )
<cls> <noptr> asan register globals ( <ptr> globals <dot> <noptr> size )
<cls> <noptr> asan unregister globals ( <ptr> globals <dot> <noptr> size )
<cls> <noptr> asan load n ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> asan store n ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> asan handle no return ( )
<cls> <noptr> asan load ( <noptr> addr )
<cls> <noptr> asan store ( <noptr> addr )
<cls> <noptr> asan load ( <noptr> addr )
<cls> <noptr> asan store ( <noptr> addr )
<cls> <noptr> asan store ( <noptr> addr )
<cls> <noptr> asan load ( <noptr> addr )
<cls> <noptr> asan load ( <noptr> addr )
<cls> <noptr> asan store ( <noptr> addr )
<cls> <noptr> asan load no abort ( <noptr> )
<cls> <noptr> asan store no abort ( <noptr> )
<cls> <noptr> asan load no abort ( <noptr> )
<cls> <noptr> asan load no abort ( <noptr> )
<cls> <noptr> asan store no abort ( <noptr> )
<cls> <noptr> asan load no abort ( <noptr> )
<cls> <noptr> asan load no abort ( <noptr> )
<cls> <noptr> asan set shadow ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> asan set shadow f ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> asan set shadow f ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> asan set shadow f ( <ptr> addr <dot> <noptr> size )
<cls> <noptr> memory is poison ed ( <noptr> addr )
<cls> <noptr> memory is poison ed ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> memory is poison ed ( <noptr> addr )
<cls> <noptr> bytes is nonzero ( <ptr> start <dot> <noptr> size )
<cls> <noptr> memory is nonzero ( <ptr> start <dot> <ptr> end )
<cls> <noptr> memory is poison edn ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> memory is poison ed ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> register global ( <ptr> global )
<cls> <noptr> asan store nno abort ( <noptr> <dot> <noptr> )
<cls> <ptr> get shadow bug type ( <ptr> info )
<cls> <ptr> get wild bug type ( <ptr> info )
<cls> <noptr> asan report load no abort ( <noptr> addr )
<cls> <noptr> asan report load no abort ( <noptr> addr )
<cls> <noptr> asan report load no abort ( <noptr> addr )
<cls> <noptr> asan report load no abort ( <noptr> addr )
<cls> <noptr> asan report store no abort ( <noptr> addr )
<cls> <noptr> asan report store no abort ( <noptr> addr )
<cls> <noptr> asan report store no abort ( <noptr> addr )
<cls> <noptr> asan report load nno abort ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> asan report store nno abort ( <noptr> addr <dot> <noptr> size )
<cls> <noptr> fixup user fault ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> address <dot> <noptr> fault flags <dot> <ptr> unlocked )
<cls> <noptr> get user pages remote ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> nr pages <dot> <noptr> gup flags <dot> <dptr> pages <dot> <dptr> v mas <dot> <ptr> locked )
<cls> <noptr> get user pages ( <noptr> start <dot> <noptr> nr pages <dot> <noptr> gup flags <dot> <dptr> pages <dot> <dptr> v mas )
<cls> <noptr> get user pages locked ( <noptr> start <dot> <noptr> nr pages <dot> <noptr> gup flags <dot> <dptr> pages <dot> <ptr> locked )
<cls> <noptr> get user pages unlocked ( <noptr> start <dot> <noptr> nr pages <dot> <dptr> pages <dot> <noptr> gup flags )
<cls> <ptr> get dump page ( <noptr> addr )
<cls> <noptr> m m populate ( <noptr> start <dot> <noptr> len <dot> <noptr> ignore errors )
<cls> <noptr> populate vma page range ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <ptr> non blocking )
<cls> <ptr> follow page pte ( <ptr> vma <dot> <noptr> address <dot> <ptr> pmd <dot> <noptr> flags <dot> <dptr> pg map )
<cls> <ptr> follow pmd mask ( <ptr> vma <dot> <noptr> address <dot> <ptr> p udp <dot> <noptr> flags <dot> <ptr> ctx )
<cls> <ptr> follow pd mask ( <ptr> vma <dot> <noptr> address <dot> <ptr> p gdp <dot> <noptr> flags <dot> <ptr> ctx )
<cls> <ptr> follow page mask ( <ptr> vma <dot> <noptr> address <dot> <noptr> flags <dot> <ptr> ctx )
<cls> <noptr> get gate page ( <ptr> m m <dot> <noptr> address <dot> <noptr> gup flags <dot> <dptr> vma <dot> <dptr> page )
<cls> <noptr> get user pages ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> nr pages <dot> <noptr> gup flags <dot> <dptr> pages <dot> <dptr> v mas <dot> <ptr> non blocking )
<cls> <noptr> get user pages locked ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> nr pages <dot> <dptr> pages <dot> <dptr> v mas <dot> <ptr> locked <dot> <noptr> flags )
<cls> <noptr> check and migrate cma pages ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> nr pages <dot> <dptr> pages <dot> <dptr> v mas <dot> <noptr> gup flags )
<cls> <noptr> gup long term locked ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> nr pages <dot> <dptr> pages <dot> <dptr> v mas <dot> <noptr> gup flags )
<cls> <noptr> gup get pte ( <ptr> pte p )
<cls> <ptr> try get compound head ( <ptr> page <dot> <noptr> refs )
<cls> <noptr> gup pte range ( <noptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup device huge pmd ( <noptr> orig <dot> <ptr> pmd p <dot> <noptr> addr <dot> <noptr> end <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup device huge pud ( <noptr> orig <dot> <ptr> p udp <dot> <noptr> addr <dot> <noptr> end <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup huge pd ( <noptr> huge pd <dot> <noptr> addr <dot> <noptr> pd shift <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup huge pmd ( <noptr> orig <dot> <ptr> pmd p <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup huge pud ( <noptr> orig <dot> <ptr> p udp <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup huge pgd ( <noptr> orig <dot> <ptr> p gdp <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup pmd range ( <noptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup pud range ( <noptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup pd range ( <noptr> pgd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup pgd range ( <noptr> addr <dot> <noptr> end <dot> <noptr> flags <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> gup long term unlocked ( <noptr> start <dot> <noptr> nr pages <dot> <noptr> gup flags <dot> <dptr> pages )
<cls> <noptr> gup benchmark ioctl ( <noptr> cmd <dot> <ptr> gup )
<cls> <noptr> gup benchmark init ( )
<cls> <noptr> hmm range fault ( <ptr> range <dot> <noptr> flags )
<cls> <noptr> hmm vma do fault ( <ptr> walk <dot> <noptr> addr <dot> <noptr> write fault <dot> <ptr> pfn )
<cls> <noptr> hmm p fns fill ( <noptr> addr <dot> <noptr> end <dot> <ptr> range <dot> <noptr> value )
<cls> <noptr> hmm pte need fault ( <ptr> hmm vma walk <dot> <noptr> p fns <dot> <noptr> cpu flags <dot> <ptr> fault <dot> <ptr> write fault )
<cls> <noptr> hmm range need fault ( <ptr> hmm vma walk <dot> <ptr> p fns <dot> <noptr> n pages <dot> <noptr> cpu flags <dot> <ptr> fault <dot> <ptr> write fault )
<cls> <noptr> hmm vma walk hole ( <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> hmm vma handle pmd ( <ptr> walk <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> p fns <dot> <noptr> pmd )
<cls> <noptr> hmm vma handle pte ( <ptr> walk <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> pmd p <dot> <ptr> pte p <dot> <ptr> pfn )
<cls> <noptr> hmm vma walk pmd ( <ptr> pmd p <dot> <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> pud to hmm pfn flags ( <ptr> range <dot> <noptr> pud )
<cls> <noptr> hmm vma walk pud ( <ptr> p udp <dot> <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> hmm vma walk huge tlb entry ( <ptr> pte <dot> <noptr> h mask <dot> <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> hmm vma walk test ( <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> page huge ( <ptr> page )
<cls> <noptr> page head huge ( <ptr> page head )
<cls> <noptr> page huge active ( <ptr> page )
<cls> <noptr> linear huge page index ( <ptr> vma <dot> <noptr> address )
<cls> <noptr> reset vma res v huge pages ( <ptr> vma )
<cls> <noptr> huge tlb sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> huge tlb over commit handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> huge tlb mem policy sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> copy huge tlb page range ( <ptr> dst <dot> <ptr> src <dot> <ptr> vma )
<cls> <noptr> follow huge tlb page ( <ptr> m m <dot> <ptr> vma <dot> <dptr> pages <dot> <dptr> v mas <dot> <ptr> position <dot> <ptr> nr pages <dot> <noptr> i <dot> <noptr> flags <dot> <ptr> non blocking )
<cls> <noptr> unmap huge page range ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <ptr> ref page )
<cls> <noptr> huge tlb report mem info ( <ptr> m )
<cls> <noptr> huge tlb show mem info ( )
<cls> <noptr> huge tlb total pages ( )
<cls> <noptr> huge tlb fault ( <ptr> m m <dot> <ptr> vma <dot> <noptr> address <dot> <noptr> flags )
<cls> <noptr> huge tlb m copy atomic pte ( <ptr> dst m m <dot> <ptr> dst pte <dot> <ptr> dst vma <dot> <noptr> dst addr <dot> <noptr> src addr <dot> <dptr> page p )
<cls> <noptr> huge tlb reserve pages ( <ptr> inode <dot> <noptr> from <dot> <noptr> to <dot> <ptr> vma <dot> <noptr> vm flags )
<cls> <noptr> isolate huge page ( <ptr> page <dot> <ptr> list )
<cls> <noptr> move huge tlb state ( <ptr> old page <dot> <ptr> new page <dot> <noptr> reason )
<cls> <noptr> huge tlb fix reserve counts ( <ptr> inode )
<cls> <noptr> huge tlb fault mutex hash ( <ptr> mapping <dot> <noptr> idx )
<cls> <ptr> huge pmd share ( <ptr> m m <dot> <noptr> addr <dot> <ptr> pud )
<cls> <noptr> huge pmd un share ( <ptr> m m <dot> <ptr> addr <dot> <ptr> pte p )
<cls> <noptr> adjust range if pmd sharing possible ( <ptr> vma <dot> <ptr> start <dot> <ptr> end )
<cls> <ptr> follow huge addr ( <ptr> m m <dot> <noptr> address <dot> <noptr> write )
<cls> <ptr> follow huge pd ( <ptr> vma <dot> <noptr> address <dot> <noptr> h pd <dot> <noptr> flags <dot> <noptr> pd shift )
<cls> <ptr> follow huge pmd ( <ptr> m m <dot> <noptr> address <dot> <ptr> pmd <dot> <noptr> flags )
<cls> <ptr> follow huge pud ( <ptr> m m <dot> <noptr> address <dot> <ptr> pud <dot> <noptr> flags )
<cls> <noptr> huge tlb change protection ( <ptr> vma <dot> <noptr> address <dot> <noptr> end <dot> <noptr> new prot )
<cls> <noptr> is huge tlb entry migration ( <noptr> pte )
<cls> <noptr> huge tlb bad size ( )
<cls> <noptr> huge tlb add h state ( <noptr> order )
<cls> <ptr> size to h state ( <noptr> size )
<cls> <noptr> vma kernel page size ( <ptr> vma )
<cls> <noptr> base page index ( <ptr> page )
<cls> <noptr> huge tlb report usage ( <ptr> m <dot> <ptr> m m )
<cls> <ptr> sub pool inode ( <ptr> inode )
<cls> <noptr> add reservation inrange ( <ptr> res v <dot> <noptr> f <dot> <noptr> t <dot> <noptr> count only )
<cls> <noptr> region abort ( <ptr> res v <dot> <noptr> f <dot> <noptr> t )
<cls> <noptr> get vma private data ( <ptr> vma )
<cls> <noptr> set vma private data ( <ptr> vma <dot> <noptr> value )
<cls> <ptr> inode res v map ( <ptr> inode )
<cls> <noptr> is vma res v set ( <ptr> vma <dot> <noptr> flag )
<cls> <noptr> vma has reserves ( <ptr> vma <dot> <noptr> chg )
<cls> <noptr> enqueue huge page ( <ptr> h <dot> <ptr> page )
<cls> <ptr> dequeue huge page node exact ( <ptr> h <dot> <noptr> nid )
<cls> <ptr> dequeue huge page node mask ( <ptr> h <dot> <noptr> gfp mask <dot> <noptr> nid <dot> <ptr> n mask )
<cls> <noptr> h tlb alloc mask ( <ptr> h )
<cls> <ptr> dequeue huge page vma ( <ptr> h <dot> <ptr> vma <dot> <noptr> address <dot> <noptr> avoid reserve <dot> <noptr> chg )
<cls> <noptr> next node allowed ( <noptr> nid <dot> <ptr> nodes allowed )
<cls> <noptr> get valid node allowed ( <noptr> nid <dot> <ptr> nodes allowed )
<cls> <noptr> h state next node to alloc ( <ptr> h <dot> <ptr> nodes allowed )
<cls> <noptr> h state next node to free ( <ptr> h <dot> <ptr> nodes allowed )
<cls> <noptr> prep new huge page ( <ptr> h <dot> <ptr> page <dot> <noptr> nid )
<cls> <noptr> prep compound gigantic page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> set page huge active ( <ptr> page )
<cls> <noptr> clear page huge active ( <ptr> page )
<cls> <noptr> page huge temporary ( <ptr> page )
<cls> <noptr> set page huge temporary ( <ptr> page )
<cls> <noptr> clear page huge temporary ( <ptr> page )
<cls> <noptr> gather sur plus pages ( <ptr> h <dot> <noptr> delta )
<cls> <noptr> return unused sur plus pages ( <ptr> h <dot> <noptr> unused res v pages )
<cls> <noptr> vma reservation common ( <ptr> h <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> mode )
<cls> <noptr> vma needs reservation ( <ptr> h <dot> <ptr> vma <dot> <noptr> addr )
<cls> <noptr> vma commit reservation ( <ptr> h <dot> <ptr> vma <dot> <noptr> addr )
<cls> <noptr> vma end reservation ( <ptr> h <dot> <ptr> vma <dot> <noptr> addr )
<cls> <noptr> vma add reservation ( <ptr> h <dot> <ptr> vma <dot> <noptr> addr )
<cls> <noptr> restore reserve onerror ( <ptr> h <dot> <ptr> vma <dot> <noptr> address <dot> <ptr> page )
<cls> <noptr> prep compound huge page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> gather boot mem pre alloc ( )
<cls> <noptr> huge tlb init h states ( )
<cls> <noptr> report huge pages ( )
<cls> <noptr> adjust pool sur plus ( <ptr> h <dot> <ptr> nodes allowed <dot> <noptr> delta )
<cls> <noptr> set max huge pages ( <ptr> h <dot> <noptr> count <dot> <noptr> nid <dot> <ptr> nodes allowed )
<cls> <ptr> k obj to node h state ( <ptr> k obj <dot> <ptr> nid p )
<cls> <ptr> k obj to h state ( <ptr> k obj <dot> <ptr> nid p )
<cls> <noptr> nr huge pages show common ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> nr huge pages store common ( <noptr> obey mem policy <dot> <ptr> h <dot> <noptr> nid <dot> <noptr> count <dot> <noptr> len )
<cls> <noptr> nr huge pages store common ( <noptr> obey mem policy <dot> <ptr> k obj <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> nr huge pages show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> nr huge pages store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> nr huge pages mem policy show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> nr huge pages mem policy store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> nr over commit huge pages show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> nr over commit huge pages store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> free huge pages show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> res v huge pages show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sur plus huge pages show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> huge tlb sysfs init ( )
<cls> <noptr> huge tlb nr pages setup ( <ptr> s )
<cls> <noptr> huge tlb default setup ( <ptr> s )
<cls> <noptr> cpu set mem snr ( <ptr> array )
<cls> <noptr> huge tlb sysctl handler common ( <noptr> obey mem policy <dot> <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> huge tlb v mop open ( <ptr> vma )
<cls> <noptr> huge tlb v mop close ( <ptr> vma )
<cls> <noptr> huge tlb v mop page size ( <ptr> vma )
<cls> <noptr> huge tlb v mop fault ( <ptr> vm f )
<cls> <noptr> make huge pte ( <ptr> vma <dot> <ptr> page <dot> <noptr> writable )
<cls> <noptr> set huge pte p writable ( <ptr> vma <dot> <noptr> address <dot> <ptr> pte p )
<cls> <noptr> is huge tlb entry hw poison ed ( <noptr> pte )
<cls> <noptr> unmap ref private ( <ptr> m m <dot> <ptr> vma <dot> <ptr> page <dot> <noptr> address )
<cls> <noptr> huge tlb cow ( <ptr> m m <dot> <ptr> vma <dot> <noptr> address <dot> <ptr> pte p <dot> <ptr> page cache page <dot> <ptr> pt l )
<cls> <noptr> huge tlb fs page cache present ( <ptr> h <dot> <ptr> vma <dot> <noptr> address )
<cls> <noptr> huge tlb no page ( <ptr> m m <dot> <ptr> vma <dot> <ptr> mapping <dot> <noptr> idx <dot> <noptr> address <dot> <ptr> pte p <dot> <noptr> flags )
<cls> <noptr> vma shareable ( <ptr> vma <dot> <noptr> addr )
<cls> <noptr> huge tlb cgroup commit charge ( <noptr> idx <dot> <noptr> nr pages <dot> <ptr> h cg <dot> <ptr> page )
<cls> <noptr> huge tlb cgroup un charge page ( <noptr> idx <dot> <noptr> nr pages <dot> <ptr> page )
<cls> <noptr> huge tlb cgroup un charge cgroup ( <noptr> idx <dot> <noptr> nr pages <dot> <ptr> h cg )
<cls> <noptr> huge tlb cgroup file init ( )
<cls> <noptr> huge tlb cgroup migrate ( <ptr> oldh page <dot> <ptr> new h page )
<cls> <ptr> huge tlb cgroup from css ( <ptr> s )
<cls> <noptr> huge tlb cgroup is root ( <ptr> h cg )
<cls> <ptr> parent huge tlb cgroup ( <ptr> h cg )
<cls> <noptr> huge tlb cgroup init ( <ptr> h cgroup <dot> <ptr> parent h cgroup )
<cls> <noptr> huge tlb cgroup css offline ( <ptr> css )
<cls> <noptr> huge tlb cgroup read u ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> huge tlb cgroup write ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> huge tlb cgroup reset ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <ptr> mem fmt ( <ptr> buf <dot> <noptr> size <dot> <noptr> h size )
<cls> <noptr> huge tlb cgroup file init ( <noptr> idx )
<cls> <noptr> do huge pmd anonymous page ( <ptr> vm f )
<cls> <noptr> copy huge pmd ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> dst pmd <dot> <ptr> src pmd <dot> <noptr> addr <dot> <ptr> vma )
<cls> <noptr> huge pmd set accessed ( <ptr> vm f <dot> <noptr> orig pmd )
<cls> <noptr> copy huge pud ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> dst pud <dot> <ptr> src pud <dot> <noptr> addr <dot> <ptr> vma )
<cls> <noptr> do huge pmd wp page ( <ptr> vm f <dot> <noptr> orig pmd )
<cls> <ptr> follow trans huge pmd ( <ptr> vma <dot> <noptr> addr <dot> <ptr> pmd <dot> <noptr> flags )
<cls> <noptr> zap huge pmd ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pmd <dot> <noptr> addr )
<cls> <noptr> zap huge pud ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pud <dot> <noptr> addr )
<cls> <noptr> move huge pmd ( <ptr> vma <dot> <noptr> old addr <dot> <noptr> new addr <dot> <noptr> old end <dot> <ptr> old pmd <dot> <ptr> new pmd )
<cls> <noptr> change huge pmd ( <ptr> vma <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> new prot <dot> <noptr> prot numa )
<cls> <noptr> vm f insert pfn pmd ( <ptr> vm f <dot> <noptr> pfn <dot> <noptr> write )
<cls> <noptr> single huge page flag store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> flag )
<cls> <noptr> single huge page flags how ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> flag )
<cls> <noptr> transparent huge page enabled ( <ptr> vma )
<cls> <noptr> thp get unmapped area ( <ptr> filp <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> pg off <dot> <noptr> flags )
<cls> <noptr> prep trans huge page ( <ptr> page )
<cls> <noptr> can split huge page ( <ptr> page <dot> <ptr> p extra pins )
<cls> <noptr> split huge page tolist ( <ptr> page <dot> <ptr> list )
<cls> <noptr> split huge pmd ( <ptr> vma <dot> <ptr> pmd <dot> <noptr> address <dot> <noptr> freeze <dot> <ptr> page )
<cls> <noptr> split huge pmd address ( <ptr> vma <dot> <noptr> address <dot> <noptr> freeze <dot> <ptr> page )
<cls> <noptr> split huge pud ( <ptr> vma <dot> <ptr> pud <dot> <noptr> address )
<cls> <noptr> vma adjust trans huge ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <noptr> adjust next )
<cls> <ptr> pmd trans huge lock ( <ptr> pmd <dot> <ptr> vma )
<cls> <ptr> pud trans huge lock ( <ptr> pud <dot> <ptr> vma )
<cls> <ptr> follow dev map pmd ( <ptr> vma <dot> <noptr> addr <dot> <ptr> pmd <dot> <noptr> flags <dot> <dptr> pg map )
<cls> <noptr> do huge pmd numa page ( <ptr> vm f <dot> <noptr> pmd )
<cls> <noptr> m m put huge zero page ( <ptr> m m )
<cls> <noptr> set pmd migration entry ( <ptr> pvm w <dot> <ptr> page )
<cls> <noptr> remove migration pmd ( <ptr> pvm w <dot> <ptr> new )
<cls> <noptr> maybe pmd mk write ( <noptr> pmd <dot> <ptr> vma )
<cls> <noptr> shrink huge zero page count ( <ptr> shrink <dot> <ptr> sc )
<cls> <noptr> shrink huge zero pages can ( <ptr> shrink <dot> <ptr> sc )
<cls> <noptr> enabled show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> enabled store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> def rag show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> def rag store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> use zero page show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> use zero page store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> h page pmd size show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> debug cow show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> debug cow store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> huge pageinit sysfs ( <dptr> huge page k obj )
<cls> <noptr> huge pageinit ( )
<cls> <noptr> setup transparent huge page ( <ptr> str )
<cls> <noptr> thp get unmapped area ( <ptr> filp <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> off <dot> <noptr> flags <dot> <noptr> size )
<cls> <noptr> do huge pmd anonymous page ( <ptr> vm f <dot> <ptr> page <dot> <noptr> gfp )
<cls> <noptr> alloc huge page direct gfp mask ( <ptr> vma )
<cls> <noptr> set huge zero page ( <noptr> pg table <dot> <ptr> m m <dot> <ptr> vma <dot> <noptr> h addr <dot> <ptr> pmd <dot> <ptr> zero page )
<cls> <noptr> insert pfn pmd ( <ptr> vma <dot> <noptr> addr <dot> <ptr> pmd <dot> <noptr> pfn <dot> <noptr> prot <dot> <noptr> write <dot> <noptr> pg table )
<cls> <noptr> maybe pud mk write ( <noptr> pud <dot> <ptr> vma )
<cls> <noptr> insert pfn pud ( <ptr> vma <dot> <noptr> addr <dot> <ptr> pud <dot> <noptr> pfn <dot> <noptr> prot <dot> <noptr> write )
<cls> <noptr> touch pud ( <ptr> vma <dot> <noptr> addr <dot> <ptr> pud <dot> <noptr> flags )
<cls> <noptr> do huge pmd wp page fallback ( <ptr> vm f <dot> <noptr> orig pmd <dot> <ptr> page )
<cls> <noptr> enclosed rectangle ( <ptr> a <dot> <ptr> b )
<cls> <noptr> split huge pud locked ( <ptr> vma <dot> <ptr> pud <dot> <noptr> h addr )
<cls> <noptr> split huge pmd locked ( <ptr> vma <dot> <ptr> pmd <dot> <noptr> h addr <dot> <noptr> freeze )
<cls> <noptr> unmap page ( <ptr> page )
<cls> <noptr> remap page ( <ptr> page )
<cls> <noptr> split huge page tail ( <ptr> head <dot> <noptr> tail <dot> <ptr> lru vec <dot> <ptr> list )
<cls> <noptr> split huge page ( <ptr> page <dot> <ptr> list <dot> <noptr> end <dot> <noptr> flags )
<cls> <noptr> deferred split count ( <ptr> shrink <dot> <ptr> sc )
<cls> <noptr> deferred splits can ( <ptr> shrink <dot> <ptr> sc )
<cls> <noptr> split huge pages set ( <ptr> data <dot> <noptr> val )
<cls> <noptr> split huge pages fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> split huge pages debug fs ( )
<cls> <noptr> hw poison inject ( <ptr> data <dot> <noptr> val )
<cls> <noptr> hw poison un poison ( <ptr> data <dot> <noptr> val )
<cls> <noptr> hw poison fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> un poison fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> pfn inject exit ( )
<cls> <noptr> pfn inject init ( )
<cls> <noptr> kas an populate early shadow ( <ptr> shadow start <dot> <ptr> shadow end )
<cls> <noptr> kas an pud table ( <noptr> pd )
<cls> <noptr> kas an pmd table ( <noptr> pud )
<cls> <noptr> kas an pte table ( <noptr> pmd )
<cls> <noptr> kas a nearly shadow page entry ( <noptr> pte )
<cls> <noptr> zero pte populate ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> zero pmd populate ( <ptr> pud <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> zero pud populate ( <ptr> pd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> zero pd populate ( <ptr> pgd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> kas an remove pd table ( <ptr> pd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> vma interval tree insert ( <ptr> node <dot> <ptr> root )
<cls> <noptr> vma interval tree insert after ( <ptr> node <dot> <ptr> prev <dot> <ptr> root )
<cls> <ptr> vma interval tree iter first ( <ptr> root <dot> <noptr> start <dot> <noptr> last )
<cls> <ptr> vma interval tree iter next ( <ptr> node <dot> <noptr> start <dot> <noptr> last )
<cls> <noptr> anon vma interval tree insert ( <ptr> node <dot> <ptr> root )
<cls> <ptr> anon vma interval tree iter next ( <ptr> node <dot> <noptr> first <dot> <noptr> last )
<cls> <noptr> anon vma interval tree verify ( <ptr> node )
<cls> <noptr> vma start pg off ( <ptr> v )
<cls> <noptr> vma last pg off ( <ptr> v )
<cls> <noptr> vma interval tree augment propagate ( <ptr> rb <dot> <ptr> stop )
<cls> <noptr> vma interval tree augment rotate ( <ptr> r bold <dot> <ptr> rb new )
<cls> <ptr> vma interval tree sub tree search ( <ptr> node <dot> <noptr> start <dot> <noptr> last )
<cls> <noptr> avc start pg off ( <ptr> avc )
<cls> <noptr> avc last pg off ( <ptr> avc )
<cls> <noptr> anon vma interval tree augment compute max ( <ptr> node <dot> <noptr> exit )
<cls> <noptr> anon vma interval tree augment propagate ( <ptr> rb <dot> <ptr> stop )
<cls> <noptr> anon vma interval tree augment copy ( <ptr> r bold <dot> <ptr> rb new )
<cls> <noptr> anon vma interval tree augment rotate ( <ptr> r bold <dot> <ptr> rb new )
<cls> <noptr> anon vma interval tree insert ( <ptr> node <dot> <ptr> root )
<cls> <noptr> anon vma interval tree remove ( <ptr> node <dot> <ptr> root )
<cls> <ptr> anon vma interval tree iter first ( <ptr> root <dot> <noptr> start <dot> <noptr> last )
<cls> <ptr> anon vma interval tree iter next ( <ptr> node <dot> <noptr> start <dot> <noptr> last )
<cls> <noptr> k huge paged init ( )
<cls> <noptr> start stop k huge paged ( )
<cls> <noptr> k huge paged enter ( <ptr> m m )
<cls> <noptr> k huge paged enter vma merge ( <ptr> vma <dot> <noptr> vm flags )
<cls> <noptr> collapse pte mapped thp ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> scan sleep millisec s show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> scan sleep millisec s store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> alloc sleep millisec s show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pages to scan store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> pages collapsed show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> full scans show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> k huge page dde frag show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> k huge page dde frag store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> k huge paged max p tes swap show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> k huge paged max p tes swap store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> k huge paged test exit ( <ptr> m m )
<cls> <noptr> huge page vma check ( <ptr> vma <dot> <noptr> vm flags )
<cls> <noptr> collapse huge page isolate ( <ptr> vma <dot> <noptr> address <dot> <ptr> pte )
<cls> <noptr> collapse huge page copy ( <ptr> pte <dot> <ptr> page <dot> <ptr> vma <dot> <noptr> address <dot> <ptr> pt l )
<cls> <noptr> k huge paged alloc sleep ( )
<cls> <noptr> alloc huge page k huge paged gfp mask ( )
<cls> <noptr> huge page vma revalidate ( <ptr> m m <dot> <noptr> address <dot> <dptr> v map )
<cls> <noptr> k huge paged scan pmd ( <ptr> m m <dot> <ptr> vma <dot> <noptr> address <dot> <dptr> h page )
<cls> <noptr> k huge paged add pte mapped thp ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> k huge paged collapse pte mapped th ps ( <ptr> mms lot )
<cls> <noptr> retract page tables ( <ptr> mapping <dot> <noptr> pg off )
<cls> <noptr> collapse file ( <ptr> m m <dot> <ptr> file <dot> <noptr> start <dot> <dptr> h page <dot> <noptr> node )
<cls> <noptr> k huge paged scan file ( <ptr> m m <dot> <ptr> file <dot> <noptr> start <dot> <dptr> h page )
<cls> <noptr> k huge paged scan mms lot ( <noptr> pages <dot> <dptr> h page )
<cls> <noptr> k huge paged wait event ( )
<cls> <noptr> k huge page ddos can ( )
<cls> <noptr> k huge paged should wakeup ( )
<cls> <noptr> k huge paged wait work ( )
<cls> <noptr> k huge paged ( <ptr> none )
<cls> <noptr> set recommended min free kbytes ( )
<cls> <noptr> init module ( )
<cls> <noptr> init test ( )
<cls> <noptr> k mem leak test exit ( )
<cls> <noptr> exit test ( )
<cls> <noptr> k mem leak init ( )
<cls> <noptr> k mem leak not leak ( <ptr> ptr )
<cls> <noptr> k mem leak ignore ( <ptr> ptr )
<cls> <noptr> k mem leaks can area ( <ptr> ptr <dot> <noptr> size <dot> <noptr> gfp )
<cls> <noptr> k mem leak nos can ( <ptr> ptr )
<cls> <noptr> k mem leak not leak phys ( <noptr> phys )
<cls> <noptr> k mem leak ignore phys ( <noptr> phys )
<cls> <noptr> k mem leak disable ( )
<cls> <noptr> warn or seq hex dump ( <ptr> seq <dot> <noptr> prefix type <dot> <noptr> row size <dot> <noptr> group size <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> ascii )
<cls> <noptr> hex dump object ( <ptr> seq <dot> <ptr> object )
<cls> <noptr> print un referenced ( <ptr> seq <dot> <ptr> object )
<cls> <noptr> dump object info ( <ptr> object )
<cls> <noptr> get object ( <ptr> object )
<cls> <ptr> find and get object ( <noptr> ptr <dot> <noptr> alias )
<cls> <noptr> remove object ( <ptr> object )
<cls> <ptr> find and remove object ( <noptr> ptr <dot> <noptr> alias )
<cls> <noptr> save stack trace ( <ptr> trace )
<cls> <noptr> paint it ( <ptr> object <dot> <noptr> color )
<cls> <noptr> paint ptr ( <noptr> ptr <dot> <noptr> color )
<cls> <noptr> make gray object ( <noptr> ptr )
<cls> <noptr> adds can area ( <noptr> ptr <dot> <noptr> size <dot> <noptr> gfp )
<cls> <noptr> object set excess ref ( <noptr> ptr <dot> <noptr> excess ref )
<cls> <noptr> scan should stop ( )
<cls> <noptr> scan block ( <ptr> start <dot> <ptr> end <dot> <ptr> scanned )
<cls> <noptr> scan large block ( <ptr> start <dot> <ptr> end )
<cls> <noptr> scan object ( <ptr> object )
<cls> <noptr> scan gray list ( )
<cls> <noptr> k mem leaks can thread ( <ptr> arg )
<cls> <noptr> starts can thread ( )
<cls> <ptr> k mem leak seq next ( <ptr> seq <dot> <ptr> v <dot> <ptr> pos )
<cls> <noptr> k mem leak seq stop ( <ptr> seq <dot> <ptr> v )
<cls> <noptr> k mem leak seq show ( <ptr> seq <dot> <ptr> v )
<cls> <noptr> dump str object info ( <ptr> str )
<cls> <noptr> k mem leak clear ( )
<cls> <noptr> k mem leak write ( <ptr> file <dot> <ptr> user buf <dot> <noptr> size <dot> <ptr> p pos )
<cls> <noptr> k mem leak boot config ( <ptr> str )
<cls> <noptr> k smm advise ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <noptr> advice <dot> <ptr> vm flags )
<cls> <noptr> ks m enter ( <ptr> m m )
<cls> <noptr> r map walk ks m ( <ptr> page <dot> <ptr> rw c )
<cls> <noptr> ks m migrate page ( <ptr> new page <dot> <ptr> old page )
<cls> <noptr> reuse ks m page ( <ptr> page <dot> <ptr> vma <dot> <noptr> address )
<cls> <noptr> wait while off lining ( )
<cls> <noptr> k sms lab init ( )
<cls> <noptr> is stable node chain ( <ptr> chain )
<cls> <noptr> is stable node dup ( <ptr> dup )
<cls> <noptr> stable node chain add dup ( <ptr> dup <dot> <ptr> chain )
<cls> <noptr> ks m test exit ( <ptr> m m )
<cls> <noptr> break ks m ( <ptr> vma <dot> <noptr> addr )
<cls> <ptr> find merge able vma ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> get k pfn nid ( <noptr> k pfn )
<cls> <ptr> get ks m page ( <ptr> stable node <dot> <noptr> flags )
<cls> <noptr> un merge ks m pages ( <ptr> vma <dot> <noptr> start <dot> <noptr> end )
<cls> <ptr> pages table node ( <ptr> page )
<cls> <noptr> set pages table node ( <ptr> page <dot> <ptr> stable node )
<cls> <noptr> calc checksum ( <ptr> page )
<cls> <noptr> write protect page ( <ptr> vma <dot> <ptr> page <dot> <ptr> orig pte )
<cls> <noptr> replace page ( <ptr> vma <dot> <ptr> page <dot> <ptr> k page <dot> <noptr> orig pte )
<cls> <noptr> try to merge one page ( <ptr> vma <dot> <ptr> page <dot> <ptr> k page )
<cls> <noptr> try to merge with ks m page ( <ptr> r map item <dot> <ptr> page <dot> <ptr> k page )
<cls> <ptr> try to merge two pages ( <ptr> r map item <dot> <ptr> page <dot> <ptr> tree r map item <dot> <ptr> tree page )
<cls> <noptr> is page sharing candidate ( <ptr> stable node <dot> <noptr> offset )
<cls> <noptr> is page sharing candidate ( <ptr> stable node )
<cls> <ptr> stable node chain ( <dptr> stable node dup <dot> <dptr> stable node <dot> <ptr> root <dot> <noptr> prune stale stable nodes )
<cls> <ptr> chain prune ( <dptr> snd <dot> <dptr> sn <dot> <ptr> root )
<cls> <ptr> chain ( <dptr> snd <dot> <ptr> sn <dot> <ptr> root )
<cls> <ptr> stable tree insert ( <ptr> k page )
<cls> <noptr> stable tree append ( <ptr> r map item <dot> <ptr> stable node <dot> <noptr> max page sharing bypass )
<cls> <noptr> cmp and merge page ( <ptr> page <dot> <ptr> r map item )
<cls> <noptr> ks m do scan ( <noptr> scan n pages )
<cls> <noptr> k smd should run ( )
<cls> <noptr> k sms can thread ( <ptr> nothing )
<cls> <noptr> ks m checks table tree ( <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> ks m memory callback ( <ptr> self <dot> <noptr> action <dot> <ptr> arg )
<cls> <noptr> sleep millisec s show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sleep millisec s store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> run store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> merge across nodes show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> merge across nodes store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> use zero pages show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> use zero pages store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> max page sharing show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> max page sharing store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> pages shared show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pages sharing show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pages volatile show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> stable node dups show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> stable node chains show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> stable node chains prune millisec s show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> stable node chains prune millisec s store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> ks m init ( )
<cls> <noptr> list lru init ( <ptr> lru <dot> <noptr> mem cg aware <dot> <ptr> key <dot> <ptr> shrink er )
<cls> <noptr> mem cg update all list l rus ( <noptr> new size )
<cls> <noptr> list lru del ( <ptr> lru <dot> <ptr> item )
<cls> <noptr> list lru count one ( <ptr> lru <dot> <noptr> nid <dot> <ptr> mem cg )
<cls> <noptr> list lru count node ( <ptr> lru <dot> <noptr> nid )
<cls> <noptr> list lru isolate ( <ptr> list <dot> <ptr> item )
<cls> <noptr> list lru isolate move ( <ptr> list <dot> <ptr> item <dot> <ptr> head )
<cls> <noptr> list lru walk one ( <ptr> lru <dot> <noptr> nid <dot> <ptr> mem cg <dot> <noptr> isolate <dot> <ptr> cb arg <dot> <ptr> nr to walk )
<cls> <noptr> list lru walk one irq ( <ptr> lru <dot> <noptr> nid <dot> <ptr> mem cg <dot> <noptr> isolate <dot> <ptr> cb arg <dot> <ptr> nr to walk )
<cls> <noptr> list lru walk node ( <ptr> lru <dot> <noptr> nid <dot> <noptr> isolate <dot> <ptr> cb arg <dot> <ptr> nr to walk )
<cls> <noptr> list lru register ( <ptr> lru )
<cls> <noptr> lru shrink erid ( <ptr> lru )
<cls> <noptr> list lru mem cg aware ( <ptr> lru )
<cls> <ptr> list lru from mem cg idx ( <ptr> n lru <dot> <noptr> idx )
<cls> <ptr> mem cgroup from k mem ( <ptr> ptr )
<cls> <ptr> list lru from k mem ( <ptr> n lru <dot> <ptr> ptr <dot> <dptr> mem cg ptr )
<cls> <noptr> list lru walk one ( <ptr> n lru <dot> <noptr> mem cg idx <dot> <noptr> isolate <dot> <ptr> cb arg <dot> <ptr> nr to walk )
<cls> <noptr> init one lru ( <ptr> l )
<cls> <noptr> mem cg update list lru node ( <ptr> n lru <dot> <noptr> old size <dot> <noptr> new size )
<cls> <noptr> mem cg init list lru ( <ptr> lru <dot> <noptr> mem cg aware )
<cls> <noptr> mem cg update list lru ( <ptr> lru <dot> <noptr> old size <dot> <noptr> new size )
<cls> <noptr> mem cg drain list lru node ( <ptr> lru <dot> <noptr> nid <dot> <noptr> src idx <dot> <ptr> dst mem cg )
<cls> <noptr> mem cg drain list lru ( <ptr> lru <dot> <noptr> src idx <dot> <ptr> dst mem cg )
<cls> <noptr> probe kernel read ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe kernel read strict ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe kernel read ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe user read ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe user read ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe kernel write ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe kernel write ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe user write ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> strncpy from unsafe ( <ptr> dst <dot> <ptr> unsafe addr <dot> <noptr> count )
<cls> <noptr> strncpy from unsafe ( <ptr> dst <dot> <ptr> unsafe addr <dot> <noptr> count )
<cls> <noptr> strncpy from unsafe user ( <ptr> dst <dot> <ptr> unsafe addr <dot> <noptr> count )
<cls> <noptr> strn len unsafe user ( <ptr> unsafe addr <dot> <noptr> count )
<cls> <noptr> probe read common ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> probe write common ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> m advise need mmap write ( <noptr> behavior )
<cls> <noptr> m advise behavior ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start <dot> <noptr> end <dot> <noptr> behavior )
<cls> <noptr> swap in walk pmd entry ( <ptr> pmd <dot> <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> force shm swap in read ahead ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <ptr> mapping )
<cls> <noptr> m advise will need ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> m advise cold or page out pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> m advise cold page range ( <ptr> tlb <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> m advise cold ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start addr <dot> <noptr> end addr )
<cls> <noptr> can do page out ( <ptr> vma )
<cls> <noptr> m advise page out ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start addr <dot> <noptr> end addr )
<cls> <noptr> m advise free single vma ( <ptr> vma <dot> <noptr> start addr <dot> <noptr> end addr )
<cls> <noptr> m advise dont need single vma ( <ptr> vma <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> m advise dont need free ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start <dot> <noptr> end <dot> <noptr> behavior )
<cls> <noptr> m advise remove ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> m advise inject error ( <noptr> behavior <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> m advise vma ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start <dot> <noptr> end <dot> <noptr> behavior )
<cls> <noptr> x sys m advise ( <ptr> regs )
<cls> <noptr> se sys m advise ( <noptr> start <dot> <noptr> len in <dot> <noptr> behavior )
<cls> <noptr> do sys m advise ( <noptr> start <dot> <noptr> len in <dot> <noptr> behavior )
<cls> <noptr> i asy sm advise ( <ptr> regs )
<cls> <noptr> clean record shared mapping range ( <ptr> mapping <dot> <noptr> first index <dot> <noptr> nr <dot> <noptr> bitmap pg off <dot> <ptr> bitmap <dot> <ptr> start <dot> <ptr> end )
<cls> <noptr> wp shared mapping range ( <ptr> mapping <dot> <noptr> first index <dot> <noptr> nr )
<cls> <noptr> wp pte ( <ptr> pte <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> clean record pte ( <ptr> pte <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> wp clean pud entry ( <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> wp clean test walk ( <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> mem block discard ( )
<cls> <noptr> mem block find inrange ( <noptr> start <dot> <noptr> end <dot> <noptr> size <dot> <noptr> align )
<cls> <noptr> mem block allow resize ( )
<cls> <noptr> mem block add node ( <noptr> base <dot> <noptr> size <dot> <noptr> nid )
<cls> <noptr> mem block add ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block remove ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block reserve ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block trim memory ( <noptr> align )
<cls> <noptr> mem block overlaps region ( <ptr> type <dot> <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block mark hot plug ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block clear hot plug ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block mark mirror ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block clear no map ( <noptr> base <dot> <noptr> size )
<cls> <noptr> reset node managed pages ( <ptr> pg dat )
<cls> <noptr> reset all zones managed pages ( )
<cls> <noptr> mem block add range ( <ptr> type <dot> <noptr> base <dot> <noptr> size <dot> <noptr> nid <dot> <noptr> flags )
<cls> <noptr> next mem range ( <ptr> idx <dot> <noptr> nid <dot> <noptr> flags <dot> <ptr> type a <dot> <ptr> type b <dot> <ptr> out start <dot> <ptr> out end <dot> <ptr> out nid )
<cls> <noptr> next reserved mem region ( <ptr> idx <dot> <ptr> out start <dot> <ptr> out end )
<cls> <noptr> mem block search pfn nid ( <noptr> pfn <dot> <ptr> start pfn <dot> <ptr> end pfn )
<cls> <noptr> next mem pfn range ( <ptr> idx <dot> <noptr> nid <dot> <ptr> out start pfn <dot> <ptr> out end pfn <dot> <ptr> out nid )
<cls> <noptr> next mem pfn range in zone ( <ptr> idx <dot> <ptr> zone <dot> <ptr> outs pfn <dot> <ptr> oute pfn )
<cls> <noptr> mem block set node ( <noptr> base <dot> <noptr> size <dot> <ptr> type <dot> <noptr> nid )
<cls> <noptr> mem block phys mem size ( )
<cls> <noptr> mem block reserved size ( )
<cls> <noptr> mem block mem size ( <noptr> limit pfn )
<cls> <noptr> mem block startof dram ( )
<cls> <noptr> mem block enforce memory limit ( <noptr> limit )
<cls> <noptr> mem block mem limit remove map ( <noptr> limit )
<cls> <noptr> mem block is memory ( <noptr> addr )
<cls> <noptr> mem block is map memory ( <noptr> addr )
<cls> <noptr> mem block is region memory ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block is reserved ( <noptr> addr )
<cls> <noptr> mem block is region reserved ( <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block dump all ( )
<cls> <noptr> mem block set current limit ( <noptr> limit )
<cls> <noptr> mem block get current limit ( )
<cls> <noptr> choose mem block flags ( )
<cls> <noptr> mem block cap size ( <noptr> base <dot> <ptr> size )
<cls> <noptr> mem block find range bottom up ( <noptr> start <dot> <noptr> end <dot> <noptr> size <dot> <noptr> align <dot> <noptr> nid <dot> <noptr> flags )
<cls> <noptr> mem block find inrange node ( <noptr> size <dot> <noptr> align <dot> <noptr> start <dot> <noptr> end <dot> <noptr> nid <dot> <noptr> flags )
<cls> <noptr> mem block remove region ( <ptr> type <dot> <noptr> r )
<cls> <noptr> mem block double array ( <ptr> type <dot> <noptr> new area start <dot> <noptr> new area size )
<cls> <noptr> mem block merge regions ( <ptr> type )
<cls> <noptr> mem block isolate range ( <ptr> type <dot> <noptr> base <dot> <noptr> size <dot> <ptr> start rgn <dot> <ptr> end rgn )
<cls> <noptr> mem block remove range ( <ptr> type <dot> <noptr> base <dot> <noptr> size )
<cls> <noptr> mem block set clr flag ( <noptr> base <dot> <noptr> size <dot> <noptr> set <dot> <noptr> flag )
<cls> <noptr> find max addr ( <noptr> limit )
<cls> <noptr> mem block search ( <ptr> type <dot> <noptr> addr )
<cls> <noptr> early mem block ( <ptr> p )
<cls> <ptr> mem cg to vm pressure ( <ptr> mem cg )
<cls> <ptr> vm pressure to css ( <ptr> v mpr )
<cls> <noptr> mem cgroup protected ( <ptr> root <dot> <ptr> mem cg )
<cls> <noptr> mem cgroup try charge ( <ptr> page <dot> <ptr> m m <dot> <noptr> gfp mask <dot> <dptr> mem c gp <dot> <noptr> compound )
<cls> <noptr> mem cgroup try charge delay ( <ptr> page <dot> <ptr> m m <dot> <noptr> gfp mask <dot> <dptr> mem c gp <dot> <noptr> compound )
<cls> <noptr> mem cgroup cancel charge ( <ptr> page <dot> <ptr> mem cg <dot> <noptr> compound )
<cls> <noptr> mem cgroup un charge ( <ptr> page )
<cls> <noptr> mem cgroup un charge list ( <ptr> page list )
<cls> <noptr> mem cgroup migrate ( <ptr> old page <dot> <ptr> new page )
<cls> <ptr> mem cgroup from task ( <ptr> p )
<cls> <ptr> get mem cgroup from m m ( <ptr> m m )
<cls> <ptr> get mem cgroup from page ( <ptr> page )
<cls> <ptr> mem cgroup iter ( <ptr> root <dot> <ptr> prev <dot> <ptr> reclaim )
<cls> <noptr> mem cgroup iter break ( <ptr> root <dot> <ptr> prev )
<cls> <noptr> mem c groups can tasks ( <ptr> mem cg <dot> <ptr> fn <dot> <ptr> arg )
<cls> <ptr> mem cgroup from id ( <noptr> id )
<cls> <ptr> mem cgroup css from page ( <ptr> page )
<cls> <noptr> page cgroup ino ( <ptr> page )
<cls> <noptr> mem cgroup update lru size ( <ptr> lru vec <dot> <noptr> lru <dot> <noptr> zid <dot> <noptr> nr pages )
<cls> <noptr> mem cgroup handle over high ( )
<cls> <noptr> mem cgroup get max ( <ptr> mem cg )
<cls> <noptr> mem cgroup size ( <ptr> mem cg )
<cls> <noptr> mem cgroup print oom context ( <ptr> mem cg <dot> <ptr> p )
<cls> <noptr> mem cgroup print oom mem info ( <ptr> mem cg )
<cls> <noptr> mem cgroup oom synchronize ( <noptr> handle )
<cls> <ptr> mem cgroup get oom group ( <ptr> victim <dot> <ptr> oom domain )
<cls> <noptr> mem cgroup print oom group ( <ptr> mem cg )
<cls> <ptr> lock page mem cg ( <ptr> page )
<cls> <noptr> unlock page mem cg ( <ptr> mem cg )
<cls> <noptr> unlock page mem cg ( <ptr> page )
<cls> <noptr> mod mem cg state ( <ptr> mem cg <dot> <noptr> idx <dot> <noptr> val )
<cls> <noptr> mod lru vec state ( <ptr> lru vec <dot> <noptr> idx <dot> <noptr> val )
<cls> <noptr> mod lru vec slab state ( <ptr> p <dot> <noptr> idx <dot> <noptr> val )
<cls> <noptr> mem cgroup soft limit reclaim ( <ptr> pg dat <dot> <noptr> order <dot> <noptr> gfp mask <dot> <ptr> total scanned )
<cls> <noptr> count mem cg events ( <ptr> mem cg <dot> <noptr> idx <dot> <noptr> count )
<cls> <noptr> mem cgroup split huge fixup ( <ptr> head )
<cls> <ptr> mem cgroup wb domain ( <ptr> wb )
<cls> <noptr> mem cgroup wb stats ( <ptr> wb <dot> <ptr> p file pages <dot> <ptr> phead room <dot> <ptr> p dirty <dot> <ptr> p write back )
<cls> <noptr> mem cgroup track foreign dirty slow path ( <ptr> page <dot> <ptr> wb )
<cls> <noptr> mem cgroup flush foreign ( <ptr> wb )
<cls> <noptr> mem cgroup charges k mem ( <ptr> mem cg <dot> <noptr> nr pages )
<cls> <noptr> mem cgroup un charges k mem ( <ptr> mem cg <dot> <noptr> nr pages )
<cls> <noptr> mem cg expand shrink er maps ( <noptr> newid )
<cls> <noptr> mem cg set shrink er bit ( <ptr> mem cg <dot> <noptr> nid <dot> <noptr> shrink erid )
<cls> <ptr> mem cg k mem get cache ( <ptr> cache p )
<cls> <noptr> mem cg k mem charge ( <ptr> page <dot> <noptr> gfp <dot> <noptr> order )
<cls> <noptr> mem cg k mem un charge ( <ptr> page <dot> <noptr> order )
<cls> <noptr> mem cg k mem charge mem cg ( <ptr> page <dot> <noptr> gfp <dot> <noptr> order <dot> <ptr> mem cg )
<cls> <noptr> mem cg k mem un charge mem cg ( <ptr> mem cg <dot> <noptr> nr pages )
<cls> <noptr> mem cg get cache ids ( )
<cls> <noptr> mem cg put cache ids ( )
<cls> <noptr> mem cgroup swap out ( <ptr> page <dot> <noptr> entry )
<cls> <noptr> mem cgroup try charge swap ( <ptr> page <dot> <noptr> entry )
<cls> <noptr> mem cgroup un charge swap ( <noptr> entry <dot> <noptr> nr pages )
<cls> <noptr> mem cgroup get nr swap pages ( <ptr> mem cg )
<cls> <noptr> mem cgroup swap full ( <ptr> page )
<cls> <noptr> dome msw account ( )
<cls> <noptr> mem cgroup threshold ( <ptr> mem cg )
<cls> <noptr> mem cgroup oom notify ( <ptr> mem cg )
<cls> <noptr> should force charge ( )
<cls> <ptr> mem cgroup page node info ( <ptr> mem cg <dot> <ptr> page )
<cls> <ptr> soft limit tree node ( <noptr> nid )
<cls> <ptr> soft limit tree from page ( <ptr> page )
<cls> <noptr> mem cgroup insert exceeded ( <ptr> m z <dot> <ptr> mct z <dot> <noptr> new usage in excess )
<cls> <noptr> mem cgroup remove exceeded ( <ptr> m z <dot> <ptr> mct z )
<cls> <noptr> mem cgroup remove exceeded ( <ptr> m z <dot> <ptr> mct z )
<cls> <noptr> soft limit excess ( <ptr> mem cg )
<cls> <noptr> mem cgroup update tree ( <ptr> mem cg <dot> <ptr> page )
<cls> <noptr> mem cgroup remove from trees ( <ptr> mem cg )
<cls> <ptr> mem cgroup largest soft limit node ( <ptr> mct z )
<cls> <ptr> mem cgroup largest soft limit node ( <ptr> mct z )
<cls> <noptr> mem cg events ( <ptr> mem cg <dot> <noptr> event )
<cls> <noptr> mem cg events local ( <ptr> mem cg <dot> <noptr> event )
<cls> <noptr> mem cgroup event rate limit ( <ptr> mem cg <dot> <noptr> target )
<cls> <noptr> mem cg check events ( <ptr> mem cg <dot> <ptr> page )
<cls> <noptr> invalidate reclaim iterators ( <ptr> from <dot> <ptr> dead mem cg )
<cls> <noptr> invalidate reclaim iterators ( <ptr> dead mem cg )
<cls> <noptr> mem cgroup margin ( <ptr> mem cg )
<cls> <noptr> mem cgroup under move ( <ptr> mem cg )
<cls> <ptr> memory stat format ( <ptr> mem cg )
<cls> <noptr> mem cgroup outofmemory ( <ptr> mem cg <dot> <noptr> gfp mask <dot> <noptr> order )
<cls> <noptr> mem cgroup soft reclaim ( <ptr> root mem cg <dot> <ptr> pg dat <dot> <noptr> gfp mask <dot> <ptr> total scanned )
<cls> <noptr> mem cgroup oom unlock ( <ptr> mem cg )
<cls> <noptr> mem cgroup mark under oom ( <ptr> mem cg )
<cls> <noptr> mem cgroup un mark under oom ( <ptr> mem cg )
<cls> <noptr> mem c goo m wake function ( <ptr> wait <dot> <noptr> mode <dot> <noptr> sync <dot> <ptr> arg )
<cls> <noptr> mem c goo m recover ( <ptr> mem cg )
<cls> <noptr> mem cgroup oom ( <ptr> mem cg <dot> <noptr> mask <dot> <noptr> order )
<cls> <noptr> consume stock ( <ptr> mem cg <dot> <noptr> nr pages )
<cls> <noptr> drain stock ( <ptr> stock )
<cls> <noptr> drain local stock ( <ptr> dummy )
<cls> <noptr> refill stock ( <ptr> mem cg <dot> <noptr> nr pages )
<cls> <noptr> drain all stock ( <ptr> root mem cg )
<cls> <noptr> mem cg hot plug cpu dead ( <noptr> cpu )
<cls> <noptr> try charge ( <ptr> mem cg <dot> <noptr> gfp mask <dot> <noptr> nr pages )
<cls> <noptr> cancel charge ( <ptr> mem cg <dot> <noptr> nr pages )
<cls> <noptr> lock page lru ( <ptr> page <dot> <ptr> isolated )
<cls> <noptr> commit charge ( <ptr> page <dot> <ptr> mem cg <dot> <noptr> lru care )
<cls> <noptr> mem cg k mem bypass ( )
<cls> <noptr> mem cgroup move swap account ( <noptr> entry <dot> <ptr> from <dot> <ptr> to )
<cls> <noptr> mem cg has children ( <ptr> mem cg )
<cls> <noptr> mem cgroup hierarchy read ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> mem cgroup hierarchy write ( <ptr> css <dot> <ptr> cft <dot> <noptr> val )
<cls> <noptr> mem cgroup usage ( <ptr> mem cg <dot> <noptr> swap )
<cls> <noptr> mem cgroup read u ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> mem cg flush per cpu vm stats ( <ptr> mem cg )
<cls> <noptr> mem cg update k mem max ( <ptr> mem cg <dot> <noptr> max )
<cls> <noptr> mem cg update tcp max ( <ptr> mem cg <dot> <noptr> max )
<cls> <noptr> mem cgroup reset ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> mem cgroup move charge read ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> mem cgroup move charge write ( <ptr> css <dot> <ptr> cft <dot> <noptr> val )
<cls> <noptr> mem cgroup node nr lru pages ( <ptr> mem cg <dot> <noptr> nid <dot> <noptr> lru mask )
<cls> <noptr> mem cgroup nr lru pages ( <ptr> mem cg <dot> <noptr> lru mask )
<cls> <noptr> mem cg stats how ( <ptr> m <dot> <ptr> v )
<cls> <noptr> mem cgroup swapp iness read ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> mem cgroup swapp iness write ( <ptr> css <dot> <ptr> cft <dot> <noptr> val )
<cls> <noptr> mem cgroup threshold ( <ptr> mem cg <dot> <noptr> swap )
<cls> <noptr> compare thresholds ( <ptr> a <dot> <ptr> b )
<cls> <noptr> mem cgroup usage register event ( <ptr> mem cg <dot> <ptr> event fd <dot> <ptr> args <dot> <noptr> type )
<cls> <noptr> mem cgroup usage register event ( <ptr> mem cg <dot> <ptr> event fd <dot> <ptr> args )
<cls> <noptr> mem swc group usage register event ( <ptr> mem cg <dot> <ptr> event fd <dot> <ptr> args )
<cls> <noptr> mem cgroup usage unregister event ( <ptr> mem cg <dot> <ptr> event fd <dot> <noptr> type )
<cls> <noptr> mem cgroup usage unregister event ( <ptr> mem cg <dot> <ptr> event fd )
<cls> <noptr> mem swc group usage unregister event ( <ptr> mem cg <dot> <ptr> event fd )
<cls> <noptr> mem cgroup oom unregister event ( <ptr> mem cg <dot> <ptr> event fd )
<cls> <noptr> mem cgroup oom control read ( <ptr> sf <dot> <ptr> v )
<cls> <noptr> mem cgroup oom control write ( <ptr> css <dot> <ptr> cft <dot> <noptr> val )
<cls> <noptr> mem cg wb domain init ( <ptr> mem cg <dot> <noptr> gfp )
<cls> <noptr> mem cg wb domain size changed ( <ptr> mem cg )
<cls> <noptr> mem cg exact page state ( <ptr> mem cg <dot> <noptr> idx )
<cls> <noptr> mem cgevent p table queue proc ( <ptr> file <dot> <ptr> wq h <dot> <ptr> pt )
<cls> <noptr> alloc mem cgroup per node info ( <ptr> mem cg <dot> <noptr> node )
<cls> <noptr> mem cgroup css released ( <ptr> css )
<cls> <noptr> mem cgroup css reset ( <ptr> css )
<cls> <noptr> mem cgroup do pre charge ( <noptr> count )
<cls> <ptr> m c handle present pte ( <ptr> vma <dot> <noptr> addr <dot> <noptr> p tent )
<cls> <noptr> get m c tgt type ( <ptr> vma <dot> <noptr> addr <dot> <noptr> p tent <dot> <ptr> target )
<cls> <noptr> get m c tgt type thp ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pmd <dot> <ptr> target )
<cls> <noptr> mem cgroup count pre charge pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> mem cgroup pre charge m c ( <ptr> m m )
<cls> <noptr> mem cgroup clear m c ( )
<cls> <noptr> mem cgroup clear m c ( )
<cls> <noptr> mem cgroup cancel attach ( <ptr> t set )
<cls> <noptr> mem cgroup move charge pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> mem cgroup move task ( )
<cls> <noptr> mem cgroup bind ( <ptr> root css )
<cls> <noptr> seq puts mem c gt unable ( <ptr> m <dot> <noptr> value )
<cls> <noptr> memory current read ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> memory min show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> memory low show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> memory low write ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> memory high write ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> memory max write ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> memory events show ( <ptr> m <dot> <ptr> events )
<cls> <noptr> memory events show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> memory events local show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> memory stats how ( <ptr> m <dot> <ptr> v )
<cls> <noptr> memory oom group show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> memory oom group write ( <ptr> of <dot> <ptr> buf <dot> <noptr> nbytes <dot> <noptr> off )
<cls> <noptr> un charge gather clear ( <ptr> ug )
<cls> <noptr> un charge batch ( <ptr> ug )
<cls> <noptr> un charge page ( <ptr> page <dot> <ptr> ug )
<cls> <noptr> un charge list ( <ptr> page list )
<cls> <noptr> cgroup memory ( <ptr> s )
<cls> <noptr> mem cgroup init ( )
<cls> <ptr> mem c groupid get online ( <ptr> mem cg )
<cls> <noptr> enable swap account ( <ptr> s )
<cls> <noptr> swap current read ( <ptr> css <dot> <ptr> cft )
<cls> <noptr> swap max show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> swap events show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> mem cgroup swap init ( )
<cls> <noptr> mem fd fcntl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> mem fd tag pins ( <ptr> x as )
<cls> <ptr> mem fd files e als ptr ( <ptr> file )
<cls> <noptr> mem fd adds e als ( <ptr> file <dot> <noptr> se als )
<cls> <noptr> mem fd gets e als ( <ptr> file )
<cls> <noptr> x sys mem fd create ( <ptr> regs )
<cls> <noptr> se sys mem fd create ( <ptr> uname <dot> <noptr> flags )
<cls> <noptr> do sys mem fd create ( <ptr> uname <dot> <noptr> flags )
<cls> <noptr> i asys mem fd create ( <ptr> regs )
<cls> <noptr> memory failure queue ( <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> get hw poison page ( <ptr> page )
<cls> <noptr> hw poison filter ( <ptr> p )
<cls> <noptr> hw poison filter dev ( <ptr> p )
<cls> <noptr> hw poison filter flags ( <ptr> p )
<cls> <noptr> hw poison filter task ( <ptr> p )
<cls> <noptr> kill proc ( <ptr> tk <dot> <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> dev page map mapping shift ( <ptr> page <dot> <ptr> vma )
<cls> <noptr> add to kill ( <ptr> tsk <dot> <ptr> p <dot> <ptr> vma <dot> <ptr> to kill )
<cls> <ptr> find early kill thread ( <ptr> tsk )
<cls> <ptr> task early kill ( <ptr> tsk <dot> <noptr> force early )
<cls> <noptr> collect procs anon ( <ptr> page <dot> <ptr> to kill <dot> <noptr> force early )
<cls> <noptr> collect procs file ( <ptr> page <dot> <ptr> to kill <dot> <noptr> force early )
<cls> <noptr> truncate error page ( <ptr> p <dot> <noptr> pfn <dot> <ptr> mapping )
<cls> <noptr> me page cache dirty ( <ptr> p <dot> <noptr> pfn )
<cls> <noptr> me huge page ( <ptr> p <dot> <noptr> pfn )
<cls> <noptr> page action ( <ptr> ps <dot> <ptr> p <dot> <noptr> pfn )
<cls> <noptr> hw poison user mappings ( <ptr> p <dot> <noptr> pfn <dot> <noptr> flags <dot> <dptr> h page p )
<cls> <noptr> memory failure huge tlb ( <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> memory failure dev page map ( <noptr> pfn <dot> <noptr> flags <dot> <ptr> pg map )
<cls> <noptr> memory failure init ( )
<cls> <noptr> get any page ( <ptr> p <dot> <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> get any page ( <ptr> page <dot> <noptr> pfn <dot> <noptr> flags )
<cls> <noptr> might fault ( <ptr> file <dot> <noptr> line )
<cls> <noptr> finish fault ( <ptr> vm f )
<cls> <noptr> finish mk write fault ( <ptr> vm f )
<cls> <ptr> vm normal page ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pte )
<cls> <ptr> vm normal page pmd ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pmd )
<cls> <noptr> zap v map tes ( <ptr> vma <dot> <noptr> address <dot> <noptr> size )
<cls> <noptr> unmap v mas ( <ptr> tlb <dot> <ptr> vma <dot> <noptr> start addr <dot> <noptr> end addr )
<cls> <noptr> copy page range ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> vma )
<cls> <noptr> follow pfn ( <ptr> vma <dot> <noptr> address <dot> <ptr> pfn )
<cls> <noptr> generic access phys ( <ptr> vma <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> write )
<cls> <noptr> handle m m fault ( <ptr> vma <dot> <noptr> address <dot> <noptr> flags )
<cls> <noptr> unmap mapping pages ( <ptr> mapping <dot> <noptr> start <dot> <noptr> nr <dot> <noptr> even cows )
<cls> <noptr> access process vm ( <ptr> tsk <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> gup flags )
<cls> <noptr> access remote vm ( <ptr> m m <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> gup flags )
<cls> <noptr> access remote vm ( <ptr> tsk <dot> <ptr> m m <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> gup flags )
<cls> <noptr> m m trace rss stat ( <ptr> m m <dot> <noptr> member <dot> <noptr> count )
<cls> <noptr> sync m m rss ( <ptr> m m )
<cls> <noptr> remap pfn range ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn <dot> <noptr> size <dot> <noptr> prot )
<cls> <noptr> vm insert page ( <ptr> vma <dot> <noptr> addr <dot> <ptr> page )
<cls> <noptr> v mmap pages ( <ptr> vma <dot> <dptr> pages <dot> <noptr> num )
<cls> <noptr> v mmap pages zero ( <ptr> vma <dot> <dptr> pages <dot> <noptr> num )
<cls> <noptr> vm f insert pfn ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn )
<cls> <noptr> vm f insert pfn prot ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn <dot> <noptr> pg prot )
<cls> <noptr> vm f insert mixed ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn )
<cls> <noptr> vm f insert mixed mk write ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn )
<cls> <noptr> vm io map memory ( <ptr> vma <dot> <noptr> start <dot> <noptr> len )
<cls> <noptr> applyto page range ( <ptr> m m <dot> <noptr> addr <dot> <noptr> size <dot> <noptr> fn <dot> <ptr> data )
<cls> <noptr> print vma addr ( <ptr> prefix <dot> <noptr> ip )
<cls> <noptr> clear huge page ( <ptr> page <dot> <noptr> addr hint <dot> <noptr> pages per huge page )
<cls> <noptr> copy huge page from user ( <ptr> dst page <dot> <ptr> usr src <dot> <noptr> pages per huge page <dot> <noptr> allow page fault )
<cls> <noptr> unmap page range ( <ptr> tlb <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> details )
<cls> <noptr> disable rand maps ( <ptr> s )
<cls> <noptr> init zero pfn ( )
<cls> <noptr> check sync rss stat ( <ptr> task )
<cls> <noptr> init rss vec ( <ptr> rss )
<cls> <noptr> add m m rss vec ( <ptr> m m <dot> <ptr> rss )
<cls> <noptr> print bad pte ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pte <dot> <ptr> page )
<cls> <noptr> copy one pte ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> dst pte <dot> <ptr> src pte <dot> <ptr> vma <dot> <noptr> addr <dot> <ptr> rss )
<cls> <noptr> copy pte range ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> dst pmd <dot> <ptr> src pmd <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> sh ve u try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> copy pud range ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> dst pd <dot> <ptr> src pd <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> copy pd range ( <ptr> dst m m <dot> <ptr> src m m <dot> <ptr> dst pgd <dot> <ptr> src pgd <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> z app ter ange ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> details )
<cls> <noptr> z app md range ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> details )
<cls> <noptr> z app ud range ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> details )
<cls> <noptr> z app d range ( <ptr> tlb <dot> <ptr> vma <dot> <ptr> pgd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> details )
<cls> <noptr> zap page range single ( <ptr> vma <dot> <noptr> address <dot> <noptr> size <dot> <ptr> details )
<cls> <noptr> insert page ( <ptr> vma <dot> <noptr> addr <dot> <ptr> page <dot> <noptr> prot )
<cls> <noptr> v mmap pages ( <ptr> vma <dot> <dptr> pages <dot> <noptr> num <dot> <noptr> offset )
<cls> <noptr> insert pfn ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn <dot> <noptr> prot <dot> <noptr> mk write )
<cls> <noptr> vm mixed ok ( <ptr> vma <dot> <noptr> pfn )
<cls> <noptr> vm insert mixed ( <ptr> vma <dot> <noptr> addr <dot> <noptr> pfn <dot> <noptr> mk write )
<cls> <noptr> remap pte range ( <ptr> m m <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> pfn <dot> <noptr> prot )
<cls> <noptr> remap pmd range ( <ptr> m m <dot> <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> pfn <dot> <noptr> prot )
<cls> <noptr> remap pud range ( <ptr> m m <dot> <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> pfn <dot> <noptr> prot )
<cls> <noptr> apply top ter ange ( <ptr> m m <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> fn <dot> <ptr> data <dot> <noptr> create )
<cls> <noptr> applyto pmd range ( <ptr> m m <dot> <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> fn <dot> <ptr> data <dot> <noptr> create )
<cls> <noptr> applyto pud range ( <ptr> m m <dot> <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> fn <dot> <ptr> data <dot> <noptr> create )
<cls> <noptr> pte unmap same ( <ptr> m m <dot> <ptr> pmd <dot> <ptr> page table <dot> <noptr> orig pte )
<cls> <noptr> do page mk write ( <ptr> vm f )
<cls> <noptr> fault dirty shared page ( <ptr> vm f )
<cls> <noptr> wp page reuse ( <ptr> vm f )
<cls> <noptr> wp pfn shared ( <ptr> vm f )
<cls> <noptr> wp page shared ( <ptr> vm f )
<cls> <noptr> do wp page ( <ptr> vm f )
<cls> <noptr> unmap mapping range vma ( <ptr> vma <dot> <noptr> start addr <dot> <noptr> end addr <dot> <ptr> details )
<cls> <noptr> unmap mapping range tree ( <ptr> root <dot> <ptr> details )
<cls> <noptr> do anonymous page ( <ptr> vm f )
<cls> <noptr> do fault ( <ptr> vm f )
<cls> <noptr> pmd dev map trans unstable ( <ptr> pmd )
<cls> <noptr> pte alloc one map ( <ptr> vm f )
<cls> <noptr> deposit pre alloc pte ( <ptr> vm f )
<cls> <noptr> do set pmd ( <ptr> vm f <dot> <ptr> page )
<cls> <noptr> fault around bytes get ( <ptr> data <dot> <ptr> val )
<cls> <noptr> fault around bytes fops open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> fault around debug fs ( )
<cls> <noptr> do read fault ( <ptr> vm f )
<cls> <noptr> do cow fault ( <ptr> vm f )
<cls> <noptr> do shared fault ( <ptr> vm f )
<cls> <noptr> do fault ( <ptr> vm f )
<cls> <noptr> numa migrate prep ( <ptr> page <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> page nid <dot> <ptr> flags )
<cls> <noptr> do numa page ( <ptr> vm f )
<cls> <noptr> create huge pmd ( <ptr> vm f )
<cls> <noptr> v mais accessible ( <ptr> vma )
<cls> <noptr> wp huge pud ( <ptr> vm f <dot> <noptr> orig pud )
<cls> <noptr> handle pte fault ( <ptr> vm f )
<cls> <noptr> follow pte pmd ( <ptr> m m <dot> <noptr> address <dot> <ptr> range <dot> <dptr> pt epp <dot> <dptr> pmd pp <dot> <dptr> p tlp )
<cls> <noptr> follow pte ( <ptr> m m <dot> <noptr> address <dot> <dptr> pt epp <dot> <dptr> p tlp )
<cls> <noptr> process huge page ( <noptr> addr hint <dot> <noptr> pages per huge page <dot> <ptr> process sub page <dot> <ptr> arg )
<cls> <noptr> clear gigantic page ( <ptr> page <dot> <noptr> addr <dot> <noptr> pages per huge page )
<cls> <noptr> clear sub page ( <noptr> addr <dot> <noptr> idx <dot> <ptr> arg )
<cls> <noptr> copy user gigantic page ( <ptr> dst <dot> <ptr> src <dot> <noptr> addr <dot> <ptr> vma <dot> <noptr> pages per huge page )
<cls> <noptr> copy sub page ( <noptr> addr <dot> <noptr> idx <dot> <ptr> arg )
<cls> <noptr> online pages ( <noptr> pfn <dot> <noptr> nr pages <dot> <noptr> online type )
<cls> <noptr> generic online page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> set online page callback ( <noptr> callback )
<cls> <noptr> restore online page callback ( <noptr> callback )
<cls> <noptr> remove pages ( <noptr> pfn <dot> <noptr> nr pages <dot> <ptr> alt map )
<cls> <noptr> add pages ( <noptr> nid <dot> <noptr> pfn <dot> <noptr> nr pages <dot> <ptr> restrictions )
<cls> <noptr> register page boot mem info node ( <ptr> pg dat )
<cls> <noptr> get page boot mem ( <noptr> info <dot> <ptr> page <dot> <noptr> type )
<cls> <noptr> put online mems ( )
<cls> <noptr> mem hot plug done ( )
<cls> <noptr> is mem section removable ( <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> try offline node ( <noptr> nid )
<cls> <noptr> offline pages ( <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> add memory ( <noptr> nid <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> add memory ( <noptr> nid <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> move pfn range to zone ( <ptr> zone <dot> <noptr> start pfn <dot> <noptr> nr pages <dot> <ptr> alt map )
<cls> <noptr> remove pfn range from zone ( <ptr> zone <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <ptr> zone for pfn range ( <noptr> online type <dot> <noptr> nid <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> setup mem hp default state ( <ptr> str )
<cls> <noptr> register page boot mem info section ( <noptr> start pfn )
<cls> <noptr> check pfn span ( <noptr> pfn <dot> <noptr> nr pages <dot> <ptr> reason )
<cls> <noptr> check hot plug memory addressable ( <noptr> pfn <dot> <noptr> nr pages )
<cls> <noptr> find smallest section pfn ( <noptr> nid <dot> <ptr> zone <dot> <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> find biggest section pfn ( <noptr> nid <dot> <ptr> zone <dot> <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> shrink zone span ( <ptr> zone <dot> <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> update pg dat span ( <ptr> pg dat )
<cls> <noptr> remove section ( <noptr> pfn <dot> <noptr> nr pages <dot> <noptr> map offset <dot> <ptr> alt map )
<cls> <noptr> online pages range ( <noptr> start pfn <dot> <noptr> nr pages <dot> <ptr> arg )
<cls> <noptr> node states check changes online ( <noptr> nr pages <dot> <ptr> zone <dot> <ptr> arg )
<cls> <noptr> node states set node ( <noptr> node <dot> <ptr> arg )
<cls> <noptr> resize zone range ( <ptr> zone <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> resize pg dat range ( <ptr> pg dat <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <ptr> default kernel zone for pfn ( <noptr> nid <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <ptr> default zone for pfn ( <noptr> nid <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> reset node present pages ( <ptr> pg dat )
<cls> <noptr> rollback node hot add ( <noptr> nid )
<cls> <noptr> try online node ( <noptr> nid <dot> <noptr> start <dot> <noptr> set node online )
<cls> <noptr> check hot plug memory range ( <noptr> start <dot> <noptr> size )
<cls> <noptr> online memory block ( <ptr> mem <dot> <ptr> arg )
<cls> <noptr> next active page block ( <noptr> pfn )
<cls> <noptr> is page block removable nolock ( <noptr> pfn )
<cls> <noptr> scan movable pages ( <noptr> start <dot> <noptr> end )
<cls> <noptr> do migrate range ( <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> check pages isolated cb ( <noptr> start pfn <dot> <noptr> nr pages <dot> <ptr> data )
<cls> <noptr> cmdline parse movable node ( <ptr> p )
<cls> <noptr> node states clear node ( <noptr> node <dot> <ptr> arg )
<cls> <noptr> count system ram pages cb ( <noptr> start pfn <dot> <noptr> nr pages <dot> <ptr> data )
<cls> <noptr> offline pages ( <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> check mem block offline dcb ( <ptr> mem <dot> <ptr> arg )
<cls> <noptr> check nome m block for node cb ( <ptr> mem <dot> <ptr> arg )
<cls> <noptr> change prot numa ( <ptr> vma <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> m pol equal ( <ptr> a <dot> <ptr> b )
<cls> <noptr> vma dup policy ( <ptr> src <dot> <ptr> dst )
<cls> <noptr> m pol shared policy init ( <ptr> sp <dot> <ptr> m pol )
<cls> <noptr> m pol set shared policy ( <ptr> info <dot> <ptr> vma <dot> <ptr> n pol )
<cls> <ptr> m pol shared policy lookup ( <ptr> sp <dot> <noptr> idx )
<cls> <ptr> get task policy ( <ptr> p )
<cls> <ptr> get vma policy ( <ptr> vma <dot> <noptr> addr )
<cls> <noptr> vma policy m of ( <ptr> vma )
<cls> <noptr> numa default policy ( )
<cls> <noptr> numa policy init ( )
<cls> <noptr> m pol rebind task ( <ptr> tsk <dot> <ptr> new )
<cls> <noptr> m pol rebind m m ( <ptr> m m <dot> <ptr> new )
<cls> <noptr> init node mask of mem policy ( <ptr> mask )
<cls> <noptr> mem policy slab node ( )
<cls> <noptr> m pol to str ( <ptr> buffer <dot> <noptr> max len <dot> <ptr> pol )
<cls> <noptr> m pol misplaced ( <ptr> page <dot> <ptr> vma <dot> <noptr> addr )
<cls> <noptr> m pol new interleave ( <ptr> pol <dot> <ptr> nodes )
<cls> <noptr> m pol rebind default ( <ptr> pol <dot> <ptr> nodes )
<cls> <noptr> m pol rebind preferred ( <ptr> pol <dot> <ptr> nodes )
<cls> <noptr> m pol rebind policy ( <ptr> pol <dot> <ptr> new mask )
<cls> <noptr> migrate page add ( <ptr> page <dot> <ptr> page list <dot> <noptr> flags )
<cls> <noptr> queue pages pmd ( <ptr> pmd <dot> <ptr> pt l <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> queue pages pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> queue pages huge tlb ( <ptr> pte <dot> <noptr> h mask <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> queue pages test walk ( <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> queue pages range ( <ptr> m m <dot> <noptr> start <dot> <noptr> end <dot> <ptr> nodes <dot> <noptr> flags <dot> <ptr> page list )
<cls> <noptr> get policy node mask ( <ptr> p <dot> <ptr> nodes )
<cls> <noptr> lookup node ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> do get mem policy ( <ptr> policy <dot> <ptr> n mask <dot> <noptr> addr <dot> <noptr> flags )
<cls> <noptr> migrate to node ( <ptr> m m <dot> <noptr> source <dot> <noptr> dest <dot> <noptr> flags )
<cls> <noptr> dom bind ( <noptr> start <dot> <noptr> len <dot> <noptr> mode <dot> <noptr> mode flags <dot> <ptr> n mask <dot> <noptr> flags )
<cls> <noptr> get nodes ( <ptr> nodes <dot> <ptr> n mask <dot> <noptr> max node )
<cls> <noptr> kernel m bind ( <noptr> start <dot> <noptr> len <dot> <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> flags )
<cls> <noptr> x sys m bind ( <ptr> regs )
<cls> <noptr> se sys m bind ( <noptr> start <dot> <noptr> len <dot> <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> flags )
<cls> <noptr> do sys m bind ( <noptr> start <dot> <noptr> len <dot> <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> flags )
<cls> <noptr> i asy sm bind ( <ptr> regs )
<cls> <noptr> x sys set mem policy ( <ptr> regs )
<cls> <noptr> se sys set mem policy ( <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node )
<cls> <noptr> do sys set mem policy ( <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node )
<cls> <noptr> i asys set mem policy ( <ptr> regs )
<cls> <noptr> x sys migrate pages ( <ptr> regs )
<cls> <noptr> se sys migrate pages ( <noptr> pid <dot> <noptr> max node <dot> <ptr> old nodes <dot> <ptr> new nodes )
<cls> <noptr> do sys migrate pages ( <noptr> pid <dot> <noptr> max node <dot> <ptr> old nodes <dot> <ptr> new nodes )
<cls> <noptr> i asys migrate pages ( <ptr> regs )
<cls> <noptr> kernel get mem policy ( <ptr> policy <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> addr <dot> <noptr> flags )
<cls> <noptr> x sys get mem policy ( <ptr> regs )
<cls> <noptr> do sys get mem policy ( <ptr> policy <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> addr <dot> <noptr> flags )
<cls> <noptr> i asys get mem policy ( <ptr> regs )
<cls> <noptr> do compat sys get mem policy ( <ptr> policy <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> addr <dot> <noptr> flags )
<cls> <noptr> i a compat sys get mem policy ( <ptr> regs )
<cls> <noptr> x compat sys get mem policy ( <ptr> regs )
<cls> <noptr> se compat sys set mem policy ( <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node )
<cls> <noptr> do compat sys set mem policy ( <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node )
<cls> <noptr> i a compat sys set mem policy ( <ptr> regs )
<cls> <noptr> x compat sys set mem policy ( <ptr> regs )
<cls> <noptr> se compat sys m bind ( <noptr> start <dot> <noptr> len <dot> <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> flags )
<cls> <noptr> do compat sys m bind ( <noptr> start <dot> <noptr> len <dot> <noptr> mode <dot> <ptr> n mask <dot> <noptr> max node <dot> <noptr> flags )
<cls> <noptr> i a compat sys m bind ( <ptr> regs )
<cls> <noptr> x compat sys m bind ( <ptr> regs )
<cls> <noptr> se compat sys migrate pages ( <noptr> pid <dot> <noptr> max node <dot> <ptr> old nodes <dot> <ptr> new nodes )
<cls> <noptr> i a compat sys migrate pages ( <ptr> regs )
<cls> <noptr> x compat sys migrate pages ( <ptr> regs )
<cls> <ptr> get vma policy ( <ptr> vma <dot> <noptr> addr )
<cls> <noptr> apply policy zone ( <ptr> policy <dot> <noptr> zone )
<cls> <noptr> policy node ( <noptr> gfp <dot> <ptr> policy <dot> <noptr> nd )
<cls> <noptr> interleave nodes ( <ptr> policy )
<cls> <noptr> interleave nid ( <ptr> pol <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> shift )
<cls> <ptr> sp lookup ( <ptr> sp <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> sp insert ( <ptr> sp <dot> <ptr> new )
<cls> <noptr> sp node init ( <ptr> node <dot> <noptr> start <dot> <noptr> end <dot> <ptr> pol )
<cls> <noptr> check numa balancing enable ( )
<cls> <noptr> setup numa balancing ( <ptr> str )
<cls> <noptr> mem pool init node ( <ptr> pool <dot> <noptr> min nr <dot> <ptr> alloc fn <dot> <ptr> free fn <dot> <ptr> pool data <dot> <noptr> gfp mask <dot> <noptr> nodeid )
<cls> <noptr> mem pool init ( <ptr> pool <dot> <noptr> min nr <dot> <ptr> alloc fn <dot> <ptr> free fn <dot> <ptr> pool data )
<cls> <noptr> check element ( <ptr> pool <dot> <ptr> element )
<cls> <noptr> poison element ( <ptr> element <dot> <noptr> size )
<cls> <noptr> kas an un poison element ( <ptr> pool <dot> <ptr> element )
<cls> <noptr> add element ( <ptr> pool <dot> <ptr> element )
<cls> <ptr> mem remap pages ( <ptr> pg map <dot> <noptr> nid )
<cls> <ptr> dev m mem remap pages ( <ptr> dev <dot> <ptr> pg map )
<cls> <ptr> get dev page map ( <noptr> pfn <dot> <ptr> pg map )
<cls> <noptr> v mem alt map offset ( <ptr> alt map )
<cls> <noptr> v mem alt map free ( <ptr> alt map <dot> <noptr> nr p fns )
<cls> <noptr> dev map managed enable put ( )
<cls> <noptr> dev map managed enable get ( <ptr> pg map )
<cls> <noptr> pfn first ( <ptr> pg map )
<cls> <noptr> pfn end ( <ptr> pg map )
<cls> <noptr> early mem test ( <noptr> start <dot> <noptr> end )
<cls> <noptr> mem test ( <noptr> pattern <dot> <noptr> start phys <dot> <noptr> size )
<cls> <noptr> parse mem test ( <ptr> arg )
<cls> <noptr> buffer migrate page ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> buffer migrate pageno refs ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> migrate page ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> migrate pages ( <ptr> from <dot> <noptr> get new page <dot> <noptr> put new page <dot> <noptr> private <dot> <noptr> mode <dot> <noptr> reason )
<cls> <noptr> isolate movable page ( <ptr> page <dot> <noptr> mode )
<cls> <noptr> migrate prep ( )
<cls> <noptr> migrate prep local ( )
<cls> <noptr> migrate page states ( <ptr> new page <dot> <ptr> page )
<cls> <noptr> migrate page copy ( <ptr> new page <dot> <ptr> page )
<cls> <noptr> migrate huge page move mapping ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page )
<cls> <noptr> migrate page move mapping ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> extra count )
<cls> <noptr> pmd trans migrating ( <noptr> pmd )
<cls> <noptr> migrate misplaced page ( <ptr> page <dot> <ptr> vma <dot> <noptr> node )
<cls> <noptr> migrate misplaced trans huge page ( <ptr> m m <dot> <ptr> vma <dot> <ptr> pmd <dot> <noptr> entry <dot> <noptr> address <dot> <ptr> page <dot> <noptr> node )
<cls> <noptr> migrate vma setup ( <ptr> args )
<cls> <noptr> migrate vma pages ( <ptr> migrate )
<cls> <noptr> migrate vma finalize ( <ptr> migrate )
<cls> <noptr> migration entry wait ( <ptr> m m <dot> <ptr> pte p <dot> <ptr> pt l )
<cls> <noptr> migration entry wait ( <ptr> m m <dot> <ptr> pmd <dot> <noptr> address )
<cls> <noptr> migration entry wait huge ( <ptr> vma <dot> <ptr> m m <dot> <ptr> pte )
<cls> <noptr> pmd migration entry wait ( <ptr> m m <dot> <ptr> pmd )
<cls> <noptr> remove migration p tes ( <ptr> old <dot> <ptr> new <dot> <noptr> locked )
<cls> <noptr> remove migration pte ( <ptr> page <dot> <ptr> vma <dot> <noptr> addr <dot> <ptr> old )
<cls> <noptr> expected page refs ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> copy huge page ( <ptr> dst <dot> <ptr> src )
<cls> <noptr> buffer migrate lock buffers ( <ptr> head <dot> <noptr> mode )
<cls> <noptr> buffer migrate page ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode <dot> <noptr> check refs )
<cls> <noptr> write out ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> moveto new page ( <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> unmap and move ( <ptr> page <dot> <ptr> new page <dot> <noptr> force <dot> <noptr> mode )
<cls> <noptr> unmap and move ( <noptr> get new page <dot> <noptr> put new page <dot> <noptr> private <dot> <ptr> page <dot> <noptr> force <dot> <noptr> mode <dot> <noptr> reason )
<cls> <noptr> unmap and move huge page ( <noptr> get new page <dot> <noptr> put new page <dot> <noptr> private <dot> <ptr> h page <dot> <noptr> force <dot> <noptr> mode <dot> <noptr> reason )
<cls> <noptr> store status ( <ptr> status <dot> <noptr> start <dot> <noptr> value <dot> <noptr> nr )
<cls> <noptr> do move pages to node ( <ptr> m m <dot> <ptr> page list <dot> <noptr> node )
<cls> <noptr> do pages move ( <ptr> m m <dot> <noptr> task nodes <dot> <noptr> nr pages <dot> <dptr> pages <dot> <ptr> nodes <dot> <ptr> status <dot> <noptr> flags )
<cls> <noptr> do pages stat array ( <ptr> m m <dot> <noptr> nr pages <dot> <dptr> pages <dot> <ptr> status )
<cls> <noptr> do pages stat ( <ptr> m m <dot> <noptr> nr pages <dot> <dptr> pages <dot> <ptr> status )
<cls> <noptr> kernel move pages ( <noptr> pid <dot> <noptr> nr pages <dot> <dptr> pages <dot> <ptr> nodes <dot> <ptr> status <dot> <noptr> flags )
<cls> <noptr> x sys move pages ( <ptr> regs )
<cls> <noptr> se sys move pages ( <noptr> pid <dot> <noptr> nr pages <dot> <dptr> pages <dot> <ptr> nodes <dot> <ptr> status <dot> <noptr> flags )
<cls> <noptr> do sys move pages ( <noptr> pid <dot> <noptr> nr pages <dot> <dptr> pages <dot> <ptr> nodes <dot> <ptr> status <dot> <noptr> flags )
<cls> <noptr> i asys move pages ( <ptr> regs )
<cls> <noptr> se compat sys move pages ( <noptr> pid <dot> <noptr> nr pages <dot> <ptr> pages <dot> <ptr> nodes <dot> <ptr> status <dot> <noptr> flags )
<cls> <noptr> i a compat sys move pages ( <ptr> regs )
<cls> <noptr> x compat sys move pages ( <ptr> regs )
<cls> <noptr> migrate balanced pg dat ( <ptr> pg dat <dot> <noptr> nr migrate pages )
<cls> <noptr> numa migrate isolate page ( <ptr> pg dat <dot> <ptr> page )
<cls> <noptr> migrate vma collect skip ( <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> migrate vma check page ( <ptr> page )
<cls> <noptr> migrate vma prepare ( <ptr> migrate )
<cls> <noptr> migrate vma unmap ( <ptr> migrate )
<cls> <noptr> min core huge tlb ( <ptr> pte <dot> <noptr> h mask <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> min core page ( <ptr> mapping <dot> <noptr> pg off )
<cls> <noptr> min core unmapped range ( <noptr> addr <dot> <noptr> end <dot> <ptr> vma <dot> <ptr> vec )
<cls> <noptr> min core unmapped range ( <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> min core pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> can domin core ( <ptr> vma )
<cls> <noptr> se sys min core ( <noptr> start <dot> <noptr> len <dot> <ptr> vec )
<cls> <noptr> do sys min core ( <noptr> start <dot> <noptr> len <dot> <ptr> vec )
<cls> <noptr> i asys min core ( <ptr> regs )
<cls> <noptr> can dom lock ( )
<cls> <noptr> user shm lock ( <noptr> size <dot> <ptr> user )
<cls> <noptr> m unlock vma page ( <ptr> page )
<cls> <noptr> clear page m lock ( <ptr> page )
<cls> <noptr> m unlock isolate lru page ( <ptr> page <dot> <noptr> get page )
<cls> <noptr> m unlock isolated page ( <ptr> page )
<cls> <noptr> m unlock isolation failed ( <ptr> page )
<cls> <noptr> m lock posix error return ( <noptr> ret val )
<cls> <noptr> put back lru fast prepare ( <ptr> page <dot> <ptr> p vec <dot> <ptr> pg rescue d )
<cls> <noptr> put back lru fast ( <ptr> p vec <dot> <noptr> pg rescue d )
<cls> <noptr> m unlock page vec ( <ptr> p vec <dot> <ptr> zone )
<cls> <noptr> m unlock page vec fill ( <ptr> p vec <dot> <ptr> vma <dot> <ptr> zone <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> m lock fixup ( <ptr> vma <dot> <dptr> prev <dot> <noptr> start <dot> <noptr> end <dot> <noptr> new flags )
<cls> <noptr> count mmm locked page nr ( <ptr> m m <dot> <noptr> start <dot> <noptr> len )
<cls> <noptr> x sys m lock ( <ptr> regs )
<cls> <noptr> se sys m lock ( <noptr> start <dot> <noptr> len )
<cls> <noptr> do sys m lock ( <noptr> start <dot> <noptr> len )
<cls> <noptr> i asy sm lock ( <ptr> regs )
<cls> <noptr> x sys m lock ( <ptr> regs )
<cls> <noptr> se sys m lock ( <noptr> start <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> do sys m lock ( <noptr> start <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> i asy sm lock ( <ptr> regs )
<cls> <noptr> x sys m unlock ( <ptr> regs )
<cls> <noptr> se sys m unlock ( <noptr> start <dot> <noptr> len )
<cls> <noptr> do sys m unlock ( <noptr> start <dot> <noptr> len )
<cls> <noptr> i asy sm unlock ( <ptr> regs )
<cls> <noptr> x sys m lock all ( <ptr> regs )
<cls> <noptr> do sys m lock all ( <noptr> flags )
<cls> <noptr> vma wants write notify ( <ptr> vma <dot> <noptr> vm page prot )
<cls> <noptr> mmap init ( )
<cls> <noptr> vma adjust ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <noptr> pg off <dot> <ptr> insert <dot> <ptr> expand )
<cls> <ptr> vma merge ( <ptr> m m <dot> <ptr> prev <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> vm flags <dot> <ptr> anon vma <dot> <ptr> file <dot> <noptr> pg off <dot> <ptr> policy <dot> <noptr> vm user fault fd ctx )
<cls> <ptr> find merge able anon vma ( <ptr> vma )
<cls> <noptr> split vma ( <ptr> m m <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> new below )
<cls> <noptr> split vma ( <ptr> m m <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> new below )
<cls> <noptr> insert vm struct ( <ptr> m m <dot> <ptr> vma )
<cls> <noptr> vma link rb ( <ptr> m m <dot> <ptr> vma <dot> <dptr> rb link <dot> <ptr> rb parent )
<cls> <ptr> copy vma ( <dptr> v map <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> pg off <dot> <ptr> need r map locks )
<cls> <noptr> m m take all locks ( <ptr> m m )
<cls> <noptr> m m drop all locks ( <ptr> m m )
<cls> <noptr> may expand vm ( <ptr> m m <dot> <noptr> flags <dot> <noptr> n pages )
<cls> <noptr> v mais special mapping ( <ptr> vma <dot> <ptr> sm )
<cls> <noptr> vm brk ( <noptr> addr <dot> <noptr> len )
<cls> <noptr> vm brk flags ( <noptr> addr <dot> <noptr> request <dot> <noptr> flags )
<cls> <noptr> unmapped area ( <ptr> info )
<cls> <noptr> unmapped area top down ( <ptr> info )
<cls> <noptr> expand downwards ( <ptr> vma <dot> <noptr> address )
<cls> <ptr> find vma prev ( <ptr> m m <dot> <noptr> addr <dot> <dptr> p prev )
<cls> <noptr> vm get page prot ( <noptr> vm flags )
<cls> <noptr> vma set page prot ( <ptr> vma )
<cls> <ptr> find extend vma ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> k sys mmap pg off ( <noptr> addr <dot> <noptr> len <dot> <noptr> prot <dot> <noptr> flags <dot> <noptr> fd <dot> <noptr> pg off )
<cls> <ptr> check ignore rlimit data ( )
<cls> <noptr> v mpg prot modify ( <noptr> old prot <dot> <noptr> vm flags )
<cls> <noptr> do brk flags ( <noptr> addr <dot> <noptr> len <dot> <noptr> flags <dot> <ptr> u f )
<cls> <noptr> x sys brk ( <ptr> regs )
<cls> <noptr> ses y sbrk ( <noptr> brk )
<cls> <noptr> i asy sbrk ( <ptr> regs )
<cls> <noptr> vma compute sub tree gap ( <ptr> vma )
<cls> <noptr> browser b ( <ptr> m m )
<cls> <noptr> validate mmr b ( <ptr> root <dot> <ptr> ignore )
<cls> <noptr> validate m m ( <ptr> m m )
<cls> <noptr> vma gap callbacks compute max ( <ptr> node <dot> <noptr> exit )
<cls> <noptr> vma gap callbacks propagate ( <ptr> rb <dot> <ptr> stop )
<cls> <noptr> vma gap callbacks rotate ( <ptr> r bold <dot> <ptr> rb new )
<cls> <noptr> v mar b insert ( <ptr> vma <dot> <ptr> root )
<cls> <noptr> v mar b erase ( <ptr> vma <dot> <ptr> root )
<cls> <noptr> v mar b erase ignore ( <ptr> vma <dot> <ptr> root <dot> <ptr> ignore )
<cls> <noptr> anon vma interval tree pre update vma ( <ptr> vma )
<cls> <noptr> anon vma interval tree post update vma ( <ptr> vma )
<cls> <noptr> find vma links ( <ptr> m m <dot> <noptr> addr <dot> <noptr> end <dot> <dptr> p prev <dot> <dptr> rb link <dot> <dptr> rb parent )
<cls> <noptr> count vma pages range ( <ptr> m m <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> vma link file ( <ptr> vma )
<cls> <noptr> vma link ( <ptr> m m <dot> <ptr> vma <dot> <ptr> prev <dot> <dptr> rb link <dot> <ptr> rb parent )
<cls> <noptr> insert vm struct ( <ptr> m m <dot> <ptr> vma )
<cls> <noptr> vma unlink common ( <ptr> m m <dot> <ptr> vma <dot> <ptr> ignore )
<cls> <noptr> is merge able vma ( <ptr> vma <dot> <ptr> file <dot> <noptr> vm flags <dot> <noptr> vm user fault fd ctx )
<cls> <noptr> is merge able anon vma ( <ptr> anon vma <dot> <ptr> anon vma <dot> <ptr> vma )
<cls> <noptr> can vma merge after ( <ptr> vma <dot> <noptr> vm flags <dot> <ptr> anon vma <dot> <ptr> file <dot> <noptr> v mpg off <dot> <noptr> vm user fault fd ctx )
<cls> <noptr> anon vma compatible ( <ptr> a <dot> <ptr> b )
<cls> <ptr> reusable anon vma ( <ptr> old <dot> <ptr> a <dot> <ptr> b )
<cls> <noptr> round hint to min ( <noptr> hint )
<cls> <noptr> m lock future check ( <ptr> m m <dot> <noptr> flags <dot> <noptr> len )
<cls> <noptr> file mmap size max ( <ptr> file <dot> <ptr> inode )
<cls> <noptr> file mmap ok ( <ptr> file <dot> <ptr> inode <dot> <noptr> pg off <dot> <noptr> len )
<cls> <noptr> x sys mmap pg off ( <ptr> regs )
<cls> <noptr> i asy smm app g off ( <ptr> regs )
<cls> <noptr> account able mapping ( <ptr> file <dot> <noptr> vm flags )
<cls> <noptr> acct stack growth ( <ptr> vma <dot> <noptr> size <dot> <noptr> grow )
<cls> <noptr> cmdline parse stack guard gap ( <ptr> p )
<cls> <noptr> detach v mas tobe unmapped ( <ptr> m m <dot> <ptr> vma <dot> <ptr> prev <dot> <noptr> end )
<cls> <noptr> x sys remap file pages ( <ptr> regs )
<cls> <noptr> se sys remap file pages ( <noptr> start <dot> <noptr> size <dot> <noptr> prot <dot> <noptr> pg off <dot> <noptr> flags )
<cls> <noptr> do sys remap file pages ( <noptr> start <dot> <noptr> size <dot> <noptr> prot <dot> <noptr> pg off <dot> <noptr> flags )
<cls> <noptr> i asys remap file pages ( <ptr> regs )
<cls> <noptr> special mapping fault ( <ptr> vm f )
<cls> <noptr> special mapping close ( <ptr> vma )
<cls> <ptr> special mapping name ( <ptr> vma )
<cls> <noptr> special mapping m remap ( <ptr> new vma )
<cls> <noptr> vm lock anon vma ( <ptr> m m <dot> <ptr> anon vma )
<cls> <noptr> vm lock mapping ( <ptr> m m <dot> <ptr> mapping )
<cls> <noptr> vm unlock anon vma ( <ptr> anon vma )
<cls> <noptr> vm unlock mapping ( <ptr> mapping )
<cls> <noptr> init user reserve ( )
<cls> <noptr> init admin reserve ( )
<cls> <noptr> reserve mem notifier ( <ptr> nb <dot> <noptr> action <dot> <ptr> data )
<cls> <noptr> init reserve notifier ( )
<cls> <noptr> use m m ( <ptr> m m )
<cls> <noptr> un use m m ( <ptr> m m )
<cls> <noptr> tlb gather mmu ( <ptr> tlb <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> tlb remove page size ( <ptr> tlb <dot> <ptr> page <dot> <noptr> page size )
<cls> <noptr> tlb next batch ( <ptr> tlb )
<cls> <noptr> tlb table invalidate ( <ptr> tlb )
<cls> <noptr> tlb remove table rcu ( <ptr> head )
<cls> <noptr> mmu notifier synchronize ( )
<cls> <noptr> mmu notifier register ( <ptr> mn <dot> <ptr> m m )
<cls> <noptr> mmu interval read begin ( <ptr> m ni )
<cls> <noptr> mmu interval notifier insert ( <ptr> m ni <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> length <dot> <ptr> ops )
<cls> <noptr> mmu interval notifier insert locked ( <ptr> m ni <dot> <ptr> m m <dot> <noptr> start <dot> <noptr> length <dot> <ptr> ops )
<cls> <noptr> mmu notifier clear flush young ( <ptr> m m <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> mmu notifier test young ( <ptr> m m <dot> <noptr> address )
<cls> <noptr> mmu notifier change pte ( <ptr> m m <dot> <noptr> address <dot> <noptr> pte )
<cls> <noptr> mmu notifier invalidate range start ( <ptr> range )
<cls> <noptr> mmu notifier invalidate range end ( <ptr> range <dot> <noptr> only end )
<cls> <noptr> mmu notifier range update to read only ( <ptr> range )
<cls> <noptr> m ni tree isin validating ( <ptr> m mnm m )
<cls> <ptr> m ni tree inv start range ( <ptr> m mnm m <dot> <ptr> range <dot> <ptr> seq )
<cls> <ptr> m ni tree inv next ( <ptr> m ni <dot> <ptr> range )
<cls> <noptr> m ni tree release ( <ptr> m mnm m <dot> <ptr> m m )
<cls> <noptr> m nh list release ( <ptr> m mnm m <dot> <ptr> m m )
<cls> <noptr> m ni tree invalidate ( <ptr> m mnm m <dot> <ptr> range )
<cls> <noptr> m nh list invalidate end ( <ptr> m mnm m <dot> <ptr> range <dot> <noptr> only end )
<cls> <ptr> find get mmu notifier ( <ptr> m m <dot> <ptr> ops )
<cls> <noptr> mmu interval notifier insert ( <ptr> m ni <dot> <ptr> m m <dot> <ptr> m mnm m <dot> <noptr> start <dot> <noptr> length <dot> <ptr> ops )
<cls> <ptr> first online pg dat ( )
<cls> <ptr> next online pg dat ( <ptr> pg dat )
<cls> <ptr> next zone ( <ptr> zone )
<cls> <ptr> next zones zone list ( <ptr> z <dot> <noptr> highest zoneid x <dot> <ptr> nodes )
<cls> <noptr> page cpu pid x chg last ( <ptr> page <dot> <noptr> cpu pid )
<cls> <noptr> z refin node mask ( <ptr> z ref <dot> <ptr> nodes )
<cls> <noptr> m m init verify page flags layout ( )
<cls> <noptr> m m init verify zone list ( )
<cls> <noptr> set m m init log level ( <ptr> str )
<cls> <noptr> m m compute batch ( )
<cls> <noptr> m m compute batch notifier ( <ptr> self <dot> <noptr> action <dot> <ptr> arg )
<cls> <noptr> m m sysfs init ( )
<cls> <noptr> change protection ( <ptr> vma <dot> <noptr> start <dot> <noptr> end <dot> <noptr> new prot <dot> <noptr> dirty account able <dot> <noptr> prot numa )
<cls> <noptr> mprotect fixup ( <ptr> vma <dot> <dptr> p prev <dot> <noptr> start <dot> <noptr> end <dot> <noptr> new flags )
<cls> <noptr> change pte range ( <ptr> vma <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> new prot <dot> <noptr> dirty account able <dot> <noptr> prot numa )
<cls> <noptr> change pmd range ( <ptr> vma <dot> <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> new prot <dot> <noptr> dirty account able <dot> <noptr> prot numa )
<cls> <noptr> change pud range ( <ptr> vma <dot> <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> new prot <dot> <noptr> dirty account able <dot> <noptr> prot numa )
<cls> <noptr> change pd range ( <ptr> vma <dot> <ptr> pgd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> new prot <dot> <noptr> dirty account able <dot> <noptr> prot numa )
<cls> <noptr> change protection range ( <ptr> vma <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> new prot <dot> <noptr> dirty account able <dot> <noptr> prot numa )
<cls> <noptr> prot none pte entry ( <ptr> pte <dot> <noptr> addr <dot> <noptr> next <dot> <ptr> walk )
<cls> <noptr> prot none huge tlb entry ( <ptr> pte <dot> <noptr> h mask <dot> <noptr> addr <dot> <noptr> next <dot> <ptr> walk )
<cls> <noptr> prot none test ( <noptr> addr <dot> <noptr> next <dot> <ptr> walk )
<cls> <noptr> do mprotect pkey ( <noptr> start <dot> <noptr> len <dot> <noptr> prot <dot> <noptr> pkey )
<cls> <noptr> x sys mprotect ( <ptr> regs )
<cls> <noptr> se sys mprotect ( <noptr> start <dot> <noptr> len <dot> <noptr> prot )
<cls> <noptr> do sys mprotect ( <noptr> start <dot> <noptr> len <dot> <noptr> prot )
<cls> <noptr> i asys mprotect ( <ptr> regs )
<cls> <noptr> x sys pkey mprotect ( <ptr> regs )
<cls> <noptr> do sys pkey mprotect ( <noptr> start <dot> <noptr> len <dot> <noptr> prot <dot> <noptr> pkey )
<cls> <noptr> i asy sp key mprotect ( <ptr> regs )
<cls> <noptr> x sys pkey alloc ( <ptr> regs )
<cls> <noptr> i asy sp key alloc ( <ptr> regs )
<cls> <noptr> move page tables ( <ptr> vma <dot> <noptr> old addr <dot> <ptr> new vma <dot> <noptr> new addr <dot> <noptr> len <dot> <noptr> need r map locks )
<cls> <ptr> get old pmd ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> taker map locks ( <ptr> vma )
<cls> <noptr> drop r map locks ( <ptr> vma )
<cls> <noptr> move soft dirty pte ( <noptr> pte )
<cls> <noptr> move p tes ( <ptr> vma <dot> <ptr> old pmd <dot> <noptr> old addr <dot> <noptr> old end <dot> <ptr> new vma <dot> <ptr> new pmd <dot> <noptr> new addr <dot> <noptr> need r map locks )
<cls> <noptr> move normal pmd ( <ptr> vma <dot> <noptr> old addr <dot> <noptr> new addr <dot> <noptr> old end <dot> <ptr> old pmd <dot> <ptr> new pmd )
<cls> <ptr> vma to resize ( <noptr> addr <dot> <noptr> old len <dot> <noptr> new len <dot> <ptr> p )
<cls> <noptr> vma expandable ( <ptr> vma <dot> <noptr> delta )
<cls> <noptr> x sys m remap ( <ptr> regs )
<cls> <noptr> se sys m remap ( <noptr> addr <dot> <noptr> old len <dot> <noptr> new len <dot> <noptr> flags <dot> <noptr> new addr )
<cls> <noptr> do sys m remap ( <noptr> addr <dot> <noptr> old len <dot> <noptr> new len <dot> <noptr> flags <dot> <noptr> new addr )
<cls> <noptr> x sys m sync ( <ptr> regs )
<cls> <noptr> i asy sm sync ( <ptr> regs )
<cls> <noptr> page fault outofmemory ( )
<cls> <noptr> process shares m m ( <ptr> p <dot> <ptr> m m )
<cls> <noptr> oom reap task m m ( <ptr> m m )
<cls> <noptr> oom bad ness ( <ptr> p <dot> <noptr> total pages )
<cls> <noptr> outofmemory ( <ptr> oc )
<cls> <noptr> exit oom victim ( )
<cls> <noptr> register oom notifier ( <ptr> nb )
<cls> <noptr> oom killer disable ( <noptr> timeout )
<cls> <noptr> oom killer enable ( )
<cls> <ptr> find lock task m m ( <ptr> p )
<cls> <noptr> oom cpu set eligible ( <ptr> start <dot> <ptr> oc )
<cls> <noptr> is sys r q oom ( <ptr> oc )
<cls> <noptr> constrained alloc ( <ptr> oc )
<cls> <noptr> oom evaluate task ( <ptr> task <dot> <ptr> arg )
<cls> <noptr> dump task ( <ptr> p <dot> <ptr> arg )
<cls> <noptr> dump tasks ( <ptr> oc )
<cls> <noptr> dump oom summary ( <ptr> oc <dot> <ptr> victim )
<cls> <noptr> dump header ( <ptr> oc <dot> <ptr> p )
<cls> <noptr> oom reap task m m ( <ptr> tsk <dot> <ptr> m m )
<cls> <noptr> oom reap task ( <ptr> tsk )
<cls> <noptr> oom reaper ( <ptr> unused )
<cls> <noptr> wake oom reaper ( <ptr> tsk )
<cls> <noptr> oom init ( )
<cls> <noptr> mark oom victim ( <ptr> tsk )
<cls> <noptr> task will free mem ( <ptr> task )
<cls> <noptr> check pan icon oom ( <ptr> oc )
<cls> <noptr> test clear page write back ( <ptr> page )
<cls> <noptr> test set page write back ( <ptr> page <dot> <noptr> keep write )
<cls> <noptr> set page dirty no buffers ( <ptr> page )
<cls> <noptr> set page dirty no write back ( <ptr> page )
<cls> <noptr> re dirty page for write page ( <ptr> wbc <dot> <ptr> page )
<cls> <noptr> account page dir tied ( <ptr> page <dot> <ptr> mapping )
<cls> <noptr> account page cleaned ( <ptr> page <dot> <ptr> mapping <dot> <ptr> wb )
<cls> <noptr> set page dirty ( <ptr> page )
<cls> <noptr> set page dirty lock ( <ptr> page )
<cls> <noptr> cancel dirty page ( <ptr> page )
<cls> <noptr> clear page dirty for io ( <ptr> page )
<cls> <noptr> write one page ( <ptr> page )
<cls> <noptr> wait on page write back ( <ptr> page )
<cls> <noptr> wait for stable page ( <ptr> page )
<cls> <noptr> laptop io completion ( <ptr> info )
<cls> <noptr> laptop sync completion ( )
<cls> <noptr> laptop mode timer fn ( <ptr> t )
<cls> <noptr> node dirty ok ( <ptr> pg dat )
<cls> <noptr> wb domain init ( <ptr> dom <dot> <noptr> gfp )
<cls> <noptr> dirty background bytes handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> len p <dot> <ptr> p pos )
<cls> <noptr> dirty ratio handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> len p <dot> <ptr> p pos )
<cls> <noptr> nv t sett x carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> dirty write back cent i secs handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> global dirty limits ( <ptr> p background <dot> <ptr> p dirty )
<cls> <noptr> wb calc thresh ( <ptr> wb <dot> <noptr> thresh )
<cls> <noptr> wb update bandwidth ( <ptr> wb <dot> <noptr> start time )
<cls> <noptr> balance dirty pages rate limited ( <ptr> mapping )
<cls> <noptr> wb over bg thresh ( <ptr> wb )
<cls> <noptr> generic write pages ( <ptr> mapping <dot> <ptr> wbc )
<cls> <noptr> write cache pages ( <ptr> mapping <dot> <ptr> wbc <dot> <noptr> write page <dot> <ptr> data )
<cls> <noptr> do write pages ( <ptr> mapping <dot> <ptr> wbc )
<cls> <noptr> write back set rate limit ( )
<cls> <noptr> account pager e dirty ( <ptr> page )
<cls> <noptr> bd i set min ratio ( <ptr> bd i <dot> <noptr> min ratio )
<cls> <noptr> bd i set max ratio ( <ptr> bd i <dot> <noptr> max ratio )
<cls> <noptr> page write back init ( )
<cls> <noptr> m dtc valid ( <ptr> dtc )
<cls> <ptr> m dtc gdt c ( <ptr> m dtc )
<cls> <ptr> wb mem cg completions ( <ptr> wb )
<cls> <noptr> wb min max ratio ( <ptr> wb <dot> <ptr> min p <dot> <ptr> max p )
<cls> <noptr> global dirty able memory ( )
<cls> <noptr> domain dirty limits ( <ptr> dtc )
<cls> <noptr> node dirty limit ( <ptr> pg dat )
<cls> <noptr> wp next time ( <noptr> cur time )
<cls> <noptr> wb domain write out inc ( <ptr> dom <dot> <ptr> completions <dot> <noptr> max prop frac )
<cls> <noptr> wb write out inc ( <ptr> wb )
<cls> <noptr> write out period ( <ptr> t )
<cls> <noptr> dirty free run ceiling ( <noptr> thresh <dot> <noptr> bg thresh )
<cls> <noptr> hard dirty limit ( <ptr> dom <dot> <noptr> thresh )
<cls> <noptr> m dtc calc avail ( <ptr> m dtc <dot> <noptr> file pages <dot> <noptr> head room )
<cls> <noptr> wb calc thresh ( <ptr> dtc )
<cls> <noptr> pos ratio poly nom ( <noptr> set point <dot> <noptr> dirty <dot> <noptr> limit )
<cls> <noptr> wb position ratio ( <ptr> dtc )
<cls> <noptr> update dirty limit ( <ptr> dtc )
<cls> <noptr> domain update bandwidth ( <ptr> dtc <dot> <noptr> now )
<cls> <noptr> wb update dirty rate limit ( <ptr> dtc <dot> <noptr> dir tied <dot> <noptr> elapsed )
<cls> <noptr> wb update bandwidth ( <ptr> gdt c <dot> <ptr> m dtc <dot> <noptr> start time <dot> <noptr> update rate limit )
<cls> <noptr> dirty poll interval ( <noptr> dirty <dot> <noptr> thresh )
<cls> <noptr> wb max pause ( <ptr> wb <dot> <noptr> wb dirty )
<cls> <noptr> wb min pause ( <ptr> wb <dot> <noptr> max pause <dot> <noptr> task rate limit <dot> <noptr> dirty rate limit <dot> <ptr> nr dir tied pause )
<cls> <noptr> wb dirty limits ( <ptr> dtc )
<cls> <noptr> balance dirty pages ( <ptr> wb <dot> <noptr> pages dir tied )
<cls> <noptr> page write back cpu online ( <noptr> cpu )
<cls> <noptr> write page ( <ptr> page <dot> <ptr> wbc <dot> <ptr> data )
<cls> <noptr> walk page range ( <ptr> m m <dot> <noptr> start <dot> <noptr> end <dot> <ptr> ops <dot> <ptr> private )
<cls> <noptr> walk page vma ( <ptr> vma <dot> <ptr> ops <dot> <ptr> private )
<cls> <noptr> walk page mapping ( <ptr> mapping <dot> <noptr> first index <dot> <noptr> nr <dot> <ptr> ops <dot> <ptr> private )
<cls> <noptr> walk pud range ( <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> walk pgd range ( <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> huge tlb entry end ( <ptr> h <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> walk huge tlb range ( <noptr> addr <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> walk page test ( <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> walk page range ( <noptr> start <dot> <noptr> end <dot> <ptr> walk )
<cls> <noptr> get pfn block flags mask ( <ptr> page <dot> <noptr> pfn <dot> <noptr> end bit idx <dot> <noptr> mask )
<cls> <noptr> set pfn block flags mask ( <ptr> page <dot> <noptr> flags <dot> <noptr> pfn <dot> <noptr> end bit idx <dot> <noptr> mask )
<cls> <noptr> seth w poison free buddy page ( <ptr> page )
<cls> <noptr> clear zone contiguous ( <ptr> zone )
<cls> <noptr> free area init core hot plug ( <noptr> nid )
<cls> <noptr> build all zone lists ( <ptr> pg dat )
<cls> <noptr> zone watermark ok ( <ptr> z <dot> <noptr> order <dot> <noptr> mark <dot> <noptr> class zoneid x <dot> <noptr> alloc flags <dot> <noptr> free pages )
<cls> <noptr> zone watermark ok ( <ptr> z <dot> <noptr> order <dot> <noptr> mark <dot> <noptr> class zoneid x <dot> <noptr> alloc flags )
<cls> <noptr> init currently empty zone ( <ptr> zone <dot> <noptr> zone start pfn <dot> <noptr> size )
<cls> <noptr> min free kbytes sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> watermark boost factor sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> watermark scale factor sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> low mem reserve ratio sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> per cpu page list fraction sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> sysctl min unmapped ratio sysctl handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> numa zone list order handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> page alloc init ( )
<cls> <noptr> drain zone pages ( <ptr> zone <dot> <ptr> pcp )
<cls> <noptr> drain all pages ( <ptr> zone )
<cls> <noptr> drain local pages ( <ptr> zone )
<cls> <noptr> page alloc init late ( )
<cls> <noptr> gfp pf memalloc allowed ( <noptr> gfp mask )
<cls> <noptr> pm restrict gfp mask ( )
<cls> <noptr> pm restore gfp mask ( )
<cls> <noptr> pm suspended storage ( )
<cls> <noptr> init cma reserved page block ( <ptr> page )
<cls> <noptr> split page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> mem map init zone device ( <ptr> zone <dot> <noptr> start pfn <dot> <noptr> size <dot> <ptr> pg map )
<cls> <noptr> show free areas ( <noptr> filter <dot> <ptr> node mask )
<cls> <noptr> free area init node ( <noptr> nid <dot> <ptr> zones size <dot> <noptr> node start pfn <dot> <ptr> z holes size )
<cls> <noptr> mem init print info ( <ptr> str )
<cls> <noptr> reserve boot mem region ( <noptr> start <dot> <noptr> end )
<cls> <noptr> absent pages inrange ( <noptr> nid <dot> <noptr> range start pfn <dot> <noptr> range end pfn )
<cls> <noptr> absent pages inrange ( <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> get pfn range for nid ( <noptr> nid <dot> <ptr> start pfn <dot> <ptr> end pfn )
<cls> <noptr> sparse memory present with active regions ( <noptr> nid )
<cls> <noptr> zero res v un avail ( )
<cls> <noptr> set dma reserve ( <noptr> new dma reserve )
<cls> <noptr> mem map init zone ( <noptr> size <dot> <noptr> nid <dot> <noptr> zone <dot> <noptr> start pfn <dot> <noptr> context <dot> <ptr> alt map )
<cls> <noptr> init per zone w mark min ( )
<cls> <noptr> sime m available ( )
<cls> <noptr> sime m info ( <ptr> val )
<cls> <noptr> sime m info node ( <ptr> val <dot> <noptr> nid )
<cls> <noptr> warn alloc ( <noptr> gfp mask <dot> <ptr> node mask <dot> <ptr> fmt )
<cls> <noptr> set upper cpu page set ( )
<cls> <noptr> init debug page alloc ( )
<cls> <noptr> nr free page cache pages ( )
<cls> <noptr> mark free pages ( <ptr> zone )
<cls> <noptr> has un movable pages ( <ptr> zone <dot> <ptr> page <dot> <noptr> count <dot> <noptr> migrate type <dot> <noptr> flags )
<cls> <noptr> set page block migrate type ( <ptr> page <dot> <noptr> migrate type )
<cls> <noptr> fs reclaim acquire ( )
<cls> <noptr> fs reclaim release ( )
<cls> <noptr> fs reclaim acquire ( <noptr> gfp mask )
<cls> <noptr> fs reclaim release ( <noptr> gfp mask )
<cls> <ptr> page block pfn to page ( <noptr> start pfn <dot> <noptr> end pfn <dot> <ptr> zone )
<cls> <noptr> isolate free page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> prep compound page ( <ptr> page <dot> <noptr> order )
<cls> <noptr> zone pcp update ( <ptr> zone )
<cls> <noptr> zone pcp reset ( <ptr> zone )
<cls> <noptr> find suitable fallback ( <ptr> area <dot> <noptr> order <dot> <noptr> migrate type <dot> <noptr> only steal able <dot> <ptr> can steal )
<cls> <noptr> set page block order ( )
<cls> <noptr> setup zone page set ( <ptr> zone )
<cls> <noptr> early init on alloc ( <ptr> buf )
<cls> <noptr> early init on free ( <ptr> buf )
<cls> <noptr> set pcp page migrate type ( <ptr> page <dot> <noptr> migrate type )
<cls> <noptr> early page un initialised ( <noptr> pfn )
<cls> <noptr> defer init ( <noptr> nid <dot> <noptr> pfn <dot> <noptr> end pfn )
<cls> <ptr> get page block bitmap ( <ptr> page <dot> <noptr> pfn )
<cls> <noptr> get pfn block flags mask ( <ptr> page <dot> <noptr> pfn <dot> <noptr> end bit idx <dot> <noptr> mask )
<cls> <noptr> get pfn block migrate type ( <ptr> page <dot> <noptr> pfn )
<cls> <noptr> page is consistent ( <ptr> zone <dot> <ptr> page )
<cls> <noptr> bad range ( <ptr> zone <dot> <ptr> page )
<cls> <noptr> bad page ( <ptr> page <dot> <ptr> reason <dot> <noptr> bad flags )
<cls> <noptr> early debug page alloc ( <ptr> buf )
<cls> <noptr> debug guard page min order setup ( <ptr> buf )
<cls> <noptr> set page guard ( <ptr> zone <dot> <ptr> page <dot> <noptr> order <dot> <noptr> migrate type )
<cls> <noptr> clear page guard ( <ptr> zone <dot> <ptr> page <dot> <noptr> order <dot> <noptr> migrate type )
<cls> <noptr> set page order ( <ptr> page <dot> <noptr> order )
<cls> <noptr> page is buddy ( <ptr> page <dot> <ptr> buddy <dot> <noptr> order )
<cls> <noptr> compaction capture ( <ptr> cap c <dot> <ptr> page <dot> <noptr> order <dot> <noptr> migrate type )
<cls> <noptr> page expected state ( <ptr> page <dot> <noptr> check flags )
<cls> <noptr> free pages check bad ( <ptr> page )
<cls> <noptr> free tail pages check ( <ptr> head page <dot> <ptr> page )
<cls> <noptr> kernel init free pages ( <ptr> page <dot> <noptr> numpages )
<cls> <noptr> pre fetch buddy ( <ptr> page )
<cls> <noptr> init single page ( <ptr> page <dot> <noptr> pfn <dot> <noptr> zone <dot> <noptr> nid )
<cls> <noptr> init reserved page ( <noptr> pfn )
<cls> <noptr> early pfn in nid ( <noptr> pfn <dot> <noptr> node )
<cls> <noptr> pg dat init report one done ( )
<cls> <noptr> deferred pfn valid ( <noptr> pfn )
<cls> <noptr> deferred init pages ( <ptr> zone <dot> <noptr> pfn <dot> <noptr> end pfn )
<cls> <noptr> deferred init max order ( <ptr> i <dot> <ptr> zone <dot> <ptr> start pfn <dot> <ptr> end pfn )
<cls> <noptr> deferred init mem map ( <ptr> data )
<cls> <noptr> deferred grow zone ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> deferred grow zone ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> expand ( <ptr> zone <dot> <ptr> page <dot> <noptr> low <dot> <noptr> high <dot> <ptr> area <dot> <noptr> migrate type )
<cls> <noptr> check new page ( <ptr> page )
<cls> <noptr> free pages pre zeroed ( )
<cls> <noptr> check pcp refill ( <ptr> page )
<cls> <noptr> check new pcp ( <ptr> page )
<cls> <noptr> check new pages ( <ptr> page <dot> <noptr> order )
<cls> <ptr> r m queue smallest ( <ptr> zone <dot> <noptr> order <dot> <noptr> migrate type )
<cls> <ptr> r m queue cma fallback ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> change page block range ( <ptr> page block page <dot> <noptr> start order <dot> <noptr> migrate type )
<cls> <noptr> can steal fallback ( <noptr> order <dot> <noptr> start mt )
<cls> <noptr> boost watermark ( <ptr> zone )
<cls> <noptr> steal suitable fallback ( <ptr> zone <dot> <ptr> page <dot> <noptr> alloc flags <dot> <noptr> start type <dot> <noptr> whole block )
<cls> <noptr> un reserve high atomic page block ( <ptr> ac <dot> <noptr> force )
<cls> <noptr> r m queue fallback ( <ptr> zone <dot> <noptr> order <dot> <noptr> start migrate type <dot> <noptr> alloc flags )
<cls> <ptr> r m queue ( <ptr> zone <dot> <noptr> order <dot> <noptr> migrate type <dot> <noptr> alloc flags )
<cls> <noptr> r m queue bulk ( <ptr> zone <dot> <noptr> order <dot> <noptr> count <dot> <ptr> list <dot> <noptr> migrate type <dot> <noptr> alloc flags )
<cls> <noptr> drain pages ( <noptr> cpu )
<cls> <noptr> drain local pages wq ( <ptr> work )
<cls> <noptr> zone statistics ( <ptr> preferred zone <dot> <ptr> z )
<cls> <ptr> r m queue pcp list ( <ptr> zone <dot> <noptr> migrate type <dot> <noptr> alloc flags <dot> <ptr> pcp <dot> <ptr> list )
<cls> <ptr> r m queue pcp list ( <ptr> preferred zone <dot> <ptr> zone <dot> <noptr> gfp flags <dot> <noptr> migrate type <dot> <noptr> alloc flags )
<cls> <ptr> r m queue ( <ptr> preferred zone <dot> <ptr> zone <dot> <noptr> order <dot> <noptr> gfp flags <dot> <noptr> alloc flags <dot> <noptr> migrate type )
<cls> <noptr> setup fail page alloc ( <ptr> str )
<cls> <noptr> should fail alloc page ( <noptr> gfp mask <dot> <noptr> order )
<cls> <noptr> fail page alloc debug fs ( )
<cls> <noptr> should fail alloc page ( <noptr> gfp mask <dot> <noptr> order )
<cls> <noptr> zone watermark fast ( <ptr> z <dot> <noptr> order <dot> <noptr> mark <dot> <noptr> class zoneid x <dot> <noptr> alloc flags )
<cls> <noptr> zone allows reclaim ( <ptr> local zone <dot> <ptr> zone )
<cls> <noptr> alloc flags no fragment ( <ptr> zone <dot> <noptr> gfp mask )
<cls> <ptr> get page from free list ( <noptr> gfp mask <dot> <noptr> order <dot> <noptr> alloc flags <dot> <ptr> ac )
<cls> <noptr> warn alloc show mem ( <noptr> gfp mask <dot> <ptr> node mask )
<cls> <noptr> should compact retry ( <ptr> ac <dot> <noptr> order <dot> <noptr> alloc flags <dot> <noptr> compact result <dot> <ptr> compact priority <dot> <ptr> compaction retries )
<cls> <noptr> need fs reclaim ( <noptr> gfp mask )
<cls> <noptr> perform reclaim ( <noptr> gfp mask <dot> <noptr> order <dot> <ptr> ac )
<cls> <noptr> wake all k swap ds ( <noptr> order <dot> <noptr> gfp mask <dot> <ptr> ac )
<cls> <noptr> gfp to alloc flags ( <noptr> gfp mask )
<cls> <noptr> gfp pf memalloc flags ( <noptr> gfp mask )
<cls> <noptr> should reclaim retry ( <noptr> gfp mask <dot> <noptr> order <dot> <ptr> ac <dot> <noptr> alloc flags <dot> <noptr> did some progress <dot> <ptr> no progress loops )
<cls> <noptr> check retry cpu set ( <noptr> cpu set mems cookie <dot> <ptr> ac )
<cls> <noptr> final is eac ( <noptr> gfp mask <dot> <ptr> ac )
<cls> <noptr> nr free zone pages ( <noptr> offset )
<cls> <noptr> show node ( <ptr> zone )
<cls> <noptr> show mem node skip ( <noptr> flags <dot> <noptr> nid <dot> <ptr> node mask )
<cls> <noptr> show migration types ( <noptr> type )
<cls> <noptr> zone ref set zone ( <ptr> zone <dot> <ptr> zone ref )
<cls> <noptr> build zone refs node ( <ptr> pg dat <dot> <ptr> zone refs )
<cls> <noptr> parse numa zone list order ( <ptr> s )
<cls> <noptr> setup numa zone list order ( <ptr> s )
<cls> <noptr> find next best node ( <noptr> node <dot> <ptr> used node mask )
<cls> <noptr> build zone list sin node order ( <ptr> pg dat <dot> <ptr> node order <dot> <noptr> nr nodes )
<cls> <noptr> build this node zone lists ( <ptr> pg dat )
<cls> <noptr> build zone lists ( <ptr> pg dat )
<cls> <noptr> setup min unmapped ratio ( )
<cls> <noptr> setup page set ( <ptr> p <dot> <noptr> batch )
<cls> <noptr> build all zone lists ( <ptr> data )
<cls> <noptr> build all zone lists init ( )
<cls> <noptr> overlap mem map init ( <noptr> zone <dot> <ptr> pfn )
<cls> <noptr> mem map init ( <noptr> size <dot> <noptr> nid <dot> <noptr> zone <dot> <noptr> start pfn )
<cls> <noptr> zone batch size ( <ptr> zone )
<cls> <noptr> page set update ( <ptr> pcp <dot> <noptr> high <dot> <noptr> batch )
<cls> <noptr> page set init ( <ptr> p )
<cls> <noptr> zone page set init ( <ptr> zone <dot> <noptr> cpu )
<cls> <noptr> zone pcp init ( <ptr> zone )
<cls> <noptr> find usable zone for movable ( )
<cls> <noptr> adjust zone range for zone movable ( <noptr> nid <dot> <noptr> zone type <dot> <noptr> node start pfn <dot> <noptr> node end pfn <dot> <ptr> zone start pfn <dot> <ptr> zone end pfn )
<cls> <noptr> zone absent pages in node ( <noptr> nid <dot> <noptr> zone type <dot> <noptr> node start pfn <dot> <noptr> node end pfn <dot> <ptr> ignored )
<cls> <noptr> setup use map ( <ptr> pg dat <dot> <ptr> zone <dot> <noptr> zone start pfn <dot> <noptr> zone size )
<cls> <noptr> calc mem map size ( <noptr> spanned pages <dot> <noptr> present pages )
<cls> <noptr> pg dat init split queue ( <ptr> pg dat )
<cls> <noptr> pg dat init internals ( <ptr> pg dat )
<cls> <noptr> zone init internals ( <ptr> zone <dot> <noptr> idx <dot> <noptr> nid <dot> <noptr> remaining pages )
<cls> <noptr> free area init core ( <ptr> pg dat )
<cls> <noptr> zero pfn range ( <noptr> spf n <dot> <noptr> e pfn )
<cls> <noptr> early calculate total pages ( )
<cls> <noptr> check for memory ( <ptr> pg dat <dot> <noptr> nid )
<cls> <noptr> cmdline parse core ( <ptr> p <dot> <ptr> core <dot> <ptr> percent )
<cls> <noptr> cmdline parse kernel core ( <ptr> p )
<cls> <noptr> cmdline parse movable core ( <ptr> p )
<cls> <noptr> page alloc cpu dead ( <noptr> cpu )
<cls> <noptr> set hash dist ( <ptr> str )
<cls> <noptr> set upper zone low mem reserve ( )
<cls> <noptr> set upper zone w marks ( )
<cls> <noptr> zone pcp update ( <ptr> zone )
<cls> <noptr> pfn max align down ( <noptr> pfn )
<cls> <noptr> pfn max align up ( <noptr> pfn )
<cls> <noptr> pfn range valid contig ( <ptr> z <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> zone spans last pfn ( <ptr> zone <dot> <noptr> start pfn <dot> <noptr> nr pages )
<cls> <noptr> page counter cancel ( <ptr> counter <dot> <noptr> nr pages )
<cls> <noptr> page counter charge ( <ptr> counter <dot> <noptr> nr pages )
<cls> <noptr> page counter un charge ( <ptr> counter <dot> <noptr> nr pages )
<cls> <noptr> page counter set min ( <ptr> counter <dot> <noptr> nr pages )
<cls> <noptr> page counter set low ( <ptr> counter <dot> <noptr> nr pages )
<cls> <noptr> page counter set max ( <ptr> counter <dot> <noptr> nr pages )
<cls> <noptr> page counter mem parse ( <ptr> buf <dot> <ptr> max <dot> <ptr> nr pages )
<cls> <noptr> pg dat page ext init ( <ptr> pg dat )
<cls> <ptr> lookup page ext ( <ptr> page )
<cls> <noptr> invoke init callbacks ( )
<cls> <ptr> get entry ( <ptr> core dev )
<cls> <noptr> online page ext ( <noptr> start pfn <dot> <noptr> nr pages <dot> <noptr> nid )
<cls> <ptr> page idle get page ( <noptr> pfn )
<cls> <noptr> page idle clear pte refs one ( <ptr> page <dot> <ptr> vma <dot> <noptr> addr <dot> <ptr> arg )
<cls> <noptr> page idle clear pte refs ( <ptr> page )
<cls> <noptr> page idle bitmap write ( <ptr> file <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> pos <dot> <noptr> count )
<cls> <noptr> page idle init ( )
<cls> <noptr> swap read page ( <ptr> page <dot> <noptr> synchronous )
<cls> <noptr> swap write page ( <ptr> page <dot> <ptr> wbc )
<cls> <noptr> end swap bio write ( <ptr> bio )
<cls> <noptr> swap write page ( <ptr> page <dot> <ptr> wbc <dot> <noptr> end write func )
<cls> <noptr> swap set page dirty ( <ptr> page )
<cls> <noptr> generic swap file activate ( <ptr> sis <dot> <ptr> swap file <dot> <ptr> span )
<cls> <noptr> end swap bio read ( <ptr> bio )
<cls> <noptr> swap page sector ( <ptr> page )
<cls> <noptr> count swp out vm event ( <ptr> page )
<cls> <noptr> start isolate page range ( <noptr> start pfn <dot> <noptr> end pfn <dot> <noptr> migrate type <dot> <noptr> flags )
<cls> <noptr> undo isolate page range ( <noptr> start pfn <dot> <noptr> end pfn <dot> <noptr> migrate type )
<cls> <noptr> test pages isolated ( <noptr> start pfn <dot> <noptr> end pfn <dot> <noptr> isol flags )
<cls> <noptr> set migrate type isolate ( <ptr> page <dot> <noptr> migrate type <dot> <noptr> isol flags )
<cls> <noptr> unset migrate type isolate ( <ptr> page <dot> <noptr> migrate type )
<cls> <ptr> first valid page ( <noptr> pfn <dot> <noptr> nr pages )
<cls> <noptr> test page isolated in page block ( <noptr> pfn <dot> <noptr> end pfn <dot> <noptr> flags )
<cls> <noptr> set page owner ( <ptr> page <dot> <noptr> order <dot> <noptr> gfp mask )
<cls> <noptr> split page owner ( <ptr> page <dot> <noptr> order )
<cls> <noptr> copy page owner ( <ptr> old page <dot> <ptr> new page )
<cls> <noptr> set page owner migrate reason ( <ptr> page <dot> <noptr> reason )
<cls> <noptr> dump page owner ( <ptr> page )
<cls> <noptr> page type info show mixed count print ( <ptr> m <dot> <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> init early allocated pages ( )
<cls> <noptr> early page owner param ( <ptr> buf )
<cls> <noptr> need page owner ( )
<cls> <noptr> create dummy stack ( )
<cls> <noptr> register dummy stack ( )
<cls> <noptr> register failure stack ( )
<cls> <noptr> register early stack ( )
<cls> <noptr> init page owner ( )
<cls> <noptr> check recursive alloc ( <ptr> entries <dot> <noptr> nr entries <dot> <noptr> ip )
<cls> <noptr> print page owner ( <ptr> buf <dot> <noptr> count <dot> <noptr> pfn <dot> <ptr> page <dot> <ptr> page owner <dot> <noptr> handle )
<cls> <noptr> read page owner ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> init pages in zone ( <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> init zones in node ( <ptr> pg dat )
<cls> <noptr> page poison ing enabled ( )
<cls> <noptr> early page poison param ( <ptr> buf )
<cls> <noptr> poison page ( <ptr> page )
<cls> <noptr> single bit flip ( <noptr> a <dot> <noptr> b )
<cls> <noptr> check poison mem ( <ptr> mem <dot> <noptr> bytes )
<cls> <noptr> un poison page ( <ptr> page )
<cls> <noptr> un poison pages ( <ptr> page <dot> <noptr> n )
<cls> <noptr> page vma mapped walk ( <ptr> pvm w )
<cls> <noptr> page mapped inv ma ( <ptr> page <dot> <ptr> vma )
<cls> <noptr> not found ( <ptr> pvm w )
<cls> <noptr> map pte ( <ptr> pvm w )
<cls> <noptr> pfn in h page ( <ptr> h page <dot> <noptr> pfn )
<cls> <noptr> check pte ( <ptr> pvm w )
<cls> <noptr> cmp int ( <ptr> a <dot> <ptr> b )
<cls> <noptr> find max nr alloc ( )
<cls> <noptr> chunk map stats ( <ptr> m <dot> <ptr> chunk <dot> <ptr> buffer )
<cls> <noptr> per cpu stats show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> per cpu stats open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> init per cpu stats debug fs ( )
<cls> <noptr> p cpu setup first chunk ( <ptr> a i <dot> <ptr> base addr )
<cls> <noptr> p cpu embed first chunk ( <noptr> reserved size <dot> <noptr> dyn size <dot> <noptr> atom size <dot> <noptr> cpu distance fn <dot> <noptr> alloc fn <dot> <noptr> free fn )
<cls> <noptr> p cpu page first chunk ( <noptr> reserved size <dot> <noptr> alloc fn <dot> <noptr> free fn <dot> <noptr> populate pte fn )
<cls> <noptr> is kernel per cpu address ( <noptr> addr <dot> <ptr> can addr )
<cls> <noptr> is kernel per cpu address ( <noptr> addr )
<cls> <noptr> per cpu ptr to phys ( <ptr> addr )
<cls> <noptr> p cpu nr pages ( )
<cls> <noptr> p cpu balance work fn ( <ptr> work )
<cls> <noptr> p cpu schedule balance work ( )
<cls> <noptr> p cpu addr in chunk ( <ptr> chunk <dot> <ptr> addr )
<cls> <noptr> p cpu size to slot ( <noptr> size )
<cls> <noptr> p cpu chunks lot ( <ptr> chunk )
<cls> <noptr> p cpu set page chunk ( <ptr> page <dot> <ptr> p cpu )
<cls> <ptr> p cpu get page chunk ( <ptr> page )
<cls> <noptr> p cpu chunk addr ( <ptr> chunk <dot> <noptr> cpu <dot> <noptr> page idx )
<cls> <noptr> p cpu next pop ( <ptr> bitmap <dot> <ptr> rs <dot> <ptr> re <dot> <noptr> end )
<cls> <ptr> p cpu index alloc map ( <ptr> chunk <dot> <noptr> index )
<cls> <noptr> p cpu off to block index ( <noptr> off )
<cls> <noptr> p cpu off to block off ( <noptr> off )
<cls> <noptr> p cpu block off to off ( <noptr> index <dot> <noptr> off )
<cls> <noptr> p cpu next hint ( <ptr> block <dot> <noptr> alloc bits )
<cls> <noptr> p cpu next md free region ( <ptr> chunk <dot> <ptr> bit off <dot> <ptr> bits )
<cls> <noptr> p cpu chunk move ( <ptr> chunk <dot> <noptr> slot <dot> <noptr> move front )
<cls> <noptr> p cpu chunk move ( <ptr> chunk <dot> <noptr> slot )
<cls> <noptr> p cpu chunk relocate ( <ptr> chunk <dot> <noptr> os lot )
<cls> <noptr> p cpu update empty pages ( <ptr> chunk <dot> <noptr> nr )
<cls> <noptr> p cpu region overlap ( <noptr> a <dot> <noptr> b <dot> <noptr> x <dot> <noptr> y )
<cls> <noptr> p cpu block update ( <ptr> block <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> p cpu block updates can ( <ptr> chunk <dot> <noptr> bit off <dot> <noptr> bits )
<cls> <noptr> p cpu chunk refresh hint ( <ptr> chunk <dot> <noptr> full scan )
<cls> <noptr> p cpu block refresh hint ( <ptr> chunk <dot> <noptr> index )
<cls> <noptr> p cpu block update hint alloc ( <ptr> chunk <dot> <noptr> bit off <dot> <noptr> bits )
<cls> <noptr> p cpu block update hint free ( <ptr> chunk <dot> <noptr> bit off <dot> <noptr> bits )
<cls> <noptr> p cpu is populated ( <ptr> chunk <dot> <noptr> bit off <dot> <noptr> bits <dot> <ptr> next off )
<cls> <noptr> p cpu find block fit ( <ptr> chunk <dot> <noptr> alloc bits <dot> <noptr> align <dot> <noptr> pop only )
<cls> <noptr> p cpu find zero area ( <ptr> map <dot> <noptr> size <dot> <noptr> start <dot> <noptr> nr <dot> <noptr> align mask <dot> <ptr> largest off <dot> <ptr> largest bits )
<cls> <noptr> p cpu init md block ( <ptr> block <dot> <noptr> nr bits )
<cls> <noptr> p cpu init md blocks ( <ptr> chunk )
<cls> <noptr> p cpu chunk populated ( <ptr> chunk <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> pcp ude populate chunk ( <ptr> chunk <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> p cpu verify alloc info ( <ptr> a i )
<cls> <ptr> p cpu chunk page ( <ptr> chunk <dot> <noptr> cpu <dot> <noptr> page idx )
<cls> <noptr> p cpu pre unmap flush ( <ptr> chunk <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> p cpu post unmap tlb flush ( <ptr> chunk <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> p cpu map pages ( <noptr> addr <dot> <dptr> pages <dot> <noptr> nr pages )
<cls> <noptr> p cpu post map flush ( <ptr> chunk <dot> <noptr> page start <dot> <noptr> page end )
<cls> <noptr> p cpu dump alloc info ( <ptr> lvl <dot> <ptr> a i )
<cls> <noptr> pte p clear flush ( <ptr> vma <dot> <noptr> address <dot> <ptr> pte p )
<cls> <noptr> pmd p huge clear flush ( <ptr> vma <dot> <noptr> address <dot> <ptr> pmd p )
<cls> <noptr> p udp huge clear flush ( <ptr> vma <dot> <noptr> address <dot> <ptr> p udp )
<cls> <noptr> pmd p collapse flush ( <ptr> vma <dot> <noptr> address <dot> <ptr> pmd p )
<cls> <noptr> pg table trans huge deposit ( <ptr> m m <dot> <ptr> pmd p <dot> <noptr> pg table )
<cls> <noptr> pg table trans huge withdraw ( <ptr> m m <dot> <ptr> pmd p )
<cls> <noptr> pmd p invalidate ( <ptr> vma <dot> <noptr> address <dot> <ptr> pmd p )
<cls> <noptr> pgd clear bad ( <ptr> pgd )
<cls> <noptr> pd clear bad ( <ptr> pd )
<cls> <noptr> pud clear bad ( <ptr> pud )
<cls> <noptr> pmd clear bad ( <ptr> pmd )
<cls> <noptr> process vm rw pages ( <dptr> pages <dot> <noptr> offset <dot> <noptr> len <dot> <ptr> iter <dot> <noptr> vm write )
<cls> <noptr> process vm rw single vec ( <noptr> addr <dot> <noptr> len <dot> <ptr> iter <dot> <dptr> process pages <dot> <ptr> m m <dot> <ptr> task <dot> <noptr> vm write )
<cls> <noptr> process vm rw ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags <dot> <noptr> vm write )
<cls> <noptr> x sys process vm read v ( <ptr> regs )
<cls> <noptr> se sys process vm read v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> do sys process vm read v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> i asys process vm read v ( <ptr> regs )
<cls> <noptr> x sys process vm write v ( <ptr> regs )
<cls> <noptr> se sys process vm write v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> do sys process vm write v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> i asys process vm write v ( <ptr> regs )
<cls> <noptr> compat process vm rw ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags <dot> <noptr> vm write )
<cls> <noptr> do compat sys process vm read v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> i a compat sys process vm read v ( <ptr> regs )
<cls> <noptr> x compat sys process vm read v ( <ptr> regs )
<cls> <noptr> se compat sys process vm write v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> do compat sys process vm write v ( <noptr> pid <dot> <ptr> l vec <dot> <noptr> lio v cnt <dot> <ptr> rvec <dot> <noptr> rio v cnt <dot> <noptr> flags )
<cls> <noptr> x compat sys process vm write v ( <ptr> regs )
<cls> <noptr> quar antine put ( <ptr> info <dot> <ptr> cache )
<cls> <noptr> qlist empty ( <ptr> q )
<cls> <noptr> qlist init ( <ptr> q )
<cls> <noptr> qlist put ( <ptr> q <dot> <ptr> q link <dot> <noptr> size )
<cls> <noptr> qlist move all ( <ptr> from <dot> <ptr> to )
<cls> <ptr> q link to cache ( <ptr> q link )
<cls> <ptr> q link to object ( <ptr> q link <dot> <ptr> cache )
<cls> <noptr> qlist move cache ( <ptr> from <dot> <ptr> to <dot> <ptr> cache )
<cls> <noptr> file ra state init ( <ptr> ra <dot> <ptr> mapping )
<cls> <noptr> force page cache read ahead ( <ptr> mapping <dot> <ptr> filp <dot> <noptr> offset <dot> <noptr> nr to read )
<cls> <noptr> page cache sync read ahead ( <ptr> mapping <dot> <ptr> ra <dot> <ptr> filp <dot> <noptr> offset <dot> <noptr> req size )
<cls> <noptr> page cache async read ahead ( <ptr> mapping <dot> <ptr> ra <dot> <ptr> filp <dot> <ptr> page <dot> <noptr> offset <dot> <noptr> req size )
<cls> <noptr> k sys read ahead ( <noptr> fd <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> do page cache read ahead ( <ptr> mapping <dot> <ptr> filp <dot> <noptr> offset <dot> <noptr> nr to read <dot> <noptr> look ahead size )
<cls> <noptr> read cache pages invalidate page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> read cache pages invalidate pages ( <ptr> mapping <dot> <ptr> pages )
<cls> <noptr> read pages ( <ptr> mapping <dot> <ptr> filp <dot> <ptr> pages <dot> <noptr> nr pages <dot> <noptr> gfp )
<cls> <noptr> get init ra size ( <noptr> size <dot> <noptr> max )
<cls> <noptr> count history pages ( <ptr> mapping <dot> <noptr> offset <dot> <noptr> max )
<cls> <noptr> try context read ahead ( <ptr> mapping <dot> <ptr> ra <dot> <noptr> offset <dot> <noptr> req size <dot> <noptr> max )
<cls> <noptr> ondemand read ahead ( <ptr> mapping <dot> <ptr> ra <dot> <ptr> filp <dot> <noptr> hit read ahead marker <dot> <noptr> offset <dot> <noptr> req size )
<cls> <noptr> se sys read ahead ( <noptr> fd <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> i asys read ahead ( <ptr> regs )
<cls> <noptr> kas an save enable multi shot ( )
<cls> <noptr> kas an restore multi shot ( <noptr> enabled )
<cls> <noptr> kas an report invalid free ( <ptr> object <dot> <noptr> ip )
<cls> <ptr> kas an addr to page ( <ptr> addr )
<cls> <noptr> kas an set multi shot ( <ptr> str )
<cls> <noptr> print error description ( <ptr> info )
<cls> <noptr> end report ( <ptr> flags )
<cls> <noptr> print track ( <ptr> track <dot> <ptr> prefix )
<cls> <noptr> describe object addr ( <ptr> cache <dot> <ptr> object <dot> <ptr> addr )
<cls> <ptr> kas an get free track ( <ptr> cache <dot> <ptr> object <dot> <noptr> tag )
<cls> <noptr> describe object ( <ptr> cache <dot> <ptr> object <dot> <ptr> addr <dot> <noptr> tag )
<cls> <noptr> kernel or module addr ( <ptr> addr )
<cls> <noptr> init task stack addr ( <ptr> addr )
<cls> <noptr> tokenize frame descr ( <dptr> frame descr <dot> <ptr> token <dot> <noptr> max tok len <dot> <ptr> value )
<cls> <noptr> print decoded frame descr ( <ptr> frame descr )
<cls> <noptr> print address stack frame ( <ptr> addr )
<cls> <noptr> row is guilty ( <ptr> row <dot> <ptr> guilty )
<cls> <noptr> shadow pointer offset ( <ptr> row <dot> <ptr> shadow )
<cls> <noptr> report enabled ( )
<cls> <noptr> kas an report ( <noptr> addr <dot> <noptr> size <dot> <noptr> is write <dot> <noptr> ip )
<cls> <noptr> is vma temporary stack ( <ptr> vma )
<cls> <noptr> anon v main it ( )
<cls> <noptr> unlink anon v mas ( <ptr> vma )
<cls> <noptr> anon vma fork ( <ptr> vma <dot> <ptr> pvm a )
<cls> <noptr> page move anon r map ( <ptr> page <dot> <ptr> vma )
<cls> <noptr> huge page add anon r map ( <ptr> page <dot> <ptr> vma <dot> <noptr> address )
<cls> <noptr> huge page add new anon r map ( <ptr> page <dot> <ptr> vma <dot> <noptr> address )
<cls> <noptr> page referenced ( <ptr> page <dot> <noptr> islocked <dot> <ptr> mem cg <dot> <ptr> vm flags )
<cls> <noptr> page address inv ma ( <ptr> page <dot> <ptr> vma )
<cls> <noptr> page mk clean ( <ptr> page )
<cls> <noptr> try tom unlock ( <ptr> page )
<cls> <ptr> page lock anon vma read ( <ptr> page )
<cls> <noptr> page unlock anon vma read ( <ptr> anon vma )
<cls> <noptr> r map walk ( <ptr> page <dot> <ptr> rw c )
<cls> <noptr> r map walk locked ( <ptr> page <dot> <ptr> rw c )
<cls> <ptr> m m find pmd ( <ptr> m m <dot> <noptr> address )
<cls> <noptr> try to unmap flush ( )
<cls> <noptr> flush tlb batched pending ( <ptr> m m )
<cls> <noptr> anon vma chain link ( <ptr> vma <dot> <ptr> avc <dot> <ptr> anon vma )
<cls> <ptr> lock anon vma root ( <ptr> root <dot> <ptr> anon vma )
<cls> <noptr> unlock anon vma root ( <ptr> root )
<cls> <noptr> anon vm actor ( <ptr> data )
<cls> <noptr> should defer flush ( <ptr> m m <dot> <noptr> flags )
<cls> <noptr> page referenced one ( <ptr> page <dot> <ptr> vma <dot> <noptr> address <dot> <ptr> arg )
<cls> <noptr> invalid page referenced vma ( <ptr> vma <dot> <ptr> arg )
<cls> <noptr> page mk clean one ( <ptr> page <dot> <ptr> vma <dot> <noptr> address <dot> <ptr> arg )
<cls> <noptr> invalid mk clean vma ( <ptr> vma <dot> <ptr> arg )
<cls> <noptr> page check anon r map ( <ptr> page <dot> <ptr> vma <dot> <noptr> address )
<cls> <noptr> invalid migration vma ( <ptr> vma <dot> <ptr> arg )
<cls> <noptr> page map count is zero ( <ptr> page )
<cls> <noptr> page not mapped ( <ptr> page )
<cls> <ptr> r map walk anon lock ( <ptr> page <dot> <ptr> rw c )
<cls> <noptr> r map walk anon ( <ptr> page <dot> <ptr> rw c <dot> <noptr> locked )
<cls> <noptr> r map walk file ( <ptr> page <dot> <ptr> rw c <dot> <noptr> locked )
<cls> <noptr> rodata test ( )
<cls> <noptr> v mais shmem ( <ptr> vma )
<cls> <noptr> shmem init ( )
<cls> <noptr> shmem init fs context ( <ptr> fc )
<cls> <ptr> shmem file setup ( <ptr> name <dot> <noptr> size <dot> <noptr> flags )
<cls> <ptr> shmem kernel file setup ( <ptr> name <dot> <noptr> size <dot> <noptr> flags )
<cls> <ptr> shmem file setup with mnt ( <ptr> mnt <dot> <ptr> name <dot> <noptr> size <dot> <noptr> flags )
<cls> <noptr> shmem zero setup ( <ptr> vma )
<cls> <noptr> shmem lock ( <ptr> file <dot> <noptr> lock <dot> <ptr> user )
<cls> <noptr> shmem unlock mapping ( <ptr> mapping )
<cls> <ptr> shmem read mapping page gfp ( <ptr> mapping <dot> <noptr> index <dot> <noptr> gfp )
<cls> <noptr> shmem truncate range ( <ptr> inode <dot> <noptr> l start <dot> <noptr> lend )
<cls> <noptr> shmem un use ( <noptr> type <dot> <noptr> front swap <dot> <ptr> fs pages to un use )
<cls> <noptr> shmem swap usage ( <ptr> vma )
<cls> <noptr> shmem partial swap usage ( <ptr> mapping <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> shmem get page ( <ptr> inode <dot> <noptr> index <dot> <dptr> page p <dot> <noptr> sg p )
<cls> <noptr> shmem charge ( <ptr> inode <dot> <noptr> pages )
<cls> <noptr> shmem huge enabled ( <ptr> vma )
<cls> <noptr> shmem m copy atomic pte ( <ptr> dst m m <dot> <ptr> dst pmd <dot> <ptr> dst vma <dot> <noptr> dst addr <dot> <noptr> src addr <dot> <dptr> page p )
<cls> <noptr> shmem m fill zero page pte ( <ptr> dst m m <dot> <ptr> dst pmd <dot> <ptr> dst vma <dot> <noptr> dst addr )
<cls> <noptr> shmem should replace page ( <ptr> page <dot> <noptr> gfp )
<cls> <noptr> shmem replace page ( <dptr> page p <dot> <noptr> gfp <dot> <ptr> info <dot> <noptr> index )
<cls> <noptr> shmem swap in page ( <ptr> inode <dot> <noptr> index <dot> <dptr> page p <dot> <noptr> sg p <dot> <noptr> gfp <dot> <ptr> vma <dot> <ptr> fault type )
<cls> <noptr> shmem get page gfp ( <ptr> inode <dot> <noptr> index <dot> <dptr> page p <dot> <noptr> sg p <dot> <noptr> gfp <dot> <ptr> vma <dot> <ptr> vm f <dot> <ptr> fault type )
<cls> <ptr> shmem sb ( <ptr> sb )
<cls> <noptr> shmem acct size ( <noptr> flags <dot> <noptr> size )
<cls> <noptr> shmem un acct size ( <noptr> flags <dot> <noptr> size )
<cls> <noptr> shmem re acct size ( <noptr> flags <dot> <noptr> old size <dot> <noptr> new size )
<cls> <noptr> shmem acct block ( <noptr> flags <dot> <noptr> pages )
<cls> <noptr> shmem un acct blocks ( <noptr> flags <dot> <noptr> pages )
<cls> <noptr> shmem inode acct block ( <ptr> inode <dot> <noptr> pages )
<cls> <noptr> shmem inode un acct blocks ( <ptr> inode <dot> <noptr> pages )
<cls> <noptr> shmem reserve inode ( <ptr> sb )
<cls> <noptr> shmem re calci node ( <ptr> inode )
<cls> <noptr> shmem replace entry ( <ptr> mapping <dot> <noptr> index <dot> <ptr> expected <dot> <ptr> replacement )
<cls> <noptr> shmem confirm swap ( <ptr> mapping <dot> <noptr> index <dot> <noptr> swap )
<cls> <noptr> shmem parse huge ( <ptr> str )
<cls> <ptr> shmem format huge ( <noptr> huge )
<cls> <noptr> shmem unused huge scan ( <ptr> sb <dot> <ptr> sc )
<cls> <noptr> is huge enabled ( <ptr> sb info )
<cls> <noptr> shmem add to page cache ( <ptr> page <dot> <ptr> mapping <dot> <noptr> index <dot> <ptr> expected <dot> <noptr> gfp )
<cls> <noptr> shmem undo range ( <ptr> inode <dot> <noptr> l start <dot> <noptr> lend <dot> <noptr> unf alloc )
<cls> <noptr> shmem getattr ( <ptr> path <dot> <ptr> stat <dot> <noptr> request mask <dot> <noptr> query flags )
<cls> <noptr> shmem setattr ( <ptr> dentry <dot> <ptr> attr )
<cls> <noptr> shmem evict inode ( <ptr> inode )
<cls> <noptr> shmem find swap entries ( <ptr> mapping <dot> <noptr> start <dot> <noptr> nr entries <dot> <dptr> entries <dot> <ptr> indices <dot> <noptr> type <dot> <noptr> front swap )
<cls> <noptr> shmem un use inode ( <ptr> inode <dot> <noptr> type <dot> <noptr> front swap <dot> <ptr> fs pages to un use )
<cls> <noptr> shmem write page ( <ptr> page <dot> <ptr> wbc )
<cls> <noptr> shmem show m pol ( <ptr> seq <dot> <ptr> m pol )
<cls> <noptr> shmem pseudo v main it ( <ptr> vma <dot> <ptr> info <dot> <noptr> index )
<cls> <ptr> shmem swap in ( <noptr> swap <dot> <noptr> gfp <dot> <ptr> info <dot> <noptr> index )
<cls> <noptr> shmem fault ( <ptr> vm f )
<cls> <ptr> shmem get policy ( <ptr> vma <dot> <noptr> addr )
<cls> <noptr> shmem m fill atomic pte ( <ptr> dst m m <dot> <ptr> dst pmd <dot> <ptr> dst vma <dot> <noptr> dst addr <dot> <noptr> src addr <dot> <noptr> zero page <dot> <dptr> page p )
<cls> <noptr> shmem write begin ( <ptr> file <dot> <ptr> mapping <dot> <noptr> pos <dot> <noptr> len <dot> <noptr> flags <dot> <dptr> page p <dot> <dptr> fs data )
<cls> <noptr> shmem write end ( <ptr> file <dot> <ptr> mapping <dot> <noptr> pos <dot> <noptr> len <dot> <noptr> copied <dot> <ptr> page <dot> <ptr> fs data )
<cls> <noptr> shmem file read iter ( <ptr> ioc b <dot> <ptr> to )
<cls> <noptr> shmem seek hole data ( <ptr> mapping <dot> <noptr> index <dot> <noptr> end <dot> <noptr> when ce )
<cls> <noptr> shmem file l lseek ( <ptr> file <dot> <noptr> offset <dot> <noptr> when ce )
<cls> <noptr> shmem f allocate ( <ptr> file <dot> <noptr> mode <dot> <noptr> offset <dot> <noptr> len )
<cls> <noptr> shmem statfs ( <ptr> dentry <dot> <ptr> buf )
<cls> <noptr> shmem tmp file ( <ptr> dir <dot> <ptr> dentry <dot> <noptr> mode )
<cls> <noptr> shmem mkdir ( <ptr> dir <dot> <ptr> dentry <dot> <noptr> mode )
<cls> <noptr> shmem link ( <ptr> old dentry <dot> <ptr> dir <dot> <ptr> dentry )
<cls> <noptr> shmem unlink ( <ptr> dir <dot> <ptr> dentry )
<cls> <noptr> shmem rmdir ( <ptr> dir <dot> <ptr> dentry )
<cls> <noptr> shmem white out ( <ptr> old dir <dot> <ptr> old dentry )
<cls> <noptr> shmem rename ( <ptr> old dir <dot> <ptr> old dentry <dot> <ptr> new dir <dot> <ptr> new dentry <dot> <noptr> flags )
<cls> <noptr> shmem symlink ( <ptr> dir <dot> <ptr> dentry <dot> <ptr> sym name )
<cls> <noptr> shmem list x attr ( <ptr> dentry <dot> <ptr> buffer <dot> <noptr> size )
<cls> <noptr> shmem match ( <ptr> ino <dot> <ptr> v f h )
<cls> <ptr> shmem find alias ( <ptr> inode )
<cls> <ptr> shmem f h to dentry ( <ptr> sb <dot> <ptr> fid <dot> <noptr> f hlen <dot> <noptr> f h type )
<cls> <noptr> shmem encode f h ( <ptr> inode <dot> <ptr> f h <dot> <ptr> len <dot> <ptr> parent )
<cls> <noptr> shmem parse one ( <ptr> fc <dot> <ptr> param )
<cls> <noptr> shmem parse options ( <ptr> fc <dot> <ptr> data )
<cls> <noptr> shmem show options ( <ptr> seq <dot> <ptr> root )
<cls> <noptr> shmem fill super ( <ptr> sb <dot> <ptr> fc )
<cls> <noptr> shmem get tree ( <ptr> fc )
<cls> <noptr> shmem initi node ( <ptr> foo )
<cls> <noptr> shmem initi node cache ( )
<cls> <noptr> shmem enabled show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> shmem enabled store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <ptr> shmem file setup ( <ptr> mnt <dot> <ptr> name <dot> <noptr> size <dot> <noptr> flags <dot> <noptr> i flags )
<cls> <noptr> add to free area random ( <ptr> page <dot> <ptr> area <dot> <noptr> migrate type )
<cls> <noptr> page alloc shuffle ( <noptr> ctl )
<cls> <noptr> shuffle zone ( <ptr> z )
<cls> <noptr> shuffle show ( <ptr> buffer <dot> <ptr> kp )
<cls> <ptr> shuffle valid page ( <noptr> pfn <dot> <noptr> order )
<cls> <noptr> slab isavailable ( )
<cls> <noptr> mem cg deactivate k mem caches ( <ptr> mem cg <dot> <ptr> parent )
<cls> <noptr> ksize ( <ptr> obj p )
<cls> <noptr> mem cg update all caches ( <noptr> num mem c gs )
<cls> <noptr> k mem cache size ( <ptr> s )
<cls> <noptr> setup kmalloc cache index table ( )
<cls> <noptr> slab un merge able ( <ptr> s )
<cls> <noptr> slab init mem cg params ( <ptr> s )
<cls> <noptr> mem cg link cache ( <ptr> s <dot> <ptr> mem cg )
<cls> <ptr> slab start ( <ptr> m <dot> <ptr> pos )
<cls> <ptr> slab next ( <ptr> m <dot> <ptr> p <dot> <ptr> pos )
<cls> <noptr> slab stop ( <ptr> m <dot> <ptr> p )
<cls> <ptr> mem cg slab next ( <ptr> m <dot> <ptr> p <dot> <ptr> pos )
<cls> <noptr> mem cg slab stop ( <ptr> m <dot> <ptr> p )
<cls> <noptr> mem cg slab show ( <ptr> m <dot> <ptr> p )
<cls> <ptr> check user copy fallback ( )
<cls> <noptr> setup slab no merge ( <ptr> str )
<cls> <noptr> k mem cache sanity check ( <ptr> name <dot> <noptr> size )
<cls> <noptr> init mem cg params ( <ptr> s <dot> <ptr> root cache )
<cls> <noptr> update mem cg params ( <ptr> s <dot> <noptr> new array size )
<cls> <noptr> mem cg unlink cache ( <ptr> s )
<cls> <noptr> calculate alignment ( <noptr> flags <dot> <noptr> align <dot> <noptr> size )
<cls> <noptr> k mem cg work fn ( <ptr> work )
<cls> <noptr> k mem cg rcu fn ( <ptr> head )
<cls> <noptr> k mem cg cache deactivate after rcu ( <ptr> s )
<cls> <noptr> k mem cg cache deactivate ( <ptr> s )
<cls> <noptr> flush mem cg work queue ( <ptr> s )
<cls> <noptr> size index elem ( <noptr> bytes )
<cls> <noptr> free list randomize ( <ptr> state <dot> <ptr> list <dot> <noptr> count )
<cls> <noptr> prints lab info header ( <ptr> m )
<cls> <noptr> mem cg accumulates lab info ( <ptr> s <dot> <ptr> info )
<cls> <noptr> cache show ( <ptr> s <dot> <ptr> m )
<cls> <noptr> slab show ( <ptr> m <dot> <ptr> p )
<cls> <noptr> slab info open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> slab proc init ( )
<cls> <noptr> mem cg slab info open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> mem cg slab info init ( )
<cls> <noptr> ksize ( <ptr> object )
<cls> <noptr> k mem cache init ( )
<cls> <noptr> check heap object ( <ptr> ptr <dot> <noptr> n <dot> <ptr> page <dot> <noptr> to user )
<cls> <noptr> k mem cache init late ( )
<cls> <noptr> sysfs slab unlink ( <ptr> s )
<cls> <ptr> fixup red left ( <ptr> s <dot> <ptr> p )
<cls> <ptr> k mem cache alias ( <ptr> name <dot> <noptr> size <dot> <noptr> align <dot> <noptr> flags <dot> <ptr> ctor )
<cls> <noptr> k mem cache flags ( <noptr> object size <dot> <noptr> flags <dot> <ptr> name <dot> <ptr> ctor )
<cls> <noptr> k mem cache empty ( <ptr> s )
<cls> <noptr> k mem cg cache deactivate ( <ptr> s )
<cls> <noptr> k mem cg cache deactivate after rcu ( <ptr> s )
<cls> <noptr> gets lab info ( <ptr> s <dot> <ptr> sinfo )
<cls> <noptr> slab info show stats ( <ptr> m <dot> <ptr> s )
<cls> <noptr> slab info write ( <ptr> file <dot> <ptr> buffer <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> k mem cache debug ( <ptr> s )
<cls> <noptr> k mem cache has cpu partial ( <ptr> s )
<cls> <noptr> sysfs slab alias ( <ptr> s <dot> <ptr> name )
<cls> <noptr> mem cg propagates lab attrs ( <ptr> s )
<cls> <noptr> sysfs slab remove ( <ptr> s )
<cls> <noptr> stat ( <ptr> s <dot> <noptr> si )
<cls> <ptr> free list ptr ( <ptr> s <dot> <ptr> ptr <dot> <noptr> ptr addr )
<cls> <ptr> free list dereference ( <ptr> s <dot> <ptr> ptr addr )
<cls> <ptr> get free pointer ( <ptr> s <dot> <ptr> object )
<cls> <noptr> pre fetch free pointer ( <ptr> s <dot> <ptr> object )
<cls> <ptr> get free pointer safe ( <ptr> s <dot> <ptr> object )
<cls> <noptr> set free pointer ( <ptr> s <dot> <ptr> object <dot> <ptr> fp )
<cls> <noptr> slab index ( <ptr> p <dot> <ptr> s <dot> <ptr> addr )
<cls> <noptr> oo make ( <noptr> order <dot> <noptr> size )
<cls> <noptr> oo order ( <noptr> x )
<cls> <noptr> sla block ( <ptr> page )
<cls> <noptr> cmp x chg double slab ( <ptr> s <dot> <ptr> page <dot> <ptr> free list old <dot> <noptr> counter sold <dot> <ptr> free list new <dot> <noptr> counters new <dot> <ptr> n )
<cls> <noptr> cmp x chg double slab ( <ptr> s <dot> <ptr> page <dot> <ptr> free list old <dot> <noptr> counter sold <dot> <ptr> free list new <dot> <noptr> counters new <dot> <ptr> n )
<cls> <noptr> get map ( <ptr> s <dot> <ptr> page <dot> <ptr> map )
<cls> <noptr> size from object ( <ptr> s )
<cls> <ptr> restore red left ( <ptr> s <dot> <ptr> p )
<cls> <noptr> metadata access enable ( )
<cls> <noptr> metadata access disable ( )
<cls> <noptr> check valid pointer ( <ptr> s <dot> <ptr> page <dot> <ptr> object )
<cls> <ptr> get track ( <ptr> s <dot> <ptr> object <dot> <noptr> alloc )
<cls> <noptr> init tracking ( <ptr> s <dot> <ptr> object )
<cls> <noptr> print tracking ( <ptr> s <dot> <ptr> object )
<cls> <noptr> print page info ( <ptr> page )
<cls> <noptr> slab bug ( <ptr> s <dot> <ptr> fmt )
<cls> <noptr> slab fix ( <ptr> s <dot> <ptr> fmt )
<cls> <noptr> print trailer ( <ptr> s <dot> <ptr> page <dot> <ptr> p )
<cls> <noptr> init object ( <ptr> s <dot> <ptr> object <dot> <noptr> val )
<cls> <noptr> restore bytes ( <ptr> s <dot> <ptr> message <dot> <noptr> data <dot> <ptr> from <dot> <ptr> to )
<cls> <noptr> check bytes and report ( <ptr> s <dot> <ptr> page <dot> <ptr> object <dot> <ptr> what <dot> <ptr> start <dot> <noptr> value <dot> <noptr> bytes )
<cls> <noptr> check pad bytes ( <ptr> s <dot> <ptr> page <dot> <ptr> p )
<cls> <noptr> slab pad check ( <ptr> s <dot> <ptr> page )
<cls> <noptr> check object ( <ptr> s <dot> <ptr> page <dot> <ptr> object <dot> <noptr> val )
<cls> <noptr> checks lab ( <ptr> s <dot> <ptr> page )
<cls> <noptr> on free list ( <ptr> s <dot> <ptr> page <dot> <ptr> search )
<cls> <noptr> trace ( <ptr> s <dot> <ptr> page <dot> <ptr> object <dot> <noptr> alloc )
<cls> <noptr> add full ( <ptr> s <dot> <ptr> n <dot> <ptr> page )
<cls> <noptr> remove full ( <ptr> s <dot> <ptr> n <dot> <ptr> page )
<cls> <noptr> s labs node ( <ptr> s <dot> <noptr> node )
<cls> <noptr> node n rs labs ( <ptr> n )
<cls> <noptr> in cs labs node ( <ptr> s <dot> <noptr> node <dot> <noptr> objects )
<cls> <noptr> dec s labs node ( <ptr> s <dot> <noptr> node <dot> <noptr> objects )
<cls> <noptr> setup object debug ( <ptr> s <dot> <ptr> page <dot> <ptr> object )
<cls> <noptr> setup page debug ( <ptr> s <dot> <ptr> page <dot> <ptr> addr )
<cls> <noptr> alloc consistency checks ( <ptr> s <dot> <ptr> page <dot> <ptr> object )
<cls> <noptr> alloc debug processing ( <ptr> s <dot> <ptr> page <dot> <ptr> object <dot> <noptr> addr )
<cls> <noptr> free consistency checks ( <ptr> s <dot> <ptr> page <dot> <ptr> object <dot> <noptr> addr )
<cls> <noptr> free debug processing ( <ptr> s <dot> <ptr> page <dot> <ptr> head <dot> <ptr> tail <dot> <noptr> bulk cnt <dot> <noptr> addr )
<cls> <noptr> setups lub debug ( <ptr> str )
<cls> <noptr> init cache random seq ( <ptr> s )
<cls> <noptr> init free list random ization ( )
<cls> <ptr> next free list entry ( <ptr> s <dot> <ptr> page <dot> <ptr> pos <dot> <ptr> start <dot> <noptr> page limit <dot> <noptr> free list count )
<cls> <noptr> add partial ( <ptr> n <dot> <ptr> page <dot> <noptr> tail )
<cls> <noptr> add partial ( <ptr> n <dot> <ptr> page <dot> <noptr> tail )
<cls> <noptr> remove partial ( <ptr> n <dot> <ptr> page )
<cls> <ptr> acquires lab ( <ptr> s <dot> <ptr> n <dot> <ptr> page <dot> <noptr> mode <dot> <ptr> objects )
<cls> <noptr> put cpu partial ( <ptr> s <dot> <ptr> page <dot> <noptr> drain )
<cls> <ptr> get partial node ( <ptr> s <dot> <ptr> n <dot> <ptr> c <dot> <noptr> flags )
<cls> <ptr> get partial ( <ptr> s <dot> <noptr> flags <dot> <noptr> node <dot> <ptr> c )
<cls> <noptr> next tid ( <noptr> tid )
<cls> <noptr> init tid ( <noptr> cpu )
<cls> <noptr> note cmp x chg failure ( <ptr> n <dot> <ptr> s <dot> <noptr> tid )
<cls> <noptr> init k mem cache cpus ( <ptr> s )
<cls> <noptr> un freeze partials ( <ptr> s <dot> <ptr> c )
<cls> <noptr> flush slab ( <ptr> s <dot> <ptr> c )
<cls> <noptr> flush cpus lab ( <ptr> s <dot> <noptr> cpu )
<cls> <noptr> flush cpus lab ( <ptr> d )
<cls> <noptr> has cpus lab ( <noptr> cpu <dot> <ptr> info )
<cls> <noptr> flush all ( <ptr> s )
<cls> <noptr> slu b cpu dead ( <noptr> cpu )
<cls> <noptr> node match ( <ptr> page <dot> <noptr> node )
<cls> <noptr> node nr objs ( <ptr> n )
<cls> <noptr> slab outofmemory ( <ptr> s <dot> <noptr> gfp flags <dot> <noptr> nid )
<cls> <ptr> get free list ( <ptr> s <dot> <ptr> page )
<cls> <noptr> maybe wipe obj free ptr ( <ptr> s <dot> <ptr> obj )
<cls> <noptr> build detached free list ( <ptr> s <dot> <noptr> size <dot> <dptr> p <dot> <ptr> df )
<cls> <noptr> slab order ( <noptr> size <dot> <noptr> min objects <dot> <noptr> max order <dot> <noptr> fract leftover )
<cls> <noptr> calculate order ( <noptr> size )
<cls> <noptr> init k mem cache node ( <ptr> n )
<cls> <noptr> set min partial ( <ptr> s <dot> <noptr> min )
<cls> <noptr> set cpu partial ( <ptr> s )
<cls> <noptr> calculate sizes ( <ptr> s <dot> <noptr> forced order )
<cls> <noptr> k mem cache open ( <ptr> s <dot> <noptr> flags )
<cls> <noptr> lists lab objects ( <ptr> s <dot> <ptr> page <dot> <ptr> text )
<cls> <noptr> setups lub min objects ( <ptr> str )
<cls> <noptr> slab mem going offline callback ( <ptr> arg )
<cls> <noptr> slab mem offline callback ( <ptr> arg )
<cls> <noptr> slab mem going online callback ( <ptr> arg )
<cls> <noptr> slab memory callback ( <ptr> self <dot> <noptr> action <dot> <ptr> arg )
<cls> <ptr> bootstrap ( <ptr> static cache )
<cls> <noptr> count in use ( <ptr> page )
<cls> <noptr> count total ( <ptr> page )
<cls> <noptr> validates labs lab ( <ptr> s <dot> <ptr> page <dot> <ptr> map )
<cls> <noptr> validates lab node ( <ptr> s <dot> <ptr> n <dot> <ptr> map )
<cls> <noptr> validates lab cache ( <ptr> s )
<cls> <noptr> add location ( <ptr> t <dot> <ptr> s <dot> <ptr> track )
<cls> <noptr> process slab ( <ptr> t <dot> <ptr> s <dot> <ptr> page <dot> <noptr> alloc <dot> <ptr> map )
<cls> <noptr> list locations ( <ptr> s <dot> <ptr> buf <dot> <noptr> alloc )
<cls> <noptr> resili ency test ( )
<cls> <noptr> setups lub mem cg sysfs ( <ptr> str )
<cls> <noptr> any slab objects ( <ptr> s )
<cls> <noptr> slab size show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> align show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> object size show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> obj spers lab show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> order store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> order show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> min partial show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpu partial show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpu partial store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> ctor show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> aliases show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> partial show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpus labs show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> objects show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> objects partial show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> s labs cpu partial show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> reclaim account show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> reclaim account store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> hw cache align show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cached mas how ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> user size show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> s labs show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> total objects show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> sanity checks show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> sanity checks store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> trace show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> trace store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> red zone show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> poison show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> poison store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> store users how ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> store user store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> validate show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> validate store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> alloc calls show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> free calls show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> fails lab store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> shrink show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> remote node def rag ratio show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> remote node def rag ratio store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> show stat ( <ptr> s <dot> <ptr> buf <dot> <noptr> si )
<cls> <noptr> clear stat ( <ptr> s <dot> <noptr> si )
<cls> <noptr> alloc fast path show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> alloc fast path store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> alloc slow path show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> alloc slow path store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> free fast path show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> free fast path store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> free slow path show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> free frozen show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> free frozen store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> free add partial store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> free remove partial store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> alloc from partial show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> alloc from partial store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> alloc slab store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> alloc refill store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> alloc node mismatch show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> v map page range no flush ( <noptr> start <dot> <noptr> end <dot> <noptr> prot <dot> <dptr> pages )
<cls> <noptr> alloc node mismatch store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> free slab show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> free slab store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> cpus lab flush show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpus lab flush store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> deactivate full show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> deactivate empty show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> deactivate empty store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> deactivate to head show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> deactivate to head store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> deactivate to tail show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> deactivate to tail store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> deactivate remote frees show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> deactivate remote frees store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> deactivate bypass show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> order fallback show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cmp x chg double cpu fails how ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cmp x chg double cpu fail store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> cmp x chg double fails how ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cmp x chg double fail store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> cpu partial alloc show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpu partial alloc store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> cpu partial free show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpu partial free store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> cpu partial node show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpu partial node store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> cpu partial drain show ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> cpu partial drain store ( <ptr> s <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> slab attr show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> slab attr store ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> u event filter ( <ptr> k set <dot> <ptr> k obj )
<cls> <ptr> cache k set ( <ptr> s )
<cls> <ptr> create uniqueid ( <ptr> s )
<cls> <noptr> sysfs slab remove work fn ( <ptr> work )
<cls> <noptr> slab sysfs init ( )
<cls> <ptr> populate section mem map ( <noptr> pfn <dot> <noptr> nr pages <dot> <noptr> nid <dot> <ptr> alt map )
<cls> <ptr> v mem map pgd populate ( <noptr> addr <dot> <noptr> node )
<cls> <ptr> v mem m app d populate ( <ptr> pgd <dot> <noptr> addr <dot> <noptr> node )
<cls> <ptr> v mem map pud populate ( <ptr> pd <dot> <noptr> addr <dot> <noptr> node )
<cls> <noptr> v mem map verify ( <ptr> pte <dot> <noptr> node <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> v mem alt map next pfn ( <ptr> alt map )
<cls> <noptr> sparse add section ( <noptr> nid <dot> <noptr> start pfn <dot> <noptr> nr pages <dot> <ptr> alt map )
<cls> <ptr> sparse decode mem map ( <noptr> coded mem map <dot> <noptr> pnum )
<cls> <noptr> memory present ( <noptr> nid <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> mem blocks present ( )
<cls> <noptr> subsection map init ( <noptr> pfn <dot> <noptr> nr pages )
<cls> <noptr> section nr ( <ptr> ms )
<cls> <noptr> mem section usage size ( )
<cls> <noptr> offline mem sections ( <noptr> start pfn <dot> <noptr> end pfn )
<cls> <noptr> v mem map populate print last ( )
<cls> <noptr> m m init validate mem model limits ( <ptr> start pfn <dot> <ptr> end pfn )
<cls> <noptr> sparse index init ( <noptr> section nr <dot> <noptr> nid )
<cls> <noptr> sparse encode early nid ( <noptr> nid )
<cls> <noptr> sparse early nid ( <ptr> section )
<cls> <noptr> first present section nr ( )
<cls> <noptr> subsection mask set ( <ptr> map <dot> <noptr> pfn <dot> <noptr> nr pages )
<cls> <noptr> sparse encode mem map ( <ptr> mem map <dot> <noptr> pnum )
<cls> <noptr> use map size ( )
<cls> <noptr> check use map section nr ( <noptr> nid <dot> <ptr> usage )
<cls> <noptr> section map size ( )
<cls> <noptr> sparse buffer fini ( )
<cls> <noptr> sparse init nid ( <noptr> nid <dot> <noptr> pnum begin <dot> <noptr> pnum end <dot> <noptr> map count )
<cls> <noptr> section deactivate ( <noptr> pfn <dot> <noptr> nr pages <dot> <ptr> alt map )
<cls> <noptr> clear hw poison ed pages ( <ptr> mem map <dot> <noptr> nr pages )
<cls> <noptr> lrucache add ( <ptr> page )
<cls> <noptr> lrucache add anon ( <ptr> page )
<cls> <noptr> lru add page tail ( <ptr> page <dot> <ptr> page tail <dot> <ptr> lru vec <dot> <ptr> list )
<cls> <noptr> activate page ( <ptr> page )
<cls> <noptr> lru add drain ( )
<cls> <noptr> lru add drain all ( )
<cls> <noptr> deactivate page ( <ptr> page )
<cls> <noptr> swap setup ( )
<cls> <noptr> lrucache add active or une vic table ( <ptr> page <dot> <ptr> vma )
<cls> <noptr> page vec lru add ( <ptr> p vec )
<cls> <noptr> page vec lookup entries ( <ptr> p vec <dot> <ptr> mapping <dot> <noptr> start <dot> <noptr> nr entries <dot> <ptr> indices )
<cls> <noptr> page vec remove exception als ( <ptr> p vec )
<cls> <noptr> page vec lookup range ( <ptr> p vec <dot> <ptr> mapping <dot> <ptr> start <dot> <noptr> end )
<cls> <noptr> page vec lookup range tag ( <ptr> p vec <dot> <ptr> mapping <dot> <ptr> index <dot> <noptr> end <dot> <noptr> tag )
<cls> <noptr> page vec lookup range nr tag ( <ptr> p vec <dot> <ptr> mapping <dot> <ptr> index <dot> <noptr> end <dot> <noptr> tag <dot> <noptr> max pages )
<cls> <noptr> page cache release ( <ptr> page )
<cls> <noptr> page vec lru move fn ( <ptr> p vec <dot> <ptr> move fn <dot> <ptr> arg )
<cls> <noptr> page vec move tail fn ( <ptr> page <dot> <ptr> lru vec <dot> <ptr> arg )
<cls> <noptr> page vec move tail ( <ptr> p vec )
<cls> <noptr> update page reclaim stat ( <ptr> lru vec <dot> <noptr> file <dot> <noptr> rotated )
<cls> <noptr> activate page ( <ptr> page <dot> <ptr> lru vec <dot> <ptr> arg )
<cls> <noptr> activate page drain ( <noptr> cpu )
<cls> <noptr> need activate page drain ( <noptr> cpu )
<cls> <noptr> lrucache add ( <ptr> page )
<cls> <noptr> lru deactivate file fn ( <ptr> page <dot> <ptr> lru vec <dot> <ptr> arg )
<cls> <noptr> lru deactivate fn ( <ptr> page <dot> <ptr> lru vec <dot> <ptr> arg )
<cls> <noptr> lru lazy free fn ( <ptr> page <dot> <ptr> lru vec <dot> <ptr> arg )
<cls> <noptr> lru add drain per cpu ( <ptr> dummy )
<cls> <noptr> page vec lru add fn ( <ptr> page <dot> <ptr> lru vec <dot> <ptr> arg )
<cls> <ptr> page file mapping ( <ptr> page )
<cls> <noptr> add swap extent ( <ptr> sis <dot> <noptr> start page <dot> <noptr> nr pages <dot> <noptr> start block )
<cls> <noptr> has usable swap ( )
<cls> <noptr> siswa pinfo ( <ptr> val )
<cls> <noptr> add swap count continuation ( <noptr> entry <dot> <noptr> gfp mask )
<cls> <noptr> swap shmem alloc ( <noptr> entry )
<cls> <noptr> swap duplicate ( <noptr> entry )
<cls> <noptr> swap cache prepare ( <noptr> entry )
<cls> <noptr> swap typeof ( <noptr> device <dot> <noptr> offset <dot> <dptr> b dev p )
<cls> <noptr> count swap pages ( <noptr> type <dot> <noptr> free )
<cls> <noptr> map swap page ( <ptr> page <dot> <dptr> b dev )
<cls> <noptr> swap dev block ( <noptr> type <dot> <noptr> offset )
<cls> <noptr> page swap count ( <ptr> page )
<cls> <noptr> swap count ( <noptr> entry )
<cls> <noptr> swp swap count ( <noptr> entry )
<cls> <noptr> swp swap count ( <noptr> entry )
<cls> <ptr> page swap info ( <ptr> page )
<cls> <ptr> swp swap info ( <noptr> entry )
<cls> <noptr> reuse swap page ( <ptr> page <dot> <ptr> total map swap count )
<cls> <ptr> get swap device ( <noptr> entry )
<cls> <noptr> split swap cluster ( <noptr> entry )
<cls> <noptr> mem cgroup throttle swap rate ( <ptr> mem cg <dot> <noptr> node <dot> <noptr> gfp mask )
<cls> <noptr> try to un use ( <noptr> type <dot> <noptr> front swap <dot> <noptr> pages to un use )
<cls> <noptr> generic max swap filesize ( )
<cls> <noptr> map swap entry ( <noptr> entry <dot> <dptr> b dev )
<cls> <ptr> swap type to swap info ( <noptr> type )
<cls> <noptr> try to reclaim swap ( <ptr> si <dot> <noptr> offset <dot> <noptr> flags )
<cls> <ptr> first se ( <ptr> sis )
<cls> <ptr> next se ( <ptr> se )
<cls> <noptr> discard swap ( <ptr> si )
<cls> <ptr> offset to swap extent ( <ptr> sis <dot> <noptr> offset )
<cls> <noptr> discard swap cluster ( <ptr> si <dot> <noptr> start page <dot> <noptr> nr pages )
<cls> <noptr> cluster count ( <ptr> info )
<cls> <noptr> cluster set count ( <ptr> info <dot> <noptr> c )
<cls> <noptr> cluster set count flag ( <ptr> info <dot> <noptr> c <dot> <noptr> f )
<cls> <noptr> cluster next ( <ptr> info )
<cls> <noptr> cluster set next ( <ptr> info <dot> <noptr> n )
<cls> <noptr> cluster set next flag ( <ptr> info <dot> <noptr> n <dot> <noptr> f )
<cls> <noptr> cluster isnull ( <ptr> info )
<cls> <noptr> cluster set null ( <ptr> info )
<cls> <noptr> cluster is huge ( <ptr> info )
<cls> <noptr> cluster clear huge ( <ptr> info )
<cls> <ptr> lock cluster ( <ptr> si <dot> <noptr> offset )
<cls> <noptr> unlock cluster ( <ptr> c i )
<cls> <ptr> lock cluster or swap info ( <ptr> si <dot> <noptr> offset )
<cls> <noptr> unlock cluster or swap info ( <ptr> si <dot> <ptr> c i )
<cls> <noptr> cluster list empty ( <ptr> list )
<cls> <noptr> cluster list first ( <ptr> list )
<cls> <noptr> cluster list add tail ( <ptr> list <dot> <ptr> c i <dot> <noptr> idx )
<cls> <noptr> swap cluster schedule discard ( <ptr> si <dot> <noptr> idx )
<cls> <noptr> free cluster ( <ptr> si <dot> <noptr> idx )
<cls> <noptr> free cluster ( <ptr> si <dot> <noptr> idx )
<cls> <noptr> inc cluster info page ( <ptr> p <dot> <ptr> cluster info <dot> <noptr> page nr )
<cls> <noptr> dec cluster info page ( <ptr> p <dot> <ptr> cluster info <dot> <noptr> page nr )
<cls> <noptr> scan swap map ssd cluster conflict ( <ptr> si <dot> <noptr> offset )
<cls> <noptr> del from avail list ( <ptr> p )
<cls> <noptr> swap range alloc ( <ptr> si <dot> <noptr> offset <dot> <noptr> nr entries )
<cls> <noptr> add to avail list ( <ptr> p )
<cls> <noptr> scan swap map slots ( <ptr> si <dot> <noptr> usage <dot> <noptr> nr <dot> <noptr> slots )
<cls> <ptr> swap info get ( <noptr> entry )
<cls> <ptr> swap info get ( <noptr> entry )
<cls> <ptr> swap info get cont ( <noptr> entry <dot> <ptr> q )
<cls> <noptr> swap entry free locked ( <ptr> p <dot> <noptr> offset <dot> <noptr> usage )
<cls> <noptr> swp entry cmp ( <ptr> ent <dot> <ptr> ent )
<cls> <noptr> swap swap count ( <ptr> si <dot> <noptr> entry )
<cls> <noptr> swap page trans huge swapped ( <ptr> si <dot> <noptr> entry )
<cls> <noptr> page swapped ( <ptr> page )
<cls> <noptr> page trans huge map swap count ( <ptr> page <dot> <ptr> total map count <dot> <ptr> total swap count )
<cls> <noptr> un use pte ( <ptr> vma <dot> <ptr> pmd <dot> <noptr> addr <dot> <noptr> entry <dot> <ptr> page )
<cls> <noptr> un use pmd range ( <ptr> vma <dot> <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> type <dot> <noptr> front swap <dot> <ptr> fs pages to un use )
<cls> <noptr> un use pud range ( <ptr> vma <dot> <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> type <dot> <noptr> front swap <dot> <ptr> fs pages to un use )
<cls> <noptr> find next to un use ( <ptr> si <dot> <noptr> prev <dot> <noptr> front swap )
<cls> <noptr> drain m m list ( )
<cls> <noptr> setup swap extents ( <ptr> sis <dot> <ptr> span )
<cls> <noptr> setup swap info ( <ptr> p <dot> <noptr> prio <dot> <ptr> swap map <dot> <ptr> cluster info )
<cls> <noptr> enable swap info ( <ptr> p )
<cls> <noptr> enable swap info ( <ptr> p <dot> <noptr> prio <dot> <ptr> swap map <dot> <ptr> cluster info <dot> <ptr> front swap map )
<cls> <noptr> re insert swap info ( <ptr> p )
<cls> <noptr> x sys swap off ( <ptr> regs )
<cls> <noptr> se sys swap off ( <ptr> special file )
<cls> <noptr> do sys swap off ( <ptr> special file )
<cls> <noptr> i asys swap off ( <ptr> regs )
<cls> <ptr> swap start ( <ptr> swap <dot> <ptr> pos )
<cls> <ptr> swap next ( <ptr> swap <dot> <ptr> v <dot> <ptr> pos )
<cls> <noptr> swap stop ( <ptr> swap <dot> <ptr> v )
<cls> <noptr> swap show ( <ptr> swap <dot> <ptr> v )
<cls> <noptr> swaps open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> proc swaps init ( )
<cls> <noptr> max swap files check ( )
<cls> <noptr> claim swap file ( <ptr> p <dot> <ptr> inode )
<cls> <noptr> setup swap map and extents ( <ptr> p <dot> <ptr> swap header <dot> <ptr> swap map <dot> <ptr> cluster info <dot> <noptr> max pages <dot> <ptr> span )
<cls> <noptr> swap discard able ( <ptr> si )
<cls> <noptr> x sys swap on ( <ptr> regs )
<cls> <noptr> se sys swap on ( <ptr> special file <dot> <noptr> swap flags )
<cls> <noptr> do sys swap on ( <ptr> special file <dot> <noptr> swap flags )
<cls> <noptr> i asys swap on ( <ptr> regs )
<cls> <noptr> swap duplicate ( <noptr> entry <dot> <noptr> usage )
<cls> <noptr> swap file init ( )
<cls> <noptr> swap cgroup cmp x chg ( <noptr> ent <dot> <noptr> old <dot> <noptr> new )
<cls> <noptr> swap cgroup swap off ( <noptr> type )
<cls> <noptr> swap cgroup prepare ( <noptr> type )
<cls> <ptr> lookup swap cgroup ( <ptr> ctrl <dot> <noptr> offset )
<cls> <ptr> lookup swap cgroup ( <noptr> ent <dot> <dptr> ctrl p )
<cls> <noptr> disable swap slots cache lock ( )
<cls> <noptr> re enable swap slots cache unlock ( )
<cls> <noptr> deactivate swap slots cache ( )
<cls> <noptr> re enable swap slots cache ( )
<cls> <noptr> check cache active ( )
<cls> <noptr> refill swap slots cache ( <ptr> cache )
<cls> <noptr> total swap cache pages ( )
<cls> <noptr> show swap cache info ( )
<cls> <noptr> add to swap ( <ptr> page )
<cls> <noptr> delete from swap cache ( <ptr> page <dot> <noptr> entry )
<cls> <noptr> delete from swap cache ( <ptr> page )
<cls> <ptr> read swap cache async ( <noptr> entry <dot> <noptr> gfp mask <dot> <ptr> vma <dot> <noptr> addr <dot> <noptr> do poll )
<cls> <ptr> read swap cache async ( <noptr> entry <dot> <noptr> gfp mask <dot> <ptr> vma <dot> <noptr> addr <dot> <ptr> new page allocated )
<cls> <ptr> swap cluster read ahead ( <noptr> entry <dot> <noptr> gfp mask <dot> <ptr> vm f )
<cls> <ptr> swap in read ahead ( <noptr> entry <dot> <noptr> gfp mask <dot> <ptr> vm f )
<cls> <noptr> init swap address space ( <noptr> type <dot> <noptr> nr pages )
<cls> <noptr> swap use vma read ahead ( )
<cls> <noptr> swap inn r pages ( <noptr> prev offset <dot> <noptr> offset <dot> <noptr> hits <dot> <noptr> max pages <dot> <noptr> prev win )
<cls> <noptr> swap inn r pages ( <noptr> offset )
<cls> <noptr> swap rac lampp fn ( <ptr> vma <dot> <noptr> f addr <dot> <noptr> lpfn <dot> <noptr> r pfn <dot> <ptr> start <dot> <ptr> end )
<cls> <noptr> swap ra info ( <ptr> vm f <dot> <ptr> ra info )
<cls> <ptr> swap vma read ahead ( <noptr> f entry <dot> <noptr> gfp mask <dot> <ptr> vm f )
<cls> <noptr> v mara enabled show ( <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> invalidate mapping pages ( <ptr> mapping <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> invalidate inode pages ( <ptr> mapping )
<cls> <noptr> invalidate inode pages range ( <ptr> mapping <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> truncate page cache ( <ptr> inode <dot> <noptr> new size )
<cls> <noptr> truncate set size ( <ptr> inode <dot> <noptr> new size )
<cls> <noptr> page cache i size extended ( <ptr> inode <dot> <noptr> from <dot> <noptr> to )
<cls> <noptr> truncate page cache range ( <ptr> inode <dot> <noptr> l start <dot> <noptr> lend )
<cls> <noptr> truncate inode page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> invalidate inode page ( <ptr> page )
<cls> <noptr> truncate inode pages ( <ptr> mapping <dot> <noptr> l start )
<cls> <noptr> truncate inode pages range ( <ptr> mapping <dot> <noptr> l start <dot> <noptr> lend )
<cls> <noptr> clear shadow entry ( <ptr> mapping <dot> <noptr> index <dot> <ptr> entry )
<cls> <noptr> clear shadow entry ( <ptr> mapping <dot> <noptr> index <dot> <ptr> entry )
<cls> <noptr> truncate exception alp vec entries ( <ptr> mapping <dot> <ptr> p vec <dot> <ptr> indices <dot> <noptr> end )
<cls> <noptr> invalidate exceptional entry ( <ptr> mapping <dot> <noptr> index <dot> <ptr> entry )
<cls> <noptr> invalidate complete page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> invalidate complete page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> do la under page ( <ptr> mapping <dot> <ptr> page )
<cls> <noptr> check object size ( <ptr> ptr <dot> <noptr> n <dot> <noptr> to user )
<cls> <noptr> user copy warn ( <ptr> name <dot> <ptr> detail <dot> <noptr> to user <dot> <noptr> offset <dot> <noptr> len )
<cls> <noptr> user copy abort ( <ptr> name <dot> <ptr> detail <dot> <noptr> to user <dot> <noptr> offset <dot> <noptr> len )
<cls> <noptr> check stack object ( <ptr> obj <dot> <noptr> len )
<cls> <noptr> overlaps ( <noptr> ptr <dot> <noptr> n <dot> <noptr> low <dot> <noptr> high )
<cls> <noptr> check bogus address ( <noptr> ptr <dot> <noptr> n <dot> <noptr> to user )
<cls> <noptr> check page span ( <ptr> ptr <dot> <noptr> n <dot> <ptr> page <dot> <noptr> to user )
<cls> <noptr> check heap object ( <ptr> ptr <dot> <noptr> n <dot> <noptr> to user )
<cls> <noptr> parse hardened user copy ( <ptr> str )
<cls> <noptr> set hardened user copy ( )
<cls> <noptr> m copy atomic ( <ptr> dst m m <dot> <noptr> dst start <dot> <noptr> src start <dot> <noptr> len <dot> <ptr> mmap changing )
<cls> <noptr> m fill zero page ( <ptr> dst m m <dot> <noptr> start <dot> <noptr> len <dot> <ptr> mmap changing )
<cls> <noptr> m copy atomic pte ( <ptr> dst m m <dot> <ptr> dst pmd <dot> <ptr> dst vma <dot> <noptr> dst addr <dot> <noptr> src addr <dot> <dptr> page p )
<cls> <noptr> m copy atomic huge tlb ( <ptr> dst m m <dot> <ptr> dst vma <dot> <noptr> dst start <dot> <noptr> src start <dot> <noptr> len <dot> <noptr> zero page )
<cls> <noptr> m fill atomic pte ( <ptr> dst m m <dot> <ptr> dst pmd <dot> <ptr> dst vma <dot> <noptr> dst addr <dot> <noptr> src addr <dot> <dptr> page <dot> <noptr> zero page )
<cls> <noptr> m copy atomic ( <ptr> dst m m <dot> <noptr> dst start <dot> <noptr> src start <dot> <noptr> len <dot> <noptr> zero page <dot> <ptr> mmap changing )
<cls> <ptr> mem dup user ( <ptr> src <dot> <noptr> len )
<cls> <ptr> v mem dup user ( <ptr> src <dot> <noptr> len )
<cls> <ptr> mem dup user nul ( <ptr> src <dot> <noptr> len )
<cls> <ptr> k str dup ( <ptr> s <dot> <noptr> gfp )
<cls> <ptr> k str dup const ( <ptr> s <dot> <noptr> gfp )
<cls> <ptr> k strn dup ( <ptr> s <dot> <noptr> max <dot> <noptr> gfp )
<cls> <noptr> over commit kbytes handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> len p <dot> <ptr> p pos )
<cls> <noptr> v mais stack for current ( <ptr> vma )
<cls> <ptr> pager mapping ( <ptr> page )
<cls> <ptr> page anon vma ( <ptr> page )
<cls> <noptr> page mapped ( <ptr> page )
<cls> <ptr> page mapping file ( <ptr> page )
<cls> <noptr> account locked vm ( <ptr> m m <dot> <noptr> pages <dot> <noptr> inc )
<cls> <noptr> account locked vm ( <ptr> m m <dot> <noptr> pages <dot> <noptr> inc <dot> <ptr> task <dot> <noptr> bypass r lim )
<cls> <noptr> get cmdline ( <ptr> task <dot> <ptr> buffer <dot> <noptr> buf len )
<cls> <noptr> vm enough memory ( <ptr> m m <dot> <noptr> pages <dot> <noptr> cap sysadmin )
<cls> <noptr> randomize stack top ( <noptr> stack top )
<cls> <noptr> vmm map ( <ptr> file <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> prot <dot> <noptr> flag <dot> <noptr> offset )
<cls> <noptr> memcmp pages ( <ptr> page <dot> <ptr> page )
<cls> <noptr> vm commit limit ( )
<cls> <noptr> vma link list ( <ptr> m m <dot> <ptr> vma <dot> <ptr> prev )
<cls> <noptr> v mmm app g off ( <ptr> file <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> prot <dot> <noptr> flag <dot> <noptr> pg off )
<cls> <ptr> pager mapping ( <ptr> page )
<cls> <noptr> vma cache update ( <noptr> addr <dot> <ptr> new vma )
<cls> <ptr> vma cache find ( <ptr> m m <dot> <noptr> addr )
<cls> <noptr> vma cache valid m m ( <ptr> m m )
<cls> <noptr> vma cache valid ( <ptr> m m )
<cls> <noptr> v munmap aliases ( )
<cls> <noptr> v malloc nr pages ( )
<cls> <noptr> v malloc sync all ( )
<cls> <ptr> get vm area ( <noptr> size <dot> <noptr> flags )
<cls> <ptr> get vm area caller ( <noptr> size <dot> <noptr> flags <dot> <ptr> caller )
<cls> <ptr> get vm area ( <noptr> size <dot> <noptr> flags <dot> <noptr> start <dot> <noptr> end )
<cls> <ptr> get vm area caller ( <noptr> size <dot> <noptr> flags <dot> <noptr> start <dot> <noptr> end <dot> <ptr> caller )
<cls> <ptr> find vm area ( <ptr> addr )
<cls> <noptr> map vm area ( <ptr> area <dot> <noptr> prot <dot> <dptr> pages )
<cls> <noptr> map kernel range no flush ( <noptr> addr <dot> <noptr> size <dot> <noptr> prot <dot> <dptr> pages )
<cls> <noptr> v read ( <ptr> buf <dot> <ptr> addr <dot> <noptr> count )
<cls> <noptr> vm area add early ( <ptr> vm )
<cls> <noptr> vm area register early ( <ptr> vm <dot> <noptr> align )
<cls> <noptr> set io unmap non lazy ( )
<cls> <noptr> is v malloc or module addr ( <ptr> x )
<cls> <noptr> v unmap pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> v unmap pmd range ( <ptr> pud <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> v unmap pud range ( <ptr> pd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> v unmap pd range ( <ptr> pgd <dot> <noptr> addr <dot> <noptr> end )
<cls> <noptr> v unmap page range ( <noptr> addr <dot> <noptr> end )
<cls> <noptr> v map pte range ( <ptr> pmd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> prot <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> v map pmd range ( <ptr> pud <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> prot <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> v map pud range ( <ptr> pd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> prot <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> vm app d range ( <ptr> pgd <dot> <noptr> addr <dot> <noptr> end <dot> <noptr> prot <dot> <dptr> pages <dot> <ptr> nr )
<cls> <noptr> va size ( <ptr> va )
<cls> <noptr> get sub tree max size ( <ptr> node )
<cls> <noptr> compute sub tree max size ( <ptr> va )
<cls> <noptr> free v map are arb augment cb compute max ( <ptr> node <dot> <noptr> exit )
<cls> <noptr> free v map are arb augment cb propagate ( <ptr> rb <dot> <ptr> stop )
<cls> <noptr> free v map are arb augment cb rotate ( <ptr> r bold <dot> <ptr> rb new )
<cls> <noptr> purge v map area lazy ( )
<cls> <dptr> find val inks ( <ptr> va <dot> <ptr> root <dot> <ptr> from <dot> <dptr> parent )
<cls> <ptr> get va next sibling ( <ptr> parent <dot> <dptr> link )
<cls> <noptr> probe user write ( <ptr> dst <dot> <ptr> src <dot> <noptr> size )
<cls> <noptr> augment tree propagate from ( <ptr> va )
<cls> <noptr> insert v map area ( <ptr> va <dot> <ptr> root <dot> <ptr> head )
<cls> <noptr> insert v map area augment ( <ptr> va <dot> <ptr> from <dot> <ptr> root <dot> <ptr> head )
<cls> <ptr> merge or add v map area ( <ptr> va <dot> <ptr> root <dot> <ptr> head )
<cls> <noptr> classify va fit type ( <ptr> va <dot> <noptr> nv a start addr <dot> <noptr> size )
<cls> <noptr> adjust vat of it type ( <ptr> va <dot> <noptr> nv a start addr <dot> <noptr> size <dot> <noptr> type )
<cls> <noptr> purge fragmented blocks all cpus ( )
<cls> <noptr> purge v map area lazy ( <noptr> start <dot> <noptr> end )
<cls> <noptr> try purge v map area lazy ( )
<cls> <ptr> find v map area ( <noptr> addr )
<cls> <noptr> addr to vb idx ( <noptr> addr )
<cls> <ptr> v map block v addr ( <noptr> va start <dot> <noptr> pages off )
<cls> <noptr> purge fragmented blocks ( <noptr> cpu )
<cls> <noptr> v munmap aliases ( <noptr> start <dot> <noptr> end <dot> <noptr> flush )
<cls> <noptr> v map init free space ( )
<cls> <noptr> setup v malloc vm locked ( <ptr> vm <dot> <ptr> va <dot> <noptr> flags <dot> <ptr> caller )
<cls> <noptr> setup v malloc vm ( <ptr> vm <dot> <ptr> va <dot> <noptr> flags <dot> <ptr> caller )
<cls> <noptr> clear v mun initialized flag ( <ptr> vm )
<cls> <noptr> set area direct map ( <ptr> area <dot> <ptr> set direct map )
<cls> <noptr> v free deferred ( <ptr> addr )
<cls> <noptr> aligned v write ( <ptr> buf <dot> <ptr> addr <dot> <noptr> count )
<cls> <ptr> node to va ( <ptr> n )
<cls> <ptr> pvm find va enclose addr ( <noptr> addr )
<cls> <noptr> pvm determine end from reverse ( <dptr> va <dot> <noptr> align )
<cls> <ptr> s start ( <ptr> m <dot> <ptr> pos )
<cls> <ptr> s next ( <ptr> m <dot> <ptr> p <dot> <ptr> pos )
<cls> <noptr> s stop ( <ptr> m <dot> <ptr> p )
<cls> <noptr> show numa info ( <ptr> m <dot> <ptr> v )
<cls> <noptr> show purge info ( <ptr> m )
<cls> <noptr> s show ( <ptr> m <dot> <ptr> p )
<cls> <noptr> proc v malloc init ( )
<cls> <noptr> vm pressure ( <noptr> gfp <dot> <ptr> mem cg <dot> <noptr> tree <dot> <noptr> scanned <dot> <noptr> reclaimed )
<cls> <noptr> vm pressure prio ( <noptr> gfp <dot> <ptr> mem cg <dot> <noptr> prio )
<cls> <noptr> vm pressure cleanup ( <ptr> v mpr )
<cls> <ptr> work to vm pressure ( <ptr> work )
<cls> <ptr> vm pressure parent ( <ptr> v mpr )
<cls> <noptr> vm pressure level ( <noptr> pressure )
<cls> <noptr> vm pressure calc level ( <noptr> scanned <dot> <noptr> reclaimed )
<cls> <noptr> vm pressure event ( <ptr> v mpr <dot> <noptr> level <dot> <noptr> ancestor <dot> <noptr> signal led )
<cls> <noptr> vm pressure work fn ( <ptr> work )
<cls> <noptr> wakeup k swap d ( <ptr> zone <dot> <noptr> gfp flags <dot> <noptr> order <dot> <noptr> class zoneid x )
<cls> <noptr> lru vec lru size ( <ptr> lru vec <dot> <noptr> lru <dot> <noptr> zoneid x )
<cls> <noptr> pre alloc shrink er ( <ptr> shrink er )
<cls> <noptr> register shrink er prepared ( <ptr> shrink er )
<cls> <noptr> drop slab ( )
<cls> <noptr> drop slab node ( <noptr> nid )
<cls> <noptr> zone reclaim able pages ( <ptr> zone )
<cls> <noptr> isolate lru page ( <ptr> page <dot> <noptr> mode )
<cls> <noptr> reclaim pages ( <ptr> page list )
<cls> <noptr> k swap d run ( <noptr> nid )
<cls> <noptr> k swap d stop ( <noptr> nid )
<cls> <noptr> isolate lru page ( <ptr> page )
<cls> <noptr> reclaim clean pages from list ( <ptr> zone <dot> <ptr> page list )
<cls> <noptr> set task reclaim state ( <ptr> task <dot> <ptr> rs )
<cls> <noptr> unregister mem cg shrink er ( <ptr> shrink er )
<cls> <noptr> cgroup reclaim ( <ptr> sc )
<cls> <noptr> write back throttling sane ( <ptr> sc )
<cls> <noptr> do shrinks lab ( <ptr> shrink ctl <dot> <ptr> shrink er <dot> <noptr> priority )
<cls> <noptr> shrinks lab mem cg ( <noptr> gfp mask <dot> <noptr> nid <dot> <ptr> mem cg <dot> <noptr> priority )
<cls> <noptr> may writeto inode ( <ptr> inode )
<cls> <noptr> handle write error ( <ptr> mapping <dot> <ptr> page <dot> <noptr> error )
<cls> <noptr> page out ( <ptr> page <dot> <ptr> mapping )
<cls> <noptr> remove mapping ( <ptr> mapping <dot> <ptr> page <dot> <noptr> reclaimed <dot> <ptr> target mem cg )
<cls> <noptr> page check references ( <ptr> page <dot> <ptr> sc )
<cls> <noptr> page check dirty write back ( <ptr> page <dot> <ptr> dirty <dot> <ptr> write back )
<cls> <noptr> shrink page list ( <ptr> page list <dot> <ptr> pg dat <dot> <ptr> sc <dot> <noptr> tt u flags <dot> <ptr> stat <dot> <noptr> ignore references )
<cls> <noptr> update lru sizes ( <ptr> lru vec <dot> <noptr> lru <dot> <ptr> nr zone taken )
<cls> <noptr> isolate lru pages ( <noptr> nr to scan <dot> <ptr> lru vec <dot> <ptr> dst <dot> <ptr> nr scanned <dot> <ptr> sc <dot> <noptr> lru )
<cls> <noptr> shrink inactive list ( <noptr> nr to scan <dot> <ptr> lru vec <dot> <ptr> sc <dot> <noptr> lru )
<cls> <noptr> gets can count ( <ptr> lru vec <dot> <ptr> sc <dot> <ptr> nr )
<cls> <noptr> shrink lru vec ( <ptr> lru vec <dot> <ptr> sc )
<cls> <noptr> in reclaim compaction ( <ptr> sc )
<cls> <noptr> compaction ready ( <ptr> zone <dot> <ptr> sc )
<cls> <noptr> shrink zones ( <ptr> zone list <dot> <ptr> sc )
<cls> <noptr> snapshot re faults ( <ptr> target mem cg <dot> <ptr> pg dat )
<cls> <noptr> allow direct reclaim ( <ptr> pg dat )
<cls> <noptr> age active anon ( <ptr> pg dat <dot> <ptr> sc )
<cls> <noptr> pg dat balanced ( <ptr> pg dat <dot> <noptr> order <dot> <noptr> class zoneid x )
<cls> <noptr> clear pg dat con gest ed ( <ptr> pg dat )
<cls> <noptr> prepare k swap d sleep ( <ptr> pg dat <dot> <noptr> order <dot> <noptr> class zoneid x )
<cls> <noptr> balance pg dat ( <ptr> pg dat <dot> <noptr> order <dot> <noptr> class zoneid x )
<cls> <noptr> k swap d class zoneid x ( <ptr> pg dat <dot> <noptr> prev class zoneid x )
<cls> <noptr> k swap d try to sleep ( <ptr> pg dat <dot> <noptr> alloc order <dot> <noptr> reclaim order <dot> <noptr> class zoneid x )
<cls> <noptr> k swap d ( <ptr> p )
<cls> <noptr> k swap d cpu online ( <noptr> cpu )
<cls> <noptr> k swap d init ( )
<cls> <noptr> node unmapped file pages ( <ptr> pg dat )
<cls> <noptr> node page cache reclaim able ( <ptr> pg dat )
<cls> <noptr> node reclaim ( <ptr> pg dat <dot> <noptr> gfp mask <dot> <noptr> order )
<cls> <noptr> init m m internals ( )
<cls> <noptr> sysctl vm numa stat handler ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> length <dot> <ptr> p pos )
<cls> <noptr> vm events fold cpu ( <noptr> cpu )
<cls> <noptr> sum zone numa state ( <noptr> node <dot> <noptr> item )
<cls> <noptr> node page state ( <ptr> pg dat <dot> <noptr> item )
<cls> <noptr> mod zone page state ( <ptr> zone <dot> <noptr> item <dot> <noptr> delta )
<cls> <noptr> inc zone page state ( <ptr> page <dot> <noptr> item )
<cls> <noptr> mod node page state ( <ptr> pg dat <dot> <noptr> item <dot> <noptr> delta )
<cls> <noptr> inc node page state ( <ptr> page <dot> <noptr> item )
<cls> <noptr> dec node page state ( <ptr> page <dot> <noptr> item )
<cls> <noptr> mod zone page state ( <ptr> zone <dot> <noptr> item <dot> <noptr> delta )
<cls> <noptr> inc zone page state ( <ptr> page <dot> <noptr> item )
<cls> <noptr> mod node page state ( <ptr> pg dat <dot> <noptr> item <dot> <noptr> delta )
<cls> <noptr> inc node page state ( <ptr> page <dot> <noptr> item )
<cls> <noptr> dec node page state ( <ptr> page <dot> <noptr> item )
<cls> <noptr> inc node state ( <ptr> pg dat <dot> <noptr> item )
<cls> <noptr> inc zone state ( <ptr> zone <dot> <noptr> item )
<cls> <noptr> inc node state ( <ptr> pg dat <dot> <noptr> item )
<cls> <noptr> dec zone state ( <ptr> zone <dot> <noptr> item )
<cls> <noptr> dec node state ( <ptr> pg dat <dot> <noptr> item )
<cls> <noptr> quiet vm stat ( )
<cls> <noptr> cpu vm stats fold ( <noptr> cpu )
<cls> <noptr> refresh zone stat thresholds ( )
<cls> <noptr> vm stat refresh ( <ptr> table <dot> <noptr> write <dot> <ptr> buffer <dot> <ptr> len p <dot> <ptr> p pos )
<cls> <noptr> drain zone stat ( <ptr> zone <dot> <ptr> p set )
<cls> <noptr> calculate normal threshold ( <ptr> zone )
<cls> <noptr> fragment ation index ( <ptr> zone <dot> <noptr> order )
<cls> <noptr> zero zone numa counters ( <ptr> zone )
<cls> <noptr> zero zones numa counters ( )
<cls> <noptr> zero global numa counters ( )
<cls> <noptr> mod zone state ( <ptr> zone <dot> <noptr> item <dot> <noptr> delta <dot> <noptr> over step mode )
<cls> <noptr> mod node state ( <ptr> pg dat <dot> <noptr> item <dot> <noptr> delta <dot> <noptr> over step mode )
<cls> <noptr> fold diff ( <ptr> zone diff <dot> <ptr> numa diff <dot> <ptr> node diff )
<cls> <noptr> refresh cpu vm stats ( <noptr> do page sets )
<cls> <noptr> fill contig page info ( <ptr> zone <dot> <noptr> suitable order <dot> <ptr> info )
<cls> <noptr> fragment ation index ( <noptr> order <dot> <ptr> info )
<cls> <ptr> frag start ( <ptr> m <dot> <ptr> pos )
<cls> <ptr> frag next ( <ptr> m <dot> <ptr> arg <dot> <ptr> pos )
<cls> <noptr> walk zones in node ( <ptr> m <dot> <ptr> pg dat <dot> <noptr> assert populated <dot> <noptr> nolock <dot> <ptr> print )
<cls> <noptr> frag show print ( <ptr> m <dot> <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> frag show ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> page type info show block count print ( <ptr> m <dot> <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> page type info show block count ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> page type info show ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> is zone first populated ( <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> zone info show print ( <ptr> m <dot> <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> zone info show ( <ptr> m <dot> <ptr> arg )
<cls> <ptr> vm stat start ( <ptr> m <dot> <ptr> pos )
<cls> <ptr> vm stat next ( <ptr> m <dot> <ptr> arg <dot> <ptr> pos )
<cls> <noptr> vm stats how ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> refresh vm stats ( <ptr> work )
<cls> <noptr> vm stat update ( <ptr> w )
<cls> <noptr> vm stat shepher d ( <ptr> w )
<cls> <noptr> init cpu node state ( )
<cls> <noptr> vm stat cpu online ( <noptr> cpu )
<cls> <noptr> vm stat cpu down prep ( <noptr> cpu )
<cls> <noptr> unusable show ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> unusable open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> ext frag show print ( <ptr> m <dot> <ptr> pg dat <dot> <ptr> zone )
<cls> <noptr> ext frag show ( <ptr> m <dot> <ptr> arg )
<cls> <noptr> ext frag open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> ext frag debug init ( )
<cls> <ptr> working set eviction ( <ptr> page <dot> <ptr> target mem cg )
<cls> <noptr> working set ref ault ( <ptr> page <dot> <ptr> shadow )
<cls> <noptr> working set activation ( <ptr> page )
<cls> <noptr> working set update node ( <ptr> node )
<cls> <ptr> pack shadow ( <noptr> mem cgi d <dot> <ptr> pg dat <dot> <noptr> eviction <dot> <noptr> working set )
<cls> <noptr> unpack shadow ( <ptr> shadow <dot> <ptr> mem cgi dp <dot> <dptr> pg dat <dot> <ptr> eviction p <dot> <ptr> working set p )
<cls> <noptr> advance inactive age ( <ptr> mem cg <dot> <ptr> pg dat )
<cls> <noptr> count shadow nodes ( <ptr> shrink er <dot> <ptr> sc )
<cls> <noptr> shadow lru isolate ( <ptr> item <dot> <ptr> lru <dot> <ptr> lru lock <dot> <ptr> arg )
<cls> <noptr> scan shadow nodes ( <ptr> shrink er <dot> <ptr> sc )
<cls> <noptr> working set init ( )
<cls> <noptr> compact page work ( <ptr> w )
<cls> <noptr> size to chunks ( <noptr> size )
<cls> <ptr> handle to slots ( <noptr> handle )
<cls> <noptr> z fold page unlock ( <ptr> z hdr )
<cls> <ptr> get z fold header ( <noptr> handle <dot> <noptr> lock )
<cls> <ptr> handle to z fold header ( <noptr> h )
<cls> <noptr> put z fold header ( <ptr> z hdr )
<cls> <noptr> z fold init fs context ( <ptr> fc )
<cls> <noptr> z fold mount ( )
<cls> <noptr> z fold unmount ( )
<cls> <ptr> init z fold page ( <ptr> page <dot> <noptr> headless <dot> <ptr> pool <dot> <noptr> gfp )
<cls> <noptr> idx ( <ptr> z hdr <dot> <noptr> bud )
<cls> <noptr> encode handle ( <ptr> z hdr <dot> <noptr> bud )
<cls> <noptr> handle to chunks ( <noptr> handle )
<cls> <noptr> handle to buddy ( <noptr> handle )
<cls> <ptr> z hdr to pool ( <ptr> z hdr )
<cls> <ptr> m chunk mem move ( <ptr> z hdr <dot> <noptr> dst chunk )
<cls> <noptr> buddy single ( <ptr> z hdr )
<cls> <ptr> compact single buddy ( <ptr> z hdr )
<cls> <noptr> z fold compact page ( <ptr> z hdr )
<cls> <noptr> do compact page ( <ptr> z hdr <dot> <noptr> locked )
<cls> <ptr> z fold map ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z fold get pool size ( <ptr> pool )
<cls> <noptr> z fold page isolate ( <ptr> page <dot> <noptr> mode )
<cls> <noptr> z fold page migrate ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> z fold z pool evict ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z fold z pool shrink ( <ptr> pool <dot> <noptr> pages <dot> <ptr> reclaimed )
<cls> <ptr> z fold z pool map ( <ptr> pool <dot> <noptr> handle <dot> <noptr> m m )
<cls> <noptr> z fold z pool total size ( <ptr> pool )
<cls> <noptr> init z fold ( )
<cls> <noptr> z bud reclaim page ( <ptr> pool <dot> <noptr> retries )
<cls> <ptr> z bud map ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z budget pool size ( <ptr> pool )
<cls> <noptr> z bud z pool evict ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z bud z pool shrink ( <ptr> pool <dot> <noptr> pages <dot> <ptr> reclaimed )
<cls> <ptr> z bud z pool map ( <ptr> pool <dot> <noptr> handle <dot> <noptr> m m )
<cls> <noptr> z bud z pool total size ( <ptr> pool )
<cls> <noptr> init z bud ( )
<cls> <noptr> exit z bud ( )
<cls> <noptr> z pool has pool ( <ptr> type )
<cls> <ptr> z pool get type ( <ptr> z pool )
<cls> <noptr> z pool malloc support movable ( <ptr> z pool )
<cls> <ptr> z pool map handle ( <ptr> z pool <dot> <noptr> handle <dot> <noptr> map mode )
<cls> <noptr> z pool get total size ( <ptr> z pool )
<cls> <noptr> z pool unregister driver ( <ptr> driver )
<cls> <noptr> z poole vic table ( <ptr> z pool )
<cls> <ptr> z pool get driver ( <ptr> type )
<cls> <noptr> zs huge class size ( <ptr> pool )
<cls> <ptr> zs map object ( <ptr> pool <dot> <noptr> handle <dot> <noptr> m m )
<cls> <noptr> zs get total pages ( <ptr> pool )
<cls> <noptr> zs compact ( <ptr> pool )
<cls> <noptr> z spool stats ( <ptr> pool <dot> <ptr> stats )
<cls> <noptr> set page huge object ( <ptr> page )
<cls> <noptr> page huge object ( <ptr> page )
<cls> <noptr> migrate lock init ( <ptr> zs page )
<cls> <noptr> migrate read lock ( <ptr> zs page )
<cls> <noptr> migrate read unlock ( <ptr> zs page )
<cls> <noptr> kick deferred free ( <ptr> pool )
<cls> <noptr> init deferred free ( <ptr> pool )
<cls> <noptr> set zs page movable ( <ptr> pool <dot> <ptr> zs page )
<cls> <noptr> record obj ( <noptr> handle <dot> <noptr> obj )
<cls> <ptr> z sz pool map ( <ptr> pool <dot> <noptr> handle <dot> <noptr> m m )
<cls> <noptr> z sz pool total size ( <ptr> pool )
<cls> <noptr> is first page ( <ptr> page )
<cls> <noptr> get zs page in use ( <ptr> zs page )
<cls> <noptr> mod zs page in use ( <ptr> zs page <dot> <noptr> val )
<cls> <noptr> get first obj offset ( <ptr> page )
<cls> <noptr> get free obj ( <ptr> zs page )
<cls> <noptr> get zs page mapping ( <ptr> zs page <dot> <ptr> class idx <dot> <ptr> full ness )
<cls> <noptr> set zs page mapping ( <ptr> zs page <dot> <noptr> class idx <dot> <noptr> full ness )
<cls> <noptr> get size class index ( <noptr> size )
<cls> <noptr> zs stat inc ( <ptr> class <dot> <noptr> type <dot> <noptr> cnt )
<cls> <noptr> zs stat dec ( <ptr> class <dot> <noptr> type <dot> <noptr> cnt )
<cls> <noptr> zs stat get ( <ptr> class <dot> <noptr> type )
<cls> <noptr> zs stat init ( )
<cls> <noptr> zs stat exit ( )
<cls> <noptr> z scan compact ( <ptr> class )
<cls> <noptr> zs stats size show ( <ptr> s <dot> <ptr> v )
<cls> <noptr> zs stats size open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> z spool stat create ( <ptr> pool <dot> <ptr> name )
<cls> <noptr> get full ness group ( <ptr> class <dot> <ptr> zs page )
<cls> <noptr> insert zs page ( <ptr> class <dot> <ptr> zs page <dot> <noptr> full ness )
<cls> <noptr> remove zs page ( <ptr> class <dot> <ptr> zs page <dot> <noptr> full ness )
<cls> <noptr> fix full ness group ( <ptr> class <dot> <ptr> zs page )
<cls> <noptr> get pages per zs page ( <noptr> class size )
<cls> <ptr> get zs page ( <ptr> page )
<cls> <ptr> get next page ( <ptr> page )
<cls> <noptr> obj to location ( <noptr> obj <dot> <dptr> page <dot> <ptr> obj idx )
<cls> <noptr> handle to obj ( <noptr> handle )
<cls> <noptr> obj to head ( <ptr> page <dot> <ptr> obj )
<cls> <noptr> test pin tag ( <noptr> handle )
<cls> <noptr> try pin tag ( <noptr> handle )
<cls> <noptr> pin tag ( <noptr> handle )
<cls> <noptr> reset page ( <ptr> page )
<cls> <noptr> try lock zs page ( <ptr> zs page )
<cls> <noptr> init zs page ( <ptr> class <dot> <ptr> zs page )
<cls> <noptr> create page chain ( <ptr> class <dot> <ptr> zs page <dot> <ptr> pages )
<cls> <ptr> find get zs page ( <ptr> class )
<cls> <noptr> zs cpu up ( <ptr> area )
<cls> <noptr> zs cpu down ( <ptr> area )
<cls> <ptr> zs map object ( <ptr> area <dot> <ptr> pages <dot> <noptr> off <dot> <noptr> size )
<cls> <noptr> zs cpu prepare ( <noptr> cpu )
<cls> <noptr> zs cpu dead ( <noptr> cpu )
<cls> <noptr> can merge ( <ptr> prev <dot> <noptr> pages per zs page <dot> <noptr> objs per zs page )
<cls> <noptr> zs page full ( <ptr> class <dot> <ptr> zs page )
<cls> <noptr> find alloc ed obj ( <ptr> class <dot> <ptr> page <dot> <ptr> obj idx )
<cls> <noptr> migrate zs page ( <ptr> pool <dot> <ptr> class <dot> <ptr> cc )
<cls> <ptr> isolate zs page ( <ptr> class <dot> <noptr> source )
<cls> <noptr> put back zs page ( <ptr> class <dot> <ptr> zs page )
<cls> <noptr> z sin i tfs context ( <ptr> fc )
<cls> <noptr> zs malloc mount ( )
<cls> <noptr> migrate write lock ( <ptr> zs page )
<cls> <noptr> migrate write unlock ( <ptr> zs page )
<cls> <noptr> inc zs page isolation ( <ptr> zs page )
<cls> <noptr> dec zs page isolation ( <ptr> zs page )
<cls> <noptr> put back zs page deferred ( <ptr> pool <dot> <ptr> class <dot> <ptr> zs page )
<cls> <noptr> replace sub page ( <ptr> class <dot> <ptr> zs page <dot> <ptr> new page <dot> <ptr> old page )
<cls> <noptr> zs page isolate ( <ptr> page <dot> <noptr> mode )
<cls> <noptr> zs page migrate ( <ptr> mapping <dot> <ptr> new page <dot> <ptr> page <dot> <noptr> mode )
<cls> <noptr> zs page put back ( <ptr> page )
<cls> <noptr> pool isolated are drain ed ( <ptr> pool )
<cls> <noptr> wait for isolated drain ( <ptr> pool )
<cls> <noptr> zs compact ( <ptr> pool <dot> <ptr> class )
<cls> <noptr> zs shrink ers can ( <ptr> shrink er <dot> <ptr> sc )
<cls> <noptr> zs shrink er count ( <ptr> shrink er <dot> <ptr> sc )
<cls> <noptr> zs init ( )
<cls> <noptr> zs exit ( )
<cls> <noptr> z swap enabled param set ( <ptr> val <dot> <ptr> kp )
<cls> <noptr> z swap z pool param set ( <ptr> val <dot> <ptr> kp )
<cls> <noptr> z swap write back entry ( <ptr> pool <dot> <noptr> handle )
<cls> <noptr> z swap pool get ( <ptr> pool )
<cls> <noptr> z swap isfull ( )
<cls> <noptr> z swap update total size ( )
<cls> <ptr> z swap rb search ( <ptr> root <dot> <noptr> offset )
<cls> <noptr> z swap rb erase ( <ptr> root <dot> <ptr> entry )
<cls> <noptr> z swap entry get ( <ptr> entry )
<cls> <noptr> z swap dst mem prepare ( <noptr> cpu )
<cls> <noptr> z swap dst mem dead ( <noptr> cpu )
<cls> <noptr> z swap cpu comp prepare ( <noptr> cpu <dot> <ptr> node )
<cls> <noptr> z swap cpu comp dead ( <noptr> cpu <dot> <ptr> node )
<cls> <ptr> z swap pool current ( )
<cls> <ptr> z swap pool current get ( )
<cls> <noptr> z swap pool empty ( <ptr> k ref )
<cls> <noptr> z swap param set ( <ptr> val <dot> <ptr> kp <dot> <ptr> type <dot> <ptr> compressor )
<cls> <noptr> z swap get swap cache page ( <noptr> entry <dot> <dptr> ret page )
<cls> <noptr> z swap shrink ( )
<cls> <noptr> z swap is page same filled ( <ptr> ptr <dot> <ptr> value )
<cls> <noptr> z swap fill page ( <ptr> ptr <dot> <noptr> value )
<cls> <noptr> z swap front swap store ( <noptr> type <dot> <noptr> offset <dot> <ptr> page )
<cls> <noptr> z swap front swap load ( <noptr> type <dot> <noptr> offset <dot> <ptr> page )
<cls> <noptr> z swap front swap invalidate page ( <noptr> type <dot> <noptr> offset )
<cls> <noptr> z swap front swap invalidate area ( <noptr> type )
<cls> <noptr> z swap debug fs init ( )
<cls> <noptr> init z swap ( )
<cls> <ptr> bcm get tx co ( <ptr> dev )
<cls> <ptr> check irq polarity ( )
<cls> <ptr> h recvbuf ( <ptr> h dev <dot> <ptr> skb <dot> <ptr> buffer <dot> <noptr> count <dot> <ptr> pkts <dot> <noptr> pkts count )
<cls> <noptr> qca init ( )
<cls> <noptr> intel init ( )
<cls> <noptr> ath deinit ( )
<cls> <noptr> q cat lv send segment ( <ptr> h dev <dot> <noptr> seg size <dot> <ptr> data <dot> <noptr> mode <dot> <noptr> soc type )
<cls> <noptr> btc driver init ( )
<cls> <noptr> b pax flush ( <ptr> h dev )
<cls> <ptr> check reset ( )
<cls> <noptr> ath k get version ( <ptr> udev <dot> <ptr> version )
<cls> <ptr> check force sco fix ( )
<cls> <noptr> intell pm resume ( <ptr> hu )
<cls> <noptr> nokia open ( <ptr> hu )
<cls> <ptr> check amp ( )
<cls> <noptr> ath init ( )
<cls> <noptr> h deinit ( )
<cls> <noptr> b pax driver init ( )
<cls> <noptr> ll init ( )
<cls> <noptr> blue card driver init ( )
<cls> <noptr> intel flush ( <ptr> hu )
<cls> <noptr> h slip delim ( <ptr> skb )
<cls> <noptr> bf usb driver init ( )
<cls> <noptr> intel setup ( <ptr> hu )
<cls> <noptr> m rv l init ( )
<cls> <noptr> intel resume device ( <ptr> dev )
<cls> <noptr> bcm init ( )
<cls> <noptr> dtl receive ( <ptr> info )
<cls> <noptr> bcm xwork ( <ptr> work )
<cls> <ptr> hci uart get proto ( <noptr> id )
<cls> <noptr> bcm probe ( <ptr> pdev )
<cls> <noptr> intel open ( <ptr> hu )
<cls> <noptr> ath k driver init ( )
<cls> <noptr> qca wq awake r x ( <ptr> work )
<cls> <noptr> bcm x driver init ( )
<cls> <noptr> m rv l flush ( <ptr> hu )
<cls> <noptr> qca power off ( <ptr> h dev )
<cls> <noptr> nokia flush ( <ptr> hu )
<cls> <ptr> a gxx dequeue ( <ptr> hu )
<cls> <noptr> dtl write wakeup ( <ptr> info )
<cls> <noptr> qca wq awake device ( <ptr> work )
<cls> <noptr> hci uart write work ( <ptr> work )
<cls> <noptr> valid packet type ( <noptr> type )
<cls> <noptr> r six bt module init ( )
<cls> <noptr> intel deinit ( )
<cls> <ptr> intel dequeue ( <ptr> hu )
<cls> <noptr> bt usb iso ctx complete ( <ptr> urb )
<cls> <noptr> m rv l setup ( <ptr> hu )
<cls> <ptr> check hci extn ( )
<cls> <noptr> b scp get crc ( <ptr> b csp )
<cls> <noptr> btc receive ( <ptr> info )
<cls> <noptr> a gxx deinit ( )
<cls> <noptr> v hci close dev ( <ptr> h dev )
<cls> <noptr> bcm suspend device ( <ptr> dev )
<cls> <noptr> qca w cn init ( <ptr> hu )
<cls> <ptr> check disable sco fix ( )
<cls> <noptr> b csp init ( )
<cls> <noptr> qca setup ( <ptr> hu )
<cls> <noptr> nokia bluetooth runtime resume ( <ptr> dev )
<cls> <noptr> bcm resume ( <ptr> dev )
<cls> <noptr> hci uart tty open ( <ptr> tty )
<cls> <noptr> h bt rtl open ( <ptr> h )
<cls> <noptr> qca power shutdown ( <ptr> hu )
<cls> <noptr> bcm acpi probe ( <ptr> dev )
<cls> <noptr> bcs popen ( <ptr> hu )
<cls> <noptr> b tmr v l check device tree ( <ptr> priv )
<cls> <noptr> blue card hci flush ( <ptr> h dev )
<cls> <noptr> b tmr v lsd io init module ( )
<cls> <noptr> bt rtl setup real tek ( <ptr> h dev )
<cls> <noptr> bt intel set event mask mfg ( <ptr> h dev <dot> <noptr> debug )
<cls> <noptr> hci uart init ( )
<cls> <noptr> bt q com smd probe ( <ptr> pdev )
<cls> <noptr> intel probe ( <ptr> pdev )
<cls> <noptr> intel convert speed ( <noptr> speed )
<cls> <noptr> blue card probe ( <ptr> link )
<cls> <noptr> bcm resume device ( <ptr> dev )
<cls> <ptr> ll dequeue ( <ptr> hu )
<cls> <noptr> nokia bluetooth ser dev probe ( <ptr> ser dev )
<cls> <ptr> m rv l dequeue ( <ptr> hu )
<cls> <noptr> qca soc type ( <ptr> hu )
<cls> <noptr> h cfg field ( <ptr> h )
<cls> <noptr> bcm x complete ( <ptr> urb )
<cls> <noptr> bt bcm setup apple ( <ptr> h dev )
<cls> <noptr> bts dio work ( <ptr> work )
<cls> <noptr> ath flush ( <ptr> hu )
<cls> <noptr> ll do awake ( <ptr> ll )
<cls> <noptr> ath k load patch ( <ptr> udev )
<cls> <noptr> download firmware ( <ptr> k img data )
<cls> <noptr> rsi hci flush ( <ptr> h dev )
<cls> <noptr> ll enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> hci uart write wakeup ( <ptr> ser dev )
<cls> <noptr> bf usb open ( <ptr> h dev )
<cls> <noptr> btc get ( <noptr> io base )
<cls> <noptr> a gxx setup ( <ptr> hu )
<cls> <noptr> ll open ( <ptr> hu )
<cls> <noptr> bt mtk uart setup ( <ptr> h dev )
<cls> <noptr> bts dio driver init ( )
<cls> <noptr> bt mtk uart write wakeup ( <ptr> ser dev )
<cls> <noptr> nokia send negotiation ( <ptr> hu )
<cls> <noptr> a gxx open ( <ptr> hu )
<cls> <noptr> b tmr v l debug fs init ( <ptr> h dev )
<cls> <noptr> btc config ( <ptr> link )
<cls> <noptr> h bt rtl close ( <ptr> h )
<cls> <noptr> intel wait booting ( <ptr> hu )
<cls> <noptr> v hci open timeout ( <ptr> work )
<cls> <ptr> bcm dequeue ( <ptr> hu )
<cls> <noptr> dtl hci open ( <ptr> h dev )
<cls> <noptr> bcm request irq ( <ptr> bcm )
<cls> <ptr> nokia dequeue ( <ptr> hu )
<cls> <noptr> bt usb driver init ( )
<cls> <noptr> h ser dev suspend ( <ptr> dev )
<cls> <noptr> nokia send alive packet ( <ptr> hu )
<cls> <noptr> b csp handle le pkt ( <ptr> hu )
<cls> <noptr> bt usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> ath hci uart work ( <ptr> work )
<cls> <noptr> hci uart register dev ( <ptr> hu )
<cls> <noptr> b tmr v l open ( <ptr> h dev )
<cls> <noptr> b tmr v l service main thread ( <ptr> data )
<cls> <noptr> bt usb diag complete ( <ptr> urb )
<cls> <noptr> bt mtk uart tx wakeup ( <ptr> b dev )
<cls> <noptr> bt usb open ( <ptr> h dev )
<cls> <noptr> bt q com smd driver init ( )
<cls> <noptr> bcm of probe ( <ptr> b dev )
<cls> <noptr> h peer reset ( <ptr> hu )
<cls> <ptr> qca dequeue ( <ptr> hu )
<cls> <noptr> hci uart init ready ( <ptr> hu )
<cls> <noptr> serial clock off ( <ptr> tty )
<cls> <noptr> bf usb r x submit ( <ptr> data <dot> <ptr> urb )
<cls> <noptr> intel wait lpm transaction ( <ptr> hu )
<cls> <noptr> bf usb tx complete ( <ptr> urb )
<cls> <noptr> ll device want to sleep ( <ptr> st data )
<cls> <noptr> btm tks dio runtime resume ( <ptr> dev )
<cls> <noptr> bt intel reset to boot loader ( <ptr> h dev )
<cls> <noptr> bt usb setup csr ( <ptr> h dev )
<cls> <ptr> b csp dequeue ( <ptr> hu )
<cls> <noptr> h ser dev resume ( <ptr> dev )
<cls> <noptr> qca inject cmd complete event ( <ptr> h dev )
<cls> <ptr> bt bcm read local name ( <ptr> h dev )
<cls> <noptr> bts dio open ( <ptr> h dev )
<cls> <noptr> intel suspend ( <ptr> dev )
<cls> <noptr> dtl probe ( <ptr> link )
<cls> <noptr> bt mtk uart driver init ( )
<cls> <ptr> h dequeue ( <ptr> hu )
<cls> <noptr> b tmr v lsd io download helper ( <ptr> card )
<cls> <noptr> h open ( <ptr> hu )
<cls> <noptr> dtl open ( <ptr> info )
<cls> <ptr> ath dequeue ( <ptr> hu )
<cls> <noptr> serial clock on ( <ptr> tty )
<cls> <noptr> bt mtk uart close ( <ptr> h dev )
<cls> <noptr> b pax setup ( <ptr> h dev )
<cls> <noptr> h timed event ( <ptr> t )
<cls> <noptr> h bt rtl resume ( <ptr> h )
<cls> <noptr> b tmr v l prepare command ( <ptr> priv )
<cls> <noptr> qca send pre shutdown cmd ( <ptr> h dev )
<cls> <noptr> qca check speeds ( <ptr> hu )
<cls> <noptr> b pax probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> bt mtk uart open ( <ptr> h dev )
<cls> <noptr> bt usb bulk complete ( <ptr> urb )
<cls> <noptr> dtl hci flush ( <ptr> h dev )
<cls> <noptr> set diag interface ( <ptr> h dev )
<cls> <noptr> hci uart unregister proto ( <ptr> p )
<cls> <noptr> ath k set normal mode ( <ptr> udev )
<cls> <noptr> qca send reset ( <ptr> h dev )
<cls> <noptr> bcm setup sleep ( <ptr> hu )
<cls> <noptr> hci uart tty wakeup ( <ptr> tty )
<cls> <noptr> ath setup ( <ptr> hu )
<cls> <noptr> intel enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> a gxx flush ( <ptr> hu )
<cls> <ptr> hci uart dequeue ( <ptr> hu )
<cls> <noptr> bt mtk uart probe ( <ptr> ser dev )
<cls> <noptr> bf usb unlink urb s ( <ptr> data )
<cls> <noptr> bcm ser dev probe ( <ptr> ser dev )
<cls> <noptr> v hci get user ( <ptr> data <dot> <ptr> from )
<cls> <noptr> intel resume ( <ptr> dev )
<cls> <noptr> v hci open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> b tmr v lsd io card to host ( <ptr> priv )
<cls> <noptr> nokia recv radio ( <ptr> h dev <dot> <ptr> skb )
<cls> <ptr> qca get firmware name ( <ptr> hu )
<cls> <noptr> blue card write wakeup ( <ptr> info )
<cls> <noptr> intel irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> bt usb intr complete ( <ptr> urb )
<cls> <noptr> rsi hci close ( <ptr> h dev )
<cls> <noptr> b tmr v len able hs ( <ptr> priv )
<cls> <noptr> intel recv event ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> b tmr v len able ps ( <ptr> priv )
<cls> <noptr> b pax submit intr urb ( <ptr> h dev )
<cls> <noptr> hr x crc ( <ptr> hu <dot> <noptr> c )
<cls> <noptr> btm tks dio driver init ( )
<cls> <noptr> btc hci flush ( <ptr> h dev )
<cls> <noptr> bf usb tx wakeup ( <ptr> data )
<cls> <noptr> h enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> qca open ( <ptr> hu )
<cls> <noptr> bt bcm check b daddr ( <ptr> h dev )
<cls> <noptr> bcm device exists ( <ptr> device )
<cls> <noptr> b tmr v lsd io get r xunit ( <ptr> card )
<cls> <noptr> btm tks dio func query ( <ptr> h dev )
<cls> <noptr> qca flush ( <ptr> hu )
<cls> <noptr> host set baud rate ( <ptr> hu <dot> <noptr> speed )
<cls> <ptr> bt bcm read usb product ( <ptr> h dev )
<cls> <noptr> bcm suspend ( <ptr> dev )
<cls> <noptr> intell pm host wake ( <ptr> hu )
<cls> <noptr> nokia flow control ( <ptr> ser dev <dot> <noptr> enable )
<cls> <noptr> bt usb wake r ( <ptr> work )
<cls> <noptr> nokia setup ( <ptr> hu )
<cls> <noptr> intel recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> qca debug fs init ( <ptr> h dev )
<cls> <noptr> h ser dev probe ( <ptr> ser dev )
<cls> <noptr> bts dio flush ( <ptr> h dev )
<cls> <noptr> dtl hci close ( <ptr> h dev )
<cls> <noptr> v hci open dev ( <ptr> h dev )
<cls> <noptr> nokia enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> qca wq serial tx clock vote off ( <ptr> work )
<cls> <noptr> hci uart init work ( <ptr> work )
<cls> <noptr> ath wakeup ark ( <ptr> tty )
<cls> <noptr> bcm apple get resources ( <ptr> dev )
<cls> <ptr> check tx crc ( )
<cls> <noptr> h completer x pkt ( <ptr> hu )
<cls> <noptr> blue card hci open ( <ptr> h dev )
<cls> <noptr> hci uart close ( <ptr> h dev )
<cls> <noptr> btc probe ( <ptr> link )
<cls> <noptr> q case r dev probe ( <ptr> ser dev )
<cls> <ptr> b tmr v l add card ( <ptr> card )
<cls> <noptr> bt usb suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> hci uart tx wakeup ( <ptr> hu )
<cls> <noptr> ll setup ( <ptr> hu )
<cls> <noptr> b tmr v lsd io interrupt ( <ptr> func )
<cls> <noptr> bts dio send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> nokia recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> intel set baud rate ( <ptr> hu <dot> <noptr> speed )
<cls> <noptr> h handle internal r x ( <ptr> hu )
<cls> <noptr> bt mtk uart parsed t ( <ptr> ser dev )
<cls> <noptr> bt usb send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> btm tks dio probe ( <ptr> func <dot> <ptr> id )
<cls> <noptr> bt bcm read info ( <ptr> h dev )
<cls> <noptr> btm tks dio flush ( <ptr> h dev )
<cls> <noptr> marvel l config oob wake ( <ptr> h dev )
<cls> <noptr> b tmr v lsd io core dump ( <ptr> dev )
<cls> <noptr> btc hci open ( <ptr> h dev )
<cls> <noptr> btm tks dio send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> bcm get resources ( <ptr> dev )
<cls> <noptr> bcm set baud rate ( <ptr> hu <dot> <noptr> speed )
<cls> <noptr> ll device woke up ( <ptr> hu )
<cls> <noptr> dtl interrupt ( <noptr> irq <dot> <ptr> dev inst )
<cls> <noptr> bt bcm finalize ( <ptr> h dev )
<cls> <noptr> bf usb r x complete ( <ptr> urb )
<cls> <noptr> b tmr v lsd io resume ( <ptr> dev )
<cls> <noptr> b tmr v l process event ( <ptr> priv <dot> <ptr> skb )
<cls> <noptr> bts dio probe ( <ptr> func <dot> <ptr> id )
<cls> <noptr> m rv l ser dev probe ( <ptr> ser dev )
<cls> <noptr> btc write wakeup ( <ptr> info )
<cls> <noptr> h flush ( <ptr> hu )
<cls> <noptr> bt usb tx complete ( <ptr> urb )
<cls> <noptr> blue card hci close ( <ptr> h dev )
<cls> <noptr> blue card activity led timeout ( <ptr> t )
<cls> <noptr> hr x delimiter ( <ptr> hu <dot> <noptr> c )
<cls> <noptr> b csp slip msg delim ( <ptr> skb )
<cls> <noptr> bt usb setup intel new ( <ptr> h dev )
<cls> <noptr> bt usb setup intel ( <ptr> h dev )
<cls> <noptr> bt usb mtk shutdown ( <ptr> h dev )
<cls> <noptr> bt usb check needs reset resume ( <ptr> int f )
<cls> <noptr> blue card config ( <ptr> link )
<cls> <noptr> qca set baud rate ( <ptr> h dev <dot> <noptr> baud rate )
<cls> <noptr> bt q com smd setup ( <ptr> h dev )
<cls> <noptr> bt rtl convert baud rate ( <noptr> device baud rate )
<cls> <noptr> btm tks dio interrupt ( <ptr> func )
<cls> <noptr> a gxx enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> hci uart flush ( <ptr> h dev )
<cls> <noptr> dtl control ( <ptr> info <dot> <ptr> skb )
<cls> <noptr> v hci write ( <ptr> ioc b <dot> <ptr> from )
<cls> <noptr> bcm resource ( <ptr> ares <dot> <ptr> data )
<cls> <noptr> bt usb qca send vendor req ( <ptr> udev <dot> <noptr> request <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> device want to sleep ( <ptr> hu )
<cls> <noptr> bt q com smd send ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> bt usb setup qca ( <ptr> h dev )
<cls> <noptr> qca send power pulse ( <ptr> hu <dot> <noptr> on )
<cls> <noptr> btm tks dio runtime suspend ( <ptr> dev )
<cls> <noptr> b tmr v lsd io suspend ( <ptr> dev )
<cls> <noptr> m rv l open ( <ptr> hu )
<cls> <noptr> intel set power ( <ptr> hu <dot> <noptr> powered )
<cls> <noptr> mtk hci wmt sync ( <ptr> h dev <dot> <ptr> wmt params )
<cls> <noptr> bt usb stop traffic ( <ptr> data )
<cls> <ptr> bt bcm read local version ( <ptr> h dev )
<cls> <noptr> h setup ( <ptr> hu )
<cls> <noptr> hci uart open ( <ptr> h dev )
<cls> <noptr> bt usb flush ( <ptr> h dev )
<cls> <noptr> b csp flush ( <ptr> hu )
<cls> <noptr> b tmr v lsd io disable host int ( <ptr> card )
<cls> <noptr> b tmr v lsd io process int status ( <ptr> priv )
<cls> <noptr> h cit i probe ( <ptr> ser dev )
<cls> <noptr> bf usb close ( <ptr> h dev )
<cls> <noptr> bt usb qca need patch ( <ptr> udev )
<cls> <noptr> qca suspend ( <ptr> dev )
<cls> <noptr> bt usb set b daddr ath ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> bt usb notify ( <ptr> h dev <dot> <noptr> evt )
<cls> <noptr> h reset r x ( <ptr> h )
<cls> <noptr> btm tks dio shutdown ( <ptr> h dev )
<cls> <noptr> bt mtk uart shutdown ( <ptr> h dev )
<cls> <noptr> m rv l recv chip ver ( <ptr> h dev <dot> <ptr> skb )
<cls> <ptr> bt rtl initialize ( <ptr> h dev <dot> <ptr> postfix )
<cls> <noptr> ath k disconnect ( <ptr> int f )
<cls> <noptr> ath k switch pid ( <ptr> udev )
<cls> <noptr> hci uart receive buf ( <ptr> ser dev <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> b csp completer x pkt ( <ptr> hu )
<cls> <noptr> b tmr v lps can window reporting ( <ptr> priv <dot> <noptr> sub cmd )
<cls> <noptr> v hci flush ( <ptr> h dev )
<cls> <noptr> hr x payload ( <ptr> hu <dot> <noptr> c )
<cls> <noptr> b pax open ( <ptr> h dev )
<cls> <noptr> ath recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> bt intel check b daddr ( <ptr> h dev )
<cls> <noptr> nokia recv alive packet ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> intel recv lpm notify ( <ptr> h dev <dot> <noptr> value )
<cls> <noptr> bcm x probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> bt intel read boot params ( <ptr> h dev <dot> <ptr> params )
<cls> <noptr> ll recv frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> b tmr v lsd io download fw ( <ptr> card )
<cls> <noptr> bt usb oob wake handler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> bt bcm patch ram ( <ptr> h dev <dot> <ptr> fw )
<cls> <noptr> hun slip one byte ( <ptr> h <dot> <noptr> c )
<cls> <noptr> b tmr v l close ( <ptr> h dev )
<cls> <noptr> bcm set diag ( <ptr> h dev <dot> <noptr> enable )
<cls> <noptr> btc open ( <ptr> info )
<cls> <noptr> bt intel download firmware ( <ptr> h dev <dot> <ptr> fw <dot> <ptr> boot param )
<cls> <noptr> bt usb work ( <ptr> work )
<cls> <noptr> mtk setup firmware ( <ptr> h dev <dot> <ptr> fw name )
<cls> <noptr> inject cmd complete ( <ptr> h dev <dot> <noptr> opcode )
<cls> <noptr> bf usb send bulk ( <ptr> data <dot> <ptr> skb )
<cls> <noptr> b tmr v lsd io rdwr firmware ( <ptr> priv <dot> <noptr> done flag )
<cls> <noptr> btc put ( <noptr> io base <dot> <noptr> value )
<cls> <noptr> rsi hci recv pkt ( <ptr> priv <dot> <ptr> pkt )
<cls> <noptr> b pax r x complete ( <ptr> urb )
<cls> <noptr> b tmr v lsd io enable host int ( <ptr> card )
<cls> <noptr> bt usb setup bcm ( <ptr> h dev )
<cls> <noptr> bt usb mtk wmt recv ( <ptr> urb )
<cls> <noptr> bt usb mtk setup firmware ( <ptr> h dev <dot> <ptr> fw name )
<cls> <noptr> b tmr v lsd io download fw whelper ( <ptr> card )
<cls> <noptr> btc address ( <noptr> io base <dot> <noptr> addr )
<cls> <ptr> bt bcm read controller features ( <ptr> h dev )
<cls> <noptr> hci i bst x idle timeout ( <ptr> t )
<cls> <noptr> send command from firmware ( <ptr> ll dev <dot> <ptr> cmd )
<cls> <noptr> blue card receive ( <ptr> info <dot> <noptr> offset )
<cls> <noptr> hci uart set baud rate ( <ptr> hu <dot> <noptr> speed )
<cls> <noptr> b pax submit bulk urb ( <ptr> h dev )
<cls> <noptr> v hci send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> rsi hci attach ( <ptr> priv <dot> <ptr> ops )
<cls> <noptr> btc check config not picky ( <ptr> pdev <dot> <ptr> priv data )
<cls> <noptr> bt usb send frame intel ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> bt bcm reset ( <ptr> h dev )
<cls> <noptr> bt usb rtl cmd timeout ( <ptr> h dev )
<cls> <noptr> nokia bluetooth ser dev driver init ( )
<cls> <noptr> dtl hci send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> ath k load fw file ( <ptr> udev <dot> <ptr> firmware )
<cls> <noptr> qca wq serial r x clock vote off ( <ptr> work )
<cls> <noptr> bt rtl setup rtl b ( <ptr> h dev <dot> <ptr> bt rtl dev )
<cls> <noptr> b tmr v lsd io probe ( <ptr> func <dot> <ptr> id )
<cls> <noptr> blue card interrupt ( <noptr> irq <dot> <ptr> dev inst )
<cls> <noptr> b tmr v l check evt pkt ( <ptr> priv <dot> <ptr> skb )
<cls> <noptr> bt intel load ddc config ( <ptr> h dev <dot> <ptr> ddc name )
<cls> <noptr> bt mtk uart recv ( <ptr> h dev <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> m rv l send ack ( <ptr> hu <dot> <noptr> type )
<cls> <noptr> qca enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> btc read ( <noptr> io base <dot> <noptr> addr )
<cls> <noptr> hr x wire hdr ( <ptr> hu <dot> <noptr> c )
<cls> <noptr> submit tx urb ( <ptr> h dev <dot> <ptr> urb )
<cls> <noptr> bt usb recv i soc ( <ptr> data <dot> <ptr> buffer <dot> <noptr> count )
<cls> <noptr> btm tks dio drv own query ( <ptr> b dev )
<cls> <ptr> bt rtl read local version ( <ptr> h dev )
<cls> <noptr> bcm gpio set device wakeup ( <ptr> dev <dot> <noptr> awake )
<cls> <noptr> hci uart wait until sent ( <ptr> hu )
<cls> <noptr> bt mtk uart change baud rate ( <ptr> h dev )
<cls> <noptr> hci uart register proto ( <ptr> p )
<cls> <noptr> bt rtl shutdown real tek ( <ptr> h dev )
<cls> <noptr> rtl read rom version ( <ptr> h dev <dot> <ptr> version )
<cls> <noptr> blue card enable activity led ( <ptr> info )
<cls> <noptr> h link control ( <ptr> hu <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> bcm apple set device wakeup ( <ptr> dev <dot> <noptr> awake )
<cls> <noptr> bt usb config oob wake ( <ptr> h dev )
<cls> <noptr> bt intel hw error ( <ptr> h dev <dot> <noptr> code )
<cls> <noptr> btc load firmware ( <ptr> info <dot> <ptr> firmware <dot> <noptr> count )
<cls> <noptr> bf usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> bf usb send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> qca init regulator s ( <ptr> qca <dot> <ptr> v regs <dot> <noptr> num v regs )
<cls> <noptr> b tmr v lsd io writeto clear ( <ptr> card <dot> <ptr> i reg )
<cls> <noptr> b tmr v l set b daddr ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> bt intel version info ( <ptr> h dev <dot> <ptr> ver )
<cls> <noptr> bt usb submit intr urb ( <ptr> h dev <dot> <noptr> mem flags )
<cls> <noptr> hci uart tty write ( <ptr> tty <dot> <ptr> file <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> q case tbd addr rome ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> rtl download firmware ( <ptr> h dev <dot> <ptr> data <dot> <noptr> fw len )
<cls> <noptr> b pax set diag ( <ptr> h dev <dot> <noptr> enable )
<cls> <noptr> bcm gpio set power ( <ptr> dev <dot> <noptr> powered )
<cls> <noptr> q cat lv check data ( <ptr> config <dot> <ptr> fw )
<cls> <noptr> b csp recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> b tmr v lsd io poll card status ( <ptr> card <dot> <noptr> bits )
<cls> <noptr> submit or queue tx urb ( <ptr> h dev <dot> <ptr> urb )
<cls> <noptr> reg m api bt write ( <ptr> context <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> bcm host wake ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> bt intel read version ( <ptr> h dev <dot> <ptr> ver )
<cls> <noptr> nokia recv negotiation packet ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> bt intel set event mask ( <ptr> h dev <dot> <noptr> debug )
<cls> <noptr> ath k probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> b csp slip one byte ( <ptr> skb <dot> <noptr> c )
<cls> <noptr> hci uart tty receive ( <ptr> tty <dot> <ptr> data <dot> <ptr> flags <dot> <noptr> count )
<cls> <noptr> bt usb mtk setup ( <ptr> h dev )
<cls> <noptr> bt bcm set b daddr ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> hci uart tty poll ( <ptr> tty <dot> <ptr> filp <dot> <ptr> wait )
<cls> <noptr> hci uart tty ioctl ( <ptr> tty <dot> <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> bt usb submit diag urb ( <ptr> h dev <dot> <noptr> mem flags )
<cls> <noptr> bt q com smd open ( <ptr> h dev )
<cls> <noptr> btc hci send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> qca recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> bt usb intel secure send result ( <ptr> data <dot> <ptr> ptr <dot> <noptr> len )
<cls> <noptr> send h c ill cmd ( <noptr> cmd <dot> <ptr> hu )
<cls> <noptr> hci uart setup ( <ptr> h dev )
<cls> <noptr> bt usb submit iso curb ( <ptr> h dev <dot> <noptr> mem flags )
<cls> <noptr> b tmr v l wake irq bt ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> b tmr v lsd io register dev ( <ptr> card )
<cls> <noptr> bt usb submit bulk urb ( <ptr> h dev <dot> <noptr> mem flags )
<cls> <noptr> bcm gpio set shutdown ( <ptr> dev <dot> <noptr> powered )
<cls> <noptr> btm tks dio recv event ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> v hci poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> b tmr v lsd io enable host int mask ( <ptr> card <dot> <noptr> mask )
<cls> <noptr> btm tks d iot x packet ( <ptr> b dev <dot> <ptr> skb )
<cls> <noptr> bt mtk uart send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> bt intel set diag mfg ( <ptr> h dev <dot> <noptr> enable )
<cls> <noptr> send hci ibs cmd ( <noptr> cmd <dot> <ptr> hu )
<cls> <noptr> qca ibs wake ind ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> bt usb setup qca download fw ( <ptr> h dev <dot> <ptr> firmware <dot> <noptr> hdr size )
<cls> <noptr> b tmr v lsd io disable host int mask ( <ptr> card <dot> <noptr> mask )
<cls> <noptr> qca set speed ( <ptr> hu <dot> <noptr> speed type )
<cls> <noptr> b tmr v lsd io verify fw download ( <ptr> card <dot> <noptr> poll num )
<cls> <noptr> hr x pkt start ( <ptr> hu <dot> <noptr> c )
<cls> <noptr> bt usb mtk hci wmt sync ( <ptr> h dev <dot> <ptr> wmt params )
<cls> <noptr> b tmr v lsd io host to card ( <ptr> priv <dot> <ptr> payload <dot> <noptr> nb )
<cls> <noptr> bcm recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> bt intel set b daddr ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> dtl write ( <noptr> io base <dot> <noptr> fifo size <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> bt usb recv event intel ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> qca ibs sleep ind ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> m rv l recv f wreq ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> ath k get state ( <ptr> udev <dot> <ptr> state )
<cls> <noptr> b tmr v l send module cfg cmd ( <ptr> priv <dot> <noptr> sub cmd )
<cls> <noptr> bt intel send intel reset ( <ptr> h dev <dot> <noptr> boot param )
<cls> <noptr> bt mtk sdi or x packet ( <ptr> b dev <dot> <noptr> r x size )
<cls> <noptr> blue card write ( <noptr> io base <dot> <noptr> offset <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> m rv l recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> b tmr v lhs cmd write ( <ptr> file <dot> <ptr> u buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> b tmr v lsd io dump regs ( <ptr> priv )
<cls> <noptr> bts d iot x packet ( <ptr> data <dot> <ptr> skb )
<cls> <noptr> intel mem write ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> plen <dot> <ptr> data )
<cls> <noptr> hci uart set proto ( <ptr> hu <dot> <noptr> id )
<cls> <noptr> wakeup handler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> btc interrupt ( <noptr> irq <dot> <ptr> dev inst )
<cls> <noptr> b csp enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> b tmr v l init adapter ( <ptr> priv )
<cls> <noptr> ll recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> h recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <ptr> bt usb setup intel get fw ( <ptr> h dev <dot> <ptr> ver )
<cls> <noptr> bt usb set b daddr marvel l ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> rsi hci send pkt ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> ll set b daddr ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> ath set b daddr ( <ptr> h dev <dot> <ptr> b daddr )
<cls> <noptr> a gxx recv ( <ptr> hu <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> hci uart set flow control ( <ptr> hu <dot> <noptr> enable )
<cls> <noptr> blue card hci send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> btc io write ( <noptr> io base <dot> <noptr> addr <dot> <noptr> value )
<cls> <ptr> b csp prepare pkt ( <ptr> b csp <dot> <ptr> data <dot> <noptr> len <dot> <noptr> pkt type )
<cls> <noptr> bt usb setup qca load nvm ( <ptr> h dev <dot> <ptr> ver <dot> <ptr> info )
<cls> <noptr> bt bcm setup patch ram ( <ptr> h dev )
<cls> <noptr> m rv l load firmware ( <ptr> h dev <dot> <ptr> name )
<cls> <noptr> intel recv lpm ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> rtl load file ( <ptr> h dev <dot> <ptr> name <dot> <dptr> buff )
<cls> <noptr> qca recv event ( <ptr> h dev <dot> <ptr> skb )
<cls> <noptr> b tmr v l send frame ( <ptr> h dev <dot> <ptr> skb )
<cls> <ptr> mtk stp split ( <ptr> b dev <dot> <ptr> data <dot> <noptr> count <dot> <ptr> sz h )
<cls> <noptr> hci uart set speeds ( <ptr> hu <dot> <noptr> init speed <dot> <noptr> oper speed )
<cls> <noptr> blue card hci set baud rate ( <ptr> h dev <dot> <noptr> baud )
<cls> <noptr> bf usb load firmware ( <ptr> data <dot> <ptr> firmware <dot> <noptr> count )
<cls> <noptr> bt rtl download firmware ( <ptr> h dev <dot> <ptr> bt rtl dev )
<cls> <noptr> set i soc interface ( <ptr> h dev <dot> <noptr> alt setting )
<cls> <noptr> bt q com smd recv ( <ptr> h dev <dot> <noptr> type <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> b tmr v lsd io read fw status ( <ptr> card <dot> <ptr> dat )
<cls> <noptr> blue card read ( <noptr> io base <dot> <noptr> offset <dot> <ptr> buf <dot> <noptr> size )
<cls> <ptr> h prepare pkt ( <ptr> hu <dot> <noptr> pkt type <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> rtl bt parse firmware ( <ptr> h dev <dot> <ptr> bt rtl dev <dot> <dptr> buf )
<cls> <noptr> reg m api b tread ( <ptr> context <dot> <ptr> addr <dot> <noptr> reg size <dot> <ptr> val <dot> <noptr> val size )
<cls> <noptr> ath vendor cmd ( <ptr> h dev <dot> <noptr> opcode <dot> <noptr> index <dot> <ptr> data <dot> <noptr> d len )
<cls> <noptr> b tmr v lsd io read to clear ( <ptr> card <dot> <ptr> i reg )
<cls> <noptr> fill i soc descriptor ( <ptr> urb <dot> <noptr> len <dot> <noptr> mtu )
<cls> <noptr> bt intel secure send ( <ptr> h dev <dot> <noptr> fragment type <dot> <noptr> plen <dot> <ptr> param )
<cls> <noptr> bcm enqueue ( <ptr> hu <dot> <ptr> skb )
<cls> <noptr> bt usb recv intr ( <ptr> data <dot> <ptr> buffer <dot> <noptr> count )
<cls> <noptr> bt usb setup qca load ram patch ( <ptr> h dev <dot> <ptr> ver <dot> <ptr> info )
<cls> <noptr> bt rtl get uart settings ( <ptr> h dev <dot> <ptr> bt rtl dev <dot> <ptr> controller baud rate <dot> <ptr> device baud rate <dot> <ptr> flow control )
<cls> <ptr> bt intel reg map init ( <ptr> h dev <dot> <noptr> opcode read <dot> <noptr> opcode write )
<cls> <noptr> b tmr v l download cal data ( <ptr> priv <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> v hci put user ( <ptr> data <dot> <ptr> skb <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> bt q com smd acl callback ( <ptr> r pdev <dot> <ptr> data <dot> <noptr> count <dot> <ptr> priv <dot> <noptr> addr )
<cls> <noptr> ath k log failed loading ( <noptr> err <dot> <noptr> len <dot> <noptr> size <dot> <noptr> count )
<cls> <noptr> b tmr v l send sync cmd ( <ptr> priv <dot> <noptr> opcode <dot> <ptr> param <dot> <noptr> len )
<cls> <noptr> qca uart setup ( <ptr> h dev <dot> <noptr> baud rate <dot> <noptr> soc type <dot> <noptr> soc ver <dot> <ptr> firmware name )
<cls> <noptr> b tmr v lhs cfg cmd read ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> bt usb mtk reg read ( <ptr> data <dot> <noptr> reg <dot> <ptr> val )
<cls> <ptr> bt rtl match ic ( <noptr> lmp sub ver <dot> <noptr> hci rev <dot> <noptr> hci ver <dot> <noptr> hci bus )
<cls> <noptr> hci uart tty read ( <ptr> tty <dot> <ptr> file <dot> <ptr> buf <dot> <noptr> nr )
<cls> <noptr> bf usb recv block ( <ptr> data <dot> <noptr> hdr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> reg m api bt gather write ( <ptr> context <dot> <ptr> addr <dot> <noptr> reg size <dot> <ptr> val <dot> <noptr> val size )
<cls> <noptr> b tmr v lhs cfg cmd write ( <ptr> file <dot> <ptr> u buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> bt q com smd cmd callback ( <ptr> r pdev <dot> <ptr> data <dot> <noptr> count <dot> <ptr> priv <dot> <noptr> addr )
<cls> <noptr> b tmr v lps cmd write ( <ptr> file <dot> <ptr> u buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> bt usb setup intel new get fw name ( <ptr> ver <dot> <ptr> params <dot> <ptr> fw name <dot> <noptr> len <dot> <ptr> suffix )
<cls> <noptr> bt mtk uart receive buf ( <ptr> ser dev <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> btc write ( <noptr> io base <dot> <noptr> fifo size <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> b tmr v lhs cmd read ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> bt usb setup intel patching ( <ptr> h dev <dot> <ptr> fw <dot> <dptr> fw ptr <dot> <ptr> disable patch )
<cls> <noptr> dev freq set target ( <ptr> dev freq <dot> <noptr> new freq <dot> <noptr> flags )
<cls> <noptr> exy nos ppm uv get event ( <ptr> e dev <dot> <ptr> e data )
<cls> <noptr> tegra dev freq target ( <ptr> dev <dot> <ptr> freq <dot> <noptr> flags )
<cls> <ptr> dev m dev freq add device ( <ptr> dev <dot> <ptr> profile <dot> <ptr> governor name <dot> <ptr> data )
<cls> <ptr> dev freq add device ( <ptr> dev <dot> <ptr> profile <dot> <ptr> governor name <dot> <ptr> data )
<cls> <noptr> dev freq suspend ( )
<cls> <noptr> dev freq resume ( )
<cls> <noptr> dev freq simple ondemand exit ( )
<cls> <noptr> dev freq performance init ( )
<cls> <noptr> exy nos noc p driver init ( )
<cls> <noptr> user space init ( <ptr> dev freq )
<cls> <noptr> exy nos bus plat drv init ( )
<cls> <noptr> clear wb con gest ed ( <ptr> con gest ed <dot> <noptr> sync )
<cls> <noptr> exy nos noc p probe ( <ptr> pdev )
<cls> <noptr> dev freq init ( )
<cls> <noptr> exy nos noc p set event ( <ptr> e dev )
<cls> <noptr> exy nos ppm u driver init ( )
<cls> <noptr> exy nos bus resume ( <ptr> dev )
<cls> <noptr> exy nos bus probe ( <ptr> pdev )
<cls> <noptr> dev freq event init ( )
<cls> <noptr> tegra act m onpause ( <ptr> tegra )
<cls> <noptr> set freq table ( <ptr> dev freq )
<cls> <noptr> qos notifier call ( <ptr> dev freq )
<cls> <noptr> dev freq monitor ( <ptr> work )
<cls> <noptr> dev freq user space init ( )
<cls> <noptr> dev freq passive init ( )
<cls> <noptr> exy nos bus enable e dev ( <ptr> bus )
<cls> <ptr> tegra get memory controller ( )
<cls> <noptr> dev freq monitor suspend ( <ptr> dev freq )
<cls> <noptr> dev freq monitor resume ( <ptr> dev freq )
<cls> <ptr> find device dev freq ( <ptr> dev )
<cls> <noptr> dev freq event get e dev count ( <ptr> dev )
<cls> <noptr> dev freq performance func ( <ptr> df <dot> <ptr> freq )
<cls> <noptr> exy nos ppm u remove ( <ptr> pdev )
<cls> <noptr> exy nos bus shutdown ( <ptr> pdev )
<cls> <noptr> update dev freq ( <ptr> dev freq )
<cls> <noptr> exy nos ppm u disable ( <ptr> e dev )
<cls> <noptr> exy nos bus disable e dev ( <ptr> bus )
<cls> <noptr> tegra act m onresume ( <ptr> tegra )
<cls> <noptr> exy nos bus suspend ( <ptr> dev )
<cls> <noptr> find available max freq ( <ptr> dev freq )
<cls> <noptr> tegra act m onstop ( <ptr> tegra )
<cls> <noptr> exy nos ppm uv set event ( <ptr> e dev )
<cls> <noptr> act mon read l ( <ptr> tegra <dot> <noptr> offset )
<cls> <noptr> exy nos bus set event ( <ptr> bus )
<cls> <noptr> exy nos ppm u probe ( <ptr> pdev )
<cls> <ptr> find dev freq governor ( <ptr> name )
<cls> <noptr> exy nos ppm use tevent ( <ptr> e dev )
<cls> <noptr> act mon device target freq ( <ptr> tegra <dot> <ptr> dev )
<cls> <noptr> dev freq monitor stop ( <ptr> dev freq )
<cls> <ptr> try then request governor ( <ptr> name )
<cls> <noptr> dev freq monitor start ( <ptr> dev freq )
<cls> <noptr> dev freq simple ondemand handler ( <ptr> dev freq <dot> <noptr> event <dot> <ptr> data )
<cls> <noptr> dev freq event isenabled ( <ptr> e dev )
<cls> <noptr> dev freq passive get target freq ( <ptr> dev freq <dot> <ptr> freq )
<cls> <noptr> dev freq event set event ( <ptr> e dev )
<cls> <noptr> dev freq event disable e dev ( <ptr> e dev )
<cls> <noptr> name show ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> dev freq event reset event ( <ptr> e dev )
<cls> <noptr> trans stats how ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> dev freq add governor ( <ptr> governor )
<cls> <noptr> tegra act mon configure device ( <ptr> tegra <dot> <ptr> dev )
<cls> <noptr> dev freq remove governor ( <ptr> governor )
<cls> <noptr> exy nos ppm u parsed t ( <ptr> pdev <dot> <ptr> info )
<cls> <noptr> device read l ( <ptr> dev <dot> <noptr> offset )
<cls> <noptr> dev freq suspend device ( <ptr> dev freq )
<cls> <noptr> target freq show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> dev freq interval update ( <ptr> dev freq <dot> <ptr> delay )
<cls> <noptr> exy nos ppm uv disable ( <ptr> e dev )
<cls> <noptr> tegra act mon start ( <ptr> tegra )
<cls> <noptr> exy nos ppm u find ppm uid ( <ptr> e dev )
<cls> <noptr> dev freq user space func ( <ptr> df <dot> <ptr> freq )
<cls> <noptr> exy nos bus target ( <ptr> dev <dot> <ptr> freq <dot> <noptr> flags )
<cls> <noptr> exy nos bus parse of ( <ptr> np <dot> <ptr> bus )
<cls> <noptr> act mon isr device ( <ptr> tegra <dot> <ptr> dev )
<cls> <noptr> get freq range ( <ptr> dev freq <dot> <ptr> min freq <dot> <ptr> max freq )
<cls> <noptr> dev freq register opp notifier ( <ptr> dev <dot> <ptr> dev freq )
<cls> <noptr> cur freq show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> exy nos noc p get event ( <ptr> e dev <dot> <ptr> e data )
<cls> <noptr> dev freq power save handler ( <ptr> dev freq <dot> <noptr> event <dot> <ptr> data )
<cls> <noptr> exy nos noc p parsed t ( <ptr> pdev <dot> <ptr> noc p )
<cls> <noptr> tegra dev freq get dev status ( <ptr> dev <dot> <ptr> stat )
<cls> <noptr> dev freq update status ( <ptr> dev freq <dot> <noptr> freq )
<cls> <noptr> act mon update target ( <ptr> tegra <dot> <ptr> dev )
<cls> <noptr> of get dev freq events ( <ptr> np <dot> <ptr> info )
<cls> <noptr> enable count show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <ptr> dev freq event get e dev by phandle ( <ptr> dev <dot> <noptr> index )
<cls> <noptr> device write l ( <ptr> dev <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> governor show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> available governor s show ( <ptr> d <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> act mon write l ( <ptr> tegra <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> exy nos ppm u get event ( <ptr> e dev <dot> <ptr> e data )
<cls> <noptr> dev freq notify transition ( <ptr> dev freq <dot> <ptr> freqs <dot> <noptr> state )
<cls> <ptr> dev freq event added ev ( <ptr> dev <dot> <ptr> desc )
<cls> <noptr> tegra act mon clk notify cb ( <ptr> nb <dot> <noptr> action <dot> <ptr> ptr )
<cls> <noptr> dev freq register notifier ( <ptr> dev freq <dot> <ptr> nb <dot> <noptr> list )
<cls> <noptr> tegra governor get target ( <ptr> dev freq <dot> <ptr> freq )
<cls> <noptr> act mon c put oem crate ( <ptr> tegra <dot> <noptr> cpu freq )
<cls> <noptr> dev freq power save func ( <ptr> df <dot> <ptr> freq )
<cls> <noptr> dev m dev freq event match ( <ptr> dev <dot> <ptr> res <dot> <ptr> data )
<cls> <noptr> exy nos bus get event ( <ptr> bus <dot> <ptr> e data )
<cls> <noptr> dev m dev freq remove device ( <ptr> dev <dot> <ptr> dev freq )
<cls> <noptr> tegra dev freq update w mark ( <ptr> tegra <dot> <ptr> dev )
<cls> <noptr> governor store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> min freq show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> show freq ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> tegra governor event handler ( <ptr> dev freq <dot> <noptr> event <dot> <ptr> data )
<cls> <noptr> tegra act mon cpu freq contribution ( <ptr> tegra <dot> <noptr> cpu freq )
<cls> <noptr> qos max notifier call ( <ptr> nb <dot> <noptr> val <dot> <ptr> ptr )
<cls> <noptr> tegra act mon cpu notify cb ( <ptr> nb <dot> <noptr> action <dot> <ptr> ptr )
<cls> <noptr> dev freq notifier call ( <ptr> nb <dot> <noptr> type <dot> <ptr> dev p )
<cls> <noptr> polling interval show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <ptr> dev m dev freq event added ev ( <ptr> dev <dot> <ptr> desc )
<cls> <noptr> polling interval store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> dev m dev freq dev match ( <ptr> dev <dot> <ptr> res <dot> <ptr> data )
<cls> <noptr> min freq store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> max freq store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> create timings aligned ( <ptr> dmc <dot> <ptr> reg timing row <dot> <ptr> reg timing data <dot> <ptr> reg timing power <dot> <noptr> clk period ps )
<cls> <noptr> exy nos dmc get volt freq ( <ptr> dmc <dot> <ptr> freq <dot> <ptr> target rate <dot> <ptr> target volt <dot> <noptr> flags )
<cls> <noptr> fsl if c init ( )
<cls> <noptr> jz nem c init ( )
<cls> <noptr> exy no ss rom driver init ( )
<cls> <noptr> fsl if c ctrl init ( <ptr> ctrl )
<cls> <noptr> exy no ss rom suspend ( <ptr> dev )
<cls> <noptr> convert if c address ( <noptr> addr base )
<cls> <noptr> fsl if c find ( <noptr> addr base )
<cls> <noptr> jz nem c num banks ( <ptr> dev )
<cls> <noptr> exy nos counters set event ( <ptr> dmc )
<cls> <noptr> exy nos dmc target ( <ptr> dev <dot> <ptr> freq <dot> <noptr> flags )
<cls> <noptr> exy nos dmc probe ( <ptr> pdev )
<cls> <noptr> fsl if c ctrl probe ( <ptr> dev )
<cls> <noptr> jz nem c probe ( <ptr> pdev )
<cls> <noptr> exy nos switch timing regs ( <ptr> dmc <dot> <noptr> set )
<cls> <noptr> exy no ss rom resume ( <ptr> dev )
<cls> <noptr> exy no ss rom probe ( <ptr> pdev )
<cls> <noptr> exy nos dmc plat drv init ( )
<cls> <noptr> exy nos dmc perf events check ( <ptr> dmc )
<cls> <noptr> exy nos dmc align init freq ( <ptr> dmc <dot> <noptr> boot loader init freq )
<cls> <noptr> dmc irq thread ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> jz nem c remove ( <ptr> pdev )
<cls> <noptr> exy nos dmc get status ( <ptr> dev <dot> <ptr> stat )
<cls> <noptr> of get dram timings ( <ptr> dmc )
<cls> <noptr> exy nos dram change timings ( <ptr> dmc <dot> <noptr> target rate )
<cls> <noptr> exy nos dmc enable perf events ( <ptr> dmc )
<cls> <noptr> exy nos dmc init clk s ( <ptr> dmc )
<cls> <noptr> exy nos performance counters init ( <ptr> dmc )
<cls> <noptr> fsl if c ctrl irq ( <noptr> irq no <dot> <ptr> data )
<cls> <noptr> exy nos dmc get cur freq ( <ptr> dev <dot> <ptr> freq )
<cls> <noptr> exy no ss rom save ( <ptr> base <dot> <ptr> rd <dot> <noptr> num regs )
<cls> <noptr> jz nem cns to cycles ( <ptr> nem c <dot> <noptr> ns )
<cls> <noptr> exy no ss rom configure bank ( <ptr> s rom <dot> <ptr> np )
<cls> <noptr> exy nos dmc align bypass dram timings ( <ptr> dmc <dot> <noptr> target rate )
<cls> <noptr> exy nos counters disable e dev ( <ptr> dmc )
<cls> <noptr> jz nem c assert ( <ptr> dev <dot> <noptr> bank <dot> <noptr> assert )
<cls> <noptr> find target freq idx ( <ptr> dmc <dot> <noptr> target rate )
<cls> <noptr> exy nos dmc start perf events ( <ptr> dmc <dot> <noptr> beg value )
<cls> <noptr> exy nos dmc set pause on switching ( <ptr> dmc )
<cls> <noptr> jz nem c configure bank ( <ptr> nem c <dot> <noptr> bank <dot> <ptr> node )
<cls> <noptr> exy nos dmc align target voltage ( <ptr> dmc <dot> <noptr> target volt )
<cls> <noptr> exy nos dmc perf events calc ( <ptr> dmc <dot> <noptr> diff ts )
<cls> <noptr> of lp ddr do get timings ( <ptr> np <dot> <ptr> tim )
<cls> <noptr> exy nos counters enable e dev ( <ptr> dmc )
<cls> <noptr> exy no ss rom restore ( <ptr> base <dot> <ptr> rd <dot> <noptr> num regs )
<cls> <noptr> exy nos dmc switchto bypass configur ation ( <ptr> dmc <dot> <noptr> target rate <dot> <noptr> target volt )
<cls> <noptr> jz nem c set type ( <ptr> dev <dot> <noptr> bank <dot> <noptr> type )
<cls> <noptr> exy nos dmc align bypass voltage ( <ptr> dmc <dot> <noptr> target volt )
<cls> <noptr> exy nos counters get ( <ptr> dmc <dot> <ptr> load count <dot> <ptr> total count )
<cls> <noptr> ms transfer data ( <ptr> host <dot> <noptr> data dir <dot> <noptr> tpc <dot> <noptr> cfg <dot> <ptr> sg )
<cls> <ptr> check major ( )
<cls> <noptr> mem stick init ( )
<cls> <ptr> check debug ( )
<cls> <noptr> rpc i driver init ( )
<cls> <ptr> check enabled ma ( )
<cls> <noptr> tif mms init ( )
<cls> <ptr> ms dev ( <ptr> host )
<cls> <noptr> msb resume ( <ptr> card )
<cls> <ptr> check verify writes ( )
<cls> <noptr> r execute tpc ( <ptr> dev )
<cls> <noptr> r check dma ( <ptr> dev )
<cls> <noptr> mem stick register driver ( <ptr> drv )
<cls> <noptr> msb init ( )
<cls> <noptr> msb f tls can ( <ptr> msb )
<cls> <noptr> r detect timer ( <ptr> t )
<cls> <noptr> j mb xms req task let ( <noptr> data )
<cls> <noptr> r test ioerror ( <ptr> dev )
<cls> <noptr> tif mms issue cmd ( <ptr> host )
<cls> <noptr> mem stick device probe ( <ptr> dev )
<cls> <noptr> r update card detect ( <ptr> dev )
<cls> <noptr> msb read boot blocks ( <ptr> msb )
<cls> <noptr> r transfer fifo dma ( <ptr> dev )
<cls> <noptr> tif mms probe ( <ptr> sock )
<cls> <noptr> tif mms complete cmd ( <ptr> host )
<cls> <noptr> mem stick device resume ( <ptr> dev )
<cls> <noptr> rts xpc ims card event ( <ptr> pdev )
<cls> <ptr> check no dma ( )
<cls> <noptr> msb reset ( <ptr> msb <dot> <noptr> full )
<cls> <ptr> check cmd retries ( )
<cls> <noptr> rts x usb ms resume ( <ptr> dev )
<cls> <ptr> ms pro block attrname ( <noptr> tag )
<cls> <noptr> ms print debug regs ( <ptr> host )
<cls> <noptr> tif mms data event ( <ptr> sock )
<cls> <noptr> tif mms abort ( <ptr> t )
<cls> <noptr> ms clear error ( <ptr> host )
<cls> <noptr> tif mms req task let ( <noptr> data )
<cls> <noptr> r probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> tif mms check status ( <ptr> host )
<cls> <noptr> msb get zone from lba ( <noptr> lba )
<cls> <noptr> msb cache flush timer ( <ptr> t )
<cls> <noptr> ms pro block init ( )
<cls> <noptr> ms pro block issue req ( <ptr> card )
<cls> <ptr> mem stick debug get tpc name ( <noptr> tpc )
<cls> <noptr> rts x usb ms handle req ( <ptr> work )
<cls> <noptr> rts xpc ims request ( <ptr> msh )
<cls> <noptr> msb cache flush ( <ptr> msb )
<cls> <noptr> msb read int reg ( <ptr> msb <dot> <noptr> timeout )
<cls> <noptr> ms pro block resume ( <ptr> card )
<cls> <noptr> mem stick dummy check ( <ptr> card )
<cls> <noptr> j mb xms dummy submit ( <ptr> msh )
<cls> <noptr> tif mms submit req ( <ptr> msh )
<cls> <noptr> msb switchto parallel ( <ptr> msb )
<cls> <noptr> j mb xms driver init ( )
<cls> <noptr> r host reset ( <ptr> dev )
<cls> <noptr> mem stick add host ( <ptr> host )
<cls> <noptr> r set reg mask ( <ptr> dev <dot> <noptr> address <dot> <noptr> mask )
<cls> <noptr> msb check card ( <ptr> card )
<cls> <noptr> tif mms dummy submit ( <ptr> msh )
<cls> <noptr> ms pro block init card ( <ptr> card )
<cls> <noptr> msb data clear ( <ptr> msb )
<cls> <noptr> msb ftl initialize ( <ptr> msb )
<cls> <noptr> msb suspend ( <ptr> card <dot> <noptr> state )
<cls> <noptr> rts x usb ms driver init ( )
<cls> <noptr> r process thread ( <ptr> data )
<cls> <noptr> mem stick detect change ( <ptr> host )
<cls> <noptr> r start dma ( <ptr> dev <dot> <noptr> is write )
<cls> <noptr> j mb xms reset ( <ptr> host )
<cls> <noptr> rts x usb ms drv probe ( <ptr> pdev )
<cls> <noptr> ms pro block check card ( <ptr> card )
<cls> <noptr> ms pro block attr show ( <noptr> tag )
<cls> <noptr> r transfer fifo pio ( <ptr> dev )
<cls> <noptr> hms pro block wait forced ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> ms pro block switch interface ( <ptr> card )
<cls> <noptr> hms pro block transfer data ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> msb start ( <ptr> card )
<cls> <noptr> msb cache init ( <ptr> msb )
<cls> <noptr> mem stick device suspend ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> mem stick bus match ( <ptr> dev <dot> <ptr> drv )
<cls> <noptr> r test fifo empty ( <ptr> dev )
<cls> <noptr> msb io work ( <ptr> work )
<cls> <noptr> rts xpc ims handle req ( <ptr> work )
<cls> <noptr> r suspend ( <ptr> core dev )
<cls> <noptr> mem stick resume host ( <ptr> host )
<cls> <noptr> rts xpc ims drv probe ( <ptr> pdev )
<cls> <noptr> ms pro block probe ( <ptr> card )
<cls> <noptr> msb get zone from p ba ( <noptr> p ba )
<cls> <noptr> mem stick suspend host ( <ptr> host )
<cls> <noptr> ms bbd open ( <ptr> b dev <dot> <noptr> mode )
<cls> <noptr> rts xpc ims resume ( <ptr> pdev )
<cls> <noptr> h msb write block ( <ptr> card <dot> <dptr> out m r q )
<cls> <noptr> j mb xms submit req ( <ptr> msh )
<cls> <noptr> j mb xms count slots ( <ptr> pdev )
<cls> <noptr> h mem stick read devid ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> ms power on ( <ptr> host )
<cls> <noptr> r enable device ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> rts x usb ms suspend ( <ptr> dev )
<cls> <noptr> j mb x msp mos ( <ptr> pdev <dot> <noptr> flag )
<cls> <noptr> mem stick power on ( <ptr> host )
<cls> <noptr> msb validate used block bitmap ( <ptr> msb )
<cls> <noptr> msb read bad block table ( <ptr> msb <dot> <noptr> block nr )
<cls> <noptr> mem stick new req ( <ptr> host )
<cls> <noptr> ms bbd get geo ( <ptr> b dev <dot> <ptr> geo )
<cls> <noptr> msb invalidate reg window ( <ptr> msb )
<cls> <noptr> ms pro block bd open ( <ptr> b dev <dot> <noptr> mode )
<cls> <noptr> r irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> j mb xms issue cmd ( <ptr> msh )
<cls> <noptr> tif mms resume ( <ptr> sock )
<cls> <noptr> ms pull ctl disable q fn ( <ptr> u cr )
<cls> <noptr> msb get free block ( <ptr> msb <dot> <noptr> zone )
<cls> <noptr> mem stick set rw addr ( <ptr> card )
<cls> <ptr> ms pro from sysfs attr ( <ptr> attr )
<cls> <noptr> ms pro block wait forced ( <ptr> card )
<cls> <noptr> rts xpc ims suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> r read fifo pio ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> len )
<cls> <noptr> j mb xms transfer data ( <ptr> host )
<cls> <noptr> msb fix boot page end ian ness ( <ptr> p )
<cls> <noptr> ms pro block suspend ( <ptr> card <dot> <noptr> state )
<cls> <noptr> r flush fifo write ( <ptr> dev )
<cls> <noptr> msb mark block used ( <ptr> msb <dot> <noptr> p ba )
<cls> <noptr> r clear reg mask ( <ptr> dev <dot> <noptr> address <dot> <noptr> mask )
<cls> <noptr> j mb xms complete cmd ( <ptr> msh <dot> <noptr> last )
<cls> <noptr> r set param ( <ptr> host <dot> <noptr> param <dot> <noptr> value )
<cls> <noptr> tif mms read data ( <ptr> host <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> mem stick dev match ( <ptr> card <dot> <ptr> id )
<cls> <noptr> ms pull ctl disable l q fp ( <ptr> u cr )
<cls> <noptr> hms pro block setup cmd ( <ptr> card <dot> <noptr> offset <dot> <noptr> length )
<cls> <noptr> msb mark block unused ( <ptr> msb <dot> <noptr> p ba )
<cls> <noptr> hms pro block get ro ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> ms pro queue r q ( <ptr> h ctx <dot> <ptr> bd )
<cls> <noptr> j mb xms suspend ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> msb run state machine ( <ptr> msb <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> msb mark bad ( <ptr> msb <dot> <noptr> p ba )
<cls> <noptr> category show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> msb probe ( <ptr> card )
<cls> <noptr> hms pro block default bad ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> ms pro block read attributes ( <ptr> card )
<cls> <noptr> h msb default bad ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> ms pro block attr show model name ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buffer )
<cls> <noptr> msb queue r q ( <ptr> h ctx <dot> <ptr> bd )
<cls> <noptr> mem stick u event ( <ptr> dev <dot> <ptr> env )
<cls> <noptr> hms pro block req init ( <ptr> card <dot> <dptr> m r q )
<cls> <noptr> r stop dma ( <ptr> dev <dot> <noptr> error )
<cls> <noptr> msb update block ( <ptr> msb <dot> <noptr> lba <dot> <ptr> sg <dot> <noptr> offset )
<cls> <noptr> j mb xms set param ( <ptr> msh <dot> <noptr> param <dot> <noptr> value )
<cls> <noptr> ms pro block bd get geo ( <ptr> b dev <dot> <ptr> geo )
<cls> <noptr> j mb xms isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> rts x usb ms issue cmd ( <ptr> host )
<cls> <noptr> class show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> r read reg ( <ptr> dev <dot> <noptr> address )
<cls> <noptr> rts x usb ms set param ( <ptr> msh <dot> <noptr> param <dot> <noptr> value )
<cls> <noptr> ms pro block complete req ( <ptr> card <dot> <noptr> error )
<cls> <noptr> rts xpc ims set param ( <ptr> msh <dot> <noptr> param <dot> <noptr> value )
<cls> <noptr> j mb xms read data ( <ptr> host <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> ms pro block attr show default ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buffer )
<cls> <noptr> j mb xms read reg data ( <ptr> host <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> msb sg compareto buffer ( <ptr> sg <dot> <noptr> offset <dot> <ptr> buffer <dot> <noptr> len )
<cls> <noptr> j mb xms write data ( <ptr> host <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> r write reg ( <ptr> dev <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> tif mms set param ( <ptr> msh <dot> <noptr> param <dot> <noptr> value )
<cls> <noptr> r write fifo pio ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> len )
<cls> <noptr> msb verify block ( <ptr> msb <dot> <noptr> p ba <dot> <ptr> orig sg <dot> <noptr> offset )
<cls> <noptr> h msb reset ( <ptr> card <dot> <dptr> out m r q )
<cls> <noptr> ms pro block attr show mbr ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buffer )
<cls> <noptr> msb read oob ( <ptr> msb <dot> <noptr> p ba <dot> <noptr> page <dot> <ptr> extra )
<cls> <noptr> ms pro block attr show spec file ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buffer )
<cls> <noptr> h msb parallel switch ( <ptr> card <dot> <dptr> out m r q )
<cls> <noptr> msb read regs ( <ptr> msb <dot> <noptr> offset <dot> <noptr> len )
<cls> <noptr> h msb send command ( <ptr> card <dot> <dptr> out m r q )
<cls> <noptr> ms pro block set interface ( <ptr> card <dot> <noptr> sys reg )
<cls> <noptr> ms pro block attr show sys info ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buffer )
<cls> <noptr> tif mms suspend ( <ptr> sock <dot> <noptr> state )
<cls> <noptr> r write reg raw be ( <ptr> dev <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> ms read bytes ( <ptr> host <dot> <noptr> tpc <dot> <noptr> cfg <dot> <noptr> cnt <dot> <ptr> data <dot> <ptr> int reg )
<cls> <noptr> msb set overwrite flag ( <ptr> msb <dot> <noptr> p ba <dot> <noptr> page <dot> <noptr> flag )
<cls> <noptr> mem stick init reqs g ( <ptr> m r q <dot> <noptr> tpc <dot> <ptr> sg )
<cls> <noptr> ms pro block attr show dev info ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buffer )
<cls> <noptr> j mb xms write reg data ( <ptr> host <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> mem stick init req ( <ptr> m r q <dot> <noptr> tpc <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> msb write block ( <ptr> msb <dot> <noptr> p ba <dot> <noptr> lba <dot> <ptr> sg <dot> <noptr> offset )
<cls> <noptr> msb write regs ( <ptr> msb <dot> <noptr> offset <dot> <noptr> len <dot> <ptr> buf )
<cls> <noptr> msb do read request ( <ptr> msb <dot> <noptr> lba <dot> <noptr> page <dot> <ptr> sg <dot> <noptr> len <dot> <ptr> sucessful y read )
<cls> <noptr> msb read page ( <ptr> msb <dot> <noptr> p ba <dot> <noptr> page <dot> <ptr> extra <dot> <ptr> sg <dot> <noptr> offset )
<cls> <noptr> msb sg copy ( <ptr> sg from <dot> <ptr> sg to <dot> <noptr> ton ents <dot> <noptr> offset <dot> <noptr> len )
<cls> <noptr> m pts as add device component by fw ( <ptr> ioc <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> m pts as probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> mpt scsi h synchronize cache ( <ptr> hd <dot> <ptr> v device )
<cls> <noptr> mpt lan post receive buckets ( <ptr> priv )
<cls> <noptr> fusion init ( )
<cls> <noptr> proc mpt create ( )
<cls> <noptr> mp tfc init ( )
<cls> <noptr> mpt halt firmware ( <ptr> ioc )
<cls> <noptr> mpt spi init ( )
<cls> <noptr> mpt resume ( <ptr> pdev )
<cls> <ptr> mpt get msg frame ( <noptr> cb idx <dot> <ptr> ioc )
<cls> <noptr> mpt ctl init ( )
<cls> <ptr> check mp tpt clear ( )
<cls> <noptr> mpt scsi hq cmd ( <ptr> scp nt )
<cls> <noptr> mpt lant x timeout ( <ptr> dev )
<cls> <ptr> check mpt msi enable spi ( )
<cls> <noptr> m pts as probe devices ( <ptr> ioc )
<cls> <noptr> proc mpt destroy ( )
<cls> <noptr> mpt spi get r p ( <ptr> star get )
<cls> <noptr> mpt adapter dispose ( <ptr> ioc )
<cls> <noptr> mpt read iocp g ( <ptr> ioc )
<cls> <ptr> check max lun ( )
<cls> <ptr> check mpt channel mapping ( )
<cls> <noptr> mpt scsi h docmd ( <ptr> hd <dot> <ptr> io )
<cls> <noptr> get io unit page ( <ptr> ioc )
<cls> <noptr> m pts pid vre negotiate ( <ptr> hd )
<cls> <noptr> mpt lan open ( <ptr> dev )
<cls> <noptr> pci enable io access ( <ptr> pdev )
<cls> <noptr> mpt event deregister ( <noptr> cb idx )
<cls> <noptr> m pts ase h timed out ( <ptr> sc )
<cls> <noptr> mpt scsi h show info ( <ptr> m <dot> <ptr> host )
<cls> <ptr> phy to ioc ( <ptr> phy )
<cls> <noptr> mpt scsi h abort ( <ptr> scp nt )
<cls> <noptr> mpt config ( <ptr> ioc <dot> <ptr> p cfg )
<cls> <ptr> check mpt msi enable fc ( )
<cls> <noptr> mpt is discovery complete ( <ptr> ioc )
<cls> <noptr> mpt lan reset ( <ptr> dev )
<cls> <ptr> m pts as get r phy ( <ptr> phy info )
<cls> <noptr> mpt set debug level ( <ptr> val <dot> <ptr> kp )
<cls> <noptr> m pts as probe hba phys ( <ptr> ioc )
<cls> <noptr> mpt scsi h host reset ( <ptr> scp nt )
<cls> <noptr> m pts pid vre negotiate work ( <ptr> work )
<cls> <ptr> check mpt fw fault debug ( )
<cls> <noptr> m pts assen dir event ( <ptr> fw event )
<cls> <ptr> check mpt load time max sectors ( )
<cls> <noptr> mpt deregister ( <noptr> cb idx )
<cls> <noptr> mpt set task mgmt inprogress flag ( <ptr> ioc )
<cls> <noptr> m pts as slave configure ( <ptr> s dev )
<cls> <noptr> mpt sass asio unit pg ( <ptr> ioc )
<cls> <noptr> mpt scsi h resume ( <ptr> pdev )
<cls> <noptr> mpt get cb idx ( <noptr> d class )
<cls> <ptr> mpt scsi h info ( <ptr> sc host )
<cls> <noptr> mpt fault reset work ( <ptr> work )
<cls> <noptr> mp tfc res can devices ( <ptr> work )
<cls> <noptr> mp tfc q cmd ( <ptr> shost <dot> <ptr> scp nt )
<cls> <noptr> mpt sass end link status event ( <ptr> fw event )
<cls> <noptr> mpt spi write period ( <ptr> star get <dot> <noptr> period )
<cls> <noptr> m pts as event process ( <ptr> ioc <dot> <ptr> reply )
<cls> <noptr> m pts as probe expand ers ( <ptr> ioc )
<cls> <noptr> m pts as mgmt done ( <ptr> ioc <dot> <ptr> req <dot> <ptr> reply )
<cls> <ptr> check mpt msi enables as ( )
<cls> <noptr> mpt display ioc capabilities ( <ptr> ioc )
<cls> <noptr> mpt scsi h bus reset ( <ptr> scp nt )
<cls> <noptr> mpt version proc show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> mpt sass end expander event ( <ptr> fw event )
<cls> <noptr> mpt lan probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> mpt work wrapper ( <ptr> work )
<cls> <noptr> m pts as block ios target ( <ptr> star get )
<cls> <noptr> mpt lan post receive buckets work ( <ptr> work )
<cls> <noptr> mpt read scsi device page headers ( <ptr> ioc <dot> <noptr> portnum )
<cls> <ptr> m pts as get port ( <ptr> phy info )
<cls> <noptr> mpt scsi h dev reset ( <ptr> scp nt )
<cls> <noptr> init chain buffers ( <ptr> ioc )
<cls> <noptr> mp tfc init host attr ( <ptr> ioc <dot> <noptr> portnum )
<cls> <noptr> mpt get ioc state ( <ptr> ioc <dot> <noptr> cooked )
<cls> <noptr> mpt scsi h flush running cmds ( <ptr> hd )
<cls> <noptr> mp tfc setup reset ( <ptr> work )
<cls> <noptr> mpt ctl timeout expired ( <ptr> ioc <dot> <ptr> m f )
<cls> <noptr> mpt ctl read test ( <ptr> ioc <dot> <noptr> arg )
<cls> <noptr> mpt ctl probe ( <ptr> pdev <dot> <ptr> id )
<cls> <ptr> m pts as gets target ( <ptr> phy info )
<cls> <noptr> send ioc init ( <ptr> ioc <dot> <noptr> sleep flag )
<cls> <noptr> mpt sass ends as event ( <ptr> fw event )
<cls> <noptr> mpt dvr aid ( <ptr> hd <dot> <noptr> disk )
<cls> <ptr> check mp tfc dev loss t mo ( )
<cls> <noptr> mpt ctl do reset ( <ptr> iocp <dot> <noptr> arg )
<cls> <noptr> mp tfc ioc reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> mpt reply ( <ptr> ioc <dot> <noptr> pa )
<cls> <noptr> m pts as block ios dev ( <ptr> s dev <dot> <ptr> data )
<cls> <noptr> mpt turbo reply ( <ptr> ioc <dot> <noptr> pa )
<cls> <noptr> mpt spi deny binding ( <ptr> star get )
<cls> <noptr> m pts as schedule target reset ( <ptr> iocp )
<cls> <noptr> mp tfc event process ( <ptr> ioc <dot> <ptr> pe v reply )
<cls> <noptr> mp tfc abort ( <ptr> scp nt )
<cls> <noptr> mpt get manufact uring pg ( <ptr> ioc )
<cls> <noptr> mpt ioc reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> m pts as queue res can ( <ptr> ioc )
<cls> <noptr> mp tfc probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> mpt scsi h get tm timeout ( <ptr> ioc )
<cls> <noptr> mpt lan type trans ( <ptr> skb <dot> <ptr> dev )
<cls> <noptr> mpt ctl event query ( <ptr> ioc <dot> <noptr> arg )
<cls> <noptr> get lan config pages ( <ptr> ioc )
<cls> <noptr> m pts as repro be lun ( <ptr> s dev <dot> <ptr> data )
<cls> <noptr> mpt base sas persist operation ( <ptr> ioc <dot> <noptr> persist opcode )
<cls> <noptr> m pts asi send device ( <ptr> attached )
<cls> <noptr> mpt get fw exp ver ( <ptr> buf <dot> <ptr> ioc )
<cls> <noptr> mpt lan receive skb ( <ptr> dev <dot> <ptr> skb )
<cls> <noptr> mpt scsi h task mgmt response code ( <ptr> ioc <dot> <noptr> response code )
<cls> <noptr> mpt lan receive post turbo ( <ptr> dev <dot> <noptr> t msg )
<cls> <noptr> mpt find im volumes ( <ptr> ioc )
<cls> <noptr> m pts as get bay identifier ( <ptr> r phy )
<cls> <noptr> mpt spi slave configure ( <ptr> s dev )
<cls> <noptr> mpt attach ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> mpt ctl event process ( <ptr> ioc <dot> <ptr> pe v reply )
<cls> <noptr> mpt spi write dt ( <ptr> star get <dot> <noptr> dt )
<cls> <noptr> m pts as q cmd ( <ptr> shost <dot> <ptr> scp nt )
<cls> <noptr> mpt do upload ( <ptr> ioc <dot> <noptr> sleep flag )
<cls> <noptr> mpt spi resume ( <ptr> pdev )
<cls> <noptr> m pts as handle queue full event ( <ptr> fw event )
<cls> <noptr> mpt spi probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> mpt lan send reply ( <ptr> dev <dot> <ptr> p send rep )
<cls> <noptr> mpt scsi h search running cmds ( <ptr> hd <dot> <ptr> v device )
<cls> <noptr> m pts as get link errors ( <ptr> phy )
<cls> <noptr> mpt scsi h suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> mp tfc link status change ( <ptr> work )
<cls> <noptr> mpt ctl event report ( <ptr> ioc <dot> <noptr> arg )
<cls> <noptr> mpt ctl get target info ( <ptr> ioc <dot> <noptr> arg )
<cls> <noptr> mpt ctl replace fw ( <ptr> ioc <dot> <noptr> arg )
<cls> <ptr> m pts as find port info by sas address ( <ptr> ioc <dot> <noptr> sas address )
<cls> <noptr> m pts as add end device ( <ptr> ioc <dot> <ptr> phy info )
<cls> <noptr> mpt ctl event enable ( <ptr> ioc <dot> <noptr> arg )
<cls> <noptr> mpt spi q cmd ( <ptr> shost <dot> <ptr> scp nt )
<cls> <noptr> m pts as not responding devices ( <ptr> ioc )
<cls> <noptr> mpt lan event process ( <ptr> ioc <dot> <ptr> pe v reply )
<cls> <noptr> pci disable io access ( <ptr> pdev )
<cls> <ptr> m pts as refreshing device handles ( <ptr> ioc <dot> <ptr> sas device )
<cls> <noptr> m pts as expander refresh ( <ptr> ioc <dot> <ptr> port info )
<cls> <noptr> mpt scsi h version fw show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mp tfc generate r port ids ( <ptr> pg <dot> <ptr> rid )
<cls> <noptr> mpt verify adapter ( <noptr> io cid <dot> <dptr> io cpp )
<cls> <noptr> mpt spi write offset ( <ptr> star get <dot> <noptr> offset )
<cls> <noptr> mpt spi writer d str m ( <ptr> star get <dot> <noptr> rd str m )
<cls> <noptr> mpt ctl fw download ( <ptr> iocp <dot> <noptr> arg )
<cls> <noptr> mpt register ( <noptr> cb func <dot> <noptr> d class <dot> <ptr> funcname )
<cls> <noptr> m pts pid v device ( <ptr> hd <dot> <ptr> s dev )
<cls> <noptr> mpt scsi h board name show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mpt event register ( <noptr> cb idx <dot> <noptr> e vcb func )
<cls> <noptr> mpt reset register ( <noptr> cb idx <dot> <noptr> reset func )
<cls> <noptr> mpt scsi h slave configure ( <ptr> s dev )
<cls> <noptr> m pts as re queue fw event ( <ptr> ioc <dot> <ptr> fw event <dot> <noptr> delay )
<cls> <noptr> mpt spi print write nego ( <ptr> hd <dot> <ptr> star get <dot> <noptr> i i )
<cls> <noptr> mp tfc get fc port page ( <ptr> ioc <dot> <noptr> portnum )
<cls> <noptr> mpt spi set target nego parms ( <ptr> hd <dot> <ptr> target <dot> <ptr> s dev )
<cls> <noptr> scp nt to lookup idx ( <ptr> ioc <dot> <ptr> sc )
<cls> <noptr> mpt interrupt ( <noptr> irq <dot> <ptr> bus id )
<cls> <noptr> mpt lan receive post reply ( <ptr> dev <dot> <ptr> p recv rep )
<cls> <noptr> m pts as print phy data ( <ptr> ioc <dot> <ptr> phy data )
<cls> <noptr> mpt spi write width ( <ptr> star get <dot> <noptr> width )
<cls> <noptr> mpt lan send turbo ( <ptr> dev <dot> <noptr> t msg )
<cls> <noptr> m pts assets target ( <ptr> phy info <dot> <ptr> star get )
<cls> <noptr> m ptf cfc dev page cmp func ( <ptr> a <dot> <ptr> b )
<cls> <noptr> mpt soft hard reset handler ( <ptr> ioc <dot> <noptr> sleep flag )
<cls> <noptr> send event notification ( <ptr> ioc <dot> <noptr> ev switch <dot> <noptr> sleep flag )
<cls> <noptr> mpt scsi h task mgmt complete ( <ptr> ioc <dot> <ptr> m f <dot> <ptr> m r )
<cls> <noptr> m pts as get enclosure identifier ( <ptr> r phy <dot> <ptr> identifier )
<cls> <noptr> mpt spi log info ( <ptr> ioc <dot> <noptr> log info )
<cls> <noptr> mpt summary proc show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> mpt inactive raid volumes ( <ptr> ioc <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> m pts as broadcast primitive work ( <ptr> fw event )
<cls> <noptr> lan reply ( <ptr> ioc <dot> <ptr> m f <dot> <ptr> reply )
<cls> <ptr> r phy to ioc ( <ptr> r phy )
<cls> <noptr> mpt get scsi port settings ( <ptr> ioc <dot> <noptr> portnum )
<cls> <noptr> mpt display event info ( <ptr> ioc <dot> <ptr> p event reply )
<cls> <noptr> mpt adds ge ( <ptr> p addr <dot> <noptr> flags length <dot> <noptr> dma addr )
<cls> <noptr> mpt suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> wait for door bell int ( <ptr> ioc <dot> <noptr> how long <dot> <noptr> sleep flag )
<cls> <noptr> mpt ctl hp target info ( <ptr> ioc <dot> <noptr> arg )
<cls> <noptr> mpt hard reset handler ( <ptr> ioc <dot> <noptr> sleep flag )
<cls> <noptr> mpt device driver register ( <ptr> d dcb func <dot> <noptr> cb idx )
<cls> <noptr> mpt scsi h debug level show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> m pts as parse device info ( <ptr> identify <dot> <ptr> device info )
<cls> <noptr> mpt scsi h version nv data persistent show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mpt spi write hold mcs ( <ptr> star get <dot> <noptr> hold mcs )
<cls> <noptr> send event ack ( <ptr> ioc <dot> <ptr> ev np )
<cls> <noptr> mpt ioc info proc show ( <ptr> m <dot> <ptr> v )
<cls> <noptr> mpt scsi h ioc reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <ptr> m pts as find port info by handle ( <ptr> ioc <dot> <noptr> handle )
<cls> <noptr> m pts asf w event on ( <ptr> ioc )
<cls> <ptr> mpt scsi h get clear scsi lookup ( <ptr> ioc <dot> <noptr> i )
<cls> <noptr> mpt scsi h event process ( <ptr> ioc <dot> <ptr> pe v reply )
<cls> <ptr> m pts as find v target ( <ptr> ioc <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> make ioc ready ( <ptr> ioc <dot> <noptr> force <dot> <noptr> sleep flag )
<cls> <noptr> mpt sass asio unit pg ( <ptr> ioc <dot> <ptr> port info )
<cls> <noptr> mpt ctl ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> mpt scsi h version nv data default show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mp tfc set r port loss t mo ( <ptr> r port <dot> <noptr> timeout )
<cls> <noptr> mpt base reply ( <ptr> ioc <dot> <ptr> req <dot> <ptr> reply )
<cls> <noptr> send port enable ( <ptr> ioc <dot> <noptr> portnum <dot> <noptr> sleep flag )
<cls> <noptr> mpt lan ioc reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> m pts as print phy pg ( <ptr> ioc <dot> <ptr> pg )
<cls> <noptr> m pts a shot plug work ( <ptr> ioc <dot> <ptr> fw event <dot> <ptr> hot plug info )
<cls> <noptr> mpt soft reset handler ( <ptr> ioc <dot> <noptr> sleep flag )
<cls> <noptr> mpt spi is raid ( <ptr> hd <dot> <noptr> id )
<cls> <noptr> mp tfc log info ( <ptr> ioc <dot> <noptr> log info )
<cls> <noptr> m pts as target reset queue ( <ptr> ioc <dot> <ptr> sas event data )
<cls> <noptr> mpt spi write wr flow ( <ptr> star get <dot> <noptr> wr flow )
<cls> <noptr> mpt scsi h task mgmt reply ( <ptr> ioc <dot> <noptr> type <dot> <ptr> psc sit m reply )
<cls> <noptr> m pts asset port ( <ptr> ioc <dot> <ptr> phy info <dot> <ptr> port )
<cls> <noptr> compat mp ctl ioctl ( <ptr> f <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> mpt spi write p com pen ( <ptr> star get <dot> <noptr> p com pen )
<cls> <noptr> mp tfc dev reset ( <ptr> scp nt )
<cls> <noptr> mpt ctl task mgmt reply ( <ptr> ioc <dot> <ptr> m f <dot> <ptr> m r )
<cls> <noptr> mp tfc display port link speed ( <ptr> ioc <dot> <noptr> portnum <dot> <ptr> pp dest )
<cls> <noptr> mpt ctl hp host info ( <ptr> ioc <dot> <noptr> arg <dot> <noptr> data size )
<cls> <noptr> m pts asio c reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> m pts as print device pg ( <ptr> ioc <dot> <ptr> pg )
<cls> <noptr> wait for door bell ack ( <ptr> ioc <dot> <noptr> how long <dot> <noptr> sleep flag )
<cls> <noptr> mpt add chain bit ( <ptr> p addr <dot> <noptr> next <dot> <noptr> length <dot> <noptr> dma addr )
<cls> <noptr> mpt scsi h io delay show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> m pts as repro be target ( <ptr> star get <dot> <noptr> uld attach )
<cls> <noptr> mpt ctl get ioc info ( <ptr> ioc <dot> <noptr> arg <dot> <noptr> data size )
<cls> <noptr> m ptr aid phys disk pg ( <ptr> ioc <dot> <noptr> phys disk num <dot> <ptr> phys disk )
<cls> <noptr> process event notification ( <ptr> ioc <dot> <ptr> p event reply <dot> <ptr> ev handlers )
<cls> <noptr> mpt scsi h get completion code ( <ptr> ioc <dot> <ptr> req <dot> <ptr> reply )
<cls> <noptr> mp tfc block error handler ( <ptr> scp nt <dot> <ptr> ptr <dot> <ptr> caller )
<cls> <noptr> mpt scsi hra i did to num ( <ptr> ioc <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> m pts as queue device delete ( <ptr> ioc <dot> <ptr> sas event data )
<cls> <noptr> mpt spi ioc reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> mpt scsi h version bios show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> m pts as add fw event ( <ptr> ioc <dot> <ptr> fw event <dot> <noptr> delay )
<cls> <noptr> mpt scsi h bios param ( <ptr> s dev <dot> <ptr> b dev <dot> <noptr> capacity <dot> <noptr> geom )
<cls> <noptr> get ioc facts ( <ptr> ioc <dot> <noptr> sleep flag <dot> <noptr> reason )
<cls> <noptr> m pts as phy reset ( <ptr> phy <dot> <noptr> hard reset )
<cls> <noptr> mpt download boot ( <ptr> ioc <dot> <ptr> p fw header <dot> <noptr> sleep flag )
<cls> <noptr> mpt ctl do fw download ( <ptr> iocp <dot> <ptr> ufw buf <dot> <noptr> fw len )
<cls> <noptr> mpt ctl do task mgmt ( <ptr> ioc <dot> <noptr> tm type <dot> <noptr> bus id <dot> <noptr> targetid )
<cls> <noptr> mpt detect bound ports ( <ptr> ioc <dot> <ptr> pdev )
<cls> <noptr> mpt lan wake post buckets task ( <ptr> dev <dot> <noptr> priority )
<cls> <noptr> mpt ctl do mpt command ( <ptr> ioc <dot> <noptr> k arg <dot> <ptr> m fptr )
<cls> <noptr> mpt spi read spi device pg ( <ptr> star get <dot> <ptr> pass pg )
<cls> <noptr> mpt spi write i u ( <ptr> star get <dot> <noptr> i u )
<cls> <noptr> mpt ctl reply ( <ptr> ioc <dot> <ptr> req <dot> <ptr> reply )
<cls> <noptr> mpt ctl ioc reset ( <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> mpt scsi h qui esc era id ( <ptr> hd <dot> <noptr> qui esc e <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> mpt spi write spi device pg ( <ptr> star get <dot> <ptr> pass pg )
<cls> <noptr> mp tfc get fc dev page ( <ptr> ioc <dot> <noptr> ioc port <dot> <ptr> ptr <dot> <noptr> int <dot> <ptr> ptr )
<cls> <noptr> mpt diag reset ( <ptr> ioc <dot> <noptr> ignore <dot> <noptr> sleep flag )
<cls> <noptr> mpt scsi hsc and v complete ( <ptr> ioc <dot> <ptr> req <dot> <ptr> reply )
<cls> <noptr> mpt scsi h report queue full ( <ptr> sc <dot> <ptr> p scsi reply <dot> <ptr> p scsi req )
<cls> <noptr> mpt add chain ( <ptr> p addr <dot> <noptr> next <dot> <noptr> length <dot> <noptr> dma addr )
<cls> <noptr> mpt put msg frame ( <noptr> cb idx <dot> <ptr> ioc <dot> <ptr> m f )
<cls> <noptr> mpt sass mp handler ( <ptr> job <dot> <ptr> shost <dot> <ptr> r phy )
<cls> <noptr> mpt sass asp hyp g ( <ptr> ioc <dot> <ptr> phy info <dot> <noptr> form <dot> <noptr> form specific )
<cls> <noptr> mpt ioc status info config ( <ptr> ioc <dot> <noptr> ioc status <dot> <ptr> m f )
<cls> <noptr> mpt scsi h adds ge ( <ptr> ioc <dot> <ptr> scp nt <dot> <ptr> preq <dot> <noptr> req idx )
<cls> <noptr> mpt host page access control ( <ptr> ioc <dot> <noptr> access control value <dot> <noptr> sleep flag )
<cls> <noptr> mpt ioc status info ( <ptr> ioc <dot> <noptr> ioc status <dot> <ptr> m f )
<cls> <ptr> mpt get product name ( <noptr> vendor <dot> <noptr> device <dot> <noptr> revision )
<cls> <noptr> m pts as print expander pg ( <ptr> ioc <dot> <ptr> pg )
<cls> <noptr> m pts asset r phy ( <ptr> ioc <dot> <ptr> phy info <dot> <ptr> r phy )
<cls> <noptr> mpt send handshake request ( <noptr> cb idx <dot> <ptr> ioc <dot> <noptr> req bytes <dot> <ptr> req <dot> <noptr> sleep flag )
<cls> <noptr> mpt spi write ioc page ( <ptr> hd <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> mpt scsi h set scsi lookup ( <ptr> ioc <dot> <noptr> i <dot> <ptr> scmd )
<cls> <noptr> mpt sass as expander pg ( <ptr> ioc <dot> <ptr> phy info <dot> <noptr> form <dot> <noptr> form specific )
<cls> <noptr> send ioc reset ( <ptr> ioc <dot> <noptr> reset type <dot> <noptr> sleep flag )
<cls> <noptr> mpt signal reset ( <noptr> index <dot> <ptr> ioc <dot> <noptr> reset phase )
<cls> <noptr> m pts as probe one phy ( <ptr> dev <dot> <ptr> phy info <dot> <noptr> index <dot> <noptr> local )
<cls> <noptr> mpt scsi h copy sense data ( <ptr> sc <dot> <ptr> hd <dot> <ptr> m f <dot> <ptr> p scsi reply )
<cls> <noptr> mpt adds ge bit ( <ptr> p addr <dot> <noptr> flags length <dot> <noptr> dma addr )
<cls> <noptr> wait for door bell reply ( <ptr> ioc <dot> <noptr> how long <dot> <noptr> sleep flag )
<cls> <noptr> mpt do ioc recovery ( <ptr> ioc <dot> <noptr> reason <dot> <noptr> sleep flag )
<cls> <noptr> m pts as target reset ( <ptr> ioc <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> mpt scsi h issue task mgmt ( <ptr> hd <dot> <noptr> type <dot> <noptr> channel <dot> <noptr> id <dot> <noptr> lun <dot> <noptr> ctx abort <dot> <noptr> timeout )
<cls> <noptr> mp tfc dump lun info ( <ptr> ioc <dot> <ptr> r port <dot> <ptr> s dev <dot> <ptr> v target )
<cls> <noptr> mpt sass as enclosure pg ( <ptr> ioc <dot> <ptr> enclosure <dot> <noptr> form <dot> <noptr> form specific )
<cls> <noptr> mpt print ioc summary ( <ptr> ioc <dot> <ptr> buffer <dot> <ptr> size <dot> <noptr> len <dot> <noptr> show lan )
<cls> <noptr> m pts as issue tm ( <ptr> ioc <dot> <noptr> type <dot> <noptr> channel <dot> <noptr> id <dot> <noptr> lun <dot> <noptr> task context <dot> <noptr> timeout <dot> <ptr> issue reset )
<cls> <noptr> m pts as add device component ( <ptr> ioc <dot> <noptr> channel <dot> <noptr> id <dot> <noptr> sas address <dot> <noptr> device info <dot> <noptr> slot <dot> <noptr> enclosure logical id )
<cls> <noptr> loc h nagar readable register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> loc h nagar wait for boot ( <ptr> reg map <dot> <ptr> id )
<cls> <noptr> loc h nagar ic init ( )
<cls> <noptr> rct irq lock ( <ptr> irq data )
<cls> <noptr> sm create irq ( <ptr> sm <dot> <ptr> res )
<cls> <ptr> to adc ( <ptr> pcf )
<cls> <noptr> sm create sub io ( <ptr> sm <dot> <ptr> res <dot> <noptr> offs <dot> <noptr> size )
<cls> <noptr> l m update ( <ptr> l m <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> mt probe ( <ptr> pdev )
<cls> <noptr> loc h nagar volatile register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> rct irq init ( <ptr> rct <dot> <noptr> irq <dot> <noptr> irq base )
<cls> <ptr> check gpio irq ( )
<cls> <noptr> rct set ext pwr req control ( <ptr> dev <dot> <noptr> id <dot> <noptr> ext pwr <dot> <noptr> slots )
<cls> <noptr> mt irq resume ( <ptr> dev )
<cls> <noptr> b x tw c add chained irq chip ( <ptr> p mic <dot> <ptr> p data <dot> <noptr> p irq <dot> <noptr> irq flags <dot> <ptr> chip <dot> <dptr> data )
<cls> <noptr> atmel hsm ccs conf get ( <ptr> reg map <dot> <ptr> layout <dot> <noptr> cs <dot> <ptr> conf )
<cls> <noptr> rct irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> atmel sm ccs conf get ( <ptr> reg map <dot> <noptr> cs <dot> <ptr> conf )
<cls> <noptr> pcf gpio get ( <ptr> pcf <dot> <noptr> gpio )
<cls> <noptr> asi c init ( )
<cls> <noptr> rt driver init ( )
<cls> <noptr> pcf adc driver init ( )
<cls> <noptr> dax init ( )
<cls> <noptr> wm driver init ( )
<cls> <noptr> ret u power off ( )
<cls> <noptr> da driver init ( )
<cls> <noptr> d asp i init ( )
<cls> <noptr> pm xxx init ( )
<cls> <noptr> dln driver init ( )
<cls> <noptr> aat init ( )
<cls> <noptr> tw l get type ( )
<cls> <noptr> tq m x init ( )
<cls> <noptr> max restore ( <ptr> dev )
<cls> <noptr> d aic init ( )
<cls> <noptr> wl core init ( )
<cls> <noptr> bdx xic init ( )
<cls> <noptr> til m u driver init ( )
<cls> <noptr> cht wc driver init ( )
<cls> <noptr> wm resume ( <ptr> dev )
<cls> <noptr> six core driver init ( )
<cls> <noptr> tps init ( )
<cls> <noptr> pm xic init ( )
<cls> <noptr> mt driver init ( )
<cls> <noptr> max power off ( )
<cls> <noptr> l m enable ( <ptr> l m )
<cls> <noptr> act aic init ( )
<cls> <noptr> tps x init ( )
<cls> <noptr> a atic suspend ( <ptr> dev )
<cls> <noptr> arizona irq init ( <ptr> arizona )
<cls> <noptr> wm x spi power off ( <ptr> dev )
<cls> <noptr> m c xxx init ( )
<cls> <noptr> tps xic init ( )
<cls> <noptr> lp init ( )
<cls> <noptr> abi c init ( )
<cls> <noptr> secp mic resume ( <ptr> dev )
<cls> <noptr> tps x power off ( )
<cls> <noptr> sm gpio get ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> arizona spi probe ( <ptr> spi )
<cls> <noptr> abot p driver init ( )
<cls> <noptr> rc tic init ( )
<cls> <noptr> arizona resume ( <ptr> dev )
<cls> <noptr> arizona ic driver init ( )
<cls> <noptr> kemp ld init ( )
<cls> <noptr> pm x irq lock ( <ptr> data )
<cls> <noptr> max ic driver init ( )
<cls> <noptr> as check deviceid ( <ptr> as )
<cls> <noptr> pas ic driver init ( )
<cls> <noptr> max irq resume ( <ptr> max )
<cls> <noptr> max ic resume ( <ptr> dev )
<cls> <noptr> l m device led init ( <ptr> l m )
<cls> <ptr> tos m device ( <ptr> pdev )
<cls> <noptr> pm irq mask ack ( <ptr> d )
<cls> <noptr> tw l get num slaves ( )
<cls> <noptr> made r aic driver init ( )
<cls> <noptr> secp mic init ( )
<cls> <noptr> htc pld mask ( <ptr> data )
<cls> <noptr> max initialise fps ( <ptr> chip )
<cls> <noptr> pcf init ( )
<cls> <noptr> intell pss acpi driver init ( )
<cls> <noptr> m cxx xic init ( )
<cls> <noptr> pcf adc irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> protect pm master ( )
<cls> <noptr> loc h nagar ic probe ( <ptr> ic )
<cls> <noptr> dax irq work ( <ptr> work )
<cls> <noptr> activate irq ( <noptr> irq )
<cls> <noptr> adc result ( <ptr> pcf )
<cls> <noptr> stm timers driver init ( )
<cls> <noptr> ad presume ( <ptr> dev )
<cls> <noptr> pcf resume ( <ptr> dev )
<cls> <noptr> rdc x sb driver init ( )
<cls> <noptr> rav esp drv init ( )
<cls> <noptr> intell pss init ( )
<cls> <noptr> hip mic driver init ( )
<cls> <noptr> palm as power off ( )
<cls> <noptr> m xts adc driver init ( )
<cls> <noptr> rk device shutdown prepare ( )
<cls> <noptr> dln stop ( <ptr> dln )
<cls> <noptr> sky driver init ( )
<cls> <noptr> wmic driver init ( )
<cls> <noptr> ucb core init ( )
<cls> <noptr> wm x spi init ( )
<cls> <noptr> tps set vib ( <noptr> value )
<cls> <noptr> ssb i probe ( <ptr> pdev )
<cls> <noptr> pcf irq suspend ( <ptr> pcf )
<cls> <noptr> wm x irq lock ( <ptr> data )
<cls> <noptr> asi c driver init ( )
<cls> <noptr> pcf irq resume ( <ptr> pcf )
<cls> <noptr> tps spi probe ( <ptr> spi )
<cls> <noptr> cro sec dev init ( )
<cls> <noptr> wm reg unlock ( <ptr> wm )
<cls> <noptr> pm x irq disable ( <ptr> data )
<cls> <noptr> adp driver init ( )
<cls> <noptr> at usart m fd init ( )
<cls> <noptr> cht dct i shutdown ( <ptr> ic )
<cls> <noptr> max reg read ( <ptr> ic <dot> <noptr> reg )
<cls> <noptr> ret u driver init ( )
<cls> <noptr> max suspend ( <ptr> dev )
<cls> <noptr> tps set v bus draw ( <noptr> ma )
<cls> <noptr> tps ic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> tw l get last module ( )
<cls> <noptr> lp irq disable ( <ptr> data )
<cls> <noptr> ab setup ( <ptr> ab )
<cls> <noptr> tw l driver init ( )
<cls> <noptr> max init ( <ptr> max )
<cls> <noptr> palm asi c init ( )
<cls> <noptr> sm sync regs ( <ptr> sm )
<cls> <noptr> tps power off ( )
<cls> <noptr> da get device type ( <ptr> chip )
<cls> <noptr> arizona irq enable ( <ptr> data )
<cls> <noptr> max chg init ( <ptr> max )
<cls> <noptr> htc pld core init ( )
<cls> <ptr> tps x parsed t ( <ptr> client )
<cls> <noptr> stw x driver init ( )
<cls> <noptr> cht wc resume ( <ptr> dev )
<cls> <noptr> pcap irqhandler ( <ptr> desc )
<cls> <noptr> men f bmc wdt exit prod mode ( <ptr> client )
<cls> <noptr> stp mic suspend ( <ptr> dev )
<cls> <noptr> lpc sch driver init ( )
<cls> <noptr> tw l rev ( )
<cls> <noptr> is volatile regid ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> lp driver init ( )
<cls> <noptr> secp mic suspend ( <ptr> dev )
<cls> <noptr> l px driver init ( )
<cls> <noptr> six core pronoun ce dead ( <ptr> core )
<cls> <noptr> intell pss init dev ( <ptr> l pss )
<cls> <noptr> bd drv init ( )
<cls> <noptr> six core parse and nag about error ( <ptr> core )
<cls> <noptr> tq m x probe ( <ptr> pdev )
<cls> <noptr> b cove driver init ( )
<cls> <noptr> arizona clk k enable ( <ptr> arizona )
<cls> <noptr> rave spi dis event ( <noptr> code )
<cls> <noptr> hip mic probe ( <ptr> pdev )
<cls> <noptr> tps x get version ( <ptr> dev )
<cls> <noptr> pcap disable adc ( <ptr> pcap )
<cls> <noptr> kemp ld probe ( <ptr> pdev )
<cls> <noptr> kemp ld register cells ( <ptr> pld )
<cls> <noptr> m cxx xic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> tw lin its i h modules ( <noptr> line )
<cls> <noptr> tw l audio disable resource ( <noptr> id )
<cls> <noptr> bd m wv identify ( <ptr> bd )
<cls> <noptr> bcm x xic driver init ( )
<cls> <noptr> c smf d probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> v x pci driver init ( )
<cls> <noptr> d sw m disable ( <ptr> pdev )
<cls> <noptr> tps irq sync unlock ( <ptr> data )
<cls> <noptr> men f bmc driver init ( )
<cls> <noptr> spi init ( <ptr> stmp e )
<cls> <noptr> stmp e irq sync unlock ( <ptr> data )
<cls> <noptr> secp mic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> exy nos l pass disable ( <ptr> l pass )
<cls> <noptr> hi xp mic driver init ( )
<cls> <noptr> rk device shutdown ( )
<cls> <noptr> mt irq enable ( <ptr> data )
<cls> <noptr> dln print serialno ( <ptr> dln )
<cls> <noptr> sec irq init ( <ptr> secp mic )
<cls> <noptr> b x tw c probe ( <ptr> pdev )
<cls> <noptr> r kic driver init ( )
<cls> <noptr> max freeze ( <ptr> dev )
<cls> <noptr> wm edge irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> tw l powerup automatic ( <ptr> tw l )
<cls> <noptr> max irq un mask ( <ptr> data )
<cls> <noptr> max irq disable ( <ptr> data )
<cls> <noptr> sys con init ( )
<cls> <noptr> arizona clk k disable ( <ptr> arizona )
<cls> <noptr> abx get chip id ( <ptr> dev )
<cls> <noptr> tps ic init ( )
<cls> <noptr> p mic init ( )
<cls> <noptr> max driver init ( )
<cls> <noptr> atmel flex com driver init ( )
<cls> <noptr> made r asoft reset ( <ptr> made ra )
<cls> <noptr> b cove probe ( <ptr> pdev )
<cls> <noptr> smp lat probe ( <ptr> dev )
<cls> <noptr> ax px power off ( )
<cls> <noptr> lpc ich restore config space ( <ptr> dev )
<cls> <noptr> d aic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> six core isa primary tuner ( <ptr> core )
<cls> <noptr> stp mic driver init ( )
<cls> <noptr> tps set low pwr ( <noptr> mode )
<cls> <noptr> wm reg lock ( <ptr> wm )
<cls> <noptr> cht wc suspend ( <ptr> dev )
<cls> <noptr> arizona disable reset ( <ptr> arizona )
<cls> <noptr> arizona spi driver init ( )
<cls> <noptr> max pm power off ( )
<cls> <noptr> da shutdown ( <ptr> client )
<cls> <noptr> max ic suspend ( <ptr> dev )
<cls> <noptr> mt irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> kemp ld get info ( <ptr> pld )
<cls> <noptr> bcm x xic probe ( <ptr> ic pri <dot> <ptr> id )
<cls> <noptr> dln check hw ( <ptr> dln )
<cls> <noptr> wm xreg lock ( <ptr> wm x )
<cls> <noptr> sm gpio is registered ( <ptr> sm )
<cls> <noptr> arizona runtime suspend ( <ptr> dev )
<cls> <noptr> stmp e suspend ( <ptr> dev )
<cls> <noptr> tps xic suspend ( <ptr> dev )
<cls> <noptr> intell pss suspend ( <ptr> dev )
<cls> <noptr> m c xxx probe flags dt ( <ptr> m c xxx )
<cls> <noptr> c smf d driver init ( )
<cls> <ptr> max ic parse dtp data ( <ptr> dev )
<cls> <noptr> d sw m enable ( <ptr> pdev )
<cls> <noptr> tps irq lock ( <ptr> data )
<cls> <noptr> cht dct i ic driver init ( )
<cls> <noptr> kemp ld release mutex ( <ptr> pld )
<cls> <noptr> pcap un mask irq ( <ptr> d )
<cls> <noptr> arizona poll reg delay ( <noptr> timeout )
<cls> <noptr> m c xxx unlock ( <ptr> m c xxx )
<cls> <noptr> sms cic driver init ( )
<cls> <noptr> cht wc probe ( <ptr> client )
<cls> <noptr> abot pread ( <ptr> otp )
<cls> <noptr> m xts adc irqhandler ( <ptr> desc )
<cls> <noptr> abs how otp ( <ptr> s <dot> <ptr> v )
<cls> <noptr> kemp ld detect device ( <ptr> pld )
<cls> <noptr> l m device bl init ( <ptr> l m )
<cls> <noptr> atmel h lcd c driver init ( )
<cls> <noptr> stmp e round timeout ( <noptr> timeout )
<cls> <noptr> stm f x chip init ( <ptr> client )
<cls> <noptr> six core get status ( <ptr> core )
<cls> <noptr> e z x pcap init ( )
<cls> <noptr> kemp ld get info generic ( <ptr> pld )
<cls> <noptr> tps xic resume ( <ptr> dev )
<cls> <noptr> stmp e resume ( <ptr> dev )
<cls> <noptr> six core schedule polling work ( <ptr> core )
<cls> <noptr> l m ctrl bank disable ( <ptr> cb )
<cls> <noptr> sm init regs ( <ptr> sm <dot> <ptr> init )
<cls> <ptr> irq tow m irq ( <ptr> wm <dot> <noptr> irq )
<cls> <noptr> wm writeable ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> rct irq set type ( <ptr> irq data <dot> <noptr> type )
<cls> <noptr> tps irq disable ( <ptr> data )
<cls> <noptr> m c xxx lock ( <ptr> m c xxx )
<cls> <noptr> tps ic driver init ( )
<cls> <noptr> handle t wlp i h ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> max irq enable ( <ptr> data )
<cls> <noptr> tps probe ( <ptr> client )
<cls> <noptr> pcap mask irq ( <ptr> d )
<cls> <noptr> c pcap check revision ( <ptr> c pcap )
<cls> <noptr> asi c resume ( <ptr> dev )
<cls> <noptr> da adc read temp ( <ptr> da )
<cls> <noptr> lp platform init ( <ptr> lp )
<cls> <noptr> intell pss unregister clock tree ( <ptr> clk )
<cls> <noptr> adp suspend ( <ptr> dev )
<cls> <noptr> pm osc disable ( <ptr> chip <dot> <noptr> client )
<cls> <noptr> wl f m write cmd ( <ptr> core <dot> <noptr> cmd <dot> <noptr> param )
<cls> <noptr> pm x irq enable ( <ptr> data )
<cls> <noptr> rk xx sys core shutdown ( )
<cls> <noptr> stm fxdriver init ( )
<cls> <noptr> stmp e irq un mask ( <ptr> data )
<cls> <noptr> tps work ( <ptr> work )
<cls> <noptr> intel soc pmi cic driver init ( )
<cls> <noptr> max ic probe ( <ptr> ic )
<cls> <noptr> stw x startup ( <ptr> stw x )
<cls> <noptr> smm delay ( <ptr> sm <dot> <noptr> delay )
<cls> <noptr> tps x irq lock ( <ptr> data )
<cls> <noptr> made raspi driver init ( )
<cls> <noptr> wm irq lock ( <ptr> data )
<cls> <noptr> sm init dev ( <ptr> sm )
<cls> <noptr> lp probe ( <ptr> client <dot> <ptr> ids )
<cls> <noptr> wm suspend ( <ptr> dev )
<cls> <noptr> tw l mmc card detect config ( )
<cls> <noptr> st mlp timer probe ( <ptr> pdev )
<cls> <noptr> mt irq init ( <ptr> chip )
<cls> <noptr> m c xxx handler adc done ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> wm edge irq disable ( <ptr> data )
<cls> <noptr> da disable irq ( <ptr> da <dot> <noptr> irq )
<cls> <noptr> lpc ich finalize gpio cell ( <ptr> dev )
<cls> <noptr> l m device init ( <ptr> l m )
<cls> <noptr> tc x suspend ( <ptr> dev )
<cls> <noptr> max irq lock ( <ptr> data )
<cls> <noptr> rk xx resume ( <ptr> dev )
<cls> <noptr> stmp e devices init ( <ptr> stmp e )
<cls> <noptr> htc pld core probe ( <ptr> pdev )
<cls> <noptr> max ic init ( )
<cls> <noptr> ret u probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> stm f x suspend ( <ptr> dev )
<cls> <noptr> six core poll loop ( <ptr> work )
<cls> <ptr> irq to max ( <ptr> chip <dot> <noptr> irq )
<cls> <noptr> stm f x func to mask ( <noptr> func )
<cls> <noptr> am xts cse adc done ( <ptr> tsc adc )
<cls> <noptr> tit scad c driver init ( )
<cls> <noptr> lpc ich driver init ( )
<cls> <noptr> tw l suspend ( <ptr> dev )
<cls> <noptr> rct irq sync unlock ( <ptr> irq data )
<cls> <noptr> irq to addr ( <noptr> id )
<cls> <noptr> tw l init chip irq ( <ptr> chip )
<cls> <noptr> stmp e irq lock ( <ptr> data )
<cls> <noptr> max irq global mask ( <ptr> irq drv data )
<cls> <noptr> d air q init ( <ptr> da )
<cls> <noptr> tw l get pll ( <ptr> tw l )
<cls> <noptr> tc xreg read ( <ptr> tc x <dot> <noptr> reg )
<cls> <noptr> dax query status ( <ptr> dev <dot> <noptr> s bits )
<cls> <noptr> tps x irq enable ( <ptr> irq data )
<cls> <noptr> wm set p data from of ( <ptr> wm )
<cls> <noptr> rk xx suspend ( <ptr> dev )
<cls> <noptr> exy nos l pass suspend ( <ptr> dev )
<cls> <noptr> lp irq init ( <ptr> lp <dot> <noptr> irq )
<cls> <noptr> d aic fix ( <ptr> da <dot> <noptr> reg )
<cls> <noptr> rav esp probe ( <ptr> ser dev )
<cls> <noptr> lpc ich check conflict gpio ( <ptr> res )
<cls> <noptr> mt irq disable ( <ptr> data )
<cls> <ptr> secp mic ic parse dtp data ( <ptr> dev )
<cls> <noptr> cht wc shutdown ( <ptr> client )
<cls> <noptr> device codec init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> c mod io pci driver init ( )
<cls> <noptr> sun i prc m probe ( <ptr> pdev )
<cls> <noptr> max print dev type ( <ptr> max )
<cls> <noptr> tps volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> arizona isolated c vdd ( <ptr> arizona )
<cls> <noptr> pm irqhandler ( <ptr> desc )
<cls> <noptr> wm precious ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> pm x resume ( <ptr> dev )
<cls> <noptr> wm reset codec reg cache ( <ptr> wm )
<cls> <noptr> tc x init ( )
<cls> <noptr> arizona is jack det active ( <ptr> arizona )
<cls> <noptr> c pcap probe ( <ptr> spi )
<cls> <noptr> pcap to irq ( <ptr> pcap <dot> <noptr> irq )
<cls> <noptr> sys con probe ( <ptr> pdev )
<cls> <noptr> csl patch ( <ptr> made ra )
<cls> <noptr> made ra disable hard reset ( <ptr> made ra )
<cls> <noptr> tps voltage set uv lo ( <ptr> tps )
<cls> <noptr> stm f x irq init ( <ptr> client )
<cls> <noptr> tps interrupt ( <ptr> tps )
<cls> <noptr> ax pxi c driver init ( )
<cls> <noptr> six core isa secondary tuner ( <ptr> core )
<cls> <noptr> ab event unregister ( <ptr> ab <dot> <ptr> nb )
<cls> <noptr> tit scad c probe ( <ptr> pdev )
<cls> <noptr> tps spi driver init ( )
<cls> <noptr> intel msi c driver init ( )
<cls> <noptr> lp probe ( <ptr> cl <dot> <ptr> id )
<cls> <noptr> l mic init ( )
<cls> <noptr> da init chip ( <ptr> chip )
<cls> <noptr> wmi sre vba dsp memory ( <noptr> reg )
<cls> <noptr> atmel sm ccs conf init ( <ptr> conf )
<cls> <noptr> tw l audio probe ( <ptr> pdev )
<cls> <noptr> t wls i hun mask ( <ptr> data )
<cls> <noptr> lp irqhandler ( <noptr> irq <dot> <ptr> ptr )
<cls> <noptr> max irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> arizona irq disable ( <ptr> data )
<cls> <noptr> tsc adc idle config ( <ptr> tsc adc )
<cls> <noptr> si h read isr ( <ptr> si h )
<cls> <noptr> tw l read id code register ( )
<cls> <noptr> wm volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> six cmd clear stc ( <ptr> core )
<cls> <noptr> tps x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> ab probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mt irq lock ( <ptr> data )
<cls> <noptr> pm x suspend ( <ptr> dev )
<cls> <noptr> stm f x resume ( <ptr> dev )
<cls> <noptr> sm register gpio ( <ptr> sm )
<cls> <noptr> six core get revision info ( <ptr> core )
<cls> <noptr> rav esp reply code ( <noptr> command )
<cls> <noptr> stm timers probe ( <ptr> pdev )
<cls> <noptr> c mod io probe sub modules ( <ptr> priv )
<cls> <noptr> dax update ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> cht dct i resume ( <ptr> dev )
<cls> <noptr> l m device als init ( <ptr> l m )
<cls> <ptr> dev to tps x ( <ptr> dev )
<cls> <noptr> wl core probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> dln probe ( <ptr> interface <dot> <ptr> usb id )
<cls> <noptr> wm edge irq enable ( <ptr> data )
<cls> <noptr> csl volatile register ( <ptr> dev <dot> <noptr> reg )
<cls> <ptr> tq m x boardid to name ( <noptr> boardid )
<cls> <noptr> d aun mask events ( <ptr> chip <dot> <noptr> events )
<cls> <noptr> kemp ld register cells generic ( <ptr> pld )
<cls> <noptr> wm xic suspend ( <ptr> dev )
<cls> <noptr> arizona enable reset ( <ptr> arizona )
<cls> <noptr> exy nos l pass resume ( <ptr> dev )
<cls> <noptr> ic safe reg ( <noptr> reg )
<cls> <noptr> stmp ere set ( <ptr> stmp e )
<cls> <ptr> irq to max irq ( <ptr> max <dot> <ptr> data )
<cls> <noptr> rn tic driver init ( )
<cls> <noptr> ret u read ( <ptr> r dev <dot> <noptr> reg )
<cls> <noptr> m xsl rad c driver init ( )
<cls> <noptr> device osc init ( <ptr> ic )
<cls> <noptr> pm ics pmi probe ( <ptr> s dev )
<cls> <noptr> dln hw init ( <ptr> dln )
<cls> <noptr> aat disable ( <ptr> aat )
<cls> <noptr> spi reg read ( <ptr> stmp e <dot> <noptr> reg )
<cls> <noptr> smp lat resume ( <ptr> pdev )
<cls> <noptr> sm dump gate ( <ptr> sm )
<cls> <noptr> wm volatile register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> da adc manual read ( <ptr> da <dot> <noptr> channel )
<cls> <noptr> pm xxx irq mask ack ( <ptr> d )
<cls> <noptr> htc pl dun mask ( <ptr> data )
<cls> <noptr> stmp e irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> arizona suspend no irq ( <ptr> dev )
<cls> <noptr> rave spr du cmd translate ( <noptr> command )
<cls> <noptr> stm f x irq un mask ( <ptr> data )
<cls> <noptr> htc pld set type ( <ptr> data <dot> <noptr> flags )
<cls> <noptr> w mapply sleep patch ( <ptr> arizona )
<cls> <noptr> stmp e get alt func ( <ptr> stmp e <dot> <noptr> block )
<cls> <noptr> stp mic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> c mod io pci probe ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> da device init ( <ptr> da )
<cls> <noptr> tw l get h f clk rate ( )
<cls> <noptr> device power init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> htc pld setup chip irq ( <ptr> pdev <dot> <noptr> chip index )
<cls> <noptr> bdx xic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> pm x irq sync unlock ( <ptr> data )
<cls> <noptr> pm osc enable ( <ptr> chip <dot> <noptr> client )
<cls> <noptr> sm set power ( <ptr> sm <dot> <noptr> on )
<cls> <noptr> intel soc p mic suspend ( <ptr> dev )
<cls> <noptr> pm ics pmi driver init ( )
<cls> <noptr> wm xreg writeable ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> intel soc pmi cic probe ( <ptr> ic <dot> <ptr> i cid )
<cls> <noptr> ec device probe ( <ptr> pdev )
<cls> <noptr> wm x otp init ( <ptr> wm x )
<cls> <noptr> sm register device ( <ptr> sm <dot> <ptr> pdev )
<cls> <noptr> atmel flex com resume ( <ptr> dev )
<cls> <noptr> six core reg map write ( <ptr> context <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> tps c kk init ( <ptr> tps <dot> <ptr> p mic p data )
<cls> <noptr> intell pss ltr expose ( <ptr> l pss )
<cls> <noptr> dln stop r x urb s ( <ptr> dln )
<cls> <noptr> pcap msr work ( <ptr> work )
<cls> <noptr> verify addr ( <ptr> ic )
<cls> <noptr> max is precious reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> wm clear write sequencer ( <ptr> arizona )
<cls> <noptr> wm x irq sync unlock ( <ptr> data )
<cls> <noptr> pm xxx irqhandler ( <ptr> desc )
<cls> <noptr> intel quar kmf d driver init ( )
<cls> <noptr> dax irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> six core start ( <ptr> core <dot> <noptr> soft )
<cls> <noptr> sun i prc m driver init ( )
<cls> <noptr> tim b probe ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> pm x probe ( <ptr> client )
<cls> <noptr> asi c probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> made ra get reset gpio ( <ptr> made ra )
<cls> <noptr> lookup ops ( <ptr> dev <dot> <dptr> ops )
<cls> <noptr> made r aic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> p mir qun mask ( <ptr> d )
<cls> <noptr> d aic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> snd em xx hw capture params ( <ptr> sub stream <dot> <ptr> hw params )
<cls> <noptr> arizona suspend ( <ptr> dev )
<cls> <noptr> max probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> made ra runtime suspend ( <ptr> dev )
<cls> <noptr> til m u disable hw ( <ptr> data )
<cls> <noptr> tps irq ( <noptr> irq <dot> <ptr> tps )
<cls> <noptr> stp mic resume ( <ptr> dev )
<cls> <noptr> pcf gpio invert get ( <ptr> pcf <dot> <noptr> gpio )
<cls> <noptr> l m ctrl bank enable ( <ptr> cb )
<cls> <noptr> tps p upd init ( <ptr> tps <dot> <ptr> p data )
<cls> <noptr> wm irq ( <noptr> irq <dot> <ptr> irq data )
<cls> <noptr> tps config v d cdc ( <noptr> value )
<cls> <noptr> ax px match device ( <ptr> ax px )
<cls> <noptr> asi c probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> m c xxx irq mask ( <ptr> m c xxx <dot> <noptr> irq )
<cls> <noptr> csl readable register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tw l has vibr a ( <ptr> parent )
<cls> <noptr> intell pss ltr hide ( <ptr> l pss )
<cls> <noptr> six core drain rds fifo ( <ptr> work )
<cls> <noptr> stm f x irq bus lock ( <ptr> data )
<cls> <noptr> six core cmd f m phase div status ( <ptr> core )
<cls> <noptr> da clear fault log ( <ptr> chip )
<cls> <noptr> dbg show ( <ptr> s <dot> <ptr> )
<cls> <noptr> wm xic power off ( <ptr> dev )
<cls> <noptr> pcf suspend ( <ptr> dev )
<cls> <noptr> mt irq sync unlock ( <ptr> data )
<cls> <ptr> device node to reg map ( <ptr> np )
<cls> <noptr> stm f x irq mask ( <ptr> data )
<cls> <noptr> stm f xreg writeable ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> da clear fault log ( <ptr> da )
<cls> <noptr> exy nos l pass probe ( <ptr> pdev )
<cls> <noptr> tc x resume ( <ptr> dev )
<cls> <noptr> v x probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> tq m x boardid to clk rate ( <noptr> boardid )
<cls> <noptr> pcap isr work ( <ptr> work )
<cls> <noptr> tw lt hint handler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> t wls i h mask ( <ptr> data )
<cls> <noptr> arizona over clocked ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> arizona of get core p data ( <ptr> arizona )
<cls> <noptr> lpc ich init wdt ( <ptr> dev )
<cls> <noptr> l m ctrl bank get reg ( <ptr> cb <dot> <noptr> base )
<cls> <noptr> wm irq sync unlock ( <ptr> data )
<cls> <noptr> cht dct i suspend ( <ptr> dev )
<cls> <noptr> a atic resume ( <ptr> dev )
<cls> <noptr> tps config v regs ( <noptr> value )
<cls> <noptr> wm x irq init ( <ptr> wm x <dot> <noptr> irq )
<cls> <noptr> a atic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> d asp i probe ( <ptr> spi )
<cls> <noptr> pm xxx irq un mask ( <ptr> d )
<cls> <noptr> sm check clocks ( <ptr> sm )
<cls> <noptr> max probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sm setup uart data ( <ptr> sm <dot> <ptr> uart data <dot> <noptr> offset )
<cls> <noptr> spr dp mic probe ( <ptr> spi )
<cls> <noptr> aat dump reg ( <ptr> aat <dot> <ptr> buf )
<cls> <ptr> tw l get reg map ( <noptr> mod no )
<cls> <noptr> dax read ( <ptr> client <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> pcap adc irq ( <noptr> irq <dot> <ptr> pcap )
<cls> <noptr> tw l audio get m clk ( )
<cls> <ptr> atmel hsm c get reg layout ( <ptr> np )
<cls> <noptr> l mic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> six core stop ( <ptr> core <dot> <noptr> soft )
<cls> <noptr> lpc sch probe ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> aat init debug fs ( <ptr> aat )
<cls> <noptr> wm x spi suspend ( <ptr> dev )
<cls> <noptr> cht dct i probe ( <ptr> ic )
<cls> <noptr> c pcap init irq ( <ptr> c pcap )
<cls> <noptr> smp u volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> adp register notifier ( <ptr> dev <dot> <ptr> nb <dot> <noptr> events )
<cls> <noptr> tps irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> secp mic configure ( <ptr> secp mic )
<cls> <noptr> lp irq bus lock ( <ptr> data )
<cls> <noptr> tps probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> m c xxx print revision ( <ptr> m c xxx <dot> <noptr> revision )
<cls> <noptr> tw l irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> six core has am ( <ptr> core )
<cls> <noptr> set cfg pga ( <ptr> state <dot> <noptr> pga switch )
<cls> <noptr> pcap set ts bits ( <ptr> pcap <dot> <noptr> bits )
<cls> <noptr> ab setup debug fs ( <ptr> ab )
<cls> <noptr> made ra enable hard reset ( <ptr> made ra )
<cls> <noptr> e z x pcap put get ( <ptr> pcap <dot> <ptr> data )
<cls> <noptr> ax px device probe ( <ptr> ax px )
<cls> <noptr> abot p probe ( <ptr> pdev )
<cls> <noptr> da read status ( <ptr> chip <dot> <ptr> status )
<cls> <noptr> max irq init ( <ptr> chip <dot> <noptr> irq <dot> <ptr> p data )
<cls> <noptr> tc x probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> sky probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> rk probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> lpc ich enable gpio space ( <ptr> dev )
<cls> <noptr> rc tic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> tit scad c can wakeup ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> intell pss acpi probe ( <ptr> pdev )
<cls> <noptr> da disable irq no sync ( <ptr> da <dot> <noptr> irq )
<cls> <noptr> wmic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> stmp ead c common init ( <ptr> stmp e )
<cls> <noptr> ab get chip id ( <ptr> dev )
<cls> <noptr> c sum bc ( <ptr> buf <dot> <noptr> size <dot> <ptr> crc )
<cls> <noptr> stmp e enable ( <ptr> stmp e <dot> <noptr> blocks )
<cls> <noptr> sm dump clk ( <ptr> sm )
<cls> <noptr> wm xreg locked ( <ptr> wm x <dot> <noptr> reg )
<cls> <noptr> max irq domain map ( <ptr> d <dot> <noptr> irq <dot> <noptr> hw )
<cls> <noptr> stmp e probe ( <ptr> c i <dot> <noptr> partnum )
<cls> <ptr> dev m rav esp version ( <ptr> dev <dot> <ptr> version )
<cls> <noptr> intel soc p mic shutdown ( <ptr> ic )
<cls> <noptr> pas ic probe ( <ptr> pdev )
<cls> <noptr> wm init ( <ptr> wm <dot> <ptr> p data )
<cls> <noptr> at usart mode probe ( <ptr> pdev )
<cls> <noptr> tps x irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> stmp eof probe ( <ptr> p data <dot> <ptr> np )
<cls> <noptr> wl f m set audio ( <ptr> core <dot> <noptr> new mode )
<cls> <noptr> htc pld chip reset ( <ptr> client )
<cls> <noptr> pcf reg read ( <ptr> pcf <dot> <noptr> reg )
<cls> <noptr> loc h nagar update config ( <ptr> loc h nagar )
<cls> <noptr> aat enable ( <ptr> aat )
<cls> <noptr> hi x local irq clear ( <ptr> map )
<cls> <noptr> six core reg map readable register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> intell pss pci driver init ( )
<cls> <noptr> abot pcid show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sm gpio input ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> da map irq ( <ptr> da <dot> <noptr> irq )
<cls> <noptr> made r await for boot ( <ptr> made ra )
<cls> <noptr> l pread byte ( <ptr> lp <dot> <noptr> reg <dot> <ptr> read )
<cls> <noptr> sp cab set q table ( <ptr> gsp ca dev )
<cls> <noptr> dax probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> palm asi c probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> intel soc p mic resume ( <ptr> dev )
<cls> <noptr> rdwr regid ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> m fd acpi add device ( <ptr> cell <dot> <ptr> pdev )
<cls> <noptr> ret ure gmap write ( <ptr> context <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> rav esp receive frame ( <ptr> sp <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> lpc ich probe ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> dbg tps open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> pcf probe ( <ptr> client <dot> <ptr> ids )
<cls> <noptr> b x tw c driver init ( )
<cls> <noptr> volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> ab irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> tps x clr bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> tw l get vibr al r status ( <ptr> tw l )
<cls> <noptr> stm f x chip reset ( <ptr> stm f x )
<cls> <noptr> adp probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> stm timers dma done ( <ptr> p )
<cls> <noptr> m fd cell disable ( <ptr> pdev )
<cls> <noptr> max is volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> wm register codec ( <ptr> wm )
<cls> <ptr> dev m reg map init six ( <ptr> core )
<cls> <noptr> init regulator ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> adp read ( <ptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> wm x spi probe ( <ptr> spi )
<cls> <noptr> device onkey init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> m xts adc probe ( <ptr> pdev )
<cls> <noptr> irq data to status reg ( <ptr> irq data )
<cls> <noptr> tps set led ( <noptr> led <dot> <noptr> mode )
<cls> <noptr> show reg status ( <ptr> label <dot> <noptr> chg status )
<cls> <noptr> wm patch ( <ptr> arizona )
<cls> <noptr> stm f x irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> stmp e irq unmap ( <ptr> d <dot> <noptr> vir q )
<cls> <noptr> m c xxx common init ( <ptr> dev )
<cls> <noptr> pcf irq mask get ( <ptr> pcf <dot> <noptr> irq )
<cls> <noptr> adp irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> secp mic shutdown ( <ptr> ic )
<cls> <noptr> sm dbg regs ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buff )
<cls> <noptr> rct irq un mask ( <ptr> irq data )
<cls> <noptr> pm xxx probe ( <ptr> pdev )
<cls> <noptr> da register volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <ptr> made ran ame from type ( <noptr> type )
<cls> <noptr> arizona under clocked ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> is volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tw l power ( <ptr> tw l <dot> <noptr> on )
<cls> <noptr> pm x device init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> ad pack bits ( <ptr> client <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> max m uic volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> wm xic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> b x tw c shutdown ( <ptr> pdev )
<cls> <noptr> lpc ich init spi ( <ptr> dev )
<cls> <noptr> asi cof probe ( <ptr> ic <dot> <ptr> as )
<cls> <noptr> intel quar kmf d probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> sm find clock ( <ptr> dev <dot> <noptr> clk src <dot> <noptr> req freq )
<cls> <noptr> d are g readable ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> pmi csp mis how rev id ( <ptr> map <dot> <ptr> dev )
<cls> <noptr> intell pss pci probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> csl bit readable register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> gpio set invert ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> invert )
<cls> <noptr> max rtc is volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tps xic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> t wls i h bus sync unlock ( <ptr> data )
<cls> <noptr> l px probe ( <ptr> client <dot> <ptr> ids )
<cls> <noptr> tw l no preg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> stm f x irq unmap ( <ptr> d <dot> <noptr> vir q )
<cls> <noptr> arizona resume no irq ( <ptr> dev )
<cls> <noptr> d aic disable multi write ( <ptr> da )
<cls> <noptr> device touch init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> l m ctrl bank get pwm ( <ptr> cb <dot> <ptr> val )
<cls> <noptr> aat read ( <ptr> aat <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> intell pss debug fs add ( <ptr> l pss )
<cls> <noptr> arizona of get type ( <ptr> dev )
<cls> <noptr> intell pss assign devs ( <ptr> l pss )
<cls> <noptr> six core cmd f mac f status ( <ptr> core <dot> <ptr> report )
<cls> <noptr> six core cmd powerup ( <ptr> core <dot> <ptr> args )
<cls> <noptr> t wls i h bus lock ( <ptr> data )
<cls> <noptr> pm xxx irq set type ( <ptr> d <dot> <noptr> flow type )
<cls> <noptr> wm x irq disable ( <ptr> data )
<cls> <noptr> sm gpio set ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> tw l clear bits ( <ptr> tw l <dot> <noptr> reg <dot> <noptr> mask )
<cls> <noptr> arizona irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> smp lat suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> wm xreg volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tps ic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> secp mic dump rev ( <ptr> secp mic )
<cls> <noptr> as volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> intel msi c reg read ( <noptr> reg <dot> <ptr> val )
<cls> <noptr> pcap adc sync cb ( <ptr> param <dot> <noptr> res )
<cls> <noptr> lp write byte ( <ptr> lp <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> tw l readable reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> pm x irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> m c xxx regr m w ( <ptr> m c xxx <dot> <noptr> offset <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> made ra set mic bias info ( <ptr> made ra )
<cls> <noptr> max write reg ( <ptr> ic <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> m xts adc setup irq ( <ptr> pdev <dot> <ptr> ts adc )
<cls> <noptr> device g pad c init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> r kis volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> device b kinit ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> tw l audio get resource ( <noptr> id )
<cls> <noptr> show chg status ( <ptr> label <dot> <noptr> chg status )
<cls> <noptr> da read events ( <ptr> chip <dot> <ptr> events )
<cls> <noptr> stm f x function enable ( <ptr> stm f x <dot> <noptr> func )
<cls> <noptr> ab registers print ( <ptr> s <dot> <ptr> p )
<cls> <noptr> dbg chg stat ( <ptr> buf <dot> <noptr> len <dot> <noptr> chg status )
<cls> <noptr> sm register usb host ( <ptr> sm <dot> <ptr> mem avail )
<cls> <noptr> intel msi c reg update ( <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> wm xreg unlock ( <ptr> wm x )
<cls> <noptr> arizona disable free run sys clk ( <ptr> arizona <dot> <ptr> state )
<cls> <noptr> six core start rds drain er once ( <ptr> core )
<cls> <noptr> clocks init ( <ptr> dev <dot> <ptr> clock )
<cls> <noptr> pm x page reg write ( <ptr> ic <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> intell pss cache ltr ( <ptr> l pss )
<cls> <noptr> l m ctrl bank set pwm ( <ptr> cb <dot> <noptr> val )
<cls> <noptr> six core cmd f mtune freq ( <ptr> core <dot> <ptr> args )
<cls> <noptr> smp a volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> lp irq bus sync unlock ( <ptr> data )
<cls> <noptr> resume lps sdevice ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> six core report drain ers top ( <ptr> core )
<cls> <noptr> mt irq set wake ( <ptr> irq data <dot> <noptr> on )
<cls> <noptr> dln start r x urb s ( <ptr> dln <dot> <noptr> gfp )
<cls> <noptr> max config fps ( <ptr> chip <dot> <ptr> fps np )
<cls> <ptr> sm gpio to dev ( <ptr> gpio )
<cls> <noptr> arizona clk gen err ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> wm device init ( <ptr> wm <dot> <noptr> irq )
<cls> <noptr> stmp e enable ( <ptr> stmp e <dot> <noptr> blocks <dot> <noptr> enable )
<cls> <noptr> stw x get p ctl reg ( <ptr> stw x <dot> <noptr> reg )
<cls> <noptr> tw l writeable reg ( <ptr> dev <dot> <noptr> reg )
<cls> <ptr> sys con node to reg map ( <ptr> np )
<cls> <noptr> abot ppa f show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> intell pss probe ( <ptr> dev <dot> <ptr> info )
<cls> <noptr> sm misc control ( <ptr> dev <dot> <noptr> set <dot> <noptr> clear )
<cls> <noptr> atmel sm ccs conf set timing ( <ptr> conf <dot> <noptr> shift <dot> <noptr> n cycles )
<cls> <noptr> dax read ( <ptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tps x add sub devs ( <ptr> tps x <dot> <ptr> p data )
<cls> <noptr> am xts cad c need adc ( <ptr> tsc adc )
<cls> <noptr> made ra dev init ( <ptr> made ra )
<cls> <noptr> pm pages init ( <ptr> chip )
<cls> <noptr> dln suspend ( <ptr> iface <dot> <noptr> message )
<cls> <ptr> tps parsed t ( <ptr> client <dot> <ptr> chip id )
<cls> <noptr> t wls i h set type ( <ptr> data <dot> <noptr> trigger )
<cls> <noptr> htc pld register chip gpio ( <ptr> pdev <dot> <noptr> chip index )
<cls> <noptr> wm x device init ( <ptr> wm x <dot> <noptr> irq )
<cls> <noptr> htc pld chipset ni ( <ptr> work )
<cls> <noptr> b x tw c val store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> tw l interrupt mask ( <noptr> bit mask <dot> <noptr> offset )
<cls> <noptr> stm timers dma probe ( <ptr> dev <dot> <ptr> d data )
<cls> <noptr> bdx x init press duration ( <ptr> bdx x )
<cls> <noptr> wm x set bits ( <ptr> wm x <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> ab registers open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> til m u probe ( <ptr> cl <dot> <ptr> id )
<cls> <noptr> sm calc pll ( <noptr> freq <dot> <ptr> clock <dot> <noptr> max div )
<cls> <noptr> ab event register ( <ptr> ab <dot> <ptr> nb )
<cls> <noptr> show dump regs ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> wm readable register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> stm f x function disable ( <ptr> stm f x <dot> <noptr> func )
<cls> <ptr> m c xxx get chip name ( <ptr> m c xxx )
<cls> <ptr> sys con reg map lookup by compatible ( <ptr> s )
<cls> <noptr> bd m wv probe ( <ptr> client <dot> <ptr> ids )
<cls> <noptr> smp s volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> show chg config ( <noptr> por <dot> <ptr> label <dot> <noptr> chg config )
<cls> <noptr> tps chip init ( <ptr> dev <dot> <ptr> reg map )
<cls> <noptr> exy nos l pass enable ( <ptr> l pass )
<cls> <noptr> rav esp get status ( <ptr> sp )
<cls> <noptr> wm xreg read ( <ptr> wm x <dot> <noptr> reg )
<cls> <noptr> atmel sm ccs conf apply ( <ptr> reg map <dot> <noptr> cs <dot> <ptr> conf )
<cls> <noptr> wm reg write ( <ptr> wm <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> intel msi c bulk write ( <ptr> reg <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> w mis ads p memory ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> device irq init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> htc pld direction input ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> da enable irq ( <ptr> da <dot> <noptr> irq )
<cls> <noptr> d are g volatile ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tps sleep init ( <ptr> tps <dot> <ptr> p mic p data )
<cls> <noptr> atmel sm ccs conf set setup ( <ptr> conf <dot> <noptr> shift <dot> <noptr> n cycles )
<cls> <noptr> handle t wls i h ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> as configure pull ups ( <ptr> as )
<cls> <noptr> l m precious register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tps x update ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> pas ic read register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> ucb adc read ( <ptr> ac <dot> <noptr> adc channel <dot> <noptr> adc sync )
<cls> <noptr> dam ask events ( <ptr> chip <dot> <noptr> events )
<cls> <noptr> dln transfer complete ( <ptr> dln <dot> <ptr> urb <dot> <noptr> handle <dot> <noptr> r x slot )
<cls> <noptr> reg map ipc byte reg read ( <ptr> context <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tps xic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> sm gpio ensure gpio ( <ptr> sm chip <dot> <noptr> bit )
<cls> <noptr> arizona dev init ( <ptr> arizona )
<cls> <noptr> sm create mem ( <ptr> sm <dot> <ptr> res <dot> <ptr> offs <dot> <noptr> size )
<cls> <noptr> six core isvalid property ( <ptr> core <dot> <noptr> property )
<cls> <noptr> six core cmd func info ( <ptr> core <dot> <ptr> info )
<cls> <noptr> b x tw c val show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> tps x set bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> tw l volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> m xts adc setup clk ( <ptr> pdev <dot> <ptr> ts adc )
<cls> <noptr> max gen is precious reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> six core isreadonly property ( <ptr> core <dot> <noptr> property )
<cls> <noptr> sm init reg ( <ptr> sm <dot> <noptr> reg <dot> <ptr> r )
<cls> <noptr> wl f m read reg ( <ptr> core <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> r nt trigger power off sequence ( <noptr> re power )
<cls> <noptr> tw l irq map ( <ptr> d <dot> <noptr> vir q <dot> <noptr> hw irq )
<cls> <noptr> max p mic is accessible reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tw l ready int handler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> max p mic is precious reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> pm xxx read block irq ( <ptr> chip <dot> <noptr> b p <dot> <ptr> ip )
<cls> <noptr> l m seth v led config ( <ptr> l m <dot> <noptr> h v led <dot> <noptr> bl )
<cls> <noptr> wm aux adc irq ( <noptr> irq <dot> <ptr> irq data )
<cls> <noptr> abot p svn show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> gpio set pullup ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> up )
<cls> <noptr> gpio set polarity ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> pol )
<cls> <noptr> tw l interrupt un mask ( <noptr> bit mask <dot> <noptr> offset )
<cls> <noptr> tps x irq get vir q ( <ptr> dev <dot> <noptr> irq )
<cls> <noptr> gpio set dir ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> dir )
<cls> <noptr> device led init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> sm gpio register chip ( <ptr> sm <dot> <ptr> gpio <dot> <ptr> chip )
<cls> <noptr> tw l audio enable resource ( <noptr> id )
<cls> <noptr> stmp ereg read ( <ptr> stmp e <dot> <noptr> reg )
<cls> <noptr> m fd cell enable ( <ptr> pdev )
<cls> <noptr> six core cmd a mtune freq ( <ptr> core <dot> <ptr> args )
<cls> <noptr> max get fps period reg value ( <ptr> chip <dot> <noptr> t period )
<cls> <noptr> intell pss resume ( <ptr> dev )
<cls> <noptr> lp irq map ( <ptr> d <dot> <noptr> vir q <dot> <noptr> hw irq )
<cls> <noptr> r nt restart ( <ptr> this <dot> <noptr> mode <dot> <ptr> cmd )
<cls> <noptr> pm xxx irq block handler ( <ptr> chip <dot> <noptr> block )
<cls> <noptr> wm clear bits ( <ptr> wm <dot> <noptr> reg <dot> <noptr> mask )
<cls> <noptr> gpio set pull down ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> down )
<cls> <noptr> r tic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> l m write ( <ptr> l m <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> gpio set func ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> func )
<cls> <noptr> kemp ld read ( <ptr> pld <dot> <noptr> index )
<cls> <noptr> htc pld chipset ( <ptr> chip <dot> <noptr> offset <dot> <noptr> val )
<cls> <noptr> stmp ex x get alt func ( <ptr> stmp e <dot> <noptr> block )
<cls> <noptr> max read reg ( <ptr> ic <dot> <noptr> reg <dot> <ptr> dest )
<cls> <noptr> l m device setup ( <ptr> l m <dot> <ptr> p data )
<cls> <noptr> kemp ld write ( <ptr> pld <dot> <noptr> index <dot> <noptr> data )
<cls> <noptr> tw l reg read ( <ptr> tw l <dot> <noptr> reg )
<cls> <noptr> da set bits ( <ptr> da <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> tw l set reg cache bypass ( <noptr> mod no <dot> <noptr> enable )
<cls> <noptr> max rtc is writeable reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> sm pci probe ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> wm gpio set debounce ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> db )
<cls> <noptr> l m set boost freq ( <ptr> l m <dot> <noptr> freq )
<cls> <noptr> ssb ipa transfer ( <ptr> ssb i <dot> <noptr> cmd <dot> <ptr> data )
<cls> <noptr> tps set gpio out value ( <noptr> gpio <dot> <noptr> value )
<cls> <noptr> c pcap sense vir q ( <ptr> reg map <dot> <noptr> vir q )
<cls> <noptr> show resume reason ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <ptr> tc x of probe ( <ptr> dev <dot> <ptr> version )
<cls> <noptr> sm register gpio ic ( <ptr> sm <dot> <ptr> p data )
<cls> <noptr> tw l init irq ( <ptr> dev <dot> <noptr> irq num )
<cls> <noptr> reg map atmel h lcd c reg read ( <ptr> context <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> m c print revision ( <ptr> m c xxx <dot> <noptr> revision )
<cls> <noptr> c sum cc itt ( <ptr> buf <dot> <noptr> size <dot> <ptr> crc )
<cls> <noptr> l m ctrl bank set brightness ( <ptr> cb <dot> <noptr> val )
<cls> <noptr> d are g read ( <ptr> da <dot> <noptr> reg )
<cls> <noptr> max gen is writeable reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> dax set bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> arizona ctrl if err ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> pcf reg set bit mask ( <ptr> pcf <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> wm x aux adc init ( <ptr> wm x )
<cls> <noptr> tc xreg write ( <ptr> tc x <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> six core cmd f m seek start ( <ptr> core <dot> <noptr> seek up <dot> <noptr> wrap )
<cls> <noptr> da device init ( <ptr> da <dot> <noptr> chip id )
<cls> <ptr> stuff ( <ptr> dest <dot> <ptr> src <dot> <noptr> n )
<cls> <noptr> palm as dt top data ( <ptr> ic <dot> <ptr> p data )
<cls> <noptr> arizona map irq ( <ptr> arizona <dot> <noptr> irq )
<cls> <noptr> tps x irq init ( <ptr> tps x <dot> <noptr> irq <dot> <noptr> irq base )
<cls> <noptr> wm x uniqueid show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pcap add sub dev ( <ptr> pcap <dot> <ptr> sub dev )
<cls> <noptr> stmp e irq init ( <ptr> stmp e <dot> <ptr> np )
<cls> <noptr> six core cmd powerup a ( <ptr> core <dot> <ptr> pu args )
<cls> <noptr> arizona boot done ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> stmp ereg write ( <ptr> stmp e <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> tw l mmc card detect ( <ptr> dev <dot> <noptr> slot )
<cls> <noptr> tps x irq map ( <ptr> h <dot> <noptr> vir q <dot> <noptr> hw )
<cls> <noptr> as precious reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> htc pld register chi pic ( <ptr> pdev <dot> <noptr> chip index )
<cls> <noptr> irq to val ( <noptr> id <dot> <noptr> enable )
<cls> <noptr> dax write ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> wm set bits ( <ptr> wm <dot> <noptr> reg <dot> <noptr> mask )
<cls> <noptr> adp set bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> add children ( <ptr> p data <dot> <noptr> irq base <dot> <noptr> features )
<cls> <noptr> pcf gpio set ( <ptr> pcf <dot> <noptr> gpio <dot> <noptr> val )
<cls> <noptr> max bulk read ( <ptr> ic <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> aat write ( <ptr> aat <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> arizona runtime resume ( <ptr> dev )
<cls> <noptr> dax clr bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> v pr brd probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> pm xreg write ( <ptr> ic <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> c pcap sense irq ( <ptr> reg map <dot> <noptr> irq )
<cls> <noptr> pm x dt init ( <ptr> np <dot> <ptr> dev <dot> <ptr> p data )
<cls> <noptr> six core cmd get property ( <ptr> core <dot> <noptr> property )
<cls> <noptr> tps x read ( <ptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> dax write ( <ptr> client <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> d aic read device ( <ptr> client <dot> <noptr> addr <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> dbg reg stat ( <ptr> buf <dot> <noptr> len <dot> <noptr> reg status )
<cls> <noptr> l m set boost ov p ( <ptr> l m <dot> <noptr> ov p )
<cls> <noptr> men f bmc probe ( <ptr> client <dot> <ptr> ids )
<cls> <noptr> six core cmd power down ( <ptr> core <dot> <ptr> args )
<cls> <noptr> max irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> write device ( <ptr> ic <dot> <noptr> reg <dot> <noptr> bytes <dot> <ptr> src )
<cls> <noptr> six core cmd power down a ( <ptr> core <dot> <ptr> pd args )
<cls> <noptr> tps gpio set ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> rave spr du get status ( <ptr> sp <dot> <ptr> status )
<cls> <noptr> mbus show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> wm x irq map ( <ptr> h <dot> <noptr> vir q <dot> <noptr> hw )
<cls> <noptr> l m set lvl ed config ( <ptr> l m <dot> <noptr> lvl ed <dot> <noptr> led )
<cls> <noptr> k empl dtype show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> six core cmd am acf status ( <ptr> core <dot> <ptr> report )
<cls> <noptr> max irq sync unlock ( <ptr> data )
<cls> <noptr> pm xxx config irq ( <ptr> chip <dot> <noptr> b p <dot> <noptr> cp )
<cls> <noptr> pm probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> show fw ver ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> wml do in use ( <ptr> p data <dot> <noptr> l do )
<cls> <noptr> abx startup irq enabled ( <ptr> dev <dot> <noptr> irq )
<cls> <noptr> tps ic probe ( <ptr> client <dot> <ptr> ids )
<cls> <noptr> device regulator init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> b x tw c reg store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> wm x uniqueid read ( <ptr> wm x <dot> <ptr> id )
<cls> <noptr> wm x irq set type ( <ptr> data <dot> <noptr> type )
<cls> <noptr> cht wc byte reg read ( <ptr> context <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> wm x device suspend ( <ptr> wm x )
<cls> <noptr> dax writes ( <ptr> dev <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> adc enqueue request ( <ptr> pcf <dot> <ptr> req )
<cls> <noptr> find free slot ( <ptr> dln <dot> <noptr> handle <dot> <ptr> slot )
<cls> <noptr> l m ctrl bank get brightness ( <ptr> cb <dot> <ptr> val )
<cls> <noptr> rav esp receive reply ( <ptr> sp <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> mt irq domain map ( <ptr> d <dot> <noptr> irq <dot> <noptr> hw )
<cls> <noptr> da register readable ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> pcf reg clear bits ( <ptr> pcf <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sm select clock ( <noptr> freq <dot> <ptr> clock <dot> <noptr> max div )
<cls> <noptr> pm irq get irq chip state ( <ptr> d <dot> <noptr> which <dot> <ptr> state )
<cls> <noptr> six core cmd int b pin cfg a ( <ptr> core <dot> <noptr> int b <dot> <noptr> a )
<cls> <noptr> spr dp mic spi write ( <ptr> context <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> max irq domain map ( <ptr> d <dot> <noptr> vir q <dot> <noptr> hw )
<cls> <noptr> dax reads ( <ptr> client <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> max set fps period ( <ptr> chip <dot> <noptr> fps id <dot> <noptr> time period )
<cls> <noptr> abot p locked show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sm register display ( <ptr> sm <dot> <ptr> mem avail )
<cls> <noptr> am xts cse set once ( <ptr> tsc adc <dot> <noptr> val )
<cls> <noptr> ic reg write ( <ptr> stmp e <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> l pread byte ( <ptr> lp <dot> <noptr> reg <dot> <ptr> data )
<cls> <noptr> pcf adc sync read callback ( <ptr> pcf <dot> <ptr> param <dot> <noptr> result )
<cls> <noptr> dax writes ( <ptr> client <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> ssb i write bytes ( <ptr> ssb i <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> max is accessible reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> stmp e block read ( <ptr> stmp e <dot> <noptr> reg <dot> <noptr> length <dot> <ptr> values )
<cls> <noptr> maxim charger calc reg current ( <ptr> limits <dot> <noptr> min u a <dot> <noptr> max u a <dot> <ptr> dst )
<cls> <noptr> six core cmd ana audio pin cfg ( <ptr> core <dot> <noptr> l rout )
<cls> <noptr> pcf read block ( <ptr> pcf <dot> <noptr> reg <dot> <noptr> nr regs <dot> <ptr> data )
<cls> <noptr> m c xxx add sub device ( <ptr> m c xxx <dot> <ptr> format )
<cls> <noptr> tps irq map ( <ptr> h <dot> <noptr> vir q <dot> <noptr> hw )
<cls> <noptr> m xsl rad c probe ( <ptr> pdev )
<cls> <noptr> six core isvalid property a ( <ptr> core <dot> <noptr> property )
<cls> <noptr> wm x aux adc read polled ( <ptr> wm x <dot> <noptr> input )
<cls> <noptr> max rtc is precious reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> dln setup r x urb s ( <ptr> dln <dot> <ptr> host if )
<cls> <noptr> aat update ( <ptr> aat <dot> <noptr> addr <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> max write device ( <ptr> ic <dot> <noptr> reg <dot> <noptr> bytes <dot> <ptr> src )
<cls> <noptr> rc text power req config ( <ptr> dev <dot> <noptr> dsid <dot> <noptr> ext pwr req <dot> <noptr> deep sleep slot nr )
<cls> <noptr> arizona irq map ( <ptr> h <dot> <noptr> vir q <dot> <noptr> hw )
<cls> <noptr> t wls i h setup ( <ptr> dev <dot> <noptr> module <dot> <noptr> irq base )
<cls> <noptr> six core cmd int b pin cfg ( <ptr> core <dot> <noptr> int b <dot> <noptr> a )
<cls> <noptr> csl bit volatile register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> abx event registers startup state get ( <ptr> dev <dot> <ptr> event )
<cls> <noptr> six core cmd f m rsq status a ( <ptr> core <dot> <ptr> rsq args <dot> <ptr> report )
<cls> <noptr> wm x aux adc read uv ( <ptr> wm x <dot> <noptr> input )
<cls> <noptr> pas ic write register ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> tc x irq init ( <ptr> tc x <dot> <ptr> np )
<cls> <noptr> stmp e irq map ( <ptr> d <dot> <noptr> vir q <dot> <noptr> hw irq )
<cls> <noptr> stmp e disable ( <ptr> stmp e <dot> <noptr> blocks )
<cls> <noptr> da aux adc irq ( <noptr> irq <dot> <ptr> irq data )
<cls> <noptr> six core cmd f mtune freq a ( <ptr> core <dot> <ptr> tune args )
<cls> <noptr> m c xxx spi read ( <ptr> context <dot> <ptr> reg <dot> <noptr> reg size <dot> <ptr> val <dot> <noptr> val size )
<cls> <noptr> mt irqhandler eg ( <ptr> mt <dot> <noptr> reg <dot> <noptr> irq base )
<cls> <noptr> ssb i read bytes ( <ptr> ssb i <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> sm modify reg ( <ptr> dev <dot> <noptr> reg <dot> <noptr> set <dot> <noptr> clear )
<cls> <noptr> abot p init debug fs ( <ptr> dev <dot> <ptr> otp )
<cls> <noptr> max rtc is accessible reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tc x irq map ( <ptr> d <dot> <noptr> vir q <dot> <noptr> hw irq )
<cls> <noptr> sm set clock ( <ptr> dev <dot> <noptr> clk src <dot> <noptr> req freq )
<cls> <noptr> six core cmd agc status ( <ptr> core <dot> <ptr> report )
<cls> <noptr> wm x aux adc read irq ( <ptr> wm x <dot> <noptr> input )
<cls> <noptr> exy nos l pass cores w reset ( <ptr> l pass <dot> <noptr> mask )
<cls> <noptr> max device init ( <ptr> chip <dot> <ptr> p data )
<cls> <noptr> spi reg write ( <ptr> stmp e <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> kemp ld version show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> am xts cse set cache ( <ptr> tsc adc <dot> <noptr> val )
<cls> <noptr> tw l irq unmap ( <ptr> d <dot> <noptr> vir q )
<cls> <noptr> stm f x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> six core cmd agc status a ( <ptr> core <dot> <ptr> report )
<cls> <noptr> l m ctrl bank set max current ( <ptr> cb <dot> <noptr> i max )
<cls> <noptr> six core element isin array ( <noptr> element <dot> <noptr> array <dot> <noptr> size )
<cls> <noptr> six core cmd f m rsq status ( <ptr> core <dot> <ptr> args <dot> <ptr> report )
<cls> <noptr> store output ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> ret ure gmap read ( <ptr> context <dot> <ptr> reg <dot> <noptr> reg size <dot> <ptr> val <dot> <noptr> val size )
<cls> <noptr> tw l set pll ( <ptr> tw l <dot> <noptr> pll id <dot> <noptr> freq in <dot> <noptr> freq out )
<cls> <noptr> max read device ( <ptr> ic <dot> <noptr> reg <dot> <noptr> bytes <dot> <ptr> dest )
<cls> <noptr> tw l audio has vibr a ( <ptr> p data <dot> <ptr> node )
<cls> <noptr> da write q if ( <ptr> da <dot> <noptr> addr <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> irq top cap ( <ptr> pcap <dot> <noptr> irq )
<cls> <noptr> dax register notifier ( <ptr> dev <dot> <ptr> nb <dot> <noptr> events )
<cls> <noptr> c mod io setup sub device ( <ptr> priv <dot> <ptr> name <dot> <noptr> dev no <dot> <noptr> mod no )
<cls> <noptr> tps x irq set wake ( <ptr> irq data <dot> <noptr> on )
<cls> <noptr> max set bits ( <ptr> ic <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> da bulk write ( <ptr> da <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> ssb i write l ( <ptr> ssb i <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> tps x add device ( <ptr> tps x <dot> <ptr> cell )
<cls> <noptr> da read q if ( <ptr> da <dot> <noptr> addr <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> reg map atmel h lcd c reg write ( <ptr> context <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ic block write ( <ptr> stmp e <dot> <noptr> reg <dot> <noptr> length <dot> <ptr> values )
<cls> <noptr> d aic write device ( <ptr> client <dot> <noptr> addr <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> rav esp receive buf ( <ptr> ser dev <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> pcf reg write ( <ptr> pcf <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> device init ( <ptr> chip <dot> <ptr> ic <dot> <ptr> p data )
<cls> <noptr> read device ( <ptr> ic <dot> <noptr> reg <dot> <noptr> bytes <dot> <ptr> dest )
<cls> <noptr> tw lic write ( <noptr> mod no <dot> <ptr> value <dot> <noptr> reg <dot> <noptr> numbytes )
<cls> <noptr> tps reg read ( <ptr> tps <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> e z x pcap read ( <ptr> pcap <dot> <noptr> reg num <dot> <ptr> value )
<cls> <noptr> tps irq init ( <ptr> tps <dot> <noptr> irq <dot> <ptr> p data )
<cls> <noptr> dbg chg conf ( <noptr> por <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> chg config )
<cls> <noptr> abot p fac show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> intel msi c irq read ( <ptr> msi c <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> wm edge irq map ( <ptr> h <dot> <noptr> vir q <dot> <noptr> hw )
<cls> <noptr> htc pld handler ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> six core cmd f m phase diversity ( <ptr> core <dot> <noptr> mode )
<cls> <noptr> pcf adc async read ( <ptr> pcf <dot> <noptr> mux <dot> <noptr> avg <dot> <ptr> ptr <dot> <ptr> <dot> <ptr> ptr <dot> <ptr> callback param )
<cls> <noptr> cht wc byte reg write ( <ptr> context <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> six core set power state ( <ptr> core <dot> <noptr> next state )
<cls> <noptr> max reg write ( <ptr> ic <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> pcf register irq ( <ptr> pcf <dot> <noptr> irq <dot> <ptr> ptr <dot> <ptr> ptr <dot> <ptr> data )
<cls> <noptr> max p mic is volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> stmp ex x enable ( <ptr> stmp e <dot> <noptr> blocks <dot> <noptr> enable )
<cls> <ptr> sys con reg map lookup by phandle ( <ptr> np <dot> <ptr> property )
<cls> <noptr> sm gpio output ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> m c xxx irq request ( <ptr> m c xxx <dot> <noptr> irq <dot> <noptr> handler <dot> <ptr> name <dot> <ptr> dev )
<cls> <noptr> act aic probe ( <ptr> ic <dot> <ptr> id )
<cls> <noptr> da bulk read ( <ptr> da <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> lpc sch populate cell ( <ptr> pdev <dot> <noptr> where <dot> <ptr> name <dot> <noptr> size <dot> <noptr> irq <dot> <noptr> id <dot> <ptr> cell )
<cls> <noptr> six core reg map writable register ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> tw l reg write ( <ptr> tw l <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ab event registers startup state get ( <ptr> dev <dot> <ptr> event )
<cls> <noptr> atmel sm ccs encode n cycles ( <noptr> n cycles <dot> <noptr> msb pos <dot> <noptr> msb width <dot> <noptr> msb factor <dot> <ptr> encoded val )
<cls> <noptr> ssb i read l ( <ptr> ssb i <dot> <noptr> reg )
<cls> <noptr> max bulk write ( <ptr> ic <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> tps x reads ( <ptr> dev <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> ret u write ( <ptr> r dev <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> m c xxx spi write ( <ptr> context <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> intel msi c bulk read ( <ptr> reg <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> tps update bits ( <ptr> tps <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val <dot> <noptr> level )
<cls> <noptr> adc setup ( <ptr> pcf <dot> <noptr> channel <dot> <noptr> avg )
<cls> <noptr> tps output ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> abx set register interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> ab set register interrupt ible ( <ptr> ab <dot> <noptr> reg <dot> <noptr> reg val )
<cls> <noptr> ab set test register interrupt ible ( <ptr> ab <dot> <noptr> reg <dot> <noptr> reg val )
<cls> <noptr> rav esp receive event ( <ptr> sp <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> pcf write block ( <ptr> pcf <dot> <noptr> reg <dot> <noptr> nr regs <dot> <ptr> data )
<cls> <noptr> m c xxx reg write ( <ptr> m c xxx <dot> <noptr> offset <dot> <noptr> val )
<cls> <noptr> arizona poll reg ( <ptr> arizona <dot> <noptr> timeout ms <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> target )
<cls> <noptr> abx mask and set register interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> reg <dot> <noptr> bit mask <dot> <noptr> bit values )
<cls> <noptr> d are g write ( <ptr> da <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> stmp e set alt func ( <ptr> stmp e <dot> <noptr> pins <dot> <noptr> block )
<cls> <noptr> htc pld chip to irq ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> six core cmd set property ( <ptr> core <dot> <noptr> property <dot> <noptr> value )
<cls> <noptr> arizona request irq ( <ptr> arizona <dot> <noptr> irq <dot> <ptr> name <dot> <noptr> handler <dot> <ptr> data )
<cls> <noptr> dax reads ( <ptr> dev <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> m xts adc domain map ( <ptr> d <dot> <noptr> irq <dot> <noptr> hw irq )
<cls> <noptr> tw l irq pm notifier ( <ptr> notifier <dot> <noptr> pm event <dot> <ptr> unused )
<cls> <noptr> max update reg ( <ptr> ic <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> max dt init ( <ptr> np <dot> <ptr> dev <dot> <ptr> p data )
<cls> <noptr> pcf gpio power supply set ( <ptr> pcf <dot> <noptr> gpio <dot> <noptr> regulator <dot> <noptr> on )
<cls> <noptr> rct set ext pwr req control ( <ptr> dev <dot> <noptr> id <dot> <noptr> ext pwr )
<cls> <noptr> tc x block read ( <ptr> tc x <dot> <noptr> reg <dot> <noptr> length <dot> <ptr> values )
<cls> <noptr> wm block write ( <ptr> wm <dot> <noptr> start reg <dot> <noptr> regs <dot> <ptr> src )
<cls> <noptr> get register interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> arizona set irq wake ( <ptr> arizona <dot> <noptr> irq <dot> <noptr> on )
<cls> <noptr> six cmd tune seek freq ( <ptr> core <dot> <noptr> cmd <dot> <noptr> args <dot> <noptr> arg n <dot> <ptr> resp <dot> <noptr> resp n )
<cls> <noptr> sm register uart ( <ptr> sm <dot> <noptr> devices )
<cls> <noptr> pm x page bulk read ( <ptr> ic <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> atmel sm ccs conf set pulse ( <ptr> conf <dot> <noptr> shift <dot> <noptr> n cycles )
<cls> <noptr> ssb ipa read bytes ( <ptr> ssb i <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> adp read ( <ptr> client <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tps set bits ( <ptr> tps <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val <dot> <noptr> level )
<cls> <noptr> spi block read ( <ptr> stmp e <dot> <noptr> reg <dot> <noptr> length <dot> <ptr> values )
<cls> <noptr> b x tw c reg show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> abot p tac show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> e z x pcap write ( <ptr> pcap <dot> <noptr> reg num <dot> <noptr> value )
<cls> <noptr> tps x write ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> wl f m write data ( <ptr> core <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> palm as ext control req config ( <ptr> palm as <dot> <noptr> id <dot> <noptr> ext ctrl <dot> <noptr> enable )
<cls> <noptr> ab mask and set register interrupt ible ( <ptr> ab <dot> <noptr> reg <dot> <noptr> and mask <dot> <noptr> or mask )
<cls> <noptr> reg map ipc byte reg write ( <ptr> context <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> atmel sm ccs conf set cycle ( <ptr> conf <dot> <noptr> shift <dot> <noptr> n cycles )
<cls> <noptr> m fd add device ( <ptr> parent <dot> <noptr> id <dot> <ptr> cell <dot> <ptr> mem base <dot> <noptr> irq base <dot> <ptr> domain )
<cls> <ptr> device node get reg map ( <ptr> np <dot> <noptr> check clk )
<cls> <noptr> wm irq init ( <ptr> wm <dot> <noptr> irq <dot> <ptr> p data )
<cls> <noptr> tps irq init ( <ptr> tps <dot> <noptr> irq <dot> <noptr> irq base )
<cls> <noptr> abot p freq show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pm xxx irq get irq chip state ( <ptr> d <dot> <noptr> which <dot> <ptr> state )
<cls> <noptr> kemp ld specific ations how ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> six core fw ver to revision ( <ptr> core <dot> <noptr> func <dot> <noptr> major <dot> <noptr> minor <dot> <noptr> minor )
<cls> <ptr> dln prep buf ( <noptr> handle <dot> <noptr> cmd <dot> <noptr> echo <dot> <ptr> o buf <dot> <ptr> o buf len <dot> <noptr> gfp )
<cls> <noptr> htc pld direction output ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> set register interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> six core cmd am rsq status ( <ptr> core <dot> <ptr> rsq args <dot> <ptr> report )
<cls> <noptr> stmp e add device ( <ptr> stmp e <dot> <ptr> cell )
<cls> <noptr> tw lic read ( <noptr> mod no <dot> <ptr> value <dot> <noptr> reg <dot> <noptr> numbytes )
<cls> <noptr> six core cmd f m rds block count ( <ptr> core <dot> <noptr> clear <dot> <ptr> report )
<cls> <noptr> tc x set bits ( <ptr> tc x <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> wm xreg write ( <ptr> wm x <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> c pcap init one reg map irq ( <ptr> c pcap <dot> <ptr> r irq <dot> <noptr> irq base <dot> <noptr> irq )
<cls> <noptr> tps xic write device ( <ptr> tps x <dot> <noptr> reg <dot> <noptr> bytes <dot> <ptr> src )
<cls> <noptr> m c xxx irq status ( <ptr> m c xxx <dot> <noptr> irq <dot> <ptr> enabled <dot> <ptr> pending )
<cls> <noptr> pm x bulk read ( <ptr> ic <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> aat reg write file ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> wm x write ( <ptr> wm x <dot> <noptr> reg <dot> <noptr> bytes <dot> <ptr> src )
<cls> <noptr> rav esp write ( <ptr> sp <dot> <ptr> data <dot> <noptr> data size )
<cls> <noptr> tps ext power req config ( <ptr> dev <dot> <noptr> ext ctrl flag <dot> <noptr> preq bit <dot> <noptr> state reg add <dot> <noptr> trans reg add )
<cls> <noptr> intel quar k gpio setup ( <ptr> pdev <dot> <ptr> cell )
<cls> <noptr> m c xxx reg read ( <ptr> m c xxx <dot> <noptr> offset <dot> <ptr> val )
<cls> <noptr> pcap adc sync ( <ptr> pcap <dot> <noptr> bank <dot> <noptr> flags <dot> <noptr> ch <dot> <noptr> res )
<cls> <noptr> six core cmd f m rds status ( <ptr> core <dot> <noptr> status only <dot> <noptr> mt fifo <dot> <noptr> int ack <dot> <ptr> report )
<cls> <noptr> aat reg read file ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> six core cmd dig audio pin cfg ( <ptr> core <dot> <noptr> d clk <dot> <noptr> dfs <dot> <noptr> d out <dot> <noptr> x out )
<cls> <noptr> sm calc clock ( <noptr> freq <dot> <ptr> clock <dot> <noptr> max div <dot> <noptr> m clk <dot> <ptr> best diff )
<cls> <noptr> atmel hsm ccs conf apply ( <ptr> reg map <dot> <ptr> layout <dot> <noptr> cs <dot> <ptr> conf )
<cls> <noptr> b cove ipc byte reg write ( <ptr> context <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> abot p ime ich show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> wm block read ( <ptr> wm <dot> <noptr> start reg <dot> <noptr> regs <dot> <ptr> dest )
<cls> <noptr> dln send wait ( <ptr> dln <dot> <noptr> handle <dot> <noptr> cmd <dot> <noptr> echo <dot> <ptr> o buf <dot> <noptr> o buf len )
<cls> <noptr> lp update bits ( <ptr> lp <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> six core cmd ic link gpo ctl pin cfg ( <ptr> core <dot> <noptr> i cin <dot> <noptr> icip <dot> <noptr> icon <dot> <noptr> i cop )
<cls> <noptr> intell pss register clock divider ( <ptr> l pss <dot> <ptr> dev name <dot> <dptr> clk )
<cls> <noptr> wm read aux adc ( <ptr> wm <dot> <noptr> channel <dot> <noptr> scale <dot> <noptr> v ref )
<cls> <noptr> rav esp exec ( <ptr> sp <dot> <ptr> data <dot> <noptr> data size <dot> <ptr> reply data <dot> <noptr> reply data size )
<cls> <noptr> get register page interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> first reg <dot> <ptr> reg vals <dot> <noptr> num regs )
<cls> <noptr> wm gpio config ( <ptr> wm <dot> <noptr> gpio <dot> <noptr> dir <dot> <noptr> func <dot> <noptr> pol <dot> <noptr> pull <dot> <noptr> invert <dot> <noptr> debounce )
<cls> <noptr> pm irq master handler ( <ptr> chip <dot> <noptr> master <dot> <noptr> master val )
<cls> <noptr> ab get register page interrupt ible ( <ptr> ab <dot> <noptr> first reg <dot> <ptr> reg vals <dot> <noptr> num regs )
<cls> <noptr> pm x bulk write ( <ptr> ic <dot> <noptr> reg <dot> <noptr> count <dot> <ptr> buf )
<cls> <noptr> dln transfer ( <ptr> dln <dot> <noptr> handle <dot> <noptr> cmd <dot> <ptr> o buf <dot> <noptr> o buf len <dot> <ptr> i buf <dot> <ptr> i buf len )
<cls> <noptr> dev mmf d add devices ( <ptr> dev <dot> <noptr> id <dot> <ptr> cells <dot> <noptr> n devs <dot> <ptr> mem base <dot> <noptr> irq base <dot> <ptr> domain )
<cls> <noptr> mask and set register interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> reg <dot> <noptr> bit mask <dot> <noptr> bit values )
<cls> <noptr> sm unit power ( <ptr> dev <dot> <noptr> unit <dot> <noptr> to )
<cls> <noptr> sc wait for ready ( <ptr> state )
<cls> <noptr> abx get register page interrupt ible ( <ptr> dev <dot> <noptr> bank <dot> <noptr> first reg <dot> <ptr> reg vals <dot> <noptr> num regs )
<cls> <noptr> pcap adc async ( <ptr> pcap <dot> <noptr> bank <dot> <noptr> flags <dot> <noptr> ch <dot> <ptr> callback <dot> <ptr> data )
<cls> <ptr> add child ( <noptr> mod no <dot> <ptr> name <dot> <ptr> p data <dot> <noptr> p data len <dot> <noptr> can wakeup <dot> <noptr> irq <dot> <noptr> irq )
<cls> <noptr> dln transfer ( <ptr> pdev <dot> <noptr> cmd <dot> <ptr> o buf <dot> <noptr> o buf len <dot> <ptr> i buf <dot> <ptr> i buf len )
<cls> <noptr> xpc create k threads ( <ptr> ch <dot> <noptr> needed <dot> <noptr> ignored is connecting )
<cls> <noptr> sci f send alloc request ( <ptr> ep <dot> <ptr> window )
<cls> <noptr> device init c dev ( <ptr> h dev <dot> <ptr> h class <dot> <noptr> minor <dot> <ptr> fops <dot> <ptr> name <dot> <ptr> c dev <dot> <dptr> dev )
<cls> <ptr> me ime cl by uuid id ( <ptr> dev <dot> <ptr> uuid <dot> <noptr> clientid )
<cls> <noptr> cosm create debug dir ( <ptr> c dev )
<cls> <noptr> cch allocate ( <ptr> cch )
<cls> <noptr> hla sid alloc ( <ptr> h dev )
<cls> <noptr> sci f alloc gn tre j ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> xpc allocate msg slot uv ( <ptr> ch <dot> <noptr> flags <dot> <dptr> addressof msg slot )
<cls> <ptr> ssc request ( <noptr> ssc num )
<cls> <noptr> device c dev sysfs add ( <ptr> h dev )
<cls> <noptr> vmc i ctx q p create ( <ptr> context <dot> <noptr> handle )
<cls> <ptr> v op dev ( <ptr> v dev )
<cls> <noptr> mbus dev match ( <ptr> d v <dot> <ptr> dr )
<cls> <noptr> gru create new context ( <noptr> arg )
<cls> <noptr> fast rpc init create process ( <ptr> fl <dot> <ptr> arg p )
<cls> <noptr> enclosure add links ( <ptr> c dev )
<cls> <noptr> pci endpoint test request irq ( <ptr> test )
<cls> <ptr> me icl dev get drv data ( <ptr> cl dev )
<cls> <noptr> go yad mast all ( <ptr> h dev )
<cls> <noptr> xpc send payload uv ( <ptr> ch <dot> <noptr> flags <dot> <ptr> payload <dot> <noptr> payload size <dot> <noptr> notify type <dot> <noptr> func <dot> <ptr> key )
<cls> <noptr> fast rpc map get ( <ptr> map )
<cls> <noptr> sci fun register all windows ( <noptr> epd )
<cls> <ptr> me icl dev uuid ( <ptr> cl dev )
<cls> <noptr> hl user ptr is pinned ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> size <dot> <ptr> user ptr list <dot> <dptr> user ptr )
<cls> <noptr> vmc i ctx d bell create ( <noptr> context id <dot> <noptr> handle )
<cls> <ptr> atmel ssc get driver data ( <ptr> pdev )
<cls> <noptr> mic dma maps g ( <ptr> dev <dot> <ptr> sg <dot> <noptr> n ents <dot> <noptr> dir <dot> <noptr> attrs )
<cls> <noptr> d dcb requ get state ( <ptr> req )
<cls> <ptr> cosm dev tom dev ( <ptr> c dev )
<cls> <noptr> sci fun map all windows ( <noptr> epd )
<cls> <noptr> sci fun aligned cpy to io ( <ptr> dst <dot> <ptr> src <dot> <noptr> count <dot> <noptr> ordered )
<cls> <noptr> mei hbm enum clients req ( <ptr> dev )
<cls> <noptr> rts x pci clear ocp stat ( <ptr> pcr )
<cls> <noptr> eeprom xx probe ( <ptr> spi )
<cls> <noptr> xpc gru m q watchlist alloc uv ( <ptr> m q )
<cls> <noptr> v op get features ( <ptr> v dev )
<cls> <ptr> ibm asm fs make inode ( <ptr> sb <dot> <noptr> mode )
<cls> <noptr> get alloc next hop addr ( <ptr> ctx <dot> <noptr> curr pte <dot> <ptr> is new hop )
<cls> <noptr> me it xep gin transition ( <ptr> dev )
<cls> <noptr> mic create debug dir ( <ptr> m dev )
<cls> <noptr> ibm asm fs create files ( <ptr> sb )
<cls> <noptr> sci f pin pages ( <ptr> addr <dot> <noptr> len <dot> <noptr> prot <dot> <noptr> map flags <dot> <ptr> pages )
<cls> <noptr> q p get queue headers ( <ptr> q pair <dot> <dptr> produce q header <dot> <dptr> consume q header )
<cls> <noptr> gru unload all contexts ( )
<cls> <noptr> cos msc if recv ( <ptr> c dev )
<cls> <ptr> mic aper ( <ptr> c dev )
<cls> <noptr> xpc allocate msg wait ( <ptr> ch )
<cls> <noptr> me ime fw type nm ( <ptr> pdev )
<cls> <noptr> l k dtm read after free ( )
<cls> <noptr> cos msc if init ( )
<cls> <ptr> check msi en ( )
<cls> <noptr> hl init ( )
<cls> <noptr> xpc discovery ( )
<cls> <noptr> rts get ocp stat ( <ptr> pcr <dot> <ptr> val )
<cls> <ptr> check io limit ( )
<cls> <noptr> ilo init ( )
<cls> <noptr> mei init ( )
<cls> <noptr> mic reset ( <ptr> c dev )
<cls> <noptr> xpc init ( )
<cls> <ptr> check axes ( )
<cls> <noptr> v op init ( )
<cls> <noptr> vmc i host init ( )
<cls> <ptr> check polling pipe ( )
<cls> <noptr> vmc i get v mcontext id ( )
<cls> <noptr> xp init ( )
<cls> <noptr> gru proc init ( )
<cls> <noptr> sci fopen ( )
<cls> <noptr> donothing ( )
<cls> <noptr> mic init ( )
<cls> <noptr> xpc deliver payload ( <ptr> ch )
<cls> <noptr> vm balloon inflate ( <ptr> b )
<cls> <noptr> l k dtm exec null ( )
<cls> <ptr> check no msi ( )
<cls> <noptr> hlp cif ini ( <ptr> h dev )
<cls> <noptr> init simple test ( )
<cls> <noptr> rts x pci process ocp ( <ptr> pcr )
<cls> <noptr> cosm init ( )
<cls> <noptr> do overwritten ( )
<cls> <noptr> eeprom driver init ( )
<cls> <noptr> xp init uv ( )
<cls> <noptr> mei reset ( <ptr> dev )
<cls> <noptr> l k dtm user copy heap size from ( )
<cls> <noptr> mei connect timeout ( <ptr> cl )
<cls> <noptr> l k dtm execv malloc ( )
<cls> <noptr> init k gdb ts ( )
<cls> <ptr> check mfg pt fix ( )
<cls> <noptr> gru teardown tlb irq s ( )
<cls> <noptr> l k dtm writer o ( )
<cls> <noptr> i css driver init ( )
<cls> <noptr> clear device ( <ptr> hw )
<cls> <noptr> vmc i use p pn ( )
<cls> <noptr> l k dtm stack leak erasing ( )
<cls> <noptr> l k dtm ref count timing ( )
<cls> <noptr> tif m xx driver init ( )
<cls> <ptr> check recur count ( )
<cls> <noptr> vmc i event init ( )
<cls> <noptr> gru retry exception ( <ptr> cb )
<cls> <noptr> cosm client init ( )
<cls> <noptr> cos msc if connect ( )
<cls> <noptr> me ime driver init ( )
<cls> <noptr> l k dtm corrupt stack strong ( )
<cls> <noptr> vmc i resource handle ( <ptr> resource )
<cls> <ptr> check x pcm q node ( )
<cls> <ptr> check timeout locked ( )
<cls> <noptr> lis ic runtime resume ( <ptr> dev )
<cls> <noptr> cosm driver probe ( <ptr> c dev )
<cls> <noptr> a pds x chip on ( <ptr> chip )
<cls> <noptr> l k dtm access null ( )
<cls> <noptr> sci f init debug fs ( )
<cls> <noptr> b h driver init ( )
<cls> <noptr> go yal ate fini ( <ptr> h dev )
<cls> <ptr> check disable m six ( )
<cls> <noptr> l k dtm ref count add zero ( )
<cls> <noptr> pv panic register acpi driver ( )
<cls> <noptr> isl write reg ( <ptr> client <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> shift <dot> <noptr> val )
<cls> <noptr> l k dtm exec rodata ( )
<cls> <noptr> ibm asm handle mouse interrupt ( <ptr> sp )
<cls> <noptr> cosm start ( <ptr> c dev )
<cls> <noptr> vo preset ( <ptr> dev )
<cls> <noptr> vmc i guest init ( )
<cls> <noptr> xpc init uv ( )
<cls> <noptr> altera bits req ( <noptr> n )
<cls> <noptr> stl len able ( <ptr> ll )
<cls> <noptr> l k dtm warning message ( )
<cls> <noptr> ee init ( )
<cls> <ptr> trick compiler ( <ptr> stack )
<cls> <noptr> atmel secur am wait ( )
<cls> <noptr> idt get fw data ( <ptr> pdev )
<cls> <noptr> l k dtm access user space ( )
<cls> <noptr> kim probe ( <ptr> pdev )
<cls> <ptr> check write timeout ( )
<cls> <noptr> sci f conn handler ( <ptr> work )
<cls> <noptr> lookup addr ( <ptr> arg )
<cls> <noptr> xpc teardown partitions ( )
<cls> <noptr> mic init debug fs ( )
<cls> <noptr> isl driver init ( )
<cls> <noptr> add p otic driver init ( )
<cls> <noptr> mics mpt align low ( <ptr> m dev <dot> <noptr> pa )
<cls> <noptr> sci f init ( )
<cls> <noptr> sci fflush ( <noptr> epd )
<cls> <noptr> l k dtm user copy heap size to ( )
<cls> <noptr> fast rpc init ( )
<cls> <noptr> me icl dev unregister callbacks ( <ptr> cl dev )
<cls> <noptr> tsl suspend ( <ptr> dev )
<cls> <noptr> idt check dev ( <ptr> pdev )
<cls> <noptr> hl device suspend ( <ptr> h dev )
<cls> <noptr> l k dtm increment void ( <ptr> counter )
<cls> <noptr> sci f get port ( <noptr> id )
<cls> <ptr> check max ccb ( )
<cls> <noptr> xpc setup partitions ( )
<cls> <noptr> mic probe ( <ptr> pdev )
<cls> <noptr> isl resume ( <ptr> dev )
<cls> <noptr> l k dtm ref count add not zero saturated ( )
<cls> <noptr> enclosure init ( )
<cls> <noptr> a pds x force a refresh ( <ptr> chip )
<cls> <noptr> gru supported ( )
<cls> <noptr> isl suspend ( <ptr> dev )
<cls> <noptr> at probe ( <ptr> spi )
<cls> <noptr> sci f munmap ( <ptr> vma )
<cls> <ptr> check irq ( )
<cls> <noptr> vo pdp show ( <ptr> s <dot> <ptr> pos )
<cls> <noptr> me icl bus notify event ( <ptr> cl )
<cls> <noptr> q p lock ( <ptr> q pair )
<cls> <noptr> l k dtm bug ( )
<cls> <dptr> check c point name ( )
<cls> <ptr> v pdev tom drv ( <ptr> v pdev )
<cls> <noptr> xpc teardown partition suv ( )
<cls> <noptr> lis lv dic suspend ( <ptr> dev )
<cls> <noptr> job wq completion ( <ptr> work )
<cls> <noptr> lis lv dic driver init ( )
<cls> <noptr> soft reset ( )
<cls> <noptr> xpc mark partition active ( <ptr> part )
<cls> <noptr> c port init ( )
<cls> <noptr> l k dtm exec stack ( )
<cls> <noptr> c port pollin busy ( <ptr> dev )
<cls> <noptr> cosm suspend ( <ptr> dev )
<cls> <noptr> sci f send acks ( <ptr> dev )
<cls> <ptr> find crash type ( <ptr> name )
<cls> <noptr> sci f listen ( <noptr> epd <dot> <noptr> backlog )
<cls> <noptr> h lvm init ( <ptr> h dev )
<cls> <noptr> l k dtm user copy init ( )
<cls> <ptr> check disable host ( )
<cls> <noptr> cb probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> b h runtime suspend ( <ptr> dev )
<cls> <noptr> l k dtm spin lockup ( )
<cls> <noptr> tif m queue work ( <ptr> work )
<cls> <noptr> rts init ocp ( <ptr> pcr )
<cls> <noptr> sci f prog signal cb ( <ptr> arg )
<cls> <noptr> x pch b checker ( <ptr> ignore )
<cls> <noptr> max driver init ( )
<cls> <ptr> hl fence get timeline name ( <ptr> fence )
<cls> <noptr> rtl turn off led ( <ptr> pcr )
<cls> <ptr> check xpc dis engage time limit ( )
<cls> <noptr> hw break ( <ptr> arg )
<cls> <noptr> b h runtime resume ( <ptr> dev )
<cls> <noptr> c port reset ( <ptr> dev )
<cls> <noptr> event deliver ( <ptr> event msg )
<cls> <noptr> at init ( )
<cls> <noptr> report instruction timeout ( <ptr> h )
<cls> <noptr> phantom get free ( )
<cls> <noptr> alc or driver init ( )
<cls> <noptr> xpc setup r svd page uv ( <ptr> r p )
<cls> <noptr> l k dtm atomic timing ( )
<cls> <noptr> xpc check remote h b ( )
<cls> <noptr> ibm asm init ( )
<cls> <ptr> gru assign gru context ( <ptr> gts )
<cls> <noptr> select assert ( <ptr> context )
<cls> <noptr> vmc i host users ( )
<cls> <noptr> l k dtm heap init ( )
<cls> <noptr> l k dtm write after free ( )
<cls> <noptr> mei reset work ( <ptr> work )
<cls> <noptr> cosm init debug fs ( )
<cls> <noptr> vm balloon pop ( <ptr> b )
<cls> <noptr> write regs ( <ptr> state <dot> <noptr> reg <dot> <noptr> len )
<cls> <noptr> ibm asm f sun register ( )
<cls> <noptr> gru cpu fault mapid ( )
<cls> <noptr> sh ve u query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> rts x com mpm full on ( <ptr> pcr )
<cls> <noptr> cosm reset ( <ptr> c dev )
<cls> <noptr> alc or masks dir qs ( <ptr> priv )
<cls> <noptr> sci fpp setup ( )
<cls> <noptr> gru update cch ( <ptr> gts )
<cls> <noptr> add pot spi probe ( <ptr> spi )
<cls> <noptr> gru load context ( <ptr> gts )
<cls> <noptr> sci f zap m maps ( <noptr> node )
<cls> <noptr> xpc channel mgr ( <ptr> part )
<cls> <noptr> stl l disable ( <ptr> ll )
<cls> <noptr> hw break val access ( )
<cls> <noptr> gru flush cache cbe ( <ptr> cbe )
<cls> <noptr> me icl disconnect ( <ptr> cl )
<cls> <noptr> pti init ( )
<cls> <noptr> xpc online heartbeat uv ( )
<cls> <noptr> read ( <ptr> client )
<cls> <ptr> me icl conn status str ( <noptr> status )
<cls> <noptr> d dcb queue initialized ( <ptr> queue )
<cls> <noptr> l k dtm warning ( )
<cls> <noptr> flush ( <ptr> ctx )
<cls> <noptr> l k dtm write kern ( )
<cls> <noptr> pch p hub save reg conf ( <ptr> pdev )
<cls> <noptr> me ime intr disable ( <ptr> dev )
<cls> <noptr> check saturated ( <ptr> ref )
<cls> <ptr> event find ( <noptr> subid )
<cls> <noptr> ibm asm fs register ( )
<cls> <noptr> hl debug fs fini ( )
<cls> <noptr> me icl notify ( <ptr> cl )
<cls> <noptr> mei hdc p driver init ( )
<cls> <noptr> mic dp init ( )
<cls> <ptr> hl fence get driver name ( <ptr> fence )
<cls> <noptr> os lec snapshot ( <ptr> ec )
<cls> <noptr> mic init irq ( )
<cls> <noptr> overflow check ( <ptr> ref )
<cls> <noptr> pch p hub driver init ( )
<cls> <noptr> b h irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> ibm asm fs init fs context ( <ptr> fc )
<cls> <noptr> go y a init cpu queues ( <ptr> h dev )
<cls> <noptr> k gdb ts run tests ( )
<cls> <noptr> gen wq ecard type ( <ptr> cd )
<cls> <noptr> reset all timers ( )
<cls> <noptr> rts x pci process ocp interrupt ( <ptr> pcr )
<cls> <ptr> check irq type ( )
<cls> <noptr> enclosure remove links ( <ptr> c dev )
<cls> <noptr> configure k gdb ts ( )
<cls> <noptr> vo phot plug devices ( <ptr> work )
<cls> <noptr> xp net dev stop ( <ptr> dev )
<cls> <ptr> v op v q features ( <ptr> desc )
<cls> <noptr> eeprom xx driver init ( )
<cls> <noptr> xp net init ( )
<cls> <noptr> mei hbm pg exit res ( <ptr> dev )
<cls> <noptr> ctx signal notify ( <ptr> context )
<cls> <noptr> go y a disable internal queues ( <ptr> h dev )
<cls> <noptr> me icl unlink ( <ptr> cl )
<cls> <noptr> sci f setup sci f dev ( )
<cls> <noptr> a pds als driver init ( )
<cls> <noptr> gen wq esri ov configure ( <ptr> dev <dot> <noptr> num vfs )
<cls> <noptr> door bell clr ( <ptr> ccb )
<cls> <noptr> hw rem break ( <ptr> arg )
<cls> <noptr> mic next card db ( )
<cls> <noptr> number of connections ( <ptr> cl dev )
<cls> <ptr> check gru options ( )
<cls> <noptr> rtl init params ( <ptr> pcr )
<cls> <noptr> get hop addr ( <ptr> ctx )
<cls> <noptr> get as ictype ( <noptr> device )
<cls> <noptr> me if w ver ( <ptr> cl dev )
<cls> <noptr> v op driver init ( )
<cls> <noptr> l k dtm loop ( )
<cls> <noptr> l k dtm overwrite allocation ( )
<cls> <noptr> go y a resume ( <ptr> h dev )
<cls> <noptr> k gdb ts break test ( )
<cls> <ptr> at translate offset ( <ptr> at <dot> <ptr> offset )
<cls> <noptr> mei medi enter sync ( <ptr> dev )
<cls> <noptr> run single step break test ( )
<cls> <noptr> mei h buf acquire ( <ptr> dev )
<cls> <noptr> cos msc if client ( <ptr> unused )
<cls> <noptr> hw rem write break ( <ptr> arg )
<cls> <noptr> sci f get new port ( )
<cls> <noptr> xpc request partition re activation uv ( <ptr> part )
<cls> <noptr> tif m init ( )
<cls> <noptr> go yam m u init ( <ptr> h dev )
<cls> <noptr> a pds x driver init ( )
<cls> <noptr> v op v dev inited ( <ptr> v dev )
<cls> <noptr> sci f cleanup rma for zombies ( <noptr> node )
<cls> <noptr> l k dtm perms init ( )
<cls> <noptr> queue wakeup all ( <ptr> cd )
<cls> <noptr> mei write is idle ( <ptr> dev )
<cls> <noptr> update config from hw ( <ptr> xsd fec )
<cls> <noptr> hl mmu fini ( <ptr> h dev )
<cls> <noptr> rts process ocp ( <ptr> pcr )
<cls> <noptr> rts x usb driver init ( )
<cls> <noptr> c smf gpt init ( )
<cls> <noptr> rts x pci acquire irq ( <ptr> pcr )
<cls> <noptr> ctor a ( <ptr> region )
<cls> <noptr> me ime h buf isempty ( <ptr> dev )
<cls> <noptr> me icl is write queued ( <ptr> cl )
<cls> <noptr> a pds als suspend ( <ptr> dev )
<cls> <ptr> check c point count ( )
<cls> <noptr> is db reset ( <noptr> db out )
<cls> <noptr> fast rpc init attach ( <ptr> fl )
<cls> <ptr> q plist get head ( <ptr> q plist )
<cls> <noptr> eeprom xx prob edt ( <ptr> spi )
<cls> <noptr> sw break ( <ptr> arg )
<cls> <noptr> b h resume ( <ptr> dev )
<cls> <noptr> ibm asm unregister uart ( <ptr> sp )
<cls> <noptr> idt set smbus ops ( <ptr> pdev )
<cls> <noptr> ilo disable interrupts ( <ptr> hw )
<cls> <noptr> tsl resume ( <ptr> dev )
<cls> <noptr> irq handle eq e ( <ptr> work )
<cls> <noptr> gru wait abort proc ( <ptr> cb )
<cls> <noptr> cosm send time ( <ptr> c dev )
<cls> <noptr> xpc disallow all hbs uv ( )
<cls> <noptr> mic next db ( <ptr> m dev )
<cls> <noptr> ibm asm register panic notifier ( )
<cls> <noptr> hl fence enable signaling ( <ptr> fence )
<cls> <noptr> gru k test ( <noptr> arg )
<cls> <noptr> l k dtm rodata donothing ( )
<cls> <noptr> hl debug fs init ( )
<cls> <noptr> double ssc depth ( <noptr> depth )
<cls> <noptr> me ime fw type sps ( <ptr> pdev )
<cls> <noptr> gru fault ( <ptr> vm f )
<cls> <noptr> at probe ( <ptr> client )
<cls> <noptr> dummy irq init ( )
<cls> <noptr> d g delayed dispatch ( <ptr> work )
<cls> <noptr> rts clear ocp stat ( <ptr> pcr )
<cls> <noptr> xpc indicate partition engaged uv ( <ptr> part )
<cls> <noptr> go y a swf ini ( <ptr> h dev )
<cls> <noptr> xpc partition going down ( <ptr> part <dot> <noptr> reason )
<cls> <noptr> tif m device resume ( <ptr> dev )
<cls> <noptr> mei medi unset ( <ptr> dev )
<cls> <ptr> check vm w balloon shrink er enable ( )
<cls> <ptr> xpc get deliverable payload uv ( <ptr> ch )
<cls> <noptr> mic postcode open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sci fclose ( <noptr> epd )
<cls> <noptr> mei start ( <ptr> dev )
<cls> <noptr> cb pci configure ( <ptr> pdev )
<cls> <noptr> stt x wakeup ( <ptr> st data )
<cls> <noptr> enclosure link name ( <ptr> c dev <dot> <ptr> name )
<cls> <noptr> l k dtm exec user space ( )
<cls> <noptr> rts init params ( <ptr> pcr )
<cls> <noptr> lis ic init ( <ptr> lis )
<cls> <noptr> l k dtm hung task ( )
<cls> <noptr> run sys open test ( )
<cls> <noptr> hl device fini ( <ptr> h dev )
<cls> <noptr> cb init module ( )
<cls> <noptr> k gdb ts option setup ( <ptr> opt )
<cls> <noptr> l k dtm bugs init ( <ptr> recur param )
<cls> <noptr> go yah winit ( <ptr> h dev )
<cls> <noptr> me icl bus set name ( <ptr> cl dev )
<cls> <noptr> l k dtm exec data ( )
<cls> <ptr> check ibm asm debug ( )
<cls> <noptr> b h chip on ( <ptr> chip )
<cls> <noptr> i svm balloon stats on ( )
<cls> <noptr> xpc activating ( <ptr> partid )
<cls> <noptr> lattice ecp driver init ( )
<cls> <noptr> v op host init ( <ptr> vi )
<cls> <noptr> mei medi exit sync ( <ptr> dev )
<cls> <noptr> lis lv d joystick poll ( <ptr> input )
<cls> <noptr> go y a clears m regs ( <ptr> h dev )
<cls> <noptr> q p det atch hyper call ( <noptr> handle )
<cls> <noptr> check zero ( <ptr> ref )
<cls> <noptr> b h lux read result ( <ptr> chip )
<cls> <noptr> run plant and detach test ( <noptr> is early )
<cls> <noptr> print input ( <ptr> input )
<cls> <ptr> mic get remote dp ( <ptr> v pdev )
<cls> <noptr> get present ( <ptr> p )
<cls> <noptr> xpc teardown r svd page ( )
<cls> <noptr> me it xe unset pm domain ( <ptr> dev )
<cls> <noptr> mei h csr read ( <ptr> dev )
<cls> <noptr> gen wq etp sec ( <ptr> cd )
<cls> <noptr> mei medi set ( <ptr> dev <dot> <noptr> intr )
<cls> <noptr> mic x get api cid ( <ptr> m dev )
<cls> <noptr> stk im stop ( <ptr> kim data )
<cls> <noptr> l k dtm exception ( )
<cls> <noptr> gru intr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> force reset show ( <ptr> s <dot> <ptr> pos )
<cls> <noptr> dur amar c port access ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> c port stro beck ( <ptr> dev )
<cls> <noptr> ilo enable interrupts ( <ptr> hw )
<cls> <noptr> mei medic write ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> isl runtime resume ( <ptr> dev )
<cls> <noptr> rtl init common params ( <ptr> pcr )
<cls> <noptr> run bad read test ( )
<cls> <noptr> tif m xx switch media ( <ptr> work )
<cls> <noptr> go y async irq s ( <ptr> h dev )
<cls> <noptr> cosm dev probe ( <ptr> d )
<cls> <noptr> l k dtm ref count add overflow ( )
<cls> <ptr> vmc i resource get ( <ptr> resource )
<cls> <noptr> idt create sysfs files ( <ptr> pdev )
<cls> <noptr> b h led cfg ( <ptr> chip )
<cls> <noptr> a pds x runtime suspend ( <ptr> dev )
<cls> <noptr> mic x ack interrupt ( <ptr> m dev )
<cls> <noptr> ibm asm fs get tree ( <ptr> fc )
<cls> <noptr> mic get rdm asr irq ( <noptr> index )
<cls> <noptr> hl mmu init ( <ptr> h dev )
<cls> <noptr> rts disable auto blink ( <ptr> pcr )
<cls> <noptr> tsl driver init ( )
<cls> <noptr> ee probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> me icl wake all ( <ptr> cl )
<cls> <noptr> me ime intr enable ( <ptr> dev )
<cls> <noptr> top bit ( <noptr> bits )
<cls> <noptr> tif m xx dummy eject ( <ptr> f m <dot> <ptr> sock )
<cls> <noptr> hw access break ( <ptr> arg )
<cls> <noptr> ibm asm event buffer init ( <ptr> sp )
<cls> <noptr> xpc mark partition inactive ( <ptr> part )
<cls> <noptr> xpc process activate irq rcvd uv ( )
<cls> <noptr> mei register ( <ptr> dev <dot> <ptr> parent )
<cls> <noptr> me it xe pci suspend ( <ptr> device )
<cls> <noptr> gru wait async cbr ( <noptr> han )
<cls> <noptr> als wait for data ready ( <ptr> dev )
<cls> <noptr> a pds x detect ( <ptr> chip )
<cls> <noptr> a pds als resume ( <ptr> dev )
<cls> <noptr> ibm asm heartbeat init ( <ptr> sp )
<cls> <noptr> hl device open ctrl ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> mei h csr set hig ( <ptr> dev )
<cls> <noptr> d bell unlink ( <noptr> handle )
<cls> <noptr> skip back repeat test ( <ptr> arg )
<cls> <noptr> mic setup callbacks ( <ptr> m dev )
<cls> <noptr> queue enqueue ddd cbs ( <ptr> queue )
<cls> <noptr> enqueue command ( <ptr> sp <dot> <ptr> cmd )
<cls> <noptr> b h chip off ( <ptr> chip )
<cls> <noptr> set channel reset ( <ptr> ccb )
<cls> <noptr> hl mmu swap in ( <ptr> ctx )
<cls> <noptr> cosm set state ( <ptr> c dev <dot> <noptr> state )
<cls> <noptr> cb release slot ( <ptr> dev )
<cls> <noptr> go y aun mask irq ( <ptr> h dev <dot> <noptr> event type )
<cls> <noptr> xpc disconnect ( <noptr> ch number )
<cls> <noptr> st write ( <ptr> skb )
<cls> <noptr> me icl is other connecting ( <ptr> cl )
<cls> <noptr> vm balloon work ( <ptr> work )
<cls> <noptr> work fn write wakeup ( <ptr> work )
<cls> <noptr> x pck thread start ( <ptr> args )
<cls> <noptr> isl get power state ( <ptr> client )
<cls> <noptr> d bell fire entries ( <noptr> notify idx )
<cls> <noptr> go y a initi atu ( <ptr> h dev )
<cls> <noptr> wakeup event readers ( <ptr> sp )
<cls> <noptr> cosm register driver ( <ptr> driver )
<cls> <noptr> gen wq edd cbs inflight ( <ptr> cd )
<cls> <noptr> xpc put on as idu v ( <noptr> cpuid )
<cls> <noptr> lis lv d init device ( <ptr> lis )
<cls> <noptr> rtl extra init hw ( <ptr> pcr )
<cls> <noptr> fast rpc release current dsp process ( <ptr> fl )
<cls> <noptr> v op init debug fs ( <ptr> vi )
<cls> <noptr> mic postcode show ( <ptr> s <dot> <ptr> pos )
<cls> <noptr> sci f send ( <noptr> epd <dot> <ptr> msg <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> fast rpc r pmsg probe ( <ptr> r pdev )
<cls> <noptr> vmc i guest code active ( )
<cls> <noptr> sci f poll q p state ( <ptr> work )
<cls> <noptr> rts x pci enable ocp ( <ptr> pcr )
<cls> <noptr> mic gets box irq ( <noptr> db )
<cls> <noptr> ibm asm register uart ( <ptr> sp )
<cls> <noptr> recursive loop ( <noptr> remaining )
<cls> <noptr> mei hbm start req ( <ptr> dev )
<cls> <noptr> pv panic unregister acpi driver ( )
<cls> <noptr> me ime hw start ( <ptr> dev )
<cls> <noptr> mei component master bind ( <ptr> dev )
<cls> <noptr> rts x enable asp m ( <ptr> pcr )
<cls> <noptr> gen wq e health check start ( <ptr> cd )
<cls> <noptr> mic intr restore ( <ptr> m dev )
<cls> <noptr> gru unlock gts ( <ptr> gts )
<cls> <noptr> hl ctx fini ( <ptr> ctx )
<cls> <noptr> rts enable asp m ( <ptr> pcr <dot> <noptr> enable )
<cls> <noptr> xp socket pau v ( <noptr> gpa )
<cls> <noptr> xpc heartbeat init uv ( )
<cls> <noptr> me ime hw config ( <ptr> dev )
<cls> <ptr> me inf c radio name ( <ptr> ver )
<cls> <noptr> rts card before power off ( <ptr> pcr )
<cls> <noptr> l k dtm ref count add saturated ( )
<cls> <noptr> mei minor get ( <ptr> dev )
<cls> <noptr> v op virtio device reset ( <ptr> v dev )
<cls> <noptr> cs rollback ( <ptr> h dev <dot> <ptr> cs )
<cls> <noptr> trc show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> cosm client recv ( )
<cls> <noptr> h lvm fini ( <ptr> h dev )
<cls> <ptr> sci f acquire m m ( )
<cls> <noptr> gru assign as id ( <ptr> gru )
<cls> <noptr> mics mpt restore ( <ptr> m dev )
<cls> <noptr> xpc any partition engaged uv ( )
<cls> <noptr> run do fork test ( )
<cls> <noptr> add pot spi driver init ( )
<cls> <noptr> xsd fec start ( <ptr> xsd fec )
<cls> <noptr> me ime p gin transition ( <ptr> dev )
<cls> <noptr> a pds x calc again ( <ptr> chip )
<cls> <noptr> txqueue limit show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> me ime clr m all ( <ptr> dev )
<cls> <noptr> vmc i host code active ( )
<cls> <noptr> gru k services init ( )
<cls> <noptr> q p det atch guest work ( <noptr> handle )
<cls> <noptr> gru flush all tlb ( <ptr> gru )
<cls> <noptr> vm balloon send start ( <ptr> b <dot> <noptr> req caps )
<cls> <noptr> remote settings file close ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> hl debug fs remove cs ( <ptr> cs )
<cls> <noptr> get cont catch ( <ptr> arg )
<cls> <noptr> rts x pci disable ocp ( <ptr> pcr )
<cls> <ptr> st int dequeue ( <ptr> stg data )
<cls> <noptr> tf h user polling mode ( <ptr> tf h )
<cls> <noptr> vmc i resource hash ( <noptr> handle )
<cls> <noptr> vm balloon enable stats ( <ptr> b )
<cls> <ptr> check x pck debug ignore ( )
<cls> <noptr> vm cicontext get priv flags ( <noptr> context id )
<cls> <noptr> int queue schedule job ( <ptr> job )
<cls> <noptr> mbus register driver ( <ptr> driver )
<cls> <noptr> scan timers ( <ptr> mfg pt )
<cls> <noptr> enclosure component register ( <ptr> e comp )
<cls> <noptr> tif m xx resume ( <ptr> dev )
<cls> <noptr> xpc setup r svd page ( )
<cls> <noptr> mei h csr set ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> stk im complete ( <ptr> kim data )
<cls> <ptr> mei pg state str ( <noptr> state )
<cls> <noptr> sci fu event ( <ptr> d v <dot> <ptr> env )
<cls> <noptr> xp net dev open ( <ptr> dev )
<cls> <noptr> quick test ( <noptr> arg )
<cls> <noptr> me icl bus res can ( <ptr> bus )
<cls> <noptr> hl cb pool init ( <ptr> h dev )
<cls> <noptr> me it xe set pm domain ( <ptr> dev )
<cls> <noptr> hl mmu ctx fini ( <ptr> ctx )
<cls> <noptr> xpc setup ch structures ( <ptr> part )
<cls> <noptr> b h prox read result ( <ptr> chip )
<cls> <noptr> xpc request partition de activation uv ( <ptr> part )
<cls> <noptr> vmc i send data gram ( <ptr> d g )
<cls> <noptr> is channel reset ( <ptr> ccb )
<cls> <noptr> rts x usb init chip ( <ptr> u cr )
<cls> <noptr> me it xcb dequeue ( <ptr> cb )
<cls> <noptr> idt set def val ( <ptr> pdev )
<cls> <noptr> xpc indicate partition dis engaged uv ( <ptr> part )
<cls> <noptr> rtl bis q fn ( <ptr> pcr )
<cls> <noptr> b h lux get result ( <ptr> chip )
<cls> <noptr> execute user location ( <ptr> dst )
<cls> <noptr> rts get ic version ( <ptr> pcr )
<cls> <noptr> gen wq e base clock frequency ( <ptr> cd )
<cls> <noptr> vmc i check host caps ( <ptr> pdev )
<cls> <noptr> go y a early init ( <ptr> h dev )
<cls> <noptr> rts x usb suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> vm balloon vmc i init ( <ptr> b )
<cls> <noptr> tsl init client ( <ptr> client )
<cls> <noptr> a pds x resume ( <ptr> dev )
<cls> <noptr> v op u event ( <ptr> d v <dot> <ptr> env )
<cls> <ptr> gru lock kernel context ( <noptr> blade id )
<cls> <noptr> hl hw mon fini ( <ptr> h dev )
<cls> <noptr> gru wrap as id ( <ptr> gru )
<cls> <noptr> pv panic m mio probe ( <ptr> pdev )
<cls> <noptr> isl probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> rts x pci stop cmd ( <ptr> pcr )
<cls> <noptr> prev db guid show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> mp tfc write fc port page ( <ptr> ioc <dot> <noptr> portnum )
<cls> <noptr> gen wq ecard reset ( <ptr> cd )
<cls> <noptr> xpc clear interface ( )
<cls> <noptr> a pds x chip off ( <ptr> chip )
<cls> <noptr> me ime pm runtime resume ( <ptr> device )
<cls> <noptr> gen wq e stop ( <ptr> cd )
<cls> <noptr> mei hbm version issupported ( <ptr> dev )
<cls> <noptr> sci f query window ( <ptr> req )
<cls> <noptr> gen wq e pci setup ( <ptr> cd )
<cls> <noptr> phantom resume ( <ptr> pdev )
<cls> <noptr> sci fr srv port ( <noptr> port )
<cls> <noptr> cos msc if listen ( )
<cls> <noptr> me id mar ing reset ( <ptr> dev )
<cls> <noptr> v op b h handler ( <ptr> work )
<cls> <noptr> go y a stop external queues ( <ptr> h dev )
<cls> <noptr> me icl bus dev fixup ( <ptr> cl dev )
<cls> <noptr> b h suspend ( <ptr> dev )
<cls> <noptr> ibm asm stop reverse heartbeat ( <ptr> rh b )
<cls> <noptr> stl l deinit ( <ptr> ll )
<cls> <noptr> get entryid ( <noptr> entry )
<cls> <noptr> l k dtm hard lockup ( )
<cls> <noptr> l k dtm ref count sub and test negative ( )
<cls> <noptr> fill get buf ( <ptr> buf )
<cls> <noptr> me ime pg legacy enter sync ( <ptr> dev )
<cls> <noptr> pci endpoint test probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> cos msc if server ( <ptr> unused )
<cls> <noptr> v op v dev info show ( <ptr> s <dot> <ptr> unused )
<cls> <ptr> sci f find listen ep ( <noptr> port )
<cls> <noptr> k gdb ts post exp handler ( )
<cls> <noptr> mei hdc p probe ( <ptr> cl dev <dot> <ptr> id )
<cls> <noptr> xpc partition engaged uv ( <noptr> partid )
<cls> <noptr> gen wq e start ( <ptr> cd )
<cls> <noptr> q p save headers ( <ptr> entry )
<cls> <noptr> get entry len ( <noptr> entry )
<cls> <noptr> device type show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> queue freed d cbs ( <ptr> queue )
<cls> <noptr> send keyboard event ( <ptr> dev <dot> <ptr> input )
<cls> <noptr> b h prox rate validate ( <noptr> rate )
<cls> <noptr> me icl bus res can work ( <ptr> work )
<cls> <noptr> mei hbm idle ( <ptr> dev )
<cls> <noptr> rts x usb post reset ( <ptr> int f )
<cls> <ptr> v opd cto v dev ( <ptr> dc )
<cls> <noptr> a pds x mode on ( <ptr> chip )
<cls> <noptr> l k dtm stack guard page trailing ( )
<cls> <ptr> d bell index table find ( <noptr> idx )
<cls> <noptr> fast rpc notify users ( <ptr> user )
<cls> <noptr> idt created b gfs files ( <ptr> pdev )
<cls> <noptr> firmware load ( <ptr> fw <dot> <ptr> context )
<cls> <noptr> hw queue schedule job ( <ptr> job )
<cls> <noptr> eeprom c x w ren ( <ptr> eeprom <dot> <noptr> enable )
<cls> <noptr> go y a send heartbeat ( <ptr> h dev )
<cls> <noptr> cosm reset trigger work ( <ptr> work )
<cls> <noptr> gen wq e purged dcb ( <ptr> cd <dot> <ptr> req )
<cls> <noptr> cb dump regs ( <ptr> chip <dot> <noptr> select )
<cls> <noptr> get off blade t gh ( <ptr> gru )
<cls> <noptr> gen wq e tweak hardware ( <ptr> cd )
<cls> <noptr> rts x com mpm power saving ( <ptr> pcr )
<cls> <noptr> vm balloon init batching ( <ptr> b )
<cls> <noptr> isl runtime suspend ( <ptr> dev )
<cls> <noptr> sci f q p setup handler ( <ptr> work )
<cls> <noptr> sci f register ( <noptr> epd <dot> <ptr> addr <dot> <noptr> len <dot> <noptr> offset <dot> <noptr> prot <dot> <noptr> map flags )
<cls> <noptr> l k dtm corrupt user ds ( )
<cls> <noptr> gen wq e vma open ( <ptr> vma )
<cls> <noptr> me ime pg exit sync ( <ptr> dev )
<cls> <ptr> v op v q config ( <ptr> desc )
<cls> <noptr> lis lv dad dfs ( <ptr> lis )
<cls> <noptr> vm balloon reset ( <ptr> b )
<cls> <noptr> sci f probe ( <ptr> s dev )
<cls> <noptr> l k dtm user copy kernel ( )
<cls> <noptr> vmc i event unsubscribe ( <noptr> subid )
<cls> <noptr> vmc i ctx exists ( <noptr> cid )
<cls> <noptr> hdr is hbm ( <ptr> me ihdr )
<cls> <noptr> lis context restore ( <ptr> lis )
<cls> <noptr> st tty flush buffer ( <ptr> tty )
<cls> <noptr> a pds x ack int ( <ptr> chip <dot> <noptr> mode )
<cls> <noptr> pci endpoint test driver init ( )
<cls> <noptr> read d ( <ptr> client )
<cls> <noptr> rts x base fetch vendor settings ( <ptr> pcr )
<cls> <noptr> get phys addr ( <ptr> ctx <dot> <noptr> shadow addr )
<cls> <noptr> b h lux rate ( <ptr> chip <dot> <noptr> rate index )
<cls> <noptr> me icl bus module get ( <ptr> cl dev )
<cls> <noptr> add p otic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sci f setup q p ( <ptr> sci f dev )
<cls> <noptr> sci f add peer device ( <ptr> work )
<cls> <noptr> rts a extra init hw ( <ptr> pcr )
<cls> <noptr> l k dtm stack guard page leading ( )
<cls> <noptr> sci f mmu notif handler ( <ptr> work )
<cls> <noptr> a pds x suspend ( <ptr> dev )
<cls> <noptr> v op transport features ( <ptr> v dev )
<cls> <noptr> l k dtm unaligned load store write ( )
<cls> <noptr> device late fini ( <ptr> h dev )
<cls> <noptr> rts init hw ( <ptr> pcr )
<cls> <noptr> lattice ecp remove ( <ptr> spi )
<cls> <noptr> d dcb info open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> xsd fec reg read ( <ptr> xsd fec <dot> <noptr> addr )
<cls> <noptr> sci f loop b wq handler ( <ptr> unused )
<cls> <noptr> dram default mapping init ( <ptr> ctx )
<cls> <noptr> lattice ecp probe ( <ptr> spi )
<cls> <noptr> fast rpc context get ( <ptr> ctx )
<cls> <noptr> get on blade t gh ( <ptr> gru )
<cls> <noptr> mei meme cbr w read ( <ptr> dev )
<cls> <noptr> tf h exception ( <ptr> tf h )
<cls> <noptr> go y age thw state ( <ptr> h dev )
<cls> <noptr> xpc partition dis engaged ( <ptr> part )
<cls> <noptr> rts x pci disable asp m ( <ptr> pcr )
<cls> <noptr> gru user unload context ( <noptr> arg )
<cls> <noptr> cos msc if probe ( <ptr> sp dev )
<cls> <noptr> mei schedule stall timer ( <ptr> dev )
<cls> <noptr> doexec command ( <ptr> sp )
<cls> <noptr> l k dtm ref count dec and test saturated ( )
<cls> <noptr> device lateinit ( <ptr> h dev )
<cls> <noptr> rts x usb reset chip ( <ptr> u cr )
<cls> <noptr> v op desc size ( <ptr> desc )
<cls> <noptr> vmc i interrupt ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> d dcb mark tapped ( <ptr> pd dcb )
<cls> <noptr> gen wq e terminate ( <ptr> cd )
<cls> <noptr> xpc setup ch structure suv ( <ptr> part )
<cls> <noptr> idt smb read block ( <ptr> pdev <dot> <ptr> seq )
<cls> <noptr> mic x send rdm asr intr ( <ptr> m w <dot> <noptr> door bell )
<cls> <noptr> me it xe driver init ( )
<cls> <noptr> gen wq e read soft reset ( <ptr> cd )
<cls> <noptr> me it xe h buf depth ( <ptr> dev )
<cls> <noptr> ssc driver init ( )
<cls> <noptr> sci f dev probe ( <ptr> d )
<cls> <noptr> rtl get ic version ( <ptr> pcr )
<cls> <noptr> mics mptt opa ( <ptr> m dev <dot> <noptr> index )
<cls> <noptr> gru retarget intr ( <ptr> gts )
<cls> <noptr> hl pci set dma mask ( <ptr> h dev <dot> <noptr> dma mask )
<cls> <noptr> send mouse event ( <ptr> dev <dot> <ptr> input )
<cls> <noptr> q p notify peer local ( <noptr> attach <dot> <noptr> handle )
<cls> <noptr> ds probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mic request d mach ans ( <ptr> m drv )
<cls> <noptr> mei wd ( <ptr> cl dev )
<cls> <noptr> sci f query tc w ( <ptr> ep <dot> <ptr> req )
<cls> <noptr> rts init from cfg ( <ptr> pcr )
<cls> <noptr> options open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> hl c q inc ptr ( <noptr> ptr )
<cls> <noptr> calculate cpu freq ( <ptr> data )
<cls> <noptr> rtl turn on led ( <ptr> pcr )
<cls> <noptr> sgd w iter next ( <ptr> miter )
<cls> <noptr> lis lv d get odr ( <ptr> lis )
<cls> <noptr> v op v dev info open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> l k dtm increment int ( <ptr> counter )
<cls> <noptr> me ime hw isready ( <ptr> dev )
<cls> <noptr> st core init ( <dptr> core data )
<cls> <noptr> d g dispatch as guest ( <ptr> d g )
<cls> <noptr> ibm asm send io message ( <ptr> sp )
<cls> <noptr> lis l vdb configure ( <ptr> lis <dot> <ptr> p )
<cls> <noptr> b h prox set threshold ( <ptr> chip )
<cls> <noptr> pv panic m mio init ( )
<cls> <noptr> sci f setup loopback q p ( <ptr> sci f dev )
<cls> <noptr> me ime intr clear ( <ptr> dev )
<cls> <noptr> mei clt x flow ctrl creds ( <ptr> cl )
<cls> <noptr> vmc i register v sock callback ( <noptr> callback )
<cls> <noptr> v op register driver ( <ptr> driver )
<cls> <noptr> sci fio mmu map ( <ptr> remote dev <dot> <ptr> window )
<cls> <noptr> rts x base turn off led ( <ptr> pcr )
<cls> <noptr> eeprom xx eral ( <ptr> e dev )
<cls> <noptr> sci frm a completion cb ( <ptr> data )
<cls> <noptr> sci f vma open ( <ptr> vma )
<cls> <noptr> go y a set pll profile ( <ptr> h dev <dot> <noptr> freq )
<cls> <noptr> lis lv d joystick disable ( <ptr> lis )
<cls> <noptr> o laps cmp ( <ptr> a <dot> <ptr> b )
<cls> <noptr> gen wq e open files ( <ptr> cd )
<cls> <noptr> gru handle user call os ( <noptr> cb )
<cls> <noptr> sci f fence wait ( <noptr> epd <dot> <noptr> mark )
<cls> <noptr> tif m xx sock power off ( <ptr> sockaddr )
<cls> <noptr> gru wait proc ( <ptr> cb )
<cls> <noptr> me icl notify fop req ( <noptr> fop )
<cls> <noptr> go y a init protection bits ( <ptr> h dev )
<cls> <noptr> prev db guid open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> q preset saved headers ( <ptr> entry )
<cls> <noptr> mic x load ram disk ( <ptr> m dev )
<cls> <noptr> altera j init ( <ptr> a state )
<cls> <noptr> rts x pci send cmd nowait ( <ptr> pcr )
<cls> <noptr> me icl bus dev add ( <ptr> cl dev )
<cls> <noptr> sram probe ( <ptr> pdev )
<cls> <noptr> notify rest of op ( <ptr> cmd )
<cls> <noptr> me ime host isready ( <ptr> dev )
<cls> <noptr> alc or read be ( <ptr> priv <dot> <noptr> addr )
<cls> <noptr> phantom poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> hl device status ( <ptr> h dev )
<cls> <noptr> l k dtm cfi forward proto ( )
<cls> <noptr> sci f peer bus init ( )
<cls> <noptr> mei clt x flow ctrl creds reduce ( <ptr> cl )
<cls> <noptr> pv panic add ( <ptr> device )
<cls> <noptr> me it xe readiness get ( <ptr> dev )
<cls> <noptr> fast rpc channel ctx get ( <ptr> c ctx )
<cls> <ptr> m icio remap ( <ptr> v pdev <dot> <noptr> pa <dot> <noptr> len )
<cls> <noptr> rts x disable asp m ( <ptr> pcr )
<cls> <noptr> pch p hub resume ( <ptr> pdev )
<cls> <noptr> tif m dummy event ( <ptr> sock )
<cls> <noptr> xpc offline heartbeat uv ( )
<cls> <noptr> me ime pg isenabled ( <ptr> dev )
<cls> <noptr> hl mmu swap out ( <ptr> ctx )
<cls> <noptr> sci f peer register device ( <ptr> sci f dev )
<cls> <noptr> rts x pci enable bus int ( <ptr> pcr )
<cls> <noptr> stl l init ( <ptr> ll )
<cls> <noptr> hl irqhandler eq ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> rts x pci enable asp m ( <ptr> pcr )
<cls> <noptr> mic x hw reset ( <ptr> m dev )
<cls> <noptr> isc b patched ( <ptr> h dev <dot> <ptr> job )
<cls> <ptr> mic get available vector ( <ptr> m dev )
<cls> <ptr> vmc i handle arr get handles ( <ptr> array )
<cls> <noptr> hlf war mcp info get ( <ptr> h dev )
<cls> <noptr> sci f int rb h handler ( <ptr> work )
<cls> <ptr> mb dev tom drv ( <ptr> mb dev )
<cls> <noptr> pci endpoint test legacy irq ( <ptr> test )
<cls> <noptr> wait instruction complete ( <ptr> h <dot> <noptr> opc )
<cls> <noptr> cch start ( <ptr> cch )
<cls> <noptr> mei hbm config features ( <ptr> dev )
<cls> <noptr> sci f rb update read ptr ( <ptr> rb )
<cls> <noptr> l k dtm ref count dec and test negative ( )
<cls> <noptr> sci f send r m node msg ( <noptr> node <dot> <noptr> remove node )
<cls> <noptr> pti port activate ( <ptr> port <dot> <ptr> tty )
<cls> <noptr> cb irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> k gdb ts put char ( <noptr> chr )
<cls> <noptr> fixed show ( <ptr> dev <dot> <ptr> a <dot> <ptr> buf )
<cls> <noptr> mic next db ( <ptr> sc dev )
<cls> <noptr> h lvm ctx init ( <ptr> ctx )
<cls> <noptr> pti char open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> get component type ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> h leq inc ptr ( <noptr> ptr )
<cls> <noptr> altera j reset idle ( <ptr> a state )
<cls> <ptr> gru register mmu notifier ( )
<cls> <noptr> vmc i call v sock callback ( <noptr> is host )
<cls> <noptr> me ime pg state ( <ptr> dev )
<cls> <noptr> lis context save ( <ptr> lis )
<cls> <noptr> vm balloon door bell ( <ptr> client data )
<cls> <noptr> rts x usb sg timed out ( <ptr> t )
<cls> <noptr> rts card power off ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> vm balloon register shrink er ( <ptr> b )
<cls> <noptr> rts x pci init ocp ( <ptr> pcr )
<cls> <noptr> curr regs open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> l k dtm ref count inc overflow ( )
<cls> <noptr> hl irqhandler c q ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> go yam m u remove device cpu mappings ( <ptr> h dev )
<cls> <ptr> gru find vma ( <noptr> v addr )
<cls> <noptr> dummy interrupt ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> writer d ( <ptr> client <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sci f node remove ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> hla sid init ( <ptr> h dev )
<cls> <noptr> l k dtm corrupt list add ( )
<cls> <noptr> hl ioctl ( <ptr> file p <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> hl device resume ( <ptr> h dev )
<cls> <noptr> sci frm aep init ( <ptr> ep )
<cls> <noptr> hl info ioctl ( <ptr> h priv <dot> <ptr> data )
<cls> <noptr> b h lux interrupt control ( <ptr> chip <dot> <noptr> lux )
<cls> <noptr> me icl dev ver ( <ptr> cl dev )
<cls> <noptr> gen wq e platform recovery ( <ptr> cd )
<cls> <noptr> me icl all disconnect ( <ptr> dev )
<cls> <noptr> mei component master unbind ( <ptr> dev )
<cls> <noptr> l k dtm user copy heap white list from ( )
<cls> <noptr> rtl b init params ( <ptr> pcr )
<cls> <noptr> b h lux raw to adjusted ( <ptr> chip <dot> <noptr> raw )
<cls> <noptr> mei host client init ( <ptr> dev )
<cls> <noptr> rts x fetch vendor settings ( <ptr> pcr )
<cls> <noptr> gru get g seg statistics ( <noptr> arg )
<cls> <noptr> dur amar c port init ( )
<cls> <noptr> cosm update mic status ( <ptr> c dev )
<cls> <noptr> gen wq e health check stop ( <ptr> cd )
<cls> <noptr> l k dtm ref count sub and test saturated ( )
<cls> <noptr> sci f dev match ( <ptr> d v <dot> <ptr> dr )
<cls> <noptr> kim resume ( <ptr> pdev )
<cls> <noptr> go y a enable m six ( <ptr> h dev )
<cls> <noptr> vmc i data gram send ( <ptr> msg )
<cls> <noptr> rts init from hw ( <ptr> pcr )
<cls> <noptr> h lin thw queue update c i ( <ptr> cs )
<cls> <noptr> go yas winit ( <ptr> h dev )
<cls> <noptr> validate simple test ( <ptr> put str )
<cls> <noptr> v op set ( <ptr> v dev <dot> <noptr> offset <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> l k dtm ref count inc saturated ( )
<cls> <noptr> go y are adpt e ( <ptr> h dev <dot> <noptr> addr )
<cls> <ptr> mei hbm status str ( <noptr> status )
<cls> <noptr> cs parser ( <ptr> h priv <dot> <ptr> job )
<cls> <noptr> ext queue schedule job ( <ptr> job )
<cls> <noptr> hw idle ( <ptr> h dev <dot> <ptr> args )
<cls> <noptr> rtl disable auto blink ( <ptr> pcr )
<cls> <noptr> has quirk instruction length ( <ptr> e dev )
<cls> <noptr> go y a get pci id ( <ptr> h dev )
<cls> <noptr> vm balloon debug show ( <ptr> f <dot> <ptr> offset )
<cls> <noptr> go y a init golden registers ( <ptr> h dev )
<cls> <noptr> rts x pci card exist ( <ptr> pcr )
<cls> <noptr> me it x eintr enable ( <ptr> dev )
<cls> <noptr> vo pid match ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> device early init ( <ptr> h dev )
<cls> <noptr> mic driver init ( <ptr> m drv )
<cls> <noptr> d dcb info show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> xpc process sent ch ctl flags ( <ptr> part )
<cls> <noptr> xpp au v ( <ptr> addr )
<cls> <noptr> lis lv d get axis ( <noptr> axis <dot> <noptr> hw values )
<cls> <noptr> reserve gru resources ( <ptr> gru <dot> <ptr> gts )
<cls> <noptr> get phy shop addr ( <ptr> ctx )
<cls> <noptr> gru get exception detail ( <noptr> arg )
<cls> <noptr> l k dtm ref count dec saturated ( )
<cls> <noptr> rtl enable auto blink ( <ptr> pcr )
<cls> <noptr> xp net dev tx timeout ( <ptr> dev )
<cls> <noptr> go y a set pll ref clk ( <ptr> h dev )
<cls> <noptr> me ime pg unset ( <ptr> dev )
<cls> <ptr> gru get next message ( <ptr> m q d )
<cls> <noptr> mic ops init ( <ptr> m dev )
<cls> <noptr> mei meme csr read ( <ptr> dev )
<cls> <noptr> mic boot param init ( <ptr> m dev )
<cls> <noptr> xsd fec init ( )
<cls> <noptr> xsd fec probe ( <ptr> pdev )
<cls> <noptr> is grup addr ( <noptr> p addr )
<cls> <noptr> hl mmap ( <ptr> filp <dot> <ptr> vma )
<cls> <noptr> mei hbm pg ( <ptr> dev <dot> <noptr> pg cmd )
<cls> <noptr> mic x smp thw init ( <ptr> m dev )
<cls> <noptr> tif m add adapter ( <ptr> f m )
<cls> <noptr> has quirk single word read ( <ptr> e dev )
<cls> <noptr> go y a init tpc q mans ( <ptr> h dev )
<cls> <noptr> xpc nof deliverable payload suv ( <ptr> ch )
<cls> <noptr> gru check context placement ( <ptr> gts )
<cls> <ptr> seq start ( <ptr> file <dot> <ptr> gid )
<cls> <noptr> go y a disable m six ( <ptr> h dev )
<cls> <ptr> mic get dp ( <ptr> v pdev )
<cls> <noptr> xpc connect channel ( <ptr> ch )
<cls> <noptr> sci f send fence mark ( <noptr> epd <dot> <ptr> out mark )
<cls> <noptr> set ot pen ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> b h prox work ( <ptr> work )
<cls> <noptr> gen wq e err result none ( <ptr> dev )
<cls> <noptr> xpc connected call out ( <ptr> ch )
<cls> <noptr> me icl bus init ( )
<cls> <ptr> sc dev tom drv ( <ptr> sc dev )
<cls> <noptr> go yah alt core sight ( <ptr> h dev )
<cls> <noptr> rts x usb card exclusive check ( <ptr> u cr <dot> <noptr> card )
<cls> <noptr> mei hbm hdr ( <ptr> hdr <dot> <noptr> length )
<cls> <noptr> l k dtm do action ( <ptr> crash type )
<cls> <ptr> get lock t gh handle ( <ptr> gru )
<cls> <noptr> ilo probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> m eintr src ( <noptr> h csr )
<cls> <noptr> go y atest cpu queue ( <ptr> h dev )
<cls> <noptr> fifo sz ( <noptr> nr entry )
<cls> <noptr> go yah w queues unlock ( <ptr> h dev )
<cls> <noptr> st tty open ( <ptr> tty )
<cls> <ptr> sci f get local va ( <noptr> off <dot> <ptr> window )
<cls> <ptr> check x pch b interval ( )
<cls> <noptr> vmc i release resource ( <ptr> k ref )
<cls> <noptr> xpc initiate discovery ( <ptr> ignore )
<cls> <noptr> cb resume ( <ptr> pdev )
<cls> <noptr> free running timer show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hdr isvalid ( <noptr> msg hdr )
<cls> <noptr> vm balloon change ( <ptr> b )
<cls> <noptr> stl l wakeup ( <ptr> ll )
<cls> <noptr> sci frm aep can un init ( <ptr> ep )
<cls> <noptr> go y are store phase topology ( <ptr> h dev )
<cls> <noptr> hw rem access break ( <ptr> arg )
<cls> <noptr> me it xe hw config ( <ptr> dev )
<cls> <noptr> l k dtm soft lockup ( )
<cls> <noptr> hl mmu ctx init ( <ptr> ctx )
<cls> <noptr> v op match desc ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> sci f sends cif register ( <ptr> ep <dot> <ptr> window )
<cls> <noptr> mic x send firmware intr ( <ptr> m dev )
<cls> <ptr> at base client dev ( <ptr> at )
<cls> <noptr> rts a init params ( <ptr> pcr )
<cls> <noptr> q com coin cell driver init ( )
<cls> <noptr> rts optimize phy ( <ptr> pcr )
<cls> <noptr> write ( <ptr> client <dot> <noptr> val )
<cls> <noptr> mei hbm cl addr equal ( <ptr> cl <dot> <ptr> cmd )
<cls> <noptr> mei restart ( <ptr> dev )
<cls> <noptr> mei hbm start wait ( <ptr> dev )
<cls> <ptr> mei dev bus get ( <ptr> bus )
<cls> <noptr> sci f register driver ( <ptr> driver )
<cls> <noptr> me ios ver ( <ptr> cl dev )
<cls> <noptr> mei mk hi fix ( <ptr> cl dev )
<cls> <noptr> st tty wakeup ( <ptr> tty )
<cls> <noptr> prev regs open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> hl debug fs add device ( <ptr> h dev )
<cls> <ptr> at get chip data ( <ptr> dev )
<cls> <noptr> k gdb t sun reg thread ( <ptr> ptr )
<cls> <noptr> xsd fec set bypass ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> v op set status ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> mei timer ( <ptr> work )
<cls> <noptr> hl hw queue schedule cs ( <ptr> cs )
<cls> <noptr> me idb gfs active open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> v op virtio copy ( <ptr> v dev <dot> <ptr> copy )
<cls> <noptr> sci f invalidate ep ( <noptr> node )
<cls> <noptr> max power show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> a pds x configure ( <ptr> chip )
<cls> <noptr> go y atest queues ( <ptr> h dev )
<cls> <noptr> v opd popen ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> gets g info ( <ptr> sg <dot> <ptr> dma addr )
<cls> <noptr> altera init ( <ptr> config <dot> <ptr> fw )
<cls> <noptr> sci fun pin pages ( <noptr> pinned pages )
<cls> <noptr> cos msc if work ( <ptr> work )
<cls> <noptr> c port show rev id ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> vmc i process bitmap ( <noptr> data )
<cls> <noptr> rts disable asp m ( <ptr> pcr <dot> <noptr> enable )
<cls> <noptr> isl init client ( <ptr> client )
<cls> <ptr> me ime cl byid ( <ptr> dev <dot> <noptr> clientid )
<cls> <noptr> d dcb mark finished ( <ptr> pd dcb )
<cls> <noptr> l k dtm user copy stack frame to ( )
<cls> <noptr> rtl c dde glitch ( <ptr> pcr )
<cls> <noptr> sci f v writeto ( <noptr> epd <dot> <ptr> addr <dot> <noptr> len <dot> <noptr> r offset <dot> <noptr> flags )
<cls> <noptr> ibm asm fs adds p ( <ptr> sp )
<cls> <noptr> go y a push linux to device ( <ptr> h dev )
<cls> <noptr> me it xe probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> get reset count ( <ptr> h dev <dot> <ptr> args )
<cls> <noptr> rts enable auto blink ( <ptr> pcr )
<cls> <noptr> me id mar ing is allocated ( <ptr> dev )
<cls> <noptr> idt probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sci fcn ctg nt ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> fast rpc get meta size ( <ptr> ctx )
<cls> <noptr> xpc release gru m q irq uv ( <ptr> m q )
<cls> <noptr> get p addr from handle ( <ptr> ctx <dot> <ptr> args <dot> <ptr> p addr )
<cls> <noptr> fast rpc invoke ( <ptr> fl <dot> <ptr> arg p )
<cls> <noptr> v op get status ( <ptr> v dev )
<cls> <noptr> gen wq edel pin ( <ptr> c file <dot> <ptr> m )
<cls> <noptr> h leq fini ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> go y a enable timestamp ( <ptr> h dev )
<cls> <noptr> soft reset cnt show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h lux range show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hl ctx mgr init ( <ptr> mgr )
<cls> <noptr> sci f bind ( <noptr> epd <dot> <noptr> pn )
<cls> <noptr> me it xep m runtime idle ( <ptr> device )
<cls> <noptr> em uls step get ( <ptr> arg )
<cls> <noptr> me icl device probe ( <ptr> dev )
<cls> <noptr> ibm asm unregister panic notifier ( )
<cls> <noptr> gen wq e finish queue ( <ptr> cd )
<cls> <noptr> gts drop ( <ptr> gts )
<cls> <ptr> enclosure find ( <ptr> dev <dot> <ptr> start )
<cls> <noptr> gru load kernel context ( <ptr> bs <dot> <noptr> blade id )
<cls> <noptr> me ime h buf depth ( <ptr> dev )
<cls> <noptr> me icl send connect ( <ptr> cl <dot> <ptr> cb )
<cls> <noptr> stk im start ( <ptr> kim data )
<cls> <noptr> gen wq ecard thread ( <ptr> data )
<cls> <noptr> door bell set ( <ptr> ccb )
<cls> <ptr> q plist find ( <ptr> q plist <dot> <noptr> handle )
<cls> <ptr> me id mar ing ctrl ( <ptr> dev )
<cls> <noptr> b h get corr value ( <ptr> chip )
<cls> <noptr> pch p hub probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> a pds x runtime resume ( <ptr> dev )
<cls> <noptr> vmc i data gram invoke guest handler ( <ptr> d g )
<cls> <noptr> hw queue init ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> queue working time show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> q p wait for ready queue ( <ptr> q pair )
<cls> <noptr> sci fcn ctg n tack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> rts x pci init chip ( <ptr> pcr )
<cls> <noptr> hl hw queue reset ( <ptr> h dev <dot> <noptr> hard reset )
<cls> <noptr> h leq reset ( <ptr> h dev <dot> <ptr> q )
<cls> <ptr> gru find thread state ( <ptr> vma <dot> <noptr> t sid )
<cls> <noptr> rts x pci complete unfinished transfer ( <ptr> pcr )
<cls> <noptr> j timer open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sci fcn ctg nt nack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> hl sysfs init ( <ptr> h dev )
<cls> <noptr> xsd fec parse of ( <ptr> xsd fec )
<cls> <noptr> lis lv dic resume ( <ptr> dev )
<cls> <noptr> get next hop addr ( <noptr> curr pte )
<cls> <noptr> sci fun register window ( <ptr> window )
<cls> <noptr> l k dtm ref count inc not zero saturated ( )
<cls> <noptr> alc or read ( <ptr> priv <dot> <noptr> addr )
<cls> <noptr> mic x intr workarounds ( <ptr> m dev )
<cls> <noptr> vm balloon lock ( <ptr> b <dot> <ptr> ctl )
<cls> <noptr> d dcb mark cleared ( <ptr> pd dcb )
<cls> <noptr> v op handle config change ( <ptr> d <dot> <noptr> offset <dot> <ptr> v pdev )
<cls> <noptr> go y a get fixed properties ( <ptr> h dev )
<cls> <noptr> sci f node q p send ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <ptr> sci f disconnect ep ( <ptr> ep )
<cls> <noptr> cs get ( <ptr> cs )
<cls> <noptr> select de assert ( <ptr> context )
<cls> <noptr> eeprom c x pulse low ( <ptr> eeprom )
<cls> <noptr> go y a set asi c funcs ( <ptr> h dev )
<cls> <noptr> force reset open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> execute location ( <ptr> dst <dot> <noptr> write )
<cls> <noptr> me it x epg state ( <ptr> dev )
<cls> <noptr> tpc clk curr show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vm balloon shrink ers can ( <ptr> shrink er <dot> <ptr> sc )
<cls> <noptr> gru seq show ( <ptr> file <dot> <ptr> data )
<cls> <noptr> rts extra init hw ( <ptr> pcr )
<cls> <noptr> me it xe read ( <ptr> dev <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> ibm asm init one ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> me icl dev enabled ( <ptr> cl dev )
<cls> <noptr> vmc i event dispatch ( <ptr> msg )
<cls> <noptr> go y a init dma protection bits ( <ptr> h dev )
<cls> <noptr> ilo set reset ( <ptr> hw )
<cls> <noptr> gru assign context number ( <ptr> gru )
<cls> <noptr> go y a disable timestamp ( <ptr> h dev )
<cls> <noptr> me idb gfs register ( <ptr> dev <dot> <ptr> name )
<cls> <noptr> mics mpt show ( <ptr> s <dot> <ptr> pos )
<cls> <noptr> rts disable ocp ( <ptr> pcr )
<cls> <noptr> d dcb requ finished ( <ptr> cd <dot> <ptr> req )
<cls> <noptr> clear pending db ( <ptr> hw <dot> <noptr> clr )
<cls> <noptr> mic stepping ( <ptr> c dev <dot> <ptr> buf )
<cls> <noptr> phantom release ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> l k dtm writer o after init ( )
<cls> <noptr> command submission show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> sw rem break ( <ptr> arg )
<cls> <noptr> st int write ( <ptr> stg data <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> a pds x rate avail ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> xpc put fifo entry uv ( <ptr> head <dot> <ptr> last )
<cls> <noptr> mei h buf filled slots ( <ptr> dev )
<cls> <noptr> vm balloon page in frames ( <noptr> page size )
<cls> <noptr> me it xcb enqueue ( <ptr> cb <dot> <ptr> head )
<cls> <noptr> cpu queue init ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> vmc i q pair produce buf ready ( <ptr> q pair )
<cls> <noptr> me it xe readiness set host rdy ( <ptr> dev )
<cls> <noptr> tif m u event ( <ptr> dev <dot> <ptr> env )
<cls> <noptr> st get uart wr room ( <ptr> stg data )
<cls> <noptr> hl cb pool fini ( <ptr> h dev )
<cls> <noptr> alco rpc i init check asp m ( <ptr> priv )
<cls> <noptr> cosm stop ( <ptr> c dev <dot> <noptr> force )
<cls> <noptr> queue fini ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> m eintr clear ( <ptr> dev <dot> <noptr> h csr )
<cls> <noptr> me ime hw ready wait ( <ptr> dev )
<cls> <noptr> h leq init ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> gen wq e bus reset ( <ptr> cd )
<cls> <noptr> seq stop ( <ptr> file <dot> <ptr> data )
<cls> <noptr> l k dtm ref count inc zero ( )
<cls> <noptr> stre g complete ( <ptr> stg data <dot> <noptr> err )
<cls> <noptr> lrucache add file ( <ptr> page )
<cls> <noptr> go y a init cpu ( <ptr> h dev <dot> <noptr> cpu timeout )
<cls> <noptr> alc or mask ms irq s ( <ptr> priv )
<cls> <noptr> xpc activate partition ( <ptr> part )
<cls> <noptr> sci f loop b msg handler ( <ptr> sci f dev <dot> <ptr> q p )
<cls> <noptr> do user copy heap size ( <noptr> to user )
<cls> <noptr> get unlock t gh handle ( <ptr> t gh )
<cls> <noptr> vm balloon compaction init ( <ptr> b )
<cls> <noptr> xpc init m q node ( <noptr> nid )
<cls> <noptr> ilo poll ( <ptr> fp <dot> <ptr> wait )
<cls> <noptr> vmc i interrupt b m ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> me icl bus dev stop ( <ptr> cl dev )
<cls> <noptr> xsd fec cfg axi streams ( <ptr> xsd fec )
<cls> <noptr> c smf gpt probe ( <ptr> pdev )
<cls> <noptr> me it x eintr disable ( <ptr> dev )
<cls> <noptr> rts x pci card detect ( <ptr> work )
<cls> <noptr> d dcb mark appended ( <ptr> pd dcb )
<cls> <noptr> c port poll out ready ( <ptr> dev )
<cls> <noptr> gru drop mmu notifier ( <ptr> gms )
<cls> <noptr> pti tty driver open ( <ptr> tty <dot> <ptr> filp )
<cls> <noptr> show ot pen ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sram reserve regions ( <ptr> sram <dot> <ptr> res )
<cls> <noptr> me ime cl init ( <ptr> m ecl )
<cls> <noptr> max probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> rts x pci card exclusive check ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> mics mpt align high ( <ptr> m dev <dot> <noptr> pa )
<cls> <noptr> gru unload m m tracker ( <ptr> gru <dot> <ptr> gts )
<cls> <noptr> event file open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> l k dtm corrupt stack ( <ptr> stack )
<cls> <noptr> write d ( <ptr> client <dot> <noptr> val )
<cls> <noptr> me icl dev register r xcb ( <ptr> cl dev <dot> <noptr> r xcb )
<cls> <noptr> cosm set shutdown status ( <ptr> c dev <dot> <noptr> shutdown status )
<cls> <noptr> li sdl interrupt ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> hdr is fixed ( <ptr> me ihdr )
<cls> <noptr> me inf cif version ( <ptr> cl <dot> <ptr> ver )
<cls> <noptr> a pds x refresh ath res ( <ptr> chip )
<cls> <noptr> me ime pm runtime idle ( <ptr> device )
<cls> <noptr> gru get config info ( <noptr> arg )
<cls> <noptr> version open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> vmc i host setup notify ( <ptr> context <dot> <noptr> uva )
<cls> <noptr> vmc i get context id ( )
<cls> <noptr> cs timed out ( <ptr> work )
<cls> <noptr> lis lv d misc open ( <ptr> inode <dot> <ptr> file )
<cls> <ptr> mei hbm state str ( <noptr> state )
<cls> <noptr> als lux input data show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> isl set power state ( <ptr> client <dot> <noptr> state )
<cls> <noptr> rts x usb reset resume ( <ptr> int f )
<cls> <noptr> xsd fec set irq ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> xpc activate k threads ( <ptr> ch <dot> <noptr> needed )
<cls> <noptr> hl h priv get ( <ptr> h priv )
<cls> <noptr> me icl dev disable ( <ptr> cl dev )
<cls> <noptr> c port write ar ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> run break point test ( <noptr> ish w break point )
<cls> <ptr> id tee matchid ( <ptr> fw node )
<cls> <noptr> altera export int ( <ptr> key <dot> <noptr> value )
<cls> <noptr> sci f zap m maps ( <noptr> node <dot> <ptr> head )
<cls> <noptr> vmc idispatch d gs ( <noptr> data )
<cls> <noptr> pv panic send event ( <noptr> event )
<cls> <noptr> me it xea liveness req get ( <ptr> dev )
<cls> <noptr> me it xe pending interrupts ( <ptr> dev )
<cls> <noptr> rts x usb resume ( <ptr> int f )
<cls> <noptr> read ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> cosm set crashed ( <ptr> c dev )
<cls> <noptr> mic x get postcode ( <ptr> m dev )
<cls> <noptr> xsd fec disable all clk s ( <ptr> clk s )
<cls> <noptr> me ime hw is resetting ( <ptr> dev )
<cls> <noptr> go y a stop internal queues ( <ptr> h dev )
<cls> <noptr> fifo check recv ( <ptr> hw <dot> <ptr> fifo bar )
<cls> <noptr> a pds x get lux ( <ptr> chip <dot> <noptr> clear <dot> <noptr> ir )
<cls> <noptr> xpc teardown ch structure suv ( <ptr> part )
<cls> <noptr> max update slice ( <ptr> client <dot> <noptr> slice )
<cls> <ptr> dequeue command ( <ptr> sp )
<cls> <noptr> vmc i data gram dispatch ( <noptr> context id <dot> <ptr> d g <dot> <noptr> from guest )
<cls> <noptr> vm balloon debug open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> st send frame ( <noptr> chn lid <dot> <ptr> stg data )
<cls> <noptr> b h get lux rate ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> gru load m m tracker ( <ptr> gru <dot> <ptr> gts )
<cls> <noptr> me it x epg isenabled ( <ptr> dev )
<cls> <noptr> go y a init security ( <ptr> h dev )
<cls> <noptr> me ime count full read slots ( <ptr> dev )
<cls> <noptr> me id mar ing empty slots ( <ptr> dev )
<cls> <noptr> rtl card power on ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> show r dac ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> idt smb write byte ( <ptr> pdev <dot> <ptr> seq )
<cls> <noptr> c bread and dump regs ( <ptr> chip <dot> <noptr> select )
<cls> <noptr> isl get resolution ( <ptr> client )
<cls> <noptr> rts fill driving ( <ptr> pcr <dot> <noptr> voltage )
<cls> <noptr> cch seq show ( <ptr> file <dot> <ptr> data )
<cls> <noptr> eeprom c x cleanup ( <ptr> eeprom )
<cls> <noptr> hw events info ( <ptr> h dev <dot> <noptr> aggregate <dot> <ptr> args )
<cls> <noptr> v op virtio init post ( <ptr> v dev )
<cls> <noptr> do flash read ( <ptr> c file <dot> <ptr> load )
<cls> <noptr> hla sid fini ( <ptr> h dev )
<cls> <noptr> isl set mode ( <ptr> client <dot> <noptr> mode )
<cls> <noptr> a pds x read byte ( <ptr> chip <dot> <noptr> reg <dot> <ptr> data )
<cls> <noptr> rts x pci shutdown ( <ptr> pci dev )
<cls> <noptr> li sdl data ready ( <ptr> lis <dot> <noptr> index )
<cls> <noptr> mic x get boot addr ( <ptr> m dev )
<cls> <noptr> q p unlock ( <ptr> q pair )
<cls> <noptr> rts turn on led ( <ptr> pcr )
<cls> <noptr> xpc disconnect wait ( <noptr> ch number )
<cls> <noptr> d bell index table add ( <ptr> entry )
<cls> <noptr> rts a read phy ( <ptr> pcr <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> l k dtm ref count inc not zero overflow ( )
<cls> <noptr> gen wq e setup pf j timer ( <ptr> cd )
<cls> <noptr> st register ( <ptr> new proto )
<cls> <noptr> os lec adapt ion mode ( <ptr> ec <dot> <noptr> adapt ion mode )
<cls> <noptr> gen wq ep fis r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> me icl irq connect ( <ptr> cl <dot> <ptr> cb <dot> <ptr> c mpl list )
<cls> <noptr> v op dev probe ( <ptr> d )
<cls> <noptr> dram default mapping fini ( <ptr> ctx )
<cls> <noptr> me ime pci suspend ( <ptr> device )
<cls> <noptr> lis lv d set odr ( <ptr> lis <dot> <noptr> rate )
<cls> <noptr> mic ack interrupt ( <ptr> v pdev <dot> <noptr> num )
<cls> <noptr> engines show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> hl ctx mgr fini ( <ptr> h dev <dot> <ptr> mgr )
<cls> <noptr> fifo setup ( <ptr> base addr <dot> <noptr> nr entry )
<cls> <noptr> sci f dev open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sci frm as how ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> go yap ld m init cpu ( <ptr> h dev )
<cls> <noptr> mei hbm m ecl add ( <ptr> dev <dot> <ptr> res )
<cls> <noptr> mic system page mask ( <ptr> m dev )
<cls> <noptr> mic interrupt ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> me it xe is input ready ( <ptr> dev )
<cls> <noptr> mei hbm prop req ( <ptr> dev <dot> <noptr> start idx )
<cls> <noptr> param set axis ( <ptr> val <dot> <ptr> kp )
<cls> <noptr> sci f conn func ( <ptr> ep )
<cls> <noptr> vm balloon send guestid ( <ptr> b )
<cls> <noptr> hw write break ( <ptr> arg )
<cls> <noptr> me it xea liveness get ( <ptr> dev )
<cls> <noptr> mmu show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> l k dtm k probe handler ( <ptr> kp <dot> <ptr> regs )
<cls> <noptr> gru unload context ( <ptr> gts <dot> <noptr> save state )
<cls> <noptr> rts xpm full on ( <ptr> pcr )
<cls> <noptr> run simple test ( <noptr> is get char <dot> <noptr> chr )
<cls> <noptr> gen wq es gl size ( <noptr> numpages )
<cls> <noptr> idt smb write word ( <ptr> pdev <dot> <ptr> seq )
<cls> <noptr> temp sens show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mic sys add rtos mpt ( <ptr> m dev <dot> <noptr> pa )
<cls> <noptr> gru release async resources ( <noptr> han )
<cls> <noptr> gen wq e next d dcb ready ( <ptr> cd )
<cls> <noptr> rts x usb pre reset ( <ptr> int f )
<cls> <noptr> do flash update ( <ptr> c file <dot> <ptr> load )
<cls> <noptr> hl ctx init ( <ptr> h dev <dot> <ptr> ctx <dot> <noptr> is kernel ctx )
<cls> <noptr> check and rewind pc ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> c port show devid ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> list show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> show src clock sel ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> mic x enable interrupts ( <ptr> m dev )
<cls> <noptr> tif me ject ( <ptr> sock )
<cls> <noptr> at write ( <ptr> priv <dot> <noptr> off <dot> <ptr> val <dot> <noptr> count )
<cls> <noptr> log buf show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> mei hbm cl notify ( <ptr> dev <dot> <ptr> cmd )
<cls> <noptr> me id mar ing h buf depth ( <ptr> dev )
<cls> <noptr> prev regs show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> me icl device u event ( <ptr> dev <dot> <ptr> env )
<cls> <noptr> xpc cancel partition de activation request uv ( <ptr> part )
<cls> <noptr> validate firmware response ( <ptr> k img data )
<cls> <noptr> me icl flush queues ( <ptr> cl <dot> <ptr> fp )
<cls> <noptr> me ime probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> b h get lux thresh below ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> d pot read ic ( <ptr> d pot <dot> <noptr> reg )
<cls> <noptr> vmc id bell get priv flags ( <noptr> handle <dot> <ptr> priv flags )
<cls> <noptr> lis lv d power off ( <ptr> lis )
<cls> <noptr> mei hdc p component match ( <ptr> dev <dot> <noptr> sub component <dot> <ptr> data )
<cls> <noptr> v op virtio reset devices ( <ptr> vi )
<cls> <noptr> read rd ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> tif m has msp if ( <ptr> sock )
<cls> <noptr> gru setup tlb irq s ( )
<cls> <noptr> go y a lateinit ( <ptr> h dev )
<cls> <noptr> v op init device ctrl ( <ptr> v dev <dot> <ptr> dev page )
<cls> <noptr> mei irq compl handler ( <ptr> dev <dot> <ptr> c mpl list )
<cls> <noptr> l k dtm user copy stack frame from ( )
<cls> <noptr> gru read gpa ( <ptr> value <dot> <noptr> gpa )
<cls> <noptr> gen wq e read ids ( <ptr> cd )
<cls> <noptr> rts switch output voltage ( <ptr> pcr <dot> <noptr> voltage )
<cls> <noptr> rts x pci suspend ( <ptr> pci dev <dot> <noptr> state )
<cls> <noptr> idt smb read ic block ( <ptr> pdev <dot> <ptr> seq )
<cls> <noptr> desc mems z ( <noptr> nr entry )
<cls> <noptr> a pds x write byte ( <ptr> chip <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> stl l get state ( <ptr> ll )
<cls> <noptr> rts force power down ( <ptr> pcr <dot> <noptr> pm state )
<cls> <noptr> sci ffd flush ( <ptr> f <dot> <noptr> id )
<cls> <noptr> me icl bus notif work ( <ptr> work )
<cls> <noptr> fast rpc req munmap impl ( <ptr> fl <dot> <ptr> req )
<cls> <noptr> hl debug fs add file ( <ptr> h priv )
<cls> <noptr> mic family ( <ptr> c dev <dot> <ptr> buf )
<cls> <noptr> alco run masks dir qs ( <ptr> priv )
<cls> <noptr> q plist remove entry ( <ptr> q plist <dot> <ptr> entry )
<cls> <noptr> byte blas ter write ( <noptr> port <dot> <noptr> data )
<cls> <noptr> tif m device suspend ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> b hps raw to adjusted ( <ptr> chip <dot> <noptr> ps raw )
<cls> <ptr> st get plat device ( <noptr> id )
<cls> <noptr> hlf w test cpu queue ( <ptr> h dev )
<cls> <noptr> put cont catch ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> lis reg ctrl ( <ptr> lis <dot> <noptr> state )
<cls> <noptr> a pds x rate show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ic clk store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vm balloon shrink er count ( <ptr> shrink er <dot> <ptr> sc )
<cls> <noptr> vo popen ( <ptr> inode <dot> <ptr> f )
<cls> <noptr> me icl complete ( <ptr> cl <dot> <ptr> cb )
<cls> <ptr> gru find current gts nolock ( <ptr> v data <dot> <noptr> t sid )
<cls> <noptr> mic x disable interrupts ( <ptr> m dev )
<cls> <noptr> vo preset inform host ( <ptr> dev )
<cls> <noptr> xpc handle activate irq uv ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> hl debug fs add cb ( <ptr> cb )
<cls> <noptr> gen wq e need err masking ( <ptr> cd )
<cls> <noptr> gen wq e stop traps ( <ptr> cd )
<cls> <noptr> fuse ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mic ack interrupt ( <ptr> mb dev <dot> <noptr> num )
<cls> <noptr> rts xms power off card v ( <ptr> pcr )
<cls> <noptr> vm balloon init fs context ( <ptr> fc )
<cls> <noptr> mic setup m six ( <ptr> m dev <dot> <ptr> pdev )
<cls> <noptr> show pci clock sel ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> lis lv d self test ( <ptr> lis <dot> <noptr> results )
<cls> <noptr> log buf open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> me icl dev recv non block ( <ptr> cl dev <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> vmc id bells can notification entries ( <ptr> bitmap )
<cls> <noptr> a pds x force p refresh ( <ptr> chip )
<cls> <noptr> me ime reg read ( <ptr> hw <dot> <noptr> offset )
<cls> <noptr> components show ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sci f drain dma poll ( <ptr> s dev <dot> <ptr> chan )
<cls> <ptr> sci fpp sets g ( <noptr> pa <dot> <noptr> page size <dot> <noptr> page cnt )
<cls> <noptr> rt ssd set sample push timings d ( <ptr> pcr )
<cls> <noptr> me it xe count full read slots ( <ptr> dev )
<cls> <noptr> l k dtm user copy kernel ds ( )
<cls> <noptr> b h probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> vm balloon stats gen add ( <ptr> b <dot> <noptr> stat <dot> <noptr> val )
<cls> <noptr> a pds x write word ( <ptr> chip <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> sci f get port ( <noptr> start <dot> <noptr> end )
<cls> <noptr> xpc process connect ( <ptr> ch <dot> <ptr> irq flags )
<cls> <noptr> vm balloon page order ( <noptr> page size )
<cls> <noptr> hlp c ibar sun map ( <ptr> h dev )
<cls> <noptr> get pte ( <ptr> ctx <dot> <noptr> hop addr )
<cls> <noptr> os lec hpf tx ( <ptr> ec <dot> <noptr> tx )
<cls> <noptr> cb sgd w iter read next block ( <ptr> miter )
<cls> <noptr> sci f recv reg ack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> xpc initiate disconnect ( <noptr> ch number )
<cls> <noptr> me it xe readiness clear ( <ptr> dev )
<cls> <noptr> als set power state ( <ptr> client <dot> <noptr> onoff )
<cls> <noptr> mei hbm cl disconnect rsp ( <ptr> dev <dot> <ptr> cl )
<cls> <noptr> hlp m ops suspend ( <ptr> dev )
<cls> <noptr> ilo map device ( <ptr> pdev <dot> <ptr> hw )
<cls> <noptr> me it xea liveness set sync ( <ptr> dev <dot> <noptr> req )
<cls> <noptr> me it xe hw start ( <ptr> dev )
<cls> <noptr> h lcs rollback all ( <ptr> h dev )
<cls> <noptr> me inf c ( <ptr> cl dev )
<cls> <noptr> eeprom c x read b ( <ptr> eeprom <dot> <noptr> byte <dot> <ptr> data )
<cls> <noptr> vm balloon deflate ( <ptr> b <dot> <noptr> n frames <dot> <noptr> coordinated )
<cls> <noptr> hl cb mgr fini ( <ptr> h dev <dot> <ptr> mgr )
<cls> <noptr> me icl read start ( <ptr> cl <dot> <noptr> length <dot> <ptr> fp )
<cls> <noptr> gen wq e setup v f j timer ( <ptr> cd )
<cls> <noptr> gen wq e device initialized ( <ptr> cd )
<cls> <noptr> os lec update ( <ptr> ec <dot> <noptr> tx <dot> <noptr> r x )
<cls> <noptr> mic x sends box intr ( <ptr> m w <dot> <noptr> door bell )
<cls> <noptr> mei hbm cl notify req ( <ptr> dev <dot> <ptr> cl <dot> <noptr> start )
<cls> <noptr> rts x pci send cmd ( <ptr> pcr <dot> <noptr> timeout )
<cls> <noptr> show eeprom ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> set eeprom ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> info open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> xpc process disconnect ( <ptr> ch <dot> <ptr> irq flags )
<cls> <noptr> pci endpoint test read l ( <ptr> test <dot> <noptr> offset )
<cls> <noptr> hl isvisible ( <ptr> data <dot> <noptr> type <dot> <noptr> attr <dot> <noptr> channel )
<cls> <noptr> curr db guid show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> rts x base card power on ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> vm balloon stats opin c ( <ptr> b <dot> <noptr> op <dot> <noptr> type )
<cls> <noptr> hl set max power ( <ptr> h dev <dot> <noptr> value )
<cls> <noptr> sci f disconnect node ( <noptr> nodeid <dot> <noptr> mgmt initiated )
<cls> <noptr> a pds x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> get components lot ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vm balloon stats gen inc ( <ptr> b <dot> <noptr> stat )
<cls> <noptr> altera set dr stop ( <ptr> js <dot> <noptr> state )
<cls> <noptr> me ime cl add ( <ptr> dev <dot> <ptr> m ecl )
<cls> <noptr> cb suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> rts x pci idle work ( <ptr> work )
<cls> <noptr> lms adapt bg ( <ptr> ec <dot> <noptr> clean <dot> <noptr> shift )
<cls> <noptr> phantom suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> xp restrict mem protect uv ( <noptr> phys addr <dot> <noptr> size )
<cls> <noptr> sci f recv mark resp ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> ibm asm fs fill super ( <ptr> sb <dot> <ptr> fc )
<cls> <noptr> mei hbm cl flow control req ( <ptr> dev <dot> <ptr> cl )
<cls> <noptr> eeprom xx write word ( <ptr> e dev <dot> <ptr> buf <dot> <noptr> off )
<cls> <noptr> sci f fence mark ( <noptr> epd <dot> <ptr> mark )
<cls> <noptr> xpc send ch ctl close reply uv ( <ptr> ch <dot> <ptr> irq flags )
<cls> <noptr> mic db to irq ( <ptr> m drv <dot> <noptr> db )
<cls> <noptr> uboot ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> tsl get adc value ( <ptr> client <dot> <noptr> cmd )
<cls> <noptr> tsl show lux input ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> compass calibration store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> go y a print raz wi info ( <ptr> h dev )
<cls> <noptr> altera set ir stop ( <ptr> js <dot> <noptr> state )
<cls> <noptr> sci f recv sig resp ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> rts x comm set asp m ( <ptr> pcr <dot> <noptr> enable )
<cls> <noptr> me ime fw status ( <ptr> dev <dot> <ptr> fw status )
<cls> <noptr> gen wq ere set interrupt capability ( <ptr> cd )
<cls> <noptr> hl pci probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> mic device init ( <ptr> m dev <dot> <ptr> pdev )
<cls> <noptr> compass heading data show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> me it xe readiness wait ( <ptr> dev )
<cls> <noptr> rts x base switch output voltage ( <ptr> pcr <dot> <noptr> voltage )
<cls> <ptr> vmc i ctx get ( <noptr> cid )
<cls> <noptr> hbm ver drv show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> gru invalidate range end ( <ptr> mn <dot> <ptr> range )
<cls> <noptr> tif m xx toggle sock power ( <ptr> sockaddr )
<cls> <noptr> mei hbm cl connect req ( <ptr> dev <dot> <ptr> cl )
<cls> <noptr> sci f fence mark cb ( <ptr> arg )
<cls> <noptr> pci endpoint test copy ( <ptr> test <dot> <noptr> size )
<cls> <noptr> pch p hub read serial rom val ( <ptr> chip <dot> <noptr> offset address <dot> <ptr> data )
<cls> <noptr> v op poll ( <ptr> f <dot> <ptr> wait )
<cls> <noptr> me it xef w status ( <ptr> dev <dot> <ptr> fw status )
<cls> <noptr> rts a card power on ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> mics mpt open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> hl hw queue add ptr ( <noptr> ptr <dot> <noptr> val )
<cls> <noptr> mic x is fw ready ( <ptr> m dev )
<cls> <noptr> run hw break test ( <noptr> is write test )
<cls> <noptr> me id mar ing read ( <ptr> dev <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> tsl set power state ( <ptr> client <dot> <noptr> state )
<cls> <noptr> sci ffd open ( <ptr> inode <dot> <ptr> f )
<cls> <noptr> sci f isset reg cache ( <noptr> flags )
<cls> <noptr> get component fault ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sci f insert window ( <ptr> window <dot> <ptr> head )
<cls> <noptr> phantom isr ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> xpc handle notify irq uv ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> sci f recv reg ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> pci endpoint test ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> rts x pci start run ( <ptr> pcr )
<cls> <noptr> xpc get r svd page pa ( <noptr> nas id )
<cls> <noptr> vmc i host poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> eeprom c x write ( <ptr> eeprom <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> b h prox abs thres show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> xsd fec set turbo ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> gen wq e health check cond ( <ptr> cd <dot> <ptr> g fir )
<cls> <noptr> max len show ( <ptr> dev <dot> <ptr> a <dot> <ptr> buf )
<cls> <noptr> sci f fence mark ( <noptr> epd <dot> <noptr> flags <dot> <ptr> mark )
<cls> <noptr> rts x pci card power on ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> mic stop ( <ptr> c dev <dot> <noptr> force )
<cls> <noptr> xsd fec get stats ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> gen wq ef async ( <noptr> fd <dot> <ptr> filp <dot> <noptr> mode )
<cls> <noptr> hl get max power ( <ptr> h dev )
<cls> <noptr> v op v ring h iov consumed ( <ptr> iov )
<cls> <noptr> sgd w iter read buffer ( <ptr> miter )
<cls> <noptr> go y a patch cb ( <ptr> h dev <dot> <ptr> parser )
<cls> <noptr> a pds x set a rate ( <ptr> chip <dot> <noptr> rate )
<cls> <noptr> mei hbm fw disconnect req ( <ptr> dev <dot> <ptr> disconnect req )
<cls> <noptr> me icl irq read ( <ptr> cl <dot> <ptr> cb <dot> <ptr> c mpl list )
<cls> <noptr> int queue init ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> vmc i handle arr remove entry ( <ptr> array <dot> <noptr> entry handle )
<cls> <noptr> q p host map queues ( <ptr> produce q <dot> <ptr> consume q )
<cls> <noptr> user ptr show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> fw ver show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> me icl write ( <ptr> cl <dot> <ptr> cb )
<cls> <ptr> xpc get fifo entry uv ( <ptr> head )
<cls> <noptr> mic send intr ( <ptr> v pdev <dot> <noptr> db )
<cls> <noptr> go y a push uboot to device ( <ptr> h dev )
<cls> <noptr> hl debug fs add cs ( <ptr> cs )
<cls> <noptr> setup d dcb queue ( <ptr> cd <dot> <ptr> queue )
<cls> <noptr> sci f intr handler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> list open ( <ptr> inode <dot> <ptr> file )
<cls> <ptr> enclosure component findbyname ( <ptr> e dev <dot> <ptr> name )
<cls> <noptr> gru intr m blade ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> sram reserve cmp ( <ptr> priv <dot> <ptr> a <dot> <ptr> b )
<cls> <noptr> vmc i guest cid update ( <noptr> subid <dot> <ptr> event data <dot> <ptr> client data )
<cls> <noptr> show baud rate ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sci f sends cif unregister ( <ptr> ep <dot> <ptr> window )
<cls> <noptr> pti tty write room ( <ptr> tty )
<cls> <noptr> gen wq e read l ( <ptr> cd <dot> <noptr> byte offs )
<cls> <noptr> hmc probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sci f cleanup rma for zombies ( <ptr> ep )
<cls> <noptr> cosm shutdown status int ( <ptr> c dev <dot> <noptr> shutdown status )
<cls> <noptr> h lcs wait ioctl ( <ptr> h priv <dot> <ptr> data )
<cls> <noptr> st int enqueue ( <ptr> stg data <dot> <ptr> skb )
<cls> <noptr> vmc iis context owner ( <noptr> context id <dot> <noptr> uid )
<cls> <ptr> hl ctx get fence ( <ptr> ctx <dot> <noptr> seq )
<cls> <noptr> d pot write ( <ptr> d pot <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> fast rpc cb probe ( <ptr> pdev )
<cls> <noptr> me icl device match ( <ptr> dev <dot> <ptr> drv )
<cls> <noptr> clear val ist locked ( <ptr> h dev <dot> <ptr> val ist )
<cls> <noptr> set in call db ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> me icl conn status to errno ( <noptr> status )
<cls> <noptr> run nmi sleep test ( <noptr> nmi sleep )
<cls> <noptr> mic send pp intr ( <noptr> db <dot> <ptr> m w )
<cls> <noptr> me it xe pci resume ( <ptr> device )
<cls> <noptr> gru abort ( <noptr> ret <dot> <ptr> cb <dot> <ptr> str )
<cls> <noptr> b h prox range show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hl pci init ( <ptr> h dev <dot> <noptr> dma mask )
<cls> <noptr> gen wq e ffdc buff size ( <ptr> cd <dot> <noptr> uid )
<cls> <noptr> lis ic read ( <ptr> lis <dot> <noptr> reg <dot> <ptr> v )
<cls> <noptr> sgd w iter get next block ( <ptr> miter <dot> <dptr> ptr )
<cls> <noptr> sci f poll fd ( <ptr> f <dot> <ptr> wait <dot> <ptr> ep )
<cls> <noptr> q p wakeup cb ( <ptr> client data )
<cls> <noptr> gen wq e setup service layer ( <ptr> cd )
<cls> <noptr> d pot read rd ( <ptr> d pot <dot> <noptr> reg )
<cls> <noptr> hl mem ioctl ( <ptr> h priv <dot> <ptr> data )
<cls> <noptr> eeprom update client ( <ptr> client <dot> <noptr> slice )
<cls> <noptr> mic to dma addr ( <ptr> m dev <dot> <noptr> mic addr )
<cls> <noptr> go y at pc stall ( <ptr> h dev )
<cls> <noptr> go y a print mmu error info ( <ptr> h dev )
<cls> <noptr> idt eeprom read ( <ptr> pdev <dot> <noptr> mem addr <dot> <noptr> len <dot> <ptr> buf )
<cls> <ptr> tif m media type name ( <noptr> type <dot> <noptr> nt )
<cls> <noptr> rts x pci card power off ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> v op virtio config change ( <ptr> v dev <dot> <ptr> arg p )
<cls> <noptr> go yam m u clear pg trange ( <ptr> h dev )
<cls> <noptr> go y a write pte ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> xpc handle notify m q msg uv ( <ptr> part <dot> <ptr> msg )
<cls> <noptr> io unmap remote ( <ptr> virt <dot> <noptr> size <dot> <ptr> work )
<cls> <noptr> got break ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> b hps adjusted to raw ( <ptr> chip <dot> <noptr> ps )
<cls> <noptr> lis ic runtime suspend ( <ptr> dev )
<cls> <noptr> mbus u event ( <ptr> d v <dot> <ptr> env )
<cls> <noptr> me it xe irq thread handler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> mic msi irq info open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sci f setup intr wq ( <ptr> sci f dev )
<cls> <noptr> gen wq e err slot reset ( <ptr> pci dev )
<cls> <noptr> vmc i resource find id ( <noptr> context id <dot> <noptr> resource type )
<cls> <noptr> go y asoft reset lateinit ( <ptr> h dev )
<cls> <noptr> gen wq e enqueued dcb ( <ptr> cd <dot> <ptr> req <dot> <noptr> f flags )
<cls> <noptr> me ime pg legacy intr ( <ptr> dev )
<cls> <noptr> cs get unless zero ( <ptr> cs )
<cls> <noptr> event available ( <ptr> b <dot> <ptr> r )
<cls> <noptr> gen wq ev fis r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> g rut gh flush init ( <ptr> gru )
<cls> <noptr> vmc i q pair consume buf ready ( <ptr> q pair )
<cls> <noptr> ibm asm exec command ( <ptr> sp <dot> <ptr> cmd )
<cls> <noptr> sci f async dma ( <ptr> s dev <dot> <ptr> chan )
<cls> <noptr> mic map ( <ptr> m dev <dot> <noptr> dma addr <dot> <noptr> size )
<cls> <noptr> gen wq e add mapping ( <ptr> c file <dot> <ptr> dma map )
<cls> <noptr> tif m xx eject ( <ptr> f m <dot> <ptr> sock )
<cls> <noptr> fast rpc put args ( <ptr> ctx <dot> <noptr> kernel )
<cls> <noptr> go yap b set block ( <ptr> h dev <dot> <noptr> base )
<cls> <noptr> get component active ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> als sensing range show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hl debug fs open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> mic send intr ( <ptr> sc dev <dot> <noptr> db )
<cls> <noptr> d dcb requ collect debug data ( <ptr> req )
<cls> <noptr> mei medic read ( <ptr> dev )
<cls> <noptr> me ime unset pm domain ( <ptr> dev )
<cls> <noptr> sci f zap m maps ( <ptr> ep )
<cls> <noptr> tif m dev match ( <ptr> sock <dot> <ptr> id )
<cls> <noptr> curr db guid open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> vm balloon mark page online ( <ptr> page <dot> <noptr> page size )
<cls> <noptr> dev state show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> rts x pci card pull ctl enable ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> gen wq e read appid ( <ptr> cd <dot> <ptr> app name <dot> <noptr> len )
<cls> <ptr> cosm find c dev byid ( <noptr> id )
<cls> <noptr> sci f mmu notifier invalidate range start ( <ptr> mn <dot> <ptr> range )
<cls> <noptr> sci f fix u paper base ( <ptr> dev <dot> <ptr> window )
<cls> <noptr> vmc i ctx check signal notify ( <ptr> context )
<cls> <noptr> mei irq discard msg ( <ptr> dev <dot> <ptr> hdr )
<cls> <noptr> mei hbm cl notify start res ( <ptr> dev <dot> <ptr> cl <dot> <ptr> cmd )
<cls> <noptr> ibm asm send os state ( <ptr> sp <dot> <noptr> os state )
<cls> <noptr> phantom probe ( <ptr> pdev <dot> <ptr> pci id )
<cls> <noptr> phantom open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> lis lv d sysfs power on ( <ptr> lis )
<cls> <noptr> c port read dr ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> eeprom c x read ( <ptr> eeprom <dot> <noptr> word <dot> <ptr> data )
<cls> <noptr> vmc i q p broker detach ( <noptr> handle <dot> <ptr> context )
<cls> <noptr> lis lv d joystick open ( <ptr> input )
<cls> <noptr> l k dtm unset sme p ( )
<cls> <noptr> tif m xx has msp if ( <ptr> f m <dot> <ptr> sock )
<cls> <noptr> gen wq e init debug fs ( <ptr> cd )
<cls> <noptr> c smf gpt read ( <ptr> timer <dot> <noptr> reg )
<cls> <noptr> altera goto j state ( <ptr> a state <dot> <noptr> state )
<cls> <noptr> fifo dequeue ( <ptr> hw <dot> <ptr> fifo bar <dot> <ptr> entry )
<cls> <noptr> hl get power state ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <ptr> me icl read cb ( <ptr> cl <dot> <ptr> fp )
<cls> <noptr> queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> sci f recv un reg ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> sci f send fence signal wait ( <ptr> ep <dot> <ptr> fence req )
<cls> <noptr> go yam m u invalidate cache ( <ptr> h dev <dot> <noptr> is hard <dot> <noptr> flags )
<cls> <noptr> fast rpc get args ( <noptr> kernel <dot> <ptr> ctx )
<cls> <noptr> sci f peer add device ( <ptr> sci f dev )
<cls> <noptr> go yah alt engines ( <ptr> h dev <dot> <noptr> hard reset )
<cls> <noptr> lis lv drate show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> me it xe irq quick handler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> me icl send disconnect ( <ptr> cl <dot> <ptr> cb )
<cls> <noptr> pti console setup ( <ptr> c <dot> <ptr> opts )
<cls> <noptr> cbf ini ( <ptr> h dev <dot> <ptr> cb )
<cls> <noptr> gru unlock async resource ( <noptr> han )
<cls> <noptr> go yam m u add mappings for device cpu ( <ptr> h dev )
<cls> <noptr> send ll cmd ( <ptr> st data <dot> <noptr> cmd )
<cls> <noptr> go yam m u set dram default page ( <ptr> h dev )
<cls> <noptr> me icl bus dev init ( <ptr> bus <dot> <ptr> m ecl )
<cls> <noptr> vmc i handle arr remove tail ( <ptr> array )
<cls> <ptr> m icio remap ( <ptr> sc dev <dot> <noptr> pa <dot> <noptr> len )
<cls> <noptr> gen wq edel file ( <ptr> cd <dot> <ptr> c file )
<cls> <noptr> go y a add device attr ( <ptr> h dev <dot> <ptr> dev attr grp )
<cls> <noptr> sci f prep remote window ( <ptr> ep <dot> <ptr> window )
<cls> <noptr> me ime pg intr ( <ptr> dev <dot> <noptr> intr source )
<cls> <noptr> vms how ( <ptr> s <dot> <ptr> data )
<cls> <noptr> v op driver probe ( <ptr> v pdev )
<cls> <noptr> mei metr c status ( <ptr> dev <dot> <ptr> trc )
<cls> <noptr> hl device set frequency ( <ptr> h dev <dot> <noptr> freq )
<cls> <noptr> xpc nof fifo entries uv ( <ptr> head )
<cls> <noptr> skip change remote baud ( <dptr> ptr <dot> <ptr> len )
<cls> <noptr> go yam m est all ( <ptr> h dev )
<cls> <noptr> mbus id match ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> gen wq e unmap pages ( <ptr> cd <dot> <ptr> dma list <dot> <noptr> numpages )
<cls> <noptr> break helper ( <ptr> b ptype <dot> <ptr> arg <dot> <noptr> v addr )
<cls> <noptr> hl get temperature ( <ptr> h dev <dot> <noptr> sensor index <dot> <noptr> attr )
<cls> <noptr> vmc i ctx pending data grams ( <noptr> cid <dot> <ptr> pending )
<cls> <noptr> db gui dns how ( <ptr> s <dot> <ptr> regs <dot> <noptr> entries )
<cls> <noptr> ids how ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> gen wq e inform and stop processes ( <ptr> cd )
<cls> <noptr> h lcs ioctl ( <ptr> h priv <dot> <ptr> data )
<cls> <noptr> kim st list protocols ( <ptr> stg data <dot> <ptr> buf )
<cls> <noptr> ibm asm event reader register ( <ptr> sp <dot> <ptr> reader )
<cls> <noptr> d pot write d ( <ptr> d pot <dot> <noptr> val )
<cls> <noptr> e mul reset ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> go y a config etf ( <ptr> h dev <dot> <ptr> params )
<cls> <noptr> me icl irq disconnect ( <ptr> cl <dot> <ptr> cb <dot> <ptr> c mpl list )
<cls> <noptr> xpc deactivate partition ( <noptr> line <dot> <ptr> part <dot> <noptr> reason )
<cls> <noptr> sci f node add nack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> me ime host set ready ( <ptr> dev )
<cls> <noptr> pch p hub suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> me idb gfs dev state open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> go y a update eq c i ( <ptr> h dev <dot> <noptr> val )
<cls> <noptr> sgd w iter write slow ( <ptr> miter <dot> <noptr> data )
<cls> <noptr> xsd fec set default config ( <ptr> xsd fec )
<cls> <noptr> rts card power on ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> gru user copy handle ( <dptr> dp <dot> <ptr> s )
<cls> <noptr> get threadid continue ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> curr bitstream show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vmc i ctx add notification ( <noptr> context id <dot> <noptr> remote cid )
<cls> <noptr> mei h csr write ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> sci f dev show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> fast rpc get payload size ( <ptr> ctx <dot> <noptr> meta len )
<cls> <noptr> me it xe sec reg read silent ( <ptr> hw <dot> <noptr> offset )
<cls> <noptr> rts x usb resume child ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> compass command ( <ptr> c <dot> <noptr> cmd )
<cls> <noptr> dur amar c port cd get ( <ptr> dev )
<cls> <noptr> rts x usb get status with bulk ( <ptr> u cr <dot> <ptr> status )
<cls> <noptr> gen wq e init debug data ( <ptr> cd <dot> <ptr> d )
<cls> <noptr> c smf gpt write ( <ptr> timer <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> device status info ( <ptr> h dev <dot> <ptr> args )
<cls> <noptr> c port read ar ( <ptr> dev <dot> <ptr> addr )
<cls> <noptr> mei hbm dispatch ( <ptr> dev <dot> <ptr> hdr )
<cls> <noptr> mei hbm cl disconnect res ( <ptr> dev <dot> <ptr> cl <dot> <ptr> cmd )
<cls> <noptr> c port write flash data ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> mei device init ( <ptr> dev <dot> <ptr> device <dot> <ptr> hw ops )
<cls> <noptr> eeprom c x read bits ( <ptr> eeprom <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> enclosure for each device ( <ptr> ptr <dot> <ptr> ptr <dot> <ptr> data )
<cls> <noptr> gru reserve cb resources ( <ptr> gru <dot> <noptr> c bra u count <dot> <ptr> cb map )
<cls> <noptr> queue working time open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> alco rpc i probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> statistics show ( <ptr> s <dot> <ptr> p )
<cls> <noptr> xsd fec get turbo ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> b h lux results how ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> go y a init tpc protection bits ( <ptr> h dev )
<cls> <noptr> hl info ioctl control ( <ptr> h priv <dot> <ptr> data )
<cls> <noptr> gen wq e pin mem ( <ptr> c file <dot> <ptr> m )
<cls> <noptr> sci f display all windows ( <ptr> head <dot> <ptr> s )
<cls> <noptr> sci f recv wait resp ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> me it xe input door bell set ( <ptr> hw )
<cls> <noptr> sci f insert tc w ( <ptr> window <dot> <ptr> head )
<cls> <noptr> idt smb write block ( <ptr> pdev <dot> <ptr> seq )
<cls> <noptr> mic x reads pad ( <ptr> m dev <dot> <noptr> idx )
<cls> <noptr> cmdline show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> gen wq e ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> firmware store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> j timer show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> do executed dcb ( <ptr> c file <dot> <noptr> arg <dot> <noptr> raw )
<cls> <noptr> rtl conv clk and div n ( <noptr> input <dot> <noptr> dir )
<cls> <noptr> xsd fec poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> rts xpc iis r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> mei hbm write message ( <ptr> dev <dot> <ptr> hdr <dot> <ptr> data )
<cls> <noptr> show cpu clock ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <ptr> gen wq e dev node ( <ptr> dev <dot> <ptr> mode )
<cls> <noptr> hl r reg ( <ptr> h dev <dot> <noptr> reg )
<cls> <noptr> spc a write ic ( <ptr> gsp ca dev <dot> <noptr> val eur <dot> <noptr> reg )
<cls> <noptr> dss how ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> h lis device va ( <ptr> h dev <dot> <noptr> addr )
<cls> <noptr> gen wq e flash read back fails ( <ptr> cd )
<cls> <noptr> pti tty install ( <ptr> driver <dot> <ptr> tty )
<cls> <noptr> mcs statistics show ( <ptr> s <dot> <ptr> p )
<cls> <noptr> sci f msg param check ( <noptr> epd <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> hl device disabled or in reset ( <ptr> h dev )
<cls> <noptr> hl debug fs write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> f pos )
<cls> <noptr> mic x dma filter ( <ptr> chan <dot> <ptr> param )
<cls> <noptr> gen wq e health thread ( <ptr> data )
<cls> <noptr> go y aar mcp info get ( <ptr> h dev )
<cls> <noptr> gru intr ( <noptr> chip let <dot> <noptr> blade )
<cls> <noptr> go y a init tpc cmd q ( <ptr> h dev <dot> <noptr> tpc id )
<cls> <noptr> gen wq e kill f async ( <ptr> cd <dot> <noptr> sig )
<cls> <noptr> vmc i handle arr has entry ( <ptr> array <dot> <noptr> entry handle )
<cls> <noptr> m eintr disable ( <ptr> dev <dot> <noptr> h csr )
<cls> <noptr> gru copy handle ( <ptr> d <dot> <ptr> s )
<cls> <noptr> family show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> lis lv d self test show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> go y a parse cb mmu ( <ptr> h dev <dot> <ptr> parser )
<cls> <noptr> mpt display ioc capabilities ( <ptr> ioc )
<cls> <noptr> xsd fec reg write ( <ptr> xsd fec <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> command buffers show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> b h set lux thresh ( <ptr> chip <dot> <ptr> target <dot> <ptr> buf )
<cls> <noptr> b h prox results how ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> at fw to chip ( <ptr> dev <dot> <ptr> chip )
<cls> <noptr> hl ioctl control ( <ptr> file p <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> sci f drain d main tr ( <ptr> s dev <dot> <ptr> chan )
<cls> <noptr> rts x base card power off ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> rts x usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> sci ffd ioctl ( <ptr> f <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> hl device set debug mode ( <ptr> h dev <dot> <noptr> enable )
<cls> <noptr> arm cp kernel ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h lux update thresholds ( <ptr> chip <dot> <noptr> threshold hi <dot> <noptr> threshold lo )
<cls> <noptr> xpc notify sender sof disconnect uv ( <ptr> ch )
<cls> <noptr> l k dtm panic ( )
<cls> <noptr> vm balloon debug fs init ( <ptr> b )
<cls> <noptr> a pds x lux range show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mod alias show ( <ptr> dev <dot> <ptr> a <dot> <ptr> buf )
<cls> <noptr> me it xe h buf empty slots ( <ptr> dev )
<cls> <noptr> me ime hw reset ( <ptr> dev <dot> <noptr> intr enable )
<cls> <noptr> isl show power state ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ctrl set ( <noptr> ls z <dot> <noptr> idx mask <dot> <noptr> desc lim )
<cls> <noptr> l k dtm debug f sentry ( <ptr> f <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> off )
<cls> <noptr> eeprom detect ( <ptr> client <dot> <ptr> info )
<cls> <noptr> mei hbm fw add cl req ( <ptr> dev <dot> <ptr> req )
<cls> <noptr> mic thread fn ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> ibm asm init remote input dev ( <ptr> sp )
<cls> <noptr> mic unmap ( <ptr> m dev <dot> <noptr> mic addr <dot> <noptr> size )
<cls> <noptr> ilo pkt recv ( <ptr> hw <dot> <ptr> ccb )
<cls> <noptr> pci endpoint test irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> pre fetch data ( <ptr> p <dot> <noptr> num <dot> <noptr> stride )
<cls> <noptr> sci f dec pinned vm lock ( <ptr> m m <dot> <noptr> nr pages )
<cls> <noptr> rts xsd power off card v ( <ptr> pcr )
<cls> <noptr> hlf w push fw to device ( <ptr> h dev <dot> <ptr> fw name <dot> <ptr> dst )
<cls> <noptr> store pch mac ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vmc i ctx q p exists ( <ptr> context <dot> <noptr> handle )
<cls> <noptr> li sdl interrupt handle click ( <ptr> lis )
<cls> <noptr> hl info ioctl ( <ptr> h priv <dot> <ptr> data <dot> <ptr> dev )
<cls> <noptr> idt csr write ( <ptr> pdev <dot> <noptr> csr addr <dot> <noptr> data )
<cls> <noptr> fast rpc dma buf det atch ( <ptr> dma buf <dot> <ptr> attachment )
<cls> <noptr> mei set dev state ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> xsd fec ecc isr enable ( <ptr> xsd fec <dot> <noptr> enable )
<cls> <noptr> xpc disconnect call out ( <ptr> ch <dot> <noptr> reason )
<cls> <noptr> me icl send ( <ptr> cl <dot> <ptr> buf <dot> <noptr> length <dot> <noptr> mode )
<cls> <noptr> a pds x lux to threshold ( <ptr> chip <dot> <noptr> lux )
<cls> <noptr> m me clk curr show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> go y aun mask irq arr ( <ptr> h dev <dot> <ptr> irq arr <dot> <noptr> irq arrsize )
<cls> <noptr> mic msi irq info show ( <ptr> s <dot> <ptr> pos )
<cls> <noptr> mic create card debug dir ( <ptr> m drv )
<cls> <noptr> info show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> map device va ( <ptr> ctx <dot> <ptr> args <dot> <ptr> device addr )
<cls> <noptr> mei hdc p enable authentic ation ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> mei hbm add cl resp ( <ptr> dev <dot> <noptr> addr <dot> <noptr> status )
<cls> <noptr> q p init queue mutex ( <ptr> produce q <dot> <ptr> consume q )
<cls> <noptr> sci fmap window ( <ptr> remote dev <dot> <ptr> window )
<cls> <noptr> xsd fec isactive ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> gen wq e pci fundamental reset ( <ptr> pci dev )
<cls> <noptr> sci f recv sig local ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> sci f recv sig remote ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> go y a config b mon ( <ptr> h dev <dot> <ptr> params )
<cls> <noptr> rtl card power off ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> tsl show operating mode ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> rts x set ltr latency ( <ptr> pcr <dot> <noptr> latency )
<cls> <noptr> go yah w fini ( <ptr> h dev <dot> <noptr> hard reset )
<cls> <noptr> eeprom xx write ( <ptr> priv <dot> <noptr> off <dot> <ptr> val <dot> <noptr> count )
<cls> <noptr> mic x hw intr init ( <ptr> m dev )
<cls> <noptr> mmu write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> f pos )
<cls> <noptr> pci endpoint test read ( <ptr> test <dot> <noptr> size )
<cls> <noptr> xpc save remote msg queue pau v ( <ptr> ch <dot> <noptr> gru m q desc gpa )
<cls> <noptr> xsd fec translate axis width cfg val ( <noptr> axis width cfg )
<cls> <noptr> mei ioctl connect client ( <ptr> file <dot> <ptr> data )
<cls> <noptr> me ime pg enter sync ( <ptr> dev )
<cls> <ptr> fast rpc map dma buf ( <ptr> attachment <dot> <noptr> dir )
<cls> <noptr> alter await msecs ( <ptr> a state <dot> <noptr> micro seconds <dot> <noptr> wait state )
<cls> <noptr> hl cb mgr init ( <ptr> mgr )
<cls> <noptr> gru reserve async resources ( <noptr> blade id <dot> <noptr> c brs <dot> <noptr> dsr bytes <dot> <ptr> cmp )
<cls> <noptr> sci f get phys ( <noptr> phys <dot> <ptr> ep )
<cls> <noptr> fast rpc device open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> me icl dev set drv data ( <ptr> cl dev <dot> <ptr> data )
<cls> <noptr> mic intr show ( <ptr> s <dot> <ptr> unused )
<cls> <noptr> xpc setup msg structure suv ( <ptr> ch )
<cls> <noptr> sci f ordered memcpy to io ( <ptr> dst <dot> <ptr> src <dot> <noptr> count )
<cls> <noptr> hw queue sanity checks ( <ptr> h dev <dot> <ptr> q <dot> <noptr> numof entries )
<cls> <noptr> me it xe hw isready ( <ptr> dev )
<cls> <noptr> sci f dis cnt ack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> sci f check inc pinned vm ( <ptr> m m <dot> <noptr> nr pages )
<cls> <noptr> shutdown status show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> appid show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> cosm hw reset ( <ptr> c dev <dot> <noptr> force )
<cls> <noptr> xp expand mem protect uv ( <noptr> phys addr <dot> <noptr> size )
<cls> <noptr> rts x pci switch output voltage ( <ptr> pcr <dot> <noptr> voltage )
<cls> <noptr> mic x writes pad ( <ptr> m dev <dot> <noptr> idx <dot> <noptr> val )
<cls> <noptr> me icl init ( <ptr> cl <dot> <ptr> dev )
<cls> <noptr> sci f recv un reg nack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> add pot remove files ( <ptr> dev <dot> <noptr> features <dot> <noptr> r dac )
<cls> <noptr> base clock show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> d dcb cmd fix ups ( <ptr> c file <dot> <ptr> req )
<cls> <noptr> enclosure add device ( <ptr> e dev <dot> <noptr> component <dot> <ptr> dev )
<cls> <noptr> sci f rb count ( <ptr> rb <dot> <noptr> size )
<cls> <noptr> show install ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> alco run mask ms irq s ( <ptr> priv )
<cls> <noptr> gen wq e check d dcb queue ( <ptr> cd <dot> <ptr> queue )
<cls> <noptr> mei hbm add single tx flow ctrl creds ( <ptr> dev <dot> <ptr> f ctrl )
<cls> <noptr> lis lv d get pwr on wait ( <ptr> lis )
<cls> <noptr> xsd fec add l dpc ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> sci f user send ( <noptr> epd <dot> <ptr> msg <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> sci fsync dma ( <ptr> s dev <dot> <ptr> chan <dot> <noptr> sync wait )
<cls> <noptr> write ( <ptr> client <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> get component status ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pv panic panic notify ( <ptr> nb <dot> <noptr> code <dot> <ptr> unused )
<cls> <noptr> gen wq e isvisible ( <ptr> k obj <dot> <ptr> attr <dot> <noptr> n )
<cls> <noptr> kim check data len ( <ptr> k img data <dot> <noptr> len )
<cls> <noptr> li sdl h read data ( <ptr> lis <dot> <noptr> reg )
<cls> <noptr> rts x pci power off ( <ptr> pcr <dot> <noptr> pm state )
<cls> <noptr> ilo open ( <ptr> ip <dot> <ptr> fp )
<cls> <noptr> rts x comm set ltr latency ( <ptr> pcr <dot> <noptr> latency )
<cls> <noptr> gen wq e read ffdc regs ( <ptr> cd <dot> <ptr> regs <dot> <noptr> max regs <dot> <noptr> all )
<cls> <noptr> direct entry ( <ptr> f <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> off )
<cls> <noptr> add pot add files ( <ptr> dev <dot> <noptr> features <dot> <noptr> r dac )
<cls> <noptr> sci f rb write ( <ptr> rb <dot> <ptr> msg <dot> <noptr> size )
<cls> <noptr> dur amar c port cd set ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> ic clk show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> xsd fec isr enable ( <ptr> xsd fec <dot> <noptr> enable )
<cls> <noptr> go y a context switch ( <ptr> h dev <dot> <noptr> as id )
<cls> <noptr> me idb gfs active show ( <ptr> m <dot> <ptr> unused )
<cls> <ptr> sci f find mmu notifier ( <ptr> m m <dot> <ptr> rma )
<cls> <noptr> tsl set operating mode ( <ptr> client <dot> <noptr> mode )
<cls> <ptr> q p guest handle to entry ( <noptr> handle )
<cls> <noptr> hlf w send pci access msg ( <ptr> h dev <dot> <noptr> opcode )
<cls> <noptr> mic x read msi to src map ( <ptr> m dev <dot> <noptr> idx )
<cls> <ptr> me icl device find ( <ptr> cl dev <dot> <ptr> cldr v )
<cls> <noptr> me it xe hw reset ( <ptr> dev <dot> <noptr> intr enable )
<cls> <noptr> check single step ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> vmc i host open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> gru reset as id limit ( <ptr> gru <dot> <noptr> as id )
<cls> <noptr> xpc get gru m q irq uv ( <ptr> m q <dot> <noptr> cpu <dot> <ptr> irq name )
<cls> <noptr> tsl probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> d pot write spi ( <ptr> d pot <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> status show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> als set default config ( <ptr> client )
<cls> <ptr> sci f init pp info ( <ptr> sci f dev <dot> <ptr> peer dev )
<cls> <noptr> me ime pci resume ( <ptr> device )
<cls> <noptr> lis ic write ( <ptr> lis <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> c smf gpt set irq ( <ptr> timer <dot> <noptr> cmp <dot> <ptr> irq <dot> <noptr> enable )
<cls> <noptr> go y apc i bars map ( <ptr> h dev )
<cls> <noptr> xsd fec get config ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> xsd fec dev ioctl ( <ptr> fptr <dot> <noptr> cmd <dot> <noptr> data )
<cls> <noptr> go y a debug fs write ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> mcs statistics write ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> data )
<cls> <noptr> xp net receive ( <noptr> partid <dot> <noptr> channel <dot> <ptr> msg )
<cls> <noptr> me it xea liveness set ( <ptr> dev <dot> <noptr> req )
<cls> <noptr> command file open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sci f recv un reg ack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> b h get prox rate above ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> c bread regs ( <ptr> io base <dot> <ptr> reg <dot> <noptr> select )
<cls> <noptr> mic intr open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> c port write flash erase ( <ptr> dev )
<cls> <noptr> xsd fec set order ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> state store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> gen wq e recovery on fatal g fir required ( <ptr> cd )
<cls> <noptr> a pds x set a time ( <ptr> chip <dot> <noptr> time ms )
<cls> <noptr> mic dma unmap page ( <ptr> dev <dot> <noptr> dma addr <dot> <noptr> size <dot> <noptr> dir <dot> <noptr> attrs )
<cls> <noptr> lis lv d misc poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> show otp ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pti write data ( <ptr> m c <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> state show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> lis lv d init dt ( <ptr> lis )
<cls> <ptr> seq next ( <ptr> file <dot> <ptr> data <dot> <ptr> gid )
<cls> <noptr> v op notify ( <ptr> v q )
<cls> <noptr> go y a config stm ( <ptr> h dev <dot> <ptr> params )
<cls> <noptr> gru copy gpa ( <noptr> dest gpa <dot> <noptr> src gpa <dot> <noptr> bytes )
<cls> <noptr> statistics write ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> data )
<cls> <noptr> r heartbeat file open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> d dcb requ set state ( <ptr> req <dot> <noptr> new state )
<cls> <noptr> q p det atch ( <noptr> handle <dot> <noptr> guest endpoint )
<cls> <noptr> show cpu clock sel ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> me id mar ing write ( <ptr> dev <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> mic map single ( <ptr> m dev <dot> <ptr> va <dot> <noptr> size )
<cls> <noptr> mei hbm dma setup req ( <ptr> dev )
<cls> <noptr> xsd fec get status ( <ptr> xsd fec <dot> <ptr> arg )
<cls> <noptr> xp net dev hard startx mit ( <ptr> skb <dot> <ptr> dev )
<cls> <noptr> device utilization ( <ptr> h dev <dot> <ptr> args )
<cls> <noptr> mic smp toffset ( <ptr> m dev <dot> <noptr> pa )
<cls> <noptr> hl pci reset link through bridge ( <ptr> h dev )
<cls> <noptr> gru file unlocked ioctl ( <ptr> file <dot> <noptr> req <dot> <noptr> arg )
<cls> <noptr> gen wq e write l ( <ptr> cd <dot> <noptr> byte offs <dot> <noptr> val )
<cls> <noptr> tif m xx suspend ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> idt eeprom read byte ( <ptr> pdev <dot> <noptr> mem addr <dot> <ptr> data )
<cls> <noptr> mei hdc p verify m prime ( <ptr> dev <dot> <ptr> data <dot> <ptr> stream ready )
<cls> <noptr> b h get prox thres ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> isl store resolution ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> sysfs show reg ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> reg )
<cls> <noptr> sci f send fence wait ( <noptr> epd <dot> <noptr> mark )
<cls> <noptr> pci endpoint test write ( <ptr> test <dot> <noptr> size )
<cls> <noptr> go y a debug core sight ( <ptr> h dev <dot> <ptr> data )
<cls> <noptr> hl mmu unmap ( <ptr> ctx <dot> <noptr> virt addr <dot> <noptr> is dram addr )
<cls> <noptr> rts x pci card pull ctl disable ( <ptr> pcr <dot> <noptr> card )
<cls> <noptr> me icl hbm equal ( <ptr> cl <dot> <ptr> me ihdr )
<cls> <noptr> cpl d ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> v ops can devices ( <ptr> dp <dot> <ptr> v pdev <dot> <noptr> remove <dot> <noptr> d node )
<cls> <noptr> compass store ( <ptr> dev <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> map )
<cls> <noptr> gen wq e probe ( <ptr> pci dev <dot> <ptr> id )
<cls> <noptr> ic clk curr show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> go y at pcm bist workaround ( <ptr> h dev <dot> <noptr> tpc id )
<cls> <noptr> uuid show ( <ptr> dev <dot> <ptr> a <dot> <ptr> buf )
<cls> <noptr> go y aring door bell ( <ptr> h dev <dot> <noptr> hw queueid <dot> <noptr> pi )
<cls> <noptr> me icl notify get ( <ptr> cl <dot> <noptr> block <dot> <ptr> notify ev )
<cls> <noptr> rtl switch output voltage ( <ptr> pcr <dot> <noptr> voltage )
<cls> <noptr> ibm asm init reverse heartbeat ( <ptr> sp <dot> <ptr> rh b )
<cls> <noptr> go y a get dma desc list size ( <ptr> h dev <dot> <ptr> sgt )
<cls> <noptr> show pch mac ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> gru user drop in ( <ptr> gts <dot> <ptr> tf h <dot> <ptr> cb )
<cls> <noptr> hl c q init ( <ptr> h dev <dot> <ptr> q <dot> <noptr> hw queueid )
<cls> <noptr> allow reg read ( <noptr> block <dot> <noptr> offset <dot> <noptr> bits )
<cls> <noptr> mic reads pad ( <ptr> m dev <dot> <noptr> idx )
<cls> <noptr> xpc notify sender uv ( <ptr> ch <dot> <ptr> msg slot <dot> <noptr> reason )
<cls> <noptr> final ack set ( <ptr> put str <dot> <ptr> arg )
<cls> <noptr> v op sync dma ( <ptr> v dev <dot> <noptr> dst <dot> <noptr> src <dot> <noptr> len )
<cls> <noptr> map phys pg pack ( <ptr> ctx <dot> <noptr> v addr <dot> <ptr> phys pg pack )
<cls> <noptr> mcs statistics open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> rts x pci write phy register ( <ptr> pcr <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> ibm asm receive message ( <ptr> sp <dot> <ptr> message <dot> <noptr> message size )
<cls> <noptr> fifo enqueue ( <ptr> hw <dot> <ptr> fifo bar <dot> <noptr> entry )
<cls> <noptr> version show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ate e read ( <ptr> priv <dot> <noptr> offset <dot> <ptr> val <dot> <noptr> count )
<cls> <noptr> sci frm a open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> me it xea liveness wait ( <ptr> dev <dot> <noptr> expected )
<cls> <noptr> go y a init m me q man ( <ptr> h dev )
<cls> <noptr> set r dac ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vmc i door bell notify ( <noptr> dst <dot> <noptr> priv flags )
<cls> <noptr> mem ioctl no mmu ( <ptr> h priv <dot> <ptr> args )
<cls> <noptr> at read ( <ptr> priv <dot> <noptr> off <dot> <ptr> val <dot> <noptr> count )
<cls> <noptr> show flow cntrl ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> isl show range ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sci f node add ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> sci f misc handler ( <ptr> work )
<cls> <noptr> rts x usb get rsp ( <ptr> u cr <dot> <noptr> rsp len <dot> <noptr> timeout )
<cls> <noptr> rts x base turn on led ( <ptr> pcr )
<cls> <noptr> q p det atch host work ( <noptr> handle )
<cls> <noptr> go y a set ddr bar base ( <ptr> h dev <dot> <noptr> addr )
<cls> <noptr> go y a init m me cmd q ( <ptr> h dev )
<cls> <noptr> c port show flash access ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> xpc assume partition dis engaged uv ( <noptr> partid )
<cls> <noptr> go y a config spm u ( <ptr> h dev <dot> <ptr> params )
<cls> <noptr> hlf wget eeprom data ( <ptr> h dev <dot> <ptr> data <dot> <noptr> max size )
<cls> <noptr> phantom compat ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> go y a init d mach ( <ptr> h dev <dot> <noptr> dma id )
<cls> <noptr> b h lux calib show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ilo isr ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> xpc disconnect channel ( <noptr> line <dot> <ptr> ch <dot> <noptr> reason <dot> <ptr> irq flags )
<cls> <noptr> vm balloon cmd ( <ptr> b <dot> <noptr> cmd <dot> <noptr> arg <dot> <noptr> arg )
<cls> <noptr> gen wq e wait d dcb ( <ptr> cd <dot> <ptr> req )
<cls> <noptr> pci endpoint test bar read l ( <ptr> test <dot> <noptr> bar <dot> <noptr> offset )
<cls> <noptr> gru chip let teardown tlb irq ( <noptr> chip let <dot> <noptr> cpu <dot> <noptr> blade )
<cls> <noptr> d g dispatch as host ( <noptr> context id <dot> <ptr> d g )
<cls> <noptr> h wip info ( <ptr> h dev <dot> <ptr> args )
<cls> <noptr> rts x pci read p pbuf ( <ptr> pcr <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> mei hbm cl hdr ( <ptr> cl <dot> <noptr> hbm cmd <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> lis lv d misc f async ( <noptr> fd <dot> <ptr> file <dot> <noptr> on )
<cls> <noptr> go y a parsec bno ext queue ( <ptr> h dev <dot> <ptr> parser )
<cls> <noptr> hl debug fs add user ptr ( <ptr> h dev <dot> <ptr> user ptr )
<cls> <noptr> sci f rb get next ( <ptr> rb <dot> <ptr> msg <dot> <noptr> size )
<cls> <ptr> vmc i resource lookup ( <noptr> handle <dot> <noptr> type )
<cls> <noptr> als sensing range store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> sci f pin pages ( <ptr> addr <dot> <noptr> len <dot> <ptr> out prot <dot> <noptr> map flags <dot> <ptr> pages )
<cls> <noptr> pre boot btl ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> me icl recv ( <ptr> cl <dot> <ptr> buf <dot> <noptr> length <dot> <noptr> mode <dot> <noptr> timeout )
<cls> <noptr> me idb gfs dev state show ( <ptr> m <dot> <ptr> unused )
<cls> <noptr> hl mmu map ( <ptr> ctx <dot> <noptr> virt addr <dot> <noptr> phys addr <dot> <noptr> page size )
<cls> <noptr> ibm asm receive heartbeat ( <ptr> sp <dot> <ptr> message <dot> <noptr> size )
<cls> <ptr> get local va ( <noptr> off <dot> <ptr> window <dot> <noptr> len )
<cls> <noptr> go y a validate w reg ( <ptr> h dev <dot> <ptr> parser <dot> <ptr> w reg pkt )
<cls> <noptr> print stat val ( <ptr> s <dot> <ptr> v <dot> <ptr> id )
<cls> <noptr> lis lv d read ( <ptr> lis <dot> <noptr> reg )
<cls> <noptr> net up jtag io lpt ( <ptr> device <dot> <noptr> tms <dot> <noptr> td i <dot> <noptr> read t do )
<cls> <noptr> sci f node q p intr handler ( <ptr> sci f dev <dot> <ptr> q p )
<cls> <noptr> a pds x power state show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ibm asm interrupt handler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> st check data len ( <ptr> stg data <dot> <noptr> chn lid <dot> <noptr> len )
<cls> <noptr> mei hdc p verify h prime ( <ptr> dev <dot> <ptr> data <dot> <ptr> r x h prime )
<cls> <noptr> show value ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> rts set loff cfg sub d ( <ptr> pcr <dot> <noptr> active )
<cls> <noptr> lis lv d position show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> stepping show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> statistics open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> xpc send local activate irq uv ( <ptr> part <dot> <noptr> act state req )
<cls> <noptr> a pds x lux calib show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> me idb gfs me clients open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> mic x program msi to src map ( <ptr> m dev <dot> <noptr> idx <dot> <noptr> offset <dot> <noptr> set )
<cls> <noptr> mei poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> tif m xx dummy has msp if ( <ptr> f m <dot> <ptr> sock )
<cls> <noptr> sysfs set reg ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> reg )
<cls> <noptr> gen wq e add file ( <ptr> cd <dot> <ptr> c file )
<cls> <noptr> in fine on ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> q p cleanup queue mutex ( <ptr> produce q <dot> <ptr> consume q )
<cls> <noptr> pch p hub g be serial rom conf mp ( <ptr> chip )
<cls> <noptr> show spread enabled ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> pm mng profile show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> boot mode store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vendor show ( <ptr> d <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> remote settings file read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> isl show resolution ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> xpc get partition r svd page pau v ( <ptr> buf <dot> <ptr> cookie <dot> <ptr> r ppa <dot> <ptr> len )
<cls> <noptr> li sdl interrupt thread b ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> xpc system reboot ( <ptr> nb <dot> <noptr> event <dot> <ptr> unused )
<cls> <noptr> log buf len store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> lis lv dic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mic dma map page ( <ptr> dev <dot> <ptr> page <dot> <noptr> offset <dot> <noptr> size <dot> <noptr> dir <dot> <noptr> attrs )
<cls> <noptr> tsl store power state ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> get hop pte addr ( <ptr> ctx <dot> <ptr> mmu specs <dot> <noptr> hop addr <dot> <noptr> v addr )
<cls> <noptr> sci f disc nct ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> m me clk show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> d pot read spi ( <ptr> d pot <dot> <noptr> reg )
<cls> <noptr> d pot writer d ( <ptr> d pot <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> xp remote mmr read ( <noptr> dst gpa <dot> <noptr> src gpa <dot> <noptr> len )
<cls> <noptr> vm balloon add page ( <ptr> b <dot> <noptr> idx <dot> <ptr> p )
<cls> <noptr> isl set range ( <ptr> client <dot> <noptr> range )
<cls> <noptr> mei read ( <ptr> file <dot> <ptr> u buf <dot> <noptr> length <dot> <ptr> offset )
<cls> <noptr> hl device open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> vmc i route ( <ptr> src <dot> <ptr> dst <dot> <noptr> from guest <dot> <ptr> route )
<cls> <noptr> b h get lux thresh above ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h lux adjusted to raw ( <ptr> chip <dot> <noptr> adjusted )
<cls> <noptr> mic is system addr ( <ptr> m dev <dot> <noptr> pa )
<cls> <noptr> vmc i q p broker map ( <noptr> handle <dot> <ptr> context <dot> <noptr> guest mem )
<cls> <noptr> go y a validated map k thost ( <ptr> h dev <dot> <ptr> parser <dot> <ptr> user dma pkt )
<cls> <ptr> pti request master channel ( <noptr> type <dot> <ptr> thread name )
<cls> <noptr> tif mbus match ( <ptr> dev <dot> <ptr> drv )
<cls> <noptr> at reg map read ( <ptr> at <dot> <ptr> buf <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> me it xe sec reg write ( <ptr> hw <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> mei ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> data )
<cls> <noptr> q p map queue headers ( <ptr> produce q <dot> <ptr> consume q )
<cls> <noptr> stk im recv ( <ptr> disc data <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> b h prox enable show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> xsd fec clk init ( <ptr> pdev <dot> <ptr> clk s )
<cls> <noptr> hl get fan speed ( <ptr> h dev <dot> <noptr> sensor index <dot> <noptr> attr )
<cls> <noptr> hl debug ioctl ( <ptr> h priv <dot> <ptr> data )
<cls> <noptr> tsl show power state ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mei io list flush cl ( <ptr> head <dot> <ptr> cl )
<cls> <noptr> rts x pci set pull ctl ( <ptr> pcr <dot> <ptr> tbl )
<cls> <noptr> mei hbm cl disconnect req ( <ptr> dev <dot> <ptr> cl )
<cls> <noptr> mei hdc p verify l prime ( <ptr> dev <dot> <ptr> data <dot> <ptr> r xl prime )
<cls> <noptr> sci f peer initialize device ( <ptr> sci f dev )
<cls> <noptr> gru check chip let assignment ( <ptr> gru <dot> <ptr> gts )
<cls> <noptr> mic adds mpt entry ( <noptr> spt <dot> <ptr> ref <dot> <noptr> addr <dot> <noptr> entries <dot> <ptr> m dev )
<cls> <noptr> me it xe sec reg write silent ( <ptr> hw <dot> <noptr> offset <dot> <noptr> value )
<cls> <ptr> v op v q config space ( <ptr> desc )
<cls> <noptr> me it x ereg read ( <ptr> base addr <dot> <noptr> offset )
<cls> <noptr> mei ioctl client notify request ( <ptr> file <dot> <noptr> request )
<cls> <noptr> mei medi intr ( <ptr> dev <dot> <noptr> intr source )
<cls> <noptr> d pot write ic ( <ptr> d pot <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> hl pci bars map ( <ptr> h dev <dot> <ptr> const name <dot> <noptr> is wc )
<cls> <noptr> gen wq e write q ( <ptr> cd <dot> <noptr> byte offs <dot> <noptr> val )
<cls> <noptr> me icl dev driver register ( <ptr> cldr v <dot> <ptr> owner )
<cls> <noptr> gen wq e read q ( <ptr> cd <dot> <noptr> byte offs )
<cls> <noptr> pti writeto aperture ( <ptr> m c <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> reserve resources ( <ptr> p <dot> <noptr> n <dot> <noptr> m max <dot> <ptr> idx )
<cls> <noptr> ibm asm start reverse heartbeat ( <ptr> sp <dot> <ptr> rh b )
<cls> <noptr> b h set lux rate ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> gen wq e execute raw d dcb ( <ptr> cd <dot> <ptr> cmd <dot> <noptr> f flags )
<cls> <ptr> get cb from cs chunk ( <ptr> h dev <dot> <ptr> cb mgr <dot> <ptr> chunk )
<cls> <noptr> h lun pin host memory ( <ptr> h dev <dot> <ptr> user ptr )
<cls> <noptr> sci fid match ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> rts x pci get ocp stat ( <ptr> pcr <dot> <ptr> val )
<cls> <noptr> altera check stack ( <noptr> stack ptr <dot> <noptr> count <dot> <ptr> status )
<cls> <noptr> me icl notify request ( <ptr> cl <dot> <ptr> fp <dot> <noptr> request )
<cls> <noptr> sci f setup q p accept ( <ptr> q p <dot> <ptr> q p offset <dot> <noptr> phys <dot> <noptr> local size <dot> <ptr> sci f dev )
<cls> <noptr> iloc cb open ( <ptr> hw <dot> <ptr> data <dot> <noptr> slot )
<cls> <noptr> c port store flash access ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> hlp cii atu write ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> set component fault ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> idt csr read ( <ptr> pdev <dot> <noptr> csr addr <dot> <ptr> data )
<cls> <noptr> go y a send job on q man ( <ptr> h dev <dot> <ptr> job )
<cls> <noptr> v ops can devices ( <ptr> vi <dot> <ptr> v pdev <dot> <noptr> remove )
<cls> <noptr> mic setup int x ( <ptr> m dev <dot> <ptr> pdev )
<cls> <noptr> send noop message ( <ptr> cb <dot> <ptr> m q d <dot> <ptr> mesg )
<cls> <noptr> b h power state show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> rts x usb write phy register ( <ptr> u cr <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> dur amar c port cd dir ( <ptr> dev <dot> <noptr> dir )
<cls> <noptr> get component power status ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ram disk show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mei hbm clt x flow ctrl creds res ( <ptr> dev <dot> <ptr> f ctrl )
<cls> <ptr> go y a get events stat ( <ptr> h dev <dot> <noptr> aggregate <dot> <ptr> size )
<cls> <noptr> isl read reg ( <ptr> client <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> shift )
<cls> <noptr> altera shrink ( <ptr> in <dot> <noptr> in length <dot> <ptr> out <dot> <noptr> out length <dot> <noptr> version )
<cls> <noptr> hl data read ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> v op total desc size ( <ptr> desc )
<cls> <noptr> me it xe setups att ( <ptr> dev <dot> <noptr> addr <dot> <noptr> range )
<cls> <noptr> v op query offset ( <ptr> v dev <dot> <noptr> offset <dot> <ptr> size <dot> <ptr> pa )
<cls> <noptr> send message queue full ( <ptr> cb <dot> <ptr> m q d <dot> <ptr> mesg <dot> <noptr> lines )
<cls> <ptr> me ime cl by uuid ( <ptr> dev <dot> <ptr> uuid )
<cls> <noptr> xpc send ch ctl open complete uv ( <ptr> ch <dot> <ptr> irq flags )
<cls> <noptr> mic x smp t set ( <ptr> m dev <dot> <noptr> dma addr <dot> <noptr> index )
<cls> <noptr> ibm asm wait for response ( <ptr> cmd <dot> <noptr> timeout )
<cls> <noptr> cb register slot ( <ptr> chip <dot> <noptr> slot mask <dot> <noptr> io offset <dot> <ptr> name )
<cls> <noptr> hl hw queue in cci kernel ( <ptr> h dev <dot> <noptr> hw queueid )
<cls> <noptr> mei hbm cl connect res ( <ptr> dev <dot> <ptr> cl <dot> <ptr> cmd )
<cls> <noptr> hl c q reset ( <ptr> h dev <dot> <ptr> q )
<cls> <noptr> alter await cycles ( <ptr> a state <dot> <noptr> cycles <dot> <noptr> wait state )
<cls> <noptr> pv panic walk resources ( <ptr> res <dot> <ptr> context )
<cls> <noptr> go y a get eeprom data ( <ptr> h dev <dot> <ptr> data <dot> <noptr> max size )
<cls> <noptr> xsd fec translate axis words cfg val ( <noptr> axis word inc cfg )
<cls> <noptr> sci f get node ids ( <ptr> nodes <dot> <noptr> len <dot> <ptr> self )
<cls> <noptr> v op add device ( <ptr> d <dot> <noptr> offset <dot> <ptr> v pdev <dot> <noptr> d node )
<cls> <noptr> hl w reg ( <ptr> h dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> mei hdc p close session ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> event file write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> gen wq ere adv reg ( <ptr> cd <dot> <noptr> reg <dot> <noptr> func )
<cls> <noptr> me icl dev send ( <ptr> cl dev <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> me ime read slots ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> buffer length )
<cls> <noptr> b h set prox rate above ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> rts x pci read phy register ( <ptr> pcr <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> cb dump regs ( <ptr> dev <dot> <ptr> reg <dot> <noptr> select )
<cls> <noptr> pti write full frame to aperture ( <ptr> m c <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> pci addr show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> boot mode show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> pm mng profile store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> sci ferr debug ( <noptr> err <dot> <ptr> str )
<cls> <noptr> xpc initiate partid to nas ids ( <noptr> partid <dot> <ptr> nas id mask )
<cls> <noptr> access show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> h lcs wait ioctl ( <ptr> h dev <dot> <ptr> ctx <dot> <noptr> timeout us <dot> <noptr> seq )
<cls> <noptr> gru dump tfm ( <ptr> gru <dot> <ptr> u buf <dot> <ptr> u buf end )
<cls> <noptr> me icl dev recv ( <ptr> cl dev <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> rts x pci read register ( <ptr> pcr <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> me icl irq notify ( <ptr> cl <dot> <ptr> cb <dot> <ptr> c mpl list )
<cls> <noptr> me icl connect ( <ptr> cl <dot> <ptr> m ecl <dot> <ptr> fp )
<cls> <noptr> gru chip let cpu to mmr ( <noptr> chip let <dot> <noptr> cpu <dot> <ptr> core p )
<cls> <noptr> sci f setup q pconnect ( <ptr> q p <dot> <ptr> q p offset <dot> <noptr> local size <dot> <ptr> sci f dev )
<cls> <noptr> eeprom c x write bits ( <ptr> eeprom <dot> <noptr> data <dot> <noptr> count )
<cls> <noptr> me if sync ( <ptr> fp <dot> <noptr> start <dot> <noptr> end <dot> <noptr> data sync )
<cls> <noptr> gen wq edel mapping ( <ptr> c file <dot> <ptr> dma map )
<cls> <noptr> h lcs ioctl ( <ptr> h priv <dot> <ptr> chunks <dot> <noptr> num chunks <dot> <ptr> css eq )
<cls> <noptr> revise ssc depth ( <noptr> ssc depth <dot> <noptr> div )
<cls> <ptr> fast rpc k map ( <ptr> dma buf <dot> <noptr> pg num )
<cls> <noptr> go y a config funnel ( <ptr> h dev <dot> <ptr> params )
<cls> <noptr> hl debug fs remove file ( <ptr> h priv )
<cls> <noptr> remove channel from table ( <ptr> stg data <dot> <ptr> proto )
<cls> <noptr> a pds x prox show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hl mmu unmap ( <ptr> ctx <dot> <noptr> virt addr <dot> <noptr> page size )
<cls> <noptr> me ime clr m by uuid ( <ptr> dev <dot> <ptr> uuid )
<cls> <noptr> rts x set loff sub ( <ptr> pcr <dot> <noptr> val )
<cls> <noptr> vmc i host do queue pair set pf ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> idt smb read word ( <ptr> pdev <dot> <ptr> seq )
<cls> <noptr> vmc i guest probe device ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> go y a handle eq e ( <ptr> h dev <dot> <ptr> eq entry )
<cls> <noptr> sci f display window ( <ptr> window <dot> <ptr> s )
<cls> <noptr> gru dump t gh ( <ptr> gru <dot> <ptr> u buf <dot> <ptr> u buf end )
<cls> <noptr> a pds x lux thresh above show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> eeprom c x multi read b ( <ptr> eeprom <dot> <noptr> byte <dot> <ptr> data <dot> <noptr> bytes )
<cls> <noptr> print val ist locked ( <ptr> h dev <dot> <ptr> val ist )
<cls> <noptr> mei hdc p store pairing info ( <ptr> dev <dot> <ptr> data <dot> <ptr> pairing info )
<cls> <noptr> do user copy heap white list ( <noptr> to user )
<cls> <noptr> gru try drop in ( <ptr> gru <dot> <ptr> gts <dot> <ptr> tf h <dot> <ptr> cb k )
<cls> <noptr> c port show flash size ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h prox abs thres store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> hl debug fs add job ( <ptr> h dev <dot> <ptr> job )
<cls> <noptr> sci f insert local window ( <ptr> window <dot> <ptr> ep )
<cls> <noptr> mic unmap single ( <ptr> m dev <dot> <noptr> mic addr <dot> <noptr> size )
<cls> <ptr> tif m xx sockaddr ( <ptr> base addr <dot> <noptr> sock num )
<cls> <noptr> hl debug fs add ctx mem hash ( <ptr> h dev <dot> <ptr> ctx )
<cls> <noptr> rts x base force power down ( <ptr> pcr <dot> <noptr> pm state )
<cls> <noptr> pch p hub write serial rom val ( <ptr> chip <dot> <noptr> offset address <dot> <noptr> data )
<cls> <noptr> go y a parsec bno mmu ( <ptr> h dev <dot> <ptr> parser )
<cls> <noptr> me it xe check and ack int rs ( <ptr> dev <dot> <noptr> do ack )
<cls> <noptr> at adjust read count ( <ptr> at <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> isl store range ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> alco rpc i find cap offset ( <ptr> priv <dot> <ptr> pci )
<cls> <noptr> send message put n acked ( <ptr> cb <dot> <ptr> m q d <dot> <ptr> mesg <dot> <noptr> lines )
<cls> <noptr> sci f prog signal ( <noptr> epd <dot> <noptr> dst <dot> <noptr> val )
<cls> <noptr> sci f add epd to zombie list ( <ptr> ep <dot> <noptr> ep lock held )
<cls> <noptr> mei dma copyto ( <ptr> dev <dot> <ptr> buf <dot> <noptr> offset <dot> <noptr> n )
<cls> <noptr> mei dma copy from ( <ptr> dev <dot> <ptr> buf <dot> <noptr> offset <dot> <noptr> n )
<cls> <noptr> vmc i host do send data gram ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> xpc send ch ctl local msg request uv ( <ptr> part <dot> <noptr> ch number )
<cls> <noptr> a pds x lux calib store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> altera set ir pre ( <ptr> js <dot> <noptr> count <dot> <noptr> start index <dot> <ptr> preamble data )
<cls> <noptr> gru reserved s resources ( <ptr> gru <dot> <noptr> dsr au count <dot> <ptr> ds map )
<cls> <noptr> mei irq read handler ( <ptr> dev <dot> <ptr> c mpl list <dot> <ptr> slots )
<cls> <noptr> sci f recv ( <noptr> epd <dot> <ptr> msg <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> b h lux calib store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> sci f connect ( <noptr> epd <dot> <ptr> dst <dot> <noptr> non block )
<cls> <noptr> gen wq e set interrupt capability ( <ptr> cd <dot> <noptr> count )
<cls> <noptr> at reg map write ( <ptr> at <dot> <ptr> buf <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> me ime read f ws ( <ptr> dev <dot> <noptr> where <dot> <ptr> val )
<cls> <noptr> me icl irq write ( <ptr> cl <dot> <ptr> cb <dot> <ptr> c mpl list )
<cls> <noptr> b h get lux rate avail ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h set lux thresh below ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> fast rpc req munmap ( <ptr> fl <dot> <ptr> arg p )
<cls> <noptr> me icl irq disconnect rsp ( <ptr> cl <dot> <ptr> cb <dot> <ptr> c mpl list )
<cls> <noptr> rts x usb read register ( <ptr> u cr <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> a pds x lux thresh below show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> write final pte ( <ptr> ctx <dot> <noptr> shadow pte addr <dot> <noptr> val )
<cls> <noptr> sci f fence signal ( <noptr> epd <dot> <noptr> loff <dot> <noptr> l val <dot> <noptr> r off <dot> <noptr> rval <dot> <noptr> flags )
<cls> <noptr> ee eeprom read ( <ptr> client <dot> <ptr> buf <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> mei ioctl client notify get ( <ptr> file <dot> <ptr> notify get )
<cls> <noptr> xpc initiate received ( <noptr> partid <dot> <noptr> ch number <dot> <ptr> payload )
<cls> <noptr> c smf gpt toggle event ( <ptr> timer <dot> <noptr> cmp <dot> <noptr> event <dot> <noptr> enable )
<cls> <noptr> mic x load firmware ( <ptr> m dev <dot> <ptr> buf )
<cls> <noptr> b h prox persistence show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> dur amar c port cck set ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> sci f send fence ( <noptr> epd <dot> <noptr> u op <dot> <noptr> mark <dot> <ptr> out mark )
<cls> <noptr> ctx fire notification ( <noptr> context id <dot> <noptr> priv flags )
<cls> <noptr> log buf addr show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> log buf len show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> altera get note ( <ptr> p <dot> <noptr> program size <dot> <ptr> offset <dot> <ptr> key <dot> <ptr> value <dot> <noptr> length )
<cls> <noptr> hl device read ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> hard reset store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> xsd fec dev compat ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> data )
<cls> <noptr> nonatomic pte lookup ( <ptr> vma <dot> <noptr> v addr <dot> <noptr> write <dot> <ptr> p addr <dot> <ptr> page shift )
<cls> <noptr> hl ioctl ( <ptr> file p <dot> <noptr> cmd <dot> <noptr> arg <dot> <ptr> ioctl <dot> <ptr> dev )
<cls> <noptr> vm balloon stats page inc ( <ptr> b <dot> <noptr> stat <dot> <noptr> size )
<cls> <noptr> me idb gfs write allow fa ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> vmc i host do queue pair set va ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> init phys pg pack from user ptr ( <ptr> ctx <dot> <ptr> user ptr <dot> <dptr> p phys pg pack )
<cls> <noptr> mic map src to offset ( <ptr> m dev <dot> <noptr> int rsrc <dot> <noptr> type )
<cls> <noptr> ram disk store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> set component status ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> high pll store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> xpc send ch ctl close request uv ( <ptr> ch <dot> <ptr> irq flags )
<cls> <noptr> ilo pkt enqueue ( <ptr> hw <dot> <ptr> ccb <dot> <noptr> dir <dot> <noptr> id <dot> <noptr> len )
<cls> <noptr> cb pci update config reg ( <ptr> pdev <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> x or )
<cls> <noptr> c port show name ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ds store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> max power store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> tpc clk store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vmc i host do get context id ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> sci frm alist dma copy unaligned ( <ptr> work <dot> <ptr> temp <dot> <ptr> chan <dot> <noptr> src local )
<cls> <noptr> go yam m u prepare ( <ptr> h dev <dot> <noptr> as id )
<cls> <noptr> mei hdc p initiate locality check ( <ptr> dev <dot> <ptr> data <dot> <ptr> l c init data )
<cls> <noptr> sci f setup q pconnect response ( <ptr> sci f dev <dot> <ptr> q p <dot> <noptr> payload )
<cls> <noptr> cmdline store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> xpc cache remote gru m q desc uv ( <ptr> gru m q desc <dot> <noptr> gru m q desc gpa )
<cls> <noptr> sci f register pinned pages ( <noptr> epd <dot> <noptr> pinned pages <dot> <noptr> offset <dot> <noptr> map flags )
<cls> <noptr> sci f node q pmsg handler ( <ptr> sci f dev <dot> <ptr> q p <dot> <ptr> msg )
<cls> <noptr> command submission jobs show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> sci f poll wait ( <ptr> f <dot> <ptr> wq <dot> <ptr> p <dot> <ptr> ep )
<cls> <noptr> altera set dr pre ( <ptr> js <dot> <noptr> count <dot> <noptr> start index <dot> <ptr> preamble data )
<cls> <noptr> vmc i host do set notify ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> gen wq e open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> cosm reboot event ( <ptr> this <dot> <noptr> event <dot> <ptr> ptr )
<cls> <noptr> pch p hub write g be mac addr ( <ptr> chip <dot> <ptr> data )
<cls> <noptr> rts x usb write p pbuf ( <ptr> u cr <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> rts x usb e pread register ( <ptr> u cr <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> xp net send completed ( <noptr> reason <dot> <noptr> partid <dot> <noptr> channel <dot> <ptr> q m )
<cls> <noptr> hl set pwm info ( <ptr> h dev <dot> <noptr> sensor index <dot> <noptr> attr <dot> <noptr> value )
<cls> <noptr> c port show devid ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> q p notify peer ( <noptr> attach <dot> <noptr> handle <dot> <noptr> myid <dot> <noptr> peerid )
<cls> <noptr> lis lv d misc read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> pos )
<cls> <noptr> c port store reset ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> pci endpoint test write l ( <ptr> test <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> xpc send ch ctl open reply uv ( <ptr> ch <dot> <ptr> irq flags )
<cls> <noptr> merge va blocks locked ( <ptr> h dev <dot> <ptr> val ist <dot> <ptr> va block )
<cls> <noptr> gru init tables ( <noptr> gru base p addr <dot> <ptr> gru base v addr )
<cls> <noptr> me icl dev register notif cb ( <ptr> cl dev <dot> <noptr> notif cb )
<cls> <noptr> b h get prox rate below ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ibm asm receive command response ( <ptr> sp <dot> <ptr> response <dot> <noptr> size )
<cls> <noptr> pch p hub read modify write reg ( <ptr> chip <dot> <noptr> reg addr offset <dot> <noptr> data <dot> <noptr> mask )
<cls> <noptr> alc or write be ( <ptr> priv <dot> <noptr> val <dot> <noptr> addr )
<cls> <noptr> dma map host va ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> size <dot> <dptr> p user ptr )
<cls> <noptr> validate queue index ( <ptr> h dev <dot> <ptr> chunk <dot> <ptr> queue type <dot> <ptr> is kernel allocated cb )
<cls> <noptr> qpen queue locked ( <ptr> produce q <dot> <ptr> consume q <dot> <noptr> produce qsize <dot> <ptr> from )
<cls> <noptr> rts a write phy ( <ptr> pcr <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> get hop npt e addr ( <ptr> ctx <dot> <noptr> hop addr <dot> <noptr> virt addr <dot> <noptr> mask <dot> <noptr> shift )
<cls> <ptr> gru get cb exception detail str ( <noptr> ret <dot> <ptr> cb <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> rts x usb ep write register ( <ptr> u cr <dot> <noptr> addr <dot> <noptr> mask <dot> <noptr> data )
<cls> <ptr> io remap remote ( <noptr> off <dot> <ptr> window <dot> <noptr> len <dot> <ptr> dev <dot> <ptr> iter )
<cls> <noptr> pci endpoint test set irq ( <ptr> test <dot> <noptr> req irq type )
<cls> <noptr> hard reset cnt show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> next bitstream show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vmc i host do receive data gram ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> alter adrs can ( <ptr> a state <dot> <noptr> count <dot> <ptr> td i data <dot> <noptr> start index )
<cls> <noptr> go yam m u prepare reg ( <ptr> h dev <dot> <noptr> reg <dot> <noptr> as id )
<cls> <noptr> go y atest queue ( <ptr> h dev <dot> <noptr> hw queueid )
<cls> <noptr> q p populate p pn set ( <ptr> call buf <dot> <ptr> p pn set )
<cls> <noptr> go y adm a maps g ( <ptr> h dev <dot> <ptr> s gl <dot> <noptr> n ents <dot> <noptr> dir )
<cls> <noptr> a pds x read word ( <ptr> chip <dot> <noptr> reg <dot> <ptr> data )
<cls> <noptr> thermal ver show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> device vat opa ( <ptr> h dev <dot> <noptr> virt addr <dot> <ptr> phys addr )
<cls> <noptr> go y adm aun maps g ( <ptr> h dev <dot> <ptr> s gl <dot> <noptr> n ents <dot> <noptr> dir )
<cls> <noptr> hl led write ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> pti char write ( <ptr> filp <dot> <ptr> data <dot> <noptr> len <dot> <ptr> p pose )
<cls> <noptr> do user copy stack ( <noptr> to user <dot> <noptr> bad frame )
<cls> <noptr> show tolerance ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hl pci initi atu ( <ptr> h dev <dot> <noptr> sram base address <dot> <noptr> dram base address <dot> <noptr> host phys base address <dot> <noptr> host phys size )
<cls> <noptr> vm balloon stats page add ( <ptr> b <dot> <noptr> stat <dot> <noptr> size <dot> <noptr> val )
<cls> <noptr> go y a read device fw version ( <ptr> h dev <dot> <noptr> fw c )
<cls> <noptr> b h lux calib default show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> next bitstream store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> a pds x prox range show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h chip ids how ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mic send pp intr ( <ptr> sc dev <dot> <noptr> db <dot> <ptr> m w )
<cls> <noptr> go y a validated map kt no mmu ( <ptr> h dev <dot> <ptr> parser <dot> <ptr> user dma pkt )
<cls> <noptr> altera extract target data ( <ptr> buffer <dot> <ptr> target data <dot> <noptr> start index <dot> <noptr> preamble count <dot> <noptr> target count )
<cls> <noptr> hl debug fs remove user ptr ( <ptr> h dev <dot> <ptr> user ptr )
<cls> <noptr> c port write flash data ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buffer <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> rts x usb seq cmd hdr ( <ptr> u cr <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> seq type )
<cls> <noptr> tsl store operating mode ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> kim int recv ( <ptr> k img data <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> iloc cb setup ( <ptr> hw <dot> <ptr> data <dot> <noptr> slot )
<cls> <noptr> c port show flash block size ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vmc i handle arr get entry ( <ptr> array <dot> <noptr> index )
<cls> <noptr> txqueue limit store ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> sci f display message ( <ptr> sci f dev <dot> <ptr> msg <dot> <ptr> label )
<cls> <noptr> gen wq e un pin mem ( <ptr> c file <dot> <ptr> m )
<cls> <noptr> mic x load command line ( <ptr> m dev <dot> <ptr> fw )
<cls> <noptr> vmc i q pair en que v ( <ptr> q pair <dot> <ptr> msg <dot> <noptr> iov size <dot> <noptr> buf type )
<cls> <noptr> vmc i q pair peek ( <ptr> q pair <dot> <ptr> buf <dot> <noptr> buf size <dot> <noptr> buf type )
<cls> <noptr> b h prox interrupt control ( <ptr> chip <dot> <noptr> ps )
<cls> <noptr> sci f msg unknown ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> go y a print irq info ( <ptr> h dev <dot> <noptr> event type <dot> <noptr> raz wi )
<cls> <noptr> rts x usb seq read register ( <ptr> u cr <dot> <noptr> addr <dot> <noptr> len <dot> <ptr> data )
<cls> <noptr> hl get current ( <ptr> h dev <dot> <noptr> sensor index <dot> <noptr> attr )
<cls> <noptr> xpc request partition activation uv ( <ptr> remote r p <dot> <noptr> remote rpg pa <dot> <noptr> nas id )
<cls> <noptr> pch p hub read g be mac addr ( <ptr> chip <dot> <ptr> data )
<cls> <noptr> fast rpc device ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> l k dtm debug fs read ( <ptr> f <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> off )
<cls> <noptr> a pds x lux thresh above store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> hl read ( <ptr> dev <dot> <noptr> type <dot> <noptr> attr <dot> <noptr> channel <dot> <ptr> val )
<cls> <noptr> r heartbeat file read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> v op verify copy args ( <ptr> v dev <dot> <ptr> copy )
<cls> <noptr> a pds x power state store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> me it xeb r reg write ( <ptr> hw <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> command file write ( <ptr> file <dot> <ptr> u buff <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> set otp ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> sci frm a local cpu copy ( <noptr> offset <dot> <ptr> window <dot> <ptr> temp <dot> <noptr> rem len <dot> <noptr> to temp )
<cls> <noptr> rts x usb send cmd ( <ptr> u cr <dot> <noptr> flag <dot> <noptr> timeout )
<cls> <noptr> options write ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> data )
<cls> <noptr> go y a get event desc ( <noptr> event type <dot> <ptr> desc <dot> <noptr> size )
<cls> <noptr> go y a validate cb ( <ptr> h dev <dot> <ptr> parser <dot> <noptr> is mmu )
<cls> <noptr> pti tty driver write ( <ptr> tty <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> me it xe write ( <ptr> dev <dot> <ptr> hdr <dot> <noptr> hdr len <dot> <ptr> data <dot> <noptr> data len )
<cls> <noptr> me it x ereg write ( <ptr> base addr <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> add va block locked ( <ptr> h dev <dot> <ptr> val ist <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> ds eeprom write ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> v op virtio intr handler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> idt eeprom write ( <ptr> pdev <dot> <noptr> mem addr <dot> <noptr> len <dot> <ptr> data )
<cls> <noptr> hl debug f sic read ( <ptr> h dev <dot> <noptr> ic bus <dot> <noptr> ic addr <dot> <noptr> ic reg <dot> <ptr> val )
<cls> <noptr> xp remote memcpy uv ( <noptr> dst gpa <dot> <noptr> src gpa <dot> <noptr> len )
<cls> <noptr> reload bitstream store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> sci f user recv ( <noptr> epd <dot> <ptr> msg <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> q p host unmap queues ( <noptr> gid <dot> <ptr> produce q <dot> <ptr> consume q )
<cls> <noptr> add va block ( <ptr> h dev <dot> <ptr> var ange <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> isl store power state ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> memcpy tor b ( <ptr> rb <dot> <ptr> header <dot> <ptr> msg <dot> <noptr> size )
<cls> <noptr> gru unload context data ( <ptr> save <dot> <ptr> gru base <dot> <noptr> ctx num <dot> <noptr> cbr map <dot> <noptr> dsr map )
<cls> <noptr> vmc i host do init context ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> sram add export ( <ptr> sram <dot> <ptr> block <dot> <noptr> start <dot> <ptr> part )
<cls> <noptr> enqueued dcb ( <ptr> cd <dot> <ptr> queue <dot> <ptr> pd dcb <dot> <noptr> ddc bno )
<cls> <noptr> check gru resources ( <ptr> gru <dot> <noptr> c bra u count <dot> <noptr> dsr au count <dot> <noptr> max active contexts )
<cls> <noptr> vmc i q pair get consume indexes ( <ptr> q pair <dot> <ptr> consumer tail <dot> <ptr> producer head )
<cls> <noptr> add pot probe ( <ptr> dev <dot> <ptr> b data <dot> <noptr> devid <dot> <ptr> name )
<cls> <noptr> a pds x set lux thresh ( <ptr> chip <dot> <ptr> target <dot> <ptr> buf )
<cls> <noptr> xpc system die ( <ptr> nb <dot> <noptr> event <dot> <ptr> die args )
<cls> <noptr> eeprom xx store erase ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> atomic pte lookup ( <ptr> vma <dot> <noptr> v addr <dot> <noptr> write <dot> <ptr> p addr <dot> <ptr> page shift )
<cls> <noptr> eeprom c x multi read ( <ptr> eeprom <dot> <noptr> word <dot> <ptr> data <dot> <noptr> words )
<cls> <noptr> isl store mode ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> go y a etr validate address ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> size )
<cls> <noptr> sci f node connect ( <ptr> sci f dev <dot> <noptr> dst )
<cls> <noptr> command file read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> h lic data write ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> v op get ( <ptr> v dev <dot> <noptr> offset <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> xp net connection activity ( <noptr> reason <dot> <noptr> partid <dot> <noptr> channel <dot> <ptr> data <dot> <ptr> key )
<cls> <noptr> sci f insert vma ( <ptr> ep <dot> <ptr> vma )
<cls> <noptr> xpc send gru msg ( <ptr> gru m q desc <dot> <ptr> msg <dot> <noptr> msg size )
<cls> <noptr> v op copy dp entry ( <ptr> v dev <dot> <ptr> arg p <dot> <ptr> type <dot> <dptr> dev page )
<cls> <noptr> gen wq e add pin ( <ptr> c file <dot> <ptr> m )
<cls> <noptr> go y ais device idle ( <ptr> h dev <dot> <ptr> mask <dot> <ptr> s )
<cls> <noptr> sci f recv reg nack ( <ptr> sci f dev <dot> <ptr> msg )
<cls> <noptr> rts x usb read p pbuf ( <ptr> u cr <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> q p memcpy from queue iter ( <ptr> to <dot> <ptr> queue <dot> <noptr> queue offset <dot> <noptr> size )
<cls> <noptr> pch p hub write serial rom ( <ptr> chip <dot> <noptr> offset address <dot> <noptr> data )
<cls> <noptr> sci f prog signal ( <noptr> epd <dot> <noptr> offset <dot> <noptr> val <dot> <noptr> type )
<cls> <noptr> go y a init tpc q man ( <ptr> h dev <dot> <noptr> base off <dot> <noptr> tpc id )
<cls> <noptr> rts x set loff sub cfg d ( <ptr> pcr <dot> <noptr> active )
<cls> <noptr> c port show flash blocks num ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b h power state store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vm balloon dequeue page list ( <ptr> b <dot> <ptr> pages <dot> <ptr> n pages <dot> <noptr> page size <dot> <noptr> n req pages )
<cls> <noptr> a pds x prox reporting mode store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> go y a get clk rate ( <ptr> h dev <dot> <ptr> cur clk <dot> <ptr> max clk )
<cls> <noptr> xpc process msg ch ctl flags uv ( <ptr> part <dot> <noptr> ch number )
<cls> <noptr> q com coin cell chg r config ( <ptr> chg r <dot> <noptr> r set <dot> <noptr> v set <dot> <noptr> enable )
<cls> <noptr> sci f ordered memcpy from io ( <ptr> dst <dot> <ptr> src <dot> <noptr> count )
<cls> <noptr> a pds x prox enable show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> set reg ( <ptr> cd <dot> <ptr> r <dot> <ptr> i <dot> <noptr> m <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> me ime clr m by uuid id ( <ptr> dev <dot> <ptr> uuid <dot> <noptr> id )
<cls> <noptr> rtl do switch output voltage ( <ptr> pcr <dot> <noptr> voltage <dot> <noptr> bpp tuned shift <dot> <noptr> bpp asi cv )
<cls> <noptr> go y ame m set device memory ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> size <dot> <noptr> val <dot> <noptr> is dram )
<cls> <noptr> hl debug fs remove ctx mem hash ( <ptr> h dev <dot> <ptr> ctx )
<cls> <noptr> sci f q p response ( <noptr> phys <dot> <ptr> sci f dev )
<cls> <noptr> prev db gui dns how ( <ptr> s <dot> <ptr> unused <dot> <noptr> uid )
<cls> <noptr> vmc i q pair dequeue ( <ptr> q pair <dot> <ptr> buf <dot> <noptr> buf size <dot> <noptr> buf type )
<cls> <noptr> show src clock ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> ext and hw queue submit bd ( <ptr> h dev <dot> <ptr> q <dot> <noptr> ctl <dot> <noptr> len <dot> <noptr> ptr )
<cls> <noptr> sci f send fence signal ( <noptr> epd <dot> <noptr> r off <dot> <noptr> rval <dot> <noptr> loff <dot> <noptr> l val <dot> <noptr> flags )
<cls> <noptr> vmc i event subscribe ( <noptr> event <dot> <noptr> callback <dot> <ptr> callback data <dot> <ptr> new subscription id )
<cls> <noptr> xpc process open close ch ctl flags ( <ptr> part <dot> <noptr> ch number <dot> <noptr> ch ctl flags )
<cls> <noptr> xpc send activate irq uv ( <ptr> part <dot> <ptr> msg <dot> <noptr> msg size <dot> <noptr> msg type )
<cls> <noptr> a pds x lux calib format show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> eeprom read handler ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> offset <dot> <noptr> max size )
<cls> <noptr> rts x pcid m aun maps g ( <ptr> pcr <dot> <ptr> sg list <dot> <noptr> nums g <dot> <noptr> read )
<cls> <noptr> ctrl setup ( <ptr> ccb <dot> <noptr> nr desc <dot> <noptr> l desc sz )
<cls> <noptr> altera swap dr ( <ptr> a state <dot> <noptr> count <dot> <ptr> in data <dot> <noptr> in index <dot> <ptr> out data <dot> <noptr> out index )
<cls> <noptr> rts x pci dma transfer ( <ptr> pcr <dot> <ptr> sg list <dot> <noptr> count <dot> <noptr> read <dot> <noptr> timeout )
<cls> <noptr> go y a validated map kt no host ( <ptr> h dev <dot> <ptr> parser <dot> <ptr> user dma pkt )
<cls> <noptr> go y a patch dma packet ( <ptr> h dev <dot> <ptr> parser <dot> <ptr> user dma pkt <dot> <ptr> new dma pkt <dot> <ptr> new dma pkt size )
<cls> <noptr> mei hbm cl write ( <ptr> dev <dot> <ptr> cl <dot> <noptr> hbm cmd <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> rts x pci write p pbuf ( <ptr> pcr <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> xsd fec reg write ( <ptr> xsd fec <dot> <noptr> n <dot> <noptr> k <dot> <noptr> p size <dot> <noptr> offset )
<cls> <noptr> show spread ( <ptr> dev <dot> <ptr> dev attr <dot> <ptr> buf )
<cls> <noptr> pch p hub bin write ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> vmc i resource add ( <ptr> resource <dot> <noptr> resource type <dot> <noptr> handle )
<cls> <noptr> vmc i host get version ( <ptr> vmc i host dev <dot> <noptr> cmd <dot> <ptr> u ptr )
<cls> <noptr> mic x send intr ( <ptr> m dev <dot> <noptr> door bell )
<cls> <noptr> fw status show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hl var ange init ( <ptr> h dev <dot> <ptr> var ange <dot> <noptr> start <dot> <noptr> end )
<cls> <noptr> go yam m u invalidate cache range ( <ptr> h dev <dot> <noptr> is hard <dot> <noptr> as id <dot> <noptr> va <dot> <noptr> size )
<cls> <noptr> go yap inmemory before cs ( <ptr> h dev <dot> <ptr> parser <dot> <ptr> user dma pkt <dot> <noptr> addr <dot> <noptr> dir )
<cls> <noptr> id tdb gfs csr write ( <ptr> file p <dot> <ptr> u buf <dot> <noptr> count <dot> <ptr> off p )
<cls> <noptr> sci f poll ( <ptr> u fds <dot> <noptr> n fds <dot> <noptr> timeout msecs )
<cls> <noptr> gru v top ( <ptr> gts <dot> <noptr> v addr <dot> <noptr> write <dot> <noptr> atomic <dot> <ptr> gpa <dot> <ptr> page shift )
<cls> <noptr> gru chip let setup tlb irq ( <noptr> chip let <dot> <ptr> irq name <dot> <noptr> irqhandler <dot> <noptr> cpu <dot> <noptr> blade )
<cls> <noptr> rts x usb add cmd ( <ptr> u cr <dot> <noptr> cmd type <dot> <noptr> reg addr <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> set component power status ( <ptr> c dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> r heartbeat file write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> rts x pci add cmd ( <ptr> pcr <dot> <noptr> cmd type <dot> <noptr> reg addr <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> hl pci elb i write ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> rts x usb transfer data ( <ptr> u cr <dot> <noptr> pipe <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> nums g <dot> <ptr> act len <dot> <noptr> timeout )
<cls> <noptr> eeprom read ( <ptr> adap <dot> <noptr> adrs <dot> <ptr> pval )
<cls> <ptr> getid ( <ptr> id array <dot> <noptr> max ids <dot> <noptr> base id <dot> <ptr> thread name )
<cls> <noptr> lis lv d get xyz ( <ptr> lis <dot> <ptr> x <dot> <ptr> y <dot> <ptr> z )
<cls> <noptr> rts x pci write register ( <ptr> pcr <dot> <noptr> addr <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> me ime h buf write ( <ptr> dev <dot> <ptr> hdr <dot> <noptr> hdr len <dot> <ptr> data <dot> <noptr> data len )
<cls> <noptr> sram read ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> pos <dot> <noptr> count )
<cls> <noptr> vmc i host do ctx add notify ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> mei hdc p repeater check flow prepare ack ( <ptr> dev <dot> <ptr> data <dot> <ptr> rep topology <dot> <ptr> rep send ack )
<cls> <noptr> hl set power state ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> hl data write ( <ptr> f <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> sci fwrite to ( <noptr> epd <dot> <noptr> l offset <dot> <noptr> len <dot> <noptr> r offset <dot> <noptr> flags )
<cls> <noptr> hlf w send cpu message ( <ptr> h dev <dot> <noptr> hw queueid <dot> <ptr> msg <dot> <noptr> len <dot> <noptr> timeout <dot> <ptr> result )
<cls> <noptr> b h set prox rate below ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> hbm ver show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> get user memory ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> size <dot> <noptr> n pages <dot> <noptr> start <dot> <noptr> offset <dot> <ptr> user ptr )
<cls> <noptr> hl write ( <ptr> dev <dot> <noptr> type <dot> <noptr> attr <dot> <noptr> channel <dot> <noptr> val )
<cls> <noptr> tf h write restart ( <ptr> tf h <dot> <noptr> p addr <dot> <noptr> gaa <dot> <noptr> v addr <dot> <noptr> as id <dot> <noptr> dirty <dot> <noptr> page size )
<cls> <noptr> rts x usb write register ( <ptr> u cr <dot> <noptr> addr <dot> <noptr> mask <dot> <noptr> data )
<cls> <ptr> go y a get int queue base ( <ptr> h dev <dot> <noptr> queueid <dot> <ptr> dma handle <dot> <ptr> queue len )
<cls> <noptr> gen wq e user v map ( <ptr> cd <dot> <ptr> m <dot> <ptr> u addr <dot> <noptr> size )
<cls> <noptr> compass power mode store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> a pds x lux show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hlp in host memory ( <ptr> h dev <dot> <noptr> addr <dot> <noptr> size <dot> <ptr> user ptr )
<cls> <noptr> rts x usb seq write register ( <ptr> u cr <dot> <noptr> addr <dot> <noptr> len <dot> <ptr> data )
<cls> <noptr> fast rpc invoke send ( <ptr> s ctx <dot> <ptr> ctx <dot> <noptr> kernel <dot> <noptr> handle )
<cls> <noptr> vmc i ctx rcv not ifications get ( <noptr> context id <dot> <dptr> dbhandle array <dot> <dptr> q phandle array )
<cls> <noptr> vmc i ctx get chk pt not ifiers ( <ptr> context <dot> <ptr> buf size <dot> <dptr> pbuf )
<cls> <noptr> gen wq e ffdc buff read ( <ptr> cd <dot> <noptr> uid <dot> <ptr> regs <dot> <noptr> max regs )
<cls> <noptr> vmc i q pair deque v ( <ptr> q pair <dot> <ptr> msg <dot> <noptr> iov size <dot> <noptr> buf type )
<cls> <noptr> gru load context data ( <ptr> save <dot> <ptr> gru base <dot> <noptr> ctx num <dot> <noptr> cbr map <dot> <noptr> dsr map <dot> <noptr> data valid )
<cls> <noptr> sysfs docmd ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> reg )
<cls> <noptr> rts x pci transfer data ( <ptr> pcr <dot> <ptr> sg list <dot> <noptr> nums g <dot> <noptr> read <dot> <noptr> timeout )
<cls> <noptr> altera execute ( <ptr> a state <dot> <ptr> p <dot> <noptr> program size <dot> <ptr> error address <dot> <ptr> exit code <dot> <ptr> format version )
<cls> <noptr> a pds x prox enable store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> eeprom xx read ( <ptr> priv <dot> <noptr> off <dot> <ptr> val <dot> <noptr> count )
<cls> <noptr> vmc i ctx set chk pt state ( <noptr> context id <dot> <noptr> cpt type <dot> <noptr> buf size <dot> <ptr> cpt buf )
<cls> <noptr> xsd fec reg write ( <ptr> xsd fec <dot> <noptr> p size <dot> <noptr> no packing <dot> <noptr> nm <dot> <noptr> offset )
<cls> <noptr> ilo read ( <ptr> fp <dot> <ptr> buf <dot> <noptr> len <dot> <ptr> off )
<cls> <noptr> log buf addr store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <ptr> gen wq e search mapping ( <ptr> c file <dot> <noptr> u addr <dot> <noptr> size <dot> <ptr> dma addr <dot> <dptr> virt addr )
<cls> <noptr> update bool config from reg ( <ptr> xsd fec <dot> <noptr> reg offset <dot> <noptr> bit num <dot> <ptr> config value )
<cls> <noptr> sci f get pages ( <noptr> epd <dot> <noptr> offset <dot> <noptr> len <dot> <dptr> pages )
<cls> <noptr> sci f v read from ( <noptr> epd <dot> <ptr> addr <dot> <noptr> len <dot> <noptr> r offset <dot> <noptr> flags )
<cls> <noptr> vm balloon enqueue page list ( <ptr> b <dot> <ptr> pages <dot> <ptr> n pages <dot> <noptr> page size )
<cls> <noptr> sci f register temp ( <noptr> epd <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> prot <dot> <ptr> out offset <dot> <dptr> out window )
<cls> <noptr> go y a init dma q man ( <ptr> h dev <dot> <noptr> dma id <dot> <noptr> bus address )
<cls> <noptr> go y a add endof cb packets ( <ptr> h dev <dot> <noptr> kernel address <dot> <noptr> len <dot> <noptr> c q addr <dot> <noptr> c q val <dot> <noptr> m six vec )
<cls> <noptr> altera set ir post ( <ptr> js <dot> <noptr> count <dot> <noptr> start index <dot> <ptr> post amble data )
<cls> <noptr> a pds x lux thresh below store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> sci fread from ( <noptr> epd <dot> <noptr> l offset <dot> <noptr> len <dot> <noptr> r offset <dot> <noptr> flags )
<cls> <noptr> go y a send cpu message ( <ptr> h dev <dot> <ptr> msg <dot> <noptr> len <dot> <noptr> timeout <dot> <ptr> result )
<cls> <noptr> alt jtag drs can ( <ptr> a state <dot> <noptr> start state <dot> <noptr> count <dot> <ptr> td i <dot> <ptr> t do )
<cls> <noptr> eeprom write ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> remote settings file write ( <ptr> file <dot> <ptr> u buff <dot> <noptr> count <dot> <ptr> offset )
<cls> <noptr> tf h write only ( <ptr> tf h <dot> <noptr> p addr <dot> <noptr> gaa <dot> <noptr> v addr <dot> <noptr> as id <dot> <noptr> dirty <dot> <noptr> page size )
<cls> <noptr> vmc i host do notify resource ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> xpc send activate irq part uv ( <ptr> part <dot> <ptr> msg <dot> <noptr> msg size <dot> <noptr> msg type )
<cls> <noptr> a pds x rate store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> xpc initiate send ( <noptr> partid <dot> <noptr> ch number <dot> <noptr> flags <dot> <ptr> payload <dot> <noptr> payload size )
<cls> <noptr> ee read ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> bin attr <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> altera read packed ( <ptr> buffer <dot> <noptr> bits <dot> <ptr> bits avail <dot> <ptr> in index )
<cls> <ptr> v op find v q ( <ptr> dev <dot> <noptr> index <dot> <ptr> ptr <dot> <ptr> name <dot> <noptr> ctx )
<cls> <noptr> sci f get window offset ( <ptr> ep <dot> <noptr> flags <dot> <noptr> offset <dot> <noptr> numpages <dot> <ptr> out offset )
<cls> <noptr> access store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <ptr> me icl enqueue ctrl w rcb ( <ptr> cl <dot> <noptr> length <dot> <noptr> fop type <dot> <ptr> fp )
<cls> <noptr> id tdb gfs csr read ( <ptr> file p <dot> <ptr> u buf <dot> <noptr> count <dot> <ptr> off p )
<cls> <noptr> rts x pci adds g tbl ( <ptr> pcr <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> end )
<cls> <noptr> h lvm ctx init with ranges ( <ptr> ctx <dot> <noptr> host range start <dot> <noptr> host range end <dot> <noptr> dram range start <dot> <noptr> dram range end )
<cls> <ptr> mic request threaded irq ( <ptr> mb dev <dot> <noptr> handler <dot> <noptr> thread fn <dot> <ptr> name <dot> <ptr> data <dot> <noptr> int rsrc )
<cls> <noptr> vmc i q pair enqueue ( <ptr> q pair <dot> <ptr> buf <dot> <noptr> buf size <dot> <noptr> buf type )
<cls> <noptr> rtsp c i switch clock ( <ptr> pcr <dot> <noptr> card clock <dot> <noptr> ssc depth <dot> <noptr> initial mode <dot> <noptr> double clk <dot> <noptr> vp clk )
<cls> <noptr> get va block ( <ptr> h dev <dot> <ptr> var ange <dot> <noptr> size <dot> <noptr> hint addr <dot> <noptr> is user ptr )
<cls> <noptr> gru dump context data ( <ptr> gru base <dot> <ptr> cch <dot> <ptr> u buf <dot> <noptr> ctx num <dot> <noptr> dsr cnt <dot> <noptr> flush c brs )
<cls> <ptr> mic request irq ( <ptr> sc dev <dot> <ptr> ptr <dot> <ptr> ptr <dot> <ptr> name <dot> <ptr> data <dot> <noptr> db )
<cls> <noptr> ilo pkt dequeue ( <ptr> hw <dot> <ptr> ccb <dot> <noptr> dir <dot> <ptr> id <dot> <ptr> len <dot> <dptr> pkt )
<cls> <noptr> hl debug f sic write ( <ptr> h dev <dot> <noptr> ic bus <dot> <noptr> ic addr <dot> <noptr> ic reg <dot> <noptr> val )
<cls> <noptr> drv cph array to user ( <ptr> user buf uva <dot> <ptr> user buf size <dot> <ptr> handle array <dot> <ptr> ret val )
<cls> <noptr> rts x pci dma maps g ( <ptr> pcr <dot> <ptr> sg list <dot> <noptr> nums g <dot> <noptr> read )
<cls> <noptr> ds eeprom read ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> v op virtio copyto user ( <ptr> v dev <dot> <ptr> u buf <dot> <noptr> len <dot> <noptr> daddr <dot> <noptr> d len <dot> <noptr> v rid x )
<cls> <noptr> xpc set interface ( <ptr> ptr <dot> <ptr> ptr <dot> <ptr> ptr <dot> <noptr> int <dot> <noptr> u <dot> <ptr> <dot> <ptr> ptr <dot> <ptr> ptr <dot> <noptr> int <dot> <noptr> u <dot> <ptr> <dot> <noptr> u <dot> <noptr> xpc notify func <dot> <ptr> ptr <dot> <ptr> ptr <dot> <noptr> int <dot> <ptr> ptr <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> gru dump context ( <ptr> gru <dot> <noptr> ctx num <dot> <ptr> u buf <dot> <ptr> u buf end <dot> <noptr> data opt <dot> <noptr> lock cch <dot> <noptr> flush c brs )
<cls> <noptr> altera swapi r ( <ptr> a state <dot> <noptr> count <dot> <ptr> in data <dot> <noptr> in index <dot> <ptr> out data <dot> <noptr> out index )
<cls> <noptr> vmc i host do ctx get cpt state ( <ptr> vmc i host dev <dot> <ptr> ioctl name <dot> <ptr> u ptr )
<cls> <noptr> go yam m u update as id hop addr ( <ptr> h dev <dot> <noptr> as id <dot> <noptr> phys addr )
<cls> <noptr> ext queue sanity checks ( <ptr> h dev <dot> <ptr> q <dot> <noptr> numof entries <dot> <noptr> reserve c q entry )
<cls> <noptr> mic gets mpt ref count ( <ptr> m dev <dot> <noptr> dma addr <dot> <noptr> size <dot> <ptr> ref <dot> <ptr> smp tstart )
<cls> <noptr> vmc i q p broker unmap ( <noptr> handle <dot> <ptr> context <dot> <noptr> gid )
<cls> <noptr> xsd fec reg write ( <ptr> xsd fec <dot> <noptr> sc off <dot> <noptr> la off <dot> <noptr> q coff <dot> <noptr> offset )
<cls> <noptr> alter air scan ( <ptr> a state <dot> <noptr> count <dot> <ptr> td i data <dot> <noptr> start index )
<cls> <noptr> pch p hub bin read ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> vmc i ctx notify d bell ( <noptr> src cid <dot> <noptr> handle <dot> <noptr> src priv flags )
<cls> <noptr> mei hdc p verify receiver cert prepare km ( <ptr> dev <dot> <ptr> data <dot> <ptr> r x cert <dot> <ptr> km stored <dot> <ptr> ek pub km <dot> <ptr> msgs z )
<cls> <noptr> hl mmu map ( <ptr> ctx <dot> <noptr> virt addr <dot> <noptr> phys addr <dot> <noptr> page size <dot> <noptr> is dram addr )
<cls> <ptr> mic request threaded irq ( <ptr> m dev <dot> <noptr> handler <dot> <noptr> thread fn <dot> <ptr> name <dot> <ptr> data <dot> <noptr> int rsrc <dot> <noptr> type )
<cls> <noptr> altera get act info ( <ptr> p <dot> <noptr> program size <dot> <noptr> index <dot> <dptr> name <dot> <dptr> description <dot> <dptr> proc list )
<cls> <noptr> gru init chip let ( <ptr> gru <dot> <noptr> p addr <dot> <ptr> v addr <dot> <noptr> blade id <dot> <noptr> chip let id )
<cls> <noptr> rts x usb switch clock ( <ptr> u cr <dot> <noptr> card clock <dot> <noptr> ssc depth <dot> <noptr> initial mode <dot> <noptr> double clk <dot> <noptr> vp clk )
<cls> <noptr> rts x usb bulk transfers g list ( <ptr> u cr <dot> <noptr> pipe <dot> <ptr> sg <dot> <noptr> nums g <dot> <noptr> length <dot> <ptr> act len <dot> <noptr> timeout )
<cls> <noptr> c port read flash data ( <ptr> filp <dot> <ptr> k obj <dot> <ptr> attr <dot> <ptr> buffer <dot> <noptr> offset <dot> <noptr> count )
<cls> <noptr> mic smp top ( <ptr> m dev <dot> <noptr> dma addr <dot> <noptr> entries <dot> <ptr> ref <dot> <noptr> size )
<cls> <noptr> rts x pci switch clock ( <ptr> pcr <dot> <noptr> card clock <dot> <noptr> ssc depth <dot> <noptr> initial mode <dot> <noptr> double clk <dot> <noptr> vp clk )
<cls> <noptr> xpc connect ( <noptr> ch number <dot> <noptr> func <dot> <ptr> key <dot> <noptr> payload size <dot> <noptr> n entries <dot> <noptr> assigned limit <dot> <noptr> idle limit )
<cls> <noptr> xsd fec reg write ( <ptr> xsd fec <dot> <noptr> n layers <dot> <noptr> n mqc <dot> <noptr> norm type <dot> <noptr> special q c <dot> <noptr> no final parity <dot> <noptr> max schedule <dot> <noptr> offset )
<cls> <noptr> alt jtag irs can ( <ptr> a state <dot> <noptr> start state <dot> <noptr> count <dot> <ptr> td i <dot> <ptr> t do )
<cls> <noptr> v op find v qs ( <ptr> dev <dot> <noptr> nv qs <dot> <ptr> v qs <dot> <ptr> callbacks <dot> <ptr> const names <dot> <ptr> ctx <dot> <ptr> desc )
<cls> <noptr> sci frm a copy ( <noptr> epd <dot> <noptr> l offset <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> r offset <dot> <noptr> flags <dot> <noptr> dir <dot> <noptr> last chunk )
<cls> <noptr> t gh invalidate ( <ptr> t gh <dot> <noptr> v addr <dot> <noptr> v addr mask <dot> <noptr> as id <dot> <noptr> page size <dot> <noptr> global <dot> <noptr> n <dot> <noptr> ctx bitmap )
<cls> <noptr> xsd fect able write ( <ptr> xsd fec <dot> <noptr> offset <dot> <ptr> src ptr <dot> <noptr> len <dot> <noptr> base addr <dot> <noptr> depth )
<cls> <noptr> xpc send activate irq chu v ( <ptr> ch <dot> <ptr> irq flags <dot> <ptr> msg <dot> <noptr> msg size <dot> <noptr> msg type )
<cls> <noptr> grup reload tlb ( <ptr> gru <dot> <ptr> gts <dot> <noptr> atomic <dot> <noptr> fault v addr <dot> <noptr> as id <dot> <noptr> write <dot> <noptr> tlb preload count <dot> <ptr> tf h <dot> <ptr> cbe )
<cls> <noptr> q p broker attach ( <ptr> entry <dot> <noptr> peer <dot> <noptr> flags <dot> <noptr> priv flags <dot> <noptr> produce size <dot> <noptr> consume size <dot> <ptr> page store <dot> <ptr> context <dot> <noptr> wakeup cb <dot> <ptr> client data <dot> <dptr> ent )
<cls> <noptr> age ( <ptr> ioc )
<cls> <noptr> nit ( <ptr> gsp ca dev )
<cls> <noptr> age defaults ( <ptr> ioc )
<cls> <noptr> ages ( <ptr> ioc )
<cls> <noptr> ol umes ( <ptr> ioc )
<cls> <noptr> acts ( <ptr> ioc <dot> <noptr> sleep flag <dot> <noptr> reason )
<cls> <noptr> age ( <ptr> ioc <dot> <noptr> portnum )
<cls> <noptr> arms ( <ptr> hd <dot> <ptr> target <dot> <ptr> s dev )
<cls> <noptr> age cmp func ( <ptr> a <dot> <ptr> b )
<cls> <noptr> and ler ( <ptr> ioc <dot> <noptr> sleep flag )
<cls> <noptr> ot ification ( <ptr> ioc <dot> <ptr> p event reply <dot> <ptr> ev handlers )
<cls> <noptr> ett ings ( <ptr> ioc <dot> <noptr> portnum )
<cls> <noptr> nt ( <noptr> number )
<cls> <noptr> ck ( <ptr> ioc <dot> <noptr> how long <dot> <noptr> sleep flag )
<cls> <noptr> tart ( <ptr> state <dot> <noptr> off )
<cls> <noptr> nable ( <ptr> ioc <dot> <noptr> portnum <dot> <noptr> sleep flag )
<cls> <noptr> uffer ( <ptr> buffer <dot> <noptr> length <dot> <noptr> flags )
<cls> <noptr> age ( <ptr> ioc <dot> <noptr> ioc port <dot> <ptr> ptr <dot> <noptr> int <dot> <ptr> ptr )
<cls> <noptr> arget ( <ptr> hd <dot> <ptr> v target <dot> <ptr> s dev )
<cls> <noptr> age ( <ptr> hd <dot> <noptr> channel <dot> <noptr> id )
<cls> <noptr> e set ( <ptr> ioc <dot> <noptr> reset type <dot> <noptr> sleep flag )
<cls> <noptr> gmt ( <ptr> hd <dot> <noptr> type <dot> <noptr> channel <dot> <noptr> id <dot> <noptr> lun <dot> <noptr> ctx abort <dot> <noptr> timeout )
<cls> <noptr> p sec ( <ptr> cd )
<cls> <noptr> rcvd uv ( )
<cls> <noptr> pte addr ( <ptr> ctx <dot> <noptr> hop addr <dot> <noptr> virt addr <dot> <noptr> mask <dot> <noptr> shift )
<cls> <noptr> part uv ( <ptr> part <dot> <ptr> msg <dot> <noptr> msg size <dot> <noptr> msg type )
<cls> <noptr> chu v ( <ptr> ch <dot> <ptr> irq flags <dot> <ptr> msg <dot> <noptr> msg size <dot> <noptr> msg type )
<cls> <noptr> c xxx v l create entities ( <ptr> dev )
<cls> <ptr> alloc in work order irq ( <ptr> c x )
<cls> <noptr> ov enum frame sizes ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> vbo psv dec queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> coda queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> descriptor list create ( <ptr> cobalt <dot> <ptr> scatter list <dot> <noptr> to pci <dot> <noptr> s glen <dot> <noptr> size <dot> <noptr> width <dot> <noptr> stride <dot> <ptr> desc )
<cls> <noptr> v pbe buffer queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> sun i video queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> c x dt nr dmd create ( <ptr> tn r dmd <dot> <ptr> io <dot> <ptr> create param )
<cls> <noptr> media g obj create ( <ptr> m dev <dot> <noptr> type <dot> <ptr> g obj )
<cls> <noptr> tw x queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> media create pad link ( <ptr> source <dot> <noptr> source pad <dot> <ptr> sink <dot> <noptr> sink pad <dot> <noptr> flags )
<cls> <noptr> life num frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> vsp create sink links ( <ptr> vsp <dot> <ptr> sink )
<cls> <noptr> h fi session create ( <ptr> inst <dot> <ptr> ops )
<cls> <noptr> alsa cards aa create ( <ptr> dev <dot> <noptr> dev num )
<cls> <noptr> ddb device create ( <ptr> dev )
<cls> <noptr> put v l create ( <ptr> p <dot> <ptr> p )
<cls> <noptr> v l m c create media graph ( <ptr> m dev )
<cls> <noptr> h va queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> net up uni dvb queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> ddb class create ( )
<cls> <noptr> px pqueue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> dvb create io int f links ( <ptr> adap <dot> <ptr> int f <dot> <ptr> name )
<cls> <noptr> dcm i queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> de interlace queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> parse alloc mode ( <ptr> core <dot> <noptr> codecs <dot> <noptr> domain <dot> <ptr> data )
<cls> <noptr> solo queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> meta cap queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> vim m queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> sp jpeg queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> air spy queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> j pu controls create ( <ptr> ctx )
<cls> <ptr> c sid get format ( <ptr> c sid <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> vb i out queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> vp if buffer queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> video buf queue v malloc init ( <ptr> q <dot> <ptr> ops <dot> <ptr> dev <dot> <ptr> irq lock <dot> <noptr> type <dot> <noptr> field <dot> <noptr> m size <dot> <ptr> priv <dot> <ptr> ext lock )
<cls> <noptr> v pe queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> tw queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> p xac vb queue setup ( <ptr> v q <dot> <ptr> n buf s <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> emma prp queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> a speed video queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> v pd mah w list alloc ( <ptr> vp dma <dot> <ptr> priv )
<cls> <noptr> vivid create queue ( <ptr> dev <dot> <ptr> q <dot> <noptr> buf type <dot> <noptr> min buffers needed <dot> <ptr> ops )
<cls> <noptr> vb icap queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> delta vba u queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> dt queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> meta out queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> v dec queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> venus helper int buf sre alloc ( <ptr> inst )
<cls> <noptr> cam if create media links ( <ptr> cam if )
<cls> <noptr> delta vb frame queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> au analog create entities ( <ptr> dev )
<cls> <noptr> omap v out vb queue setup ( <ptr> v q <dot> <ptr> n buf s <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> fim c lite create capture sub dev ( <ptr> fim c )
<cls> <noptr> x vip dma queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> tw queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc ctx s )
<cls> <noptr> c x d spi device create spi ( <ptr> spi <dot> <ptr> spi device )
<cls> <noptr> vim c create links ( <ptr> vim c )
<cls> <noptr> ce u vb setup ( <ptr> v q <dot> <ptr> count <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> isc queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> fim cmd create fim c is links ( <ptr> f md )
<cls> <noptr> sh vou queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <ptr> mtv get pad crop ( <ptr> mtv <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> uvc queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> buf size v l create ( <ptr> p <dot> <ptr> size )
<cls> <noptr> vp dma create desc list ( <ptr> list <dot> <noptr> size <dot> <noptr> type )
<cls> <noptr> msi queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> rtl sdr queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> a zus binop ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> v pfe queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> hack r f queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <ptr> c cdc get format ( <ptr> c cdc <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> snd c x create ( <ptr> card <dot> <ptr> pci <dot> <dptr> r chip <dot> <dptr> core ptr )
<cls> <ptr> dib init ( <ptr> ic adap <dot> <noptr> ic addr <dot> <ptr> cfg )
<cls> <noptr> fdp queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc ctx s )
<cls> <noptr> return all buffers ( <ptr> vin <dot> <noptr> state )
<cls> <noptr> mtk jpeg queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc ctx s )
<cls> <noptr> cal queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> c x usb medi on v queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> bt tv calc geo ( <ptr> b tv <dot> <ptr> geo <dot> <noptr> width <dot> <noptr> height <dot> <noptr> both fields <dot> <ptr> tv norm <dot> <ptr> crop )
<cls> <noptr> vb ops venc queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> vim c cap queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> m lv enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> r card rif queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <ptr> e tek get pad format ( <ptr> sensor <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <ptr> v fe get compose ( <ptr> line <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> sp mfc queue setup ( <ptr> v q <dot> <ptr> buf count <dot> <ptr> plane count <dot> <noptr> p size <dot> <ptr> alloc devs )
<cls> <noptr> go queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> video queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> g scm m queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> j pu queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> get v l create ( <ptr> p <dot> <ptr> p <dot> <ptr> aux buf <dot> <noptr> aux space )
<cls> <noptr> gsc ctrls create ( <ptr> ctx )
<cls> <noptr> sun ics i queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <ptr> isp if get format ( <ptr> line <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> fim cmd create fim c sink links ( <ptr> f md <dot> <ptr> source <dot> <ptr> sensor <dot> <noptr> pad <dot> <noptr> link mask )
<cls> <noptr> saa create entities ( <ptr> dev )
<cls> <noptr> histo queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> v fee num frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> mtk mdp m m queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> fim c sub dev get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <ptr> mtm get pad crop ( <ptr> sensor <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> sa ats queue setup ( <ptr> q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> cio vb queue setup ( <ptr> v q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> usb tv queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> sdr cap queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> solo enc queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> scc am if create sub dev ( <ptr> cam if )
<cls> <ptr> spc sis get format ( <ptr> state <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> c side num frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <ptr> mtm get pad format ( <ptr> sensor <dot> <ptr> cfg <dot> <noptr> which )
<cls> <ptr> mtp get pad crop ( <ptr> mtp <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> r ga queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> sn div tv pcm create ( <ptr> it vsc )
<cls> <noptr> tune ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> msis tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> pvr v l dev dis associate parent ( <ptr> dip )
<cls> <noptr> tw x set format ( <ptr> vc <dot> <noptr> pixel format <dot> <noptr> width <dot> <noptr> height <dot> <noptr> realloc )
<cls> <ptr> imx get pad format ( <ptr> imx <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <ptr> mtv get pad format ( <ptr> mtv <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> go set motion regions ( <ptr> go <dot> <ptr> vb <dot> <noptr> motion regions )
<cls> <ptr> cxx get name ( <noptr> id )
<cls> <noptr> isp video queue setup ( <ptr> queue <dot> <ptr> count <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> via cam vb queue setup ( <ptr> v q <dot> <ptr> n buf s <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> gsp ca queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> check alloc b tres lock ( <ptr> b tv <dot> <ptr> f h <dot> <noptr> bit )
<cls> <ptr> resizer get format ( <ptr> res <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <ptr> xt pg get pad format ( <ptr> xt pg <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <ptr> csi phy get format ( <ptr> csi phy <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> vivid create controls ( <ptr> dev <dot> <noptr> show ccs cap <dot> <noptr> show ccs out <dot> <noptr> noerror inj <dot> <noptr> has sdt v <dot> <noptr> has hdmi )
<cls> <noptr> gpp skus binop ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> noone num mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> tcc ec adap monitor all enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> for each codec ( <ptr> caps <dot> <noptr> caps num <dot> <noptr> codecs <dot> <noptr> domain <dot> <noptr> cb <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> clue num frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> uvc m c create links ( <ptr> chain <dot> <ptr> entity )
<cls> <ptr> csi get format ( <ptr> csi <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <ptr> resizer get crop ( <ptr> res <dot> <ptr> cfg <dot> <noptr> which )
<cls> <ptr> imx get pad crop ( <ptr> imx <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <ptr> ska a get croprect ( <ptr> ska a <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> e tek enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> lock ( <ptr> state <dot> <noptr> address <dot> <noptr> block size <dot> <ptr> p block <dot> <noptr> flags )
<cls> <noptr> h site num frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> wl f m start ( <ptr> radio <dot> <noptr> new mode )
<cls> <noptr> r vin queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <ptr> m tt get pad format ( <ptr> m tt <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> vpx us binop ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> c xxx g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <ptr> ska get format ( <ptr> sensor <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> v spr wpf enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> dst tune front end ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> radio isa common probe ( <ptr> isa <dot> <ptr> pdev <dot> <noptr> radio nr <dot> <noptr> region size )
<cls> <noptr> v fe get wm sizes ( <ptr> pix <dot> <noptr> plane <dot> <ptr> width <dot> <ptr> height <dot> <ptr> bytes per line )
<cls> <ptr> mtp get pad format ( <ptr> mtp <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> usb vision create sysfs ( <ptr> v dev )
<cls> <noptr> chain all buffers ( <ptr> s )
<cls> <noptr> cec monitor all cnt inc ( <ptr> adap )
<cls> <noptr> cxx fill defaults ( <ptr> p )
<cls> <noptr> saa debug fs create ( )
<cls> <noptr> venus helper int buf s alloc ( <ptr> inst )
<cls> <noptr> ovs v flip ( <ptr> sd <dot> <noptr> value )
<cls> <ptr> t sin exchange ( <ptr> priv <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> clock <dot> <noptr> flags )
<cls> <noptr> g d queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> ovs test pattern ( <ptr> sd <dot> <noptr> value )
<cls> <noptr> as read ep ( <ptr> bus adap <dot> <ptr> recvbuf <dot> <noptr> recvbuf len )
<cls> <noptr> skb afe num mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> vld bgs register ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> vid ioc g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <ptr> cxx menu item ( <ptr> p <dot> <noptr> id )
<cls> <ptr> get ddb info ( <noptr> vendor <dot> <noptr> device <dot> <noptr> sub vendor <dot> <noptr> sub device )
<cls> <noptr> vim c sen enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> h site num mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> decode vps ( <ptr> dst <dot> <ptr> p )
<cls> <ptr> to vip buffer ( <ptr> vb )
<cls> <noptr> vim c cap return all buffers ( <ptr> vcap <dot> <noptr> state )
<cls> <noptr> fim cmd create links ( <ptr> f md )
<cls> <noptr> c side num mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> ine ( <ptr> av <dot> <noptr> window nr <dot> <noptr> x <dot> <noptr> y <dot> <noptr> d x <dot> <noptr> dy <dot> <noptr> color )
<cls> <noptr> bt tv risc init main ( <ptr> b tv )
<cls> <ptr> media request object find ( <ptr> req <dot> <ptr> ops <dot> <ptr> priv )
<cls> <noptr> smi app get crop compose ( <ptr> sub dev <dot> <ptr> cfg <dot> <dptr> crops <dot> <dptr> comps <dot> <noptr> which )
<cls> <noptr> m xls fstream config i soc ( <ptr> stream <dot> <noptr> endpoint <dot> <noptr> frames per urb <dot> <noptr> frame size )
<cls> <ptr> m tt get pad crop ( <ptr> m tt <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> read by mnemonic ( <ptr> state <dot> <noptr> reg <dot> <noptr> lsb loc <dot> <noptr> numof bits <dot> <ptr> val )
<cls> <noptr> fim c is wait event ( <ptr> is <dot> <noptr> bit <dot> <noptr> state <dot> <noptr> timeout )
<cls> <noptr> test platform param ( <ptr> pc dev <dot> <noptr> bus width <dot> <ptr> flags )
<cls> <noptr> lg dta set parameters ( <ptr> fe )
<cls> <noptr> cxx xic xfer ( <ptr> ic adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> m cam vid ioc enum frame sizes ( <ptr> filp <dot> <ptr> priv <dot> <ptr> sizes )
<cls> <noptr> em xx register dvb ( <ptr> dvb <dot> <ptr> module <dot> <ptr> dev <dot> <ptr> device )
<cls> <noptr> adv xx write reg ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> fim cs ctrl ( <ptr> ctrl )
<cls> <noptr> stv x send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> t efg frequency ( <ptr> sd <dot> <ptr> f )
<cls> <ptr> preview get crop ( <ptr> prev <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> show protocols ( <ptr> device <dot> <ptr> m attr <dot> <ptr> buf )
<cls> <noptr> c xxx copy video line ( <ptr> dev <dot> <ptr> dma q <dot> <ptr> p line <dot> <noptr> length <dot> <noptr> field number )
<cls> <noptr> init r cmap dtt u ( )
<cls> <noptr> cec log addr dev ( <ptr> adap <dot> <noptr> log addr )
<cls> <noptr> cec monitor pin cnt inc ( <ptr> adap )
<cls> <noptr> e sleep ( <ptr> dev )
<cls> <noptr> stv get fec lock ( <ptr> int p <dot> <noptr> demo d <dot> <noptr> timeout )
<cls> <noptr> td a setup reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> sp mfc set shared buffer ( <ptr> ctx )
<cls> <noptr> mtm get frame interval ( <ptr> sub dev <dot> <ptr> fi )
<cls> <noptr> vbd mas gmap dma buf ( <ptr> mem priv )
<cls> <noptr> max load fme up ( <ptr> ctx )
<cls> <noptr> venc queue setup ( <ptr> q <dot> <ptr> num buffers <dot> <ptr> num planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <ptr> mds attach ( <ptr> cfg <dot> <ptr> ic <dot> <dptr> tun eric adapter )
<cls> <noptr> c x dis eq c init ( <ptr> fe )
<cls> <ptr> checks aa debug ( )
<cls> <ptr> fim c lite find format ( <ptr> pixel format <dot> <ptr> mbus code <dot> <noptr> mask <dot> <noptr> index )
<cls> <noptr> ec download firmware ( <ptr> d <dot> <ptr> fw )
<cls> <noptr> c xxx read ic data ( <ptr> dev <dot> <noptr> dev addr <dot> <noptr> saddr <dot> <noptr> s addrlen <dot> <ptr> data <dot> <noptr> data len )
<cls> <noptr> pkt session flush ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> type )
<cls> <noptr> x box remote input report ( <ptr> urb )
<cls> <noptr> gs status format ( <noptr> status <dot> <ptr> timings )
<cls> <noptr> mtk venc param change ( <ptr> ctx )
<cls> <noptr> ov initialize controls ( <ptr> ov )
<cls> <noptr> video register media controller ( <ptr> v dev )
<cls> <noptr> dib p update l na ( <ptr> state )
<cls> <ptr> to keen e dev ( <ptr> v l dev )
<cls> <noptr> sp jpeg get sub sampling mode ( <ptr> regs )
<cls> <noptr> no power ( <ptr> sd )
<cls> <ptr> get free buffer ( <ptr> ctx )
<cls> <noptr> de interlace clr set bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> clr <dot> <noptr> set )
<cls> <noptr> dvb usb stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> au vid buffer timeout ( <ptr> t )
<cls> <noptr> au copy vb i ( <ptr> dev <dot> <ptr> dma q <dot> <ptr> buf <dot> <ptr> p <dot> <ptr> out p <dot> <noptr> len )
<cls> <noptr> sti h cec adap log addr ( <ptr> adap <dot> <noptr> logical addr )
<cls> <noptr> wait status ( <ptr> gsp ca dev )
<cls> <noptr> usb vision configure video ( <ptr> usb vision )
<cls> <noptr> mtp set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> histo v l get format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> exy nos jpeg set encode hoff cnt ( <ptr> base <dot> <noptr> fmt )
<cls> <noptr> ce u driver init ( )
<cls> <noptr> str c resume ( <ptr> dev )
<cls> <noptr> exy nos jpeg set dma num ( <ptr> regs )
<cls> <noptr> mba init ( <ptr> fe )
<cls> <noptr> apply front end param ( <ptr> fe )
<cls> <noptr> bt tv handle chipset ( <ptr> b tv )
<cls> <noptr> hack rfs frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> max get ln again ( <ptr> ctx )
<cls> <noptr> sa axs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> s write config ( <ptr> udev <dot> <ptr> pbuf <dot> <noptr> size )
<cls> <noptr> handle enc init msg ( <ptr> v pu <dot> <ptr> data )
<cls> <noptr> max freq r x mode valid ( <ptr> ctx <dot> <noptr> mode <dot> <noptr> freq )
<cls> <noptr> read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ic is error ( <noptr> status )
<cls> <noptr> tt pci budget init hooks ( <ptr> budget )
<cls> <noptr> sp mfc get enc slice type v ( <ptr> dev )
<cls> <noptr> x vip pipeline set stream ( <ptr> pipe <dot> <noptr> on )
<cls> <noptr> max b and from freq ( <noptr> freq )
<cls> <ptr> v fe get format ( <ptr> line <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> adb log status ( <ptr> sd )
<cls> <noptr> v l print control ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> c x set clk inversion ( <ptr> state <dot> <noptr> on )
<cls> <noptr> ccp if configure ( <ptr> ccp )
<cls> <noptr> z r x xvid ioc d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> tt usb setup interfaces ( <ptr> tt usb )
<cls> <noptr> vivid fb set col reg ( <noptr> regno <dot> <noptr> red <dot> <noptr> green <dot> <noptr> blue <dot> <noptr> transp <dot> <ptr> info )
<cls> <noptr> send space ir deo ( )
<cls> <noptr> l gdt x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> legacy dvb usb read remote control ( <ptr> work )
<cls> <noptr> fim c ish w initialize ( <ptr> is )
<cls> <noptr> c xxx mode register ( <ptr> dev <dot> <noptr> address <dot> <noptr> mode )
<cls> <noptr> pwc cleanup queued buf s ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> stv x set vit th acq ( <ptr> state )
<cls> <noptr> r card rif channel complete ( <ptr> ch <dot> <noptr> idx )
<cls> <noptr> vid io cs fmt vid out overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sti h cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> tuner write ( <ptr> dev <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> ene set learning mode ( <ptr> r dev <dot> <noptr> enable )
<cls> <noptr> pvr stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> a speed video get parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> cxx handler set busy ( <ptr> c x hdl <dot> <noptr> busy )
<cls> <ptr> to radio ( <ptr> ctrl )
<cls> <noptr> b disp get buf s ( <ptr> ctx )
<cls> <noptr> coda frame type char ( <noptr> flags )
<cls> <noptr> t dax configure v href ( <ptr> sd )
<cls> <noptr> sms usb term device ( <ptr> int f )
<cls> <noptr> fim cmd register sensor entities ( <ptr> f md )
<cls> <noptr> vp dec finish ( <ptr> inst )
<cls> <noptr> cam if hw enable capture ( <ptr> vp )
<cls> <noptr> imx open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> de interlace buf prepare ( <ptr> vb )
<cls> <noptr> c pia open ( <ptr> file )
<cls> <noptr> ov video probe ( <ptr> client )
<cls> <noptr> smi app update blank ing ( <ptr> sensor )
<cls> <noptr> c x cmd execute ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> net up unid v bci write cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> ov get gain ( <ptr> ov <dot> <ptr> ctrl )
<cls> <noptr> venus session init ( <ptr> inst <dot> <noptr> session type <dot> <noptr> codec )
<cls> <noptr> is ifconfig linear ization ( <ptr> linear ize )
<cls> <noptr> tca set pins ( <ptr> f m r <dot> <noptr> pins )
<cls> <noptr> stv x set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> mtm power off ( <ptr> mtm )
<cls> <noptr> s rpc get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> skb af check fw revision ( <ptr> state )
<cls> <ptr> check addr ( )
<cls> <noptr> noon try frame size ( <ptr> m f <dot> <dptr> size )
<cls> <noptr> saa write block ( <ptr> sd <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> vivid stop generating vid cap ( <ptr> dev <dot> <ptr> p streaming )
<cls> <noptr> omap v out ds so map xx ( )
<cls> <ptr> v pd mah w list get priv ( <ptr> vp dma <dot> <noptr> list num )
<cls> <noptr> irl irc ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> adv rewrite ic addresses ( <ptr> sd <dot> <ptr> p data )
<cls> <noptr> sh ve u enum fmt ( <ptr> f <dot> <ptr> fmt <dot> <noptr> fmt num )
<cls> <noptr> m m ols get version ( <ptr> sd )
<cls> <noptr> ves x set symbol rate ( <ptr> state <dot> <noptr> s rate )
<cls> <noptr> em xx i cir handle key ( <ptr> ir )
<cls> <noptr> r x low drive ( <ptr> pin )
<cls> <ptr> check share irq ( )
<cls> <noptr> c x initialize ( <ptr> client )
<cls> <noptr> stv get optim carr loop ( <noptr> s rate <dot> <noptr> mod code <dot> <noptr> pilot <dot> <noptr> chip id )
<cls> <noptr> bulk irq ( <ptr> urb )
<cls> <noptr> t dax write ( <ptr> fe <dot> <noptr> buf <dot> <noptr> len )
<cls> <noptr> ec read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> sif probe ( <ptr> gsp ca dev )
<cls> <noptr> saa try fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> wcf smbus start ( <ptr> sd )
<cls> <noptr> pt filter ( <ptr> pt <dot> <ptr> page )
<cls> <noptr> ov camera settings ( <ptr> gsp ca dev )
<cls> <noptr> log ctrl ( <ptr> ctrl <dot> <ptr> prefix <dot> <ptr> colon )
<cls> <noptr> fim cmm g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> v fe set demux cfg ( <ptr> v fe <dot> <ptr> line )
<cls> <noptr> solo enc handle one ( <ptr> solo enc <dot> <ptr> enc buf )
<cls> <noptr> j pu device run ( <ptr> priv )
<cls> <noptr> r vin buffer queue ( <ptr> vb )
<cls> <noptr> sp mfc resume ( <ptr> dev )
<cls> <noptr> v pbe find encoders d index ( <ptr> cfg <dot> <noptr> index )
<cls> <noptr> delta mjpeg check status ( <ptr> p ctx <dot> <ptr> status )
<cls> <noptr> ener x enable fan input ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> icr ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> isp stat pcr enable ( <ptr> stat <dot> <noptr> pcr enable )
<cls> <noptr> delta decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> cmd )
<cls> <noptr> pvr encoder read words ( <ptr> h dw <dot> <noptr> offs <dot> <ptr> data <dot> <noptr> d len )
<cls> <noptr> ctrl set balance ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> x c suspend ( <ptr> fe )
<cls> <noptr> uvc scan chain backward ( <ptr> chain <dot> <dptr> entity )
<cls> <noptr> dib rc setup ( <ptr> d <dot> <ptr> int f )
<cls> <noptr> delta ipc set stream ( <ptr> hdl <dot> <ptr> param )
<cls> <noptr> preview configure ( <ptr> prev )
<cls> <noptr> delta run work ( <ptr> work )
<cls> <noptr> isp if get int f ( <noptr> lineid )
<cls> <ptr> iv tv get output stream ( <ptr> it v )
<cls> <noptr> mtv enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> a lps stv set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> imx set gain ( <ptr> priv <dot> <ptr> ctrl )
<cls> <noptr> sz push half pulse ( <ptr> sz <dot> <noptr> value )
<cls> <noptr> tmp oll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> t dat u ner status ( <ptr> fe )
<cls> <noptr> im oninit display ( <ptr> i ctx <dot> <ptr> int f )
<cls> <noptr> show enum ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <ptr> match base ( <ptr> ic <dot> <noptr> adr )
<cls> <noptr> go snd capture open ( <ptr> sub stream )
<cls> <noptr> ov read reg ( <ptr> ov <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> ths d v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> lme stream restart ( <ptr> d )
<cls> <noptr> fdt v start feed ( <ptr> dvb dmx feed )
<cls> <noptr> scm spi boot ( <ptr> state <dot> <noptr> load fw )
<cls> <noptr> cio queue events of ( <ptr> cio <dot> <ptr> q )
<cls> <noptr> si driver init ( )
<cls> <noptr> me son a oce cga irq setup ( <ptr> ao cec <dot> <noptr> enable )
<cls> <ptr> vsp entity get pad selection ( <ptr> entity <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> target )
<cls> <noptr> c x load firmware ( <ptr> dev )
<cls> <noptr> c i attach ( <ptr> port )
<cls> <noptr> dib get init p rbs ( <ptr> state <dot> <noptr> sub channel )
<cls> <noptr> td a read regs ( <ptr> fe )
<cls> <noptr> dvb dummy fe set front end ( <ptr> fe )
<cls> <noptr> v l flash init controls ( <ptr> v l flash <dot> <ptr> flash cfg )
<cls> <noptr> dib usb pid filter ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> rdc reset state ( <ptr> state )
<cls> <noptr> checklist validity ( <ptr> inst <dot> <noptr> disp list )
<cls> <noptr> hi read reg ( <ptr> hi <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> air spy probe ( <ptr> int f <dot> <ptr> id )
<cls> <ptr> check p lvl ( )
<cls> <noptr> scm gpio set value ( <ptr> priv <dot> <noptr> id <dot> <noptr> val )
<cls> <noptr> m cam vid ioc enum input ( <ptr> filp <dot> <ptr> priv <dot> <ptr> input )
<cls> <ptr> check radio ( )
<cls> <noptr> m m ols set mode ( <ptr> info <dot> <noptr> mode )
<cls> <noptr> mmp cam add device ( <ptr> cam )
<cls> <noptr> gpp skb c m reload ( <ptr> d )
<cls> <noptr> v l m m ioctl query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <ptr> c dto usb vision ( <ptr> cd )
<cls> <noptr> v pbe buffer prepare ( <ptr> vb )
<cls> <noptr> dvb cae nio ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <ptr> check demo d ( )
<cls> <noptr> c x vb i irq ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> ov suspend ( <ptr> dev )
<cls> <noptr> tt usb dec fed v bt set front end ( <ptr> fe )
<cls> <noptr> stb sets rate ( <ptr> state <dot> <noptr> master clk <dot> <noptr> s rate )
<cls> <noptr> hdmi read ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask )
<cls> <noptr> stk select input ( <ptr> dev )
<cls> <noptr> saa h mute ( <ptr> sd )
<cls> <noptr> stv read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> uvc ioctl g input ( <ptr> file <dot> <ptr> f h <dot> <ptr> input )
<cls> <noptr> solo ic isr ( <ptr> solo dev )
<cls> <noptr> stk xx pid filter ctrl ( <ptr> adapter <dot> <noptr> onoff )
<cls> <noptr> isl set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> mtk mdp m m req buf s ( <ptr> file <dot> <ptr> f h <dot> <ptr> req buf s )
<cls> <noptr> ves set parameters ( <ptr> fe )
<cls> <noptr> v dec session init ( <ptr> inst )
<cls> <noptr> dvb feed start pid ( <ptr> dvb dmx feed )
<cls> <noptr> pvr channel get limited inputs ( <ptr> cp )
<cls> <noptr> end fw load ( <ptr> client )
<cls> <noptr> dvb ca ens lot shutdown ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> usb vision mux sel ( <ptr> usb vision <dot> <noptr> channel )
<cls> <noptr> t daf w upload ( <ptr> fe )
<cls> <noptr> stk d q callback ( <ptr> gsp ca dev )
<cls> <noptr> max g frequency ( <ptr> sd <dot> <ptr> v f )
<cls> <noptr> control r x enable ( <ptr> c <dot> <noptr> enable )
<cls> <noptr> img ir resume ( <ptr> dev )
<cls> <noptr> ctrl set resh or ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> io read n ( <ptr> sd <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> data )
<cls> <noptr> sd get stream parm ( <ptr> gsp ca dev <dot> <ptr> parm )
<cls> <ptr> check net up card rev ( )
<cls> <noptr> f m irq handle low rssi start ( <ptr> f m dev )
<cls> <noptr> vp dma submit descs ( <ptr> vp dma <dot> <ptr> list <dot> <noptr> list num )
<cls> <noptr> vid cap start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> vs ppm runtime resume ( <ptr> dev )
<cls> <noptr> dvb usb v device power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> c x detect nic am ( <ptr> core )
<cls> <noptr> mtk vcodec dec irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> c x usb medi on norm field order ( <noptr> norm )
<cls> <noptr> set it vc reg ( <ptr> dev <dot> <noptr> gpio direction <dot> <noptr> value )
<cls> <noptr> m i pid par set xep ( <ptr> bridge )
<cls> <noptr> c x g input status ( <ptr> sd <dot> <ptr> status )
<cls> <ptr> sd to iv tv ( <ptr> sd )
<cls> <noptr> z r xx stop acquire ( <ptr> cam )
<cls> <noptr> ov set auto exp ( <ptr> reg map <dot> <noptr> value )
<cls> <noptr> n ter rupt ( <ptr> port )
<cls> <noptr> c x read signal strength ( <ptr> fe <dot> <ptr> signal strength )
<cls> <noptr> v peg selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> sp mfc init mem ctrl ( <ptr> dev )
<cls> <noptr> sa air qts ( <ptr> port )
<cls> <noptr> a uled status ( <ptr> state <dot> <ptr> snr )
<cls> <noptr> saa disable clipping ( <ptr> dev )
<cls> <noptr> find start code ( <ptr> data <dot> <noptr> data sz )
<cls> <noptr> gpp sk fe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> stb get alpha ( <ptr> state )
<cls> <noptr> dvb cae nread tuple ( <ptr> ca <dot> <noptr> slot <dot> <ptr> address <dot> <ptr> tuple type <dot> <ptr> tuple length <dot> <ptr> tuple )
<cls> <noptr> saa read std ( <ptr> dev )
<cls> <noptr> r track init ( )
<cls> <noptr> ic isbusy ( <ptr> ic adap )
<cls> <noptr> init r cmap we tek hub ( )
<cls> <noptr> es frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> adc sync measurement ( <ptr> state <dot> <ptr> count )
<cls> <noptr> exy nos jpeg get frame size ( <ptr> base <dot> <ptr> width <dot> <ptr> height )
<cls> <noptr> mce write callback ( <ptr> urb )
<cls> <noptr> sa ats buffer init ( <ptr> vb )
<cls> <noptr> isp stat buf queue ( <ptr> stat )
<cls> <noptr> tt usb power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> r card rif set format ( <ptr> sdr )
<cls> <ptr> check x o speed ( )
<cls> <noptr> pvr c sla sub dev update ( <ptr> h dw <dot> <ptr> sd )
<cls> <noptr> mmp cam probe ( <ptr> pdev )
<cls> <noptr> get register timings ( <ptr> timings )
<cls> <noptr> b disp hw save request ( <ptr> ctx )
<cls> <noptr> sa axs ctrl ( <ptr> ctrl )
<cls> <noptr> sdp read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> b disp queue setup ( <ptr> v q <dot> <ptr> nb buf <dot> <ptr> nb planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> b disp hw get v f addr ( <noptr> inc )
<cls> <noptr> max csm action ( <ptr> ctx <dot> <noptr> action )
<cls> <noptr> hack rfs mod ulator ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> ati remote open ( <ptr> ati remote )
<cls> <noptr> md set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> m chip v size ( )
<cls> <noptr> saa input init ( <ptr> dev )
<cls> <noptr> uvc acquire privileges ( <ptr> handle )
<cls> <noptr> iv tv write vb i from user ( <ptr> it v <dot> <ptr> sliced <dot> <noptr> cnt )
<cls> <noptr> media request clean ( <ptr> req )
<cls> <noptr> cec thread func ( <ptr> adap )
<cls> <noptr> budget c i attach ( <ptr> dev <dot> <ptr> info )
<cls> <noptr> v dec if decode ( <ptr> ctx <dot> <ptr> bs <dot> <ptr> fb <dot> <ptr> res chg )
<cls> <noptr> isc formats init ( <ptr> isc )
<cls> <noptr> dib risc apb access write ( <ptr> state <dot> <noptr> address <dot> <noptr> attribute <dot> <ptr> b <dot> <noptr> len )
<cls> <noptr> max enum freq bands ( <ptr> sd <dot> <ptr> b and )
<cls> <noptr> ovs stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> mtk jpeg dec set q table ( <ptr> base <dot> <noptr> id <dot> <noptr> id <dot> <noptr> id )
<cls> <noptr> r vin set stream ( <ptr> vin <dot> <noptr> on )
<cls> <noptr> t dax read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> c xxx audio fini ( <ptr> dev )
<cls> <noptr> debug dst buffer ( <ptr> state )
<cls> <noptr> sti h cec irqhandler thread ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> pt do enable ram ( <ptr> pt )
<cls> <noptr> kodi com r write ( <ptr> b tv <dot> <noptr> x addr <dot> <noptr> y addr <dot> <noptr> data )
<cls> <noptr> v v set v flip ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> tm init ( <ptr> dev )
<cls> <noptr> em xx read ac ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> m m ols update fw ( <ptr> sd <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> c x der sleep tc ( <ptr> fe )
<cls> <noptr> venus sfr print ( <ptr> h dev )
<cls> <noptr> red rat reset ( <ptr> r r )
<cls> <noptr> set audio registers ( <ptr> core <dot> <ptr> l )
<cls> <noptr> imx suspend ( <ptr> dev )
<cls> <noptr> v dev init ( <ptr> b tv <dot> <ptr> v fd <dot> <ptr> template <dot> <ptr> type name )
<cls> <noptr> uvc ctrl get zoom ( <ptr> mapping <dot> <noptr> query <dot> <ptr> data )
<cls> <ptr> check bt tv gpio ( )
<cls> <noptr> dib tune restart from demo d ( <ptr> fe )
<cls> <noptr> init r cmap ter rate c slim ( )
<cls> <noptr> mt mic driver init ( )
<cls> <noptr> ec identify state ( <ptr> d <dot> <dptr> name )
<cls> <noptr> mb asset front end ( <ptr> fe )
<cls> <noptr> d ibm b pid control ( <ptr> fe <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> em xx query buttons ( <ptr> work )
<cls> <noptr> si read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> c x dt nr dmd mon r f lvl ( <ptr> tn r dmd <dot> <ptr> r flv ldb )
<cls> <noptr> isp video set format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> adv core init ( <ptr> sd )
<cls> <noptr> is i read l ( <ptr> is i <dot> <noptr> reg )
<cls> <noptr> img ir j vcs can code ( <noptr> len <dot> <noptr> raw <dot> <noptr> enabled protocols <dot> <ptr> request )
<cls> <noptr> v l print query ext ctrl ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> scc b reg read ( <ptr> gsp ca dev <dot> <noptr> reg )
<cls> <noptr> max set r f freq ( <ptr> ctx <dot> <noptr> freq <dot> <noptr> lo pos )
<cls> <noptr> g scm m job finish ( <ptr> ctx <dot> <noptr> vb state )
<cls> <noptr> rtl sdr convert stream ( <ptr> dev <dot> <ptr> dst <dot> <ptr> src <dot> <noptr> src len )
<cls> <noptr> mtk mdp wdt worker ( <ptr> work )
<cls> <noptr> td a set inversion ( <ptr> fe <dot> <noptr> inversion )
<cls> <noptr> gsc mms fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> as cote read regs ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> spx read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> c x mpeg irq ( <ptr> dev )
<cls> <noptr> h fi process msg packet ( <ptr> core <dot> <ptr> hdr )
<cls> <noptr> nv t cir log irq s ( <noptr> status <dot> <noptr> iren )
<cls> <noptr> ddb input start all ( <ptr> input )
<cls> <noptr> d sbr start ( <ptr> radio )
<cls> <noptr> r tls d run set adc ( <ptr> dev )
<cls> <noptr> adv x afe status ( <ptr> afe <dot> <ptr> signal <dot> <ptr> std )
<cls> <noptr> get algo ( <ptr> fe )
<cls> <noptr> mce usb dev suspend ( <ptr> int f <dot> <noptr> message )
<cls> <ptr> check c x pci latency ( )
<cls> <noptr> a speed video update jpeg quality ( <ptr> video )
<cls> <noptr> vid ioc try fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> m xls flg dt front end attach ( <ptr> adap <dot> <noptr> f eid )
<cls> <noptr> a speed video start ( <ptr> video )
<cls> <noptr> radio tea update read reg ( <ptr> tea <dot> <noptr> wait )
<cls> <noptr> adv s std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> asn decode ( <ptr> asn array )
<cls> <noptr> p xps fmt ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> uvc video validate buffer ( <ptr> stream <dot> <ptr> buf )
<cls> <noptr> iv tv v l open ( <ptr> filp )
<cls> <noptr> me son a oce cga probe ( <ptr> pdev )
<cls> <noptr> cio v lg fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <ptr> saa format by fourcc ( <ptr> dev <dot> <noptr> fourcc )
<cls> <noptr> sec oce c probe ( <ptr> pdev )
<cls> <noptr> vid ioc try fmt vid out overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> add fb to free list ( <ptr> inst <dot> <ptr> fb )
<cls> <noptr> commons io pin config ( <ptr> sd <dot> <noptr> n <dot> <ptr> pin cfg )
<cls> <noptr> bt tvs std ( <ptr> file <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> usb tv stop streaming ( <ptr> v q )
<cls> <noptr> gs read register ( <ptr> spi <dot> <noptr> addr <dot> <ptr> value )
<cls> <noptr> mtp set power ( <ptr> mtp <dot> <noptr> on )
<cls> <noptr> ves read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> mtk mdp mmdevice run ( <ptr> priv )
<cls> <noptr> stv send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> cit get packet size ( <ptr> gsp ca dev )
<cls> <noptr> imon mouse event ( <ptr> i ctx <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> imx read reg ( <ptr> imx <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> asf e read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> v l ctrl activate ( <ptr> ctrl <dot> <noptr> active )
<cls> <noptr> usb si driver init ( )
<cls> <noptr> media graph walk iter ( <ptr> graph )
<cls> <noptr> m cam ctl rdm asg ( <ptr> cam )
<cls> <noptr> r vin try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ov x power on ( <ptr> priv )
<cls> <noptr> ov xs stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> d ibm bread unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> c xxx init extension ( <ptr> dev )
<cls> <noptr> ctrl get crop t ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> dr x dap fas i read block ( <ptr> dev addr <dot> <noptr> addr <dot> <noptr> data size <dot> <ptr> data <dot> <noptr> flags )
<cls> <noptr> fim c capture suspend ( <ptr> fim c )
<cls> <noptr> venus run ( <ptr> h dev )
<cls> <noptr> s get f x fw ( <ptr> dev )
<cls> <noptr> cec pin changed ( <ptr> adap <dot> <noptr> value )
<cls> <noptr> init r cmap got view ( )
<cls> <noptr> ctrl clear dirty crop t ( <ptr> cptr )
<cls> <noptr> c x eeprom dump ( <ptr> c x <dot> <ptr> ee data <dot> <noptr> len )
<cls> <noptr> c x buf prepare ( <ptr> buf <dot> <ptr> port )
<cls> <noptr> trust initialize ( <ptr> isa )
<cls> <noptr> x ( <ptr> state <dot> <noptr> p kin <dot> <noptr> pk out <dot> <noptr> syn chrom ode <dot> <noptr> insert ext syn chro <dot> <noptr> sync word <dot> <noptr> sync size <dot> <noptr> data out rate )
<cls> <noptr> put end ( <ptr> c buf )
<cls> <noptr> session get prop buf req ( <ptr> pkt <dot> <ptr> buf req )
<cls> <noptr> stv x set frequency ( <ptr> fe <dot> <noptr> frequency )
<cls> <noptr> max core init ( <ptr> ctx <dot> <noptr> ref out bits )
<cls> <noptr> pulse drv init ( )
<cls> <noptr> c xs register ( <ptr> dev <dot> <ptr> reg )
<cls> <noptr> is dma done ( <ptr> s )
<cls> <noptr> c pia set gpio ( <ptr> cam <dot> <noptr> setting )
<cls> <noptr> l gdt x get tune settings ( <ptr> fe <dot> <ptr> fet une settings )
<cls> <noptr> dw probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> load cfg mem ( <ptr> tn r dmd )
<cls> <noptr> saa dump int f desc ( <ptr> dev )
<cls> <noptr> stv cab sleep ( <ptr> fe )
<cls> <noptr> v l try ext ctrls ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> isc enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> iv tv g std ( <ptr> file <dot> <ptr> f h <dot> <ptr> std )
<cls> <noptr> f m v ls ctrl ( <ptr> ctrl )
<cls> <noptr> c xxx s input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> v op sec ( <ptr> vh )
<cls> <noptr> dvb dmx dev filter timer ( <ptr> dmx dev filter )
<cls> <noptr> put ts metadata ( <ptr> inst <dot> <ptr> v buf )
<cls> <noptr> adv x hdmi set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> fim c cap g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> adb audio setup ( <ptr> sd )
<cls> <noptr> vps s clear w bl overflow ( <noptr> w bl sel )
<cls> <noptr> c x dt nr dmd dvb t mon sync stat ( <ptr> tn r dmd <dot> <ptr> sync stat <dot> <ptr> ts lock stat <dot> <ptr> unlock detected )
<cls> <noptr> c xxx init bulk ( <ptr> dev <dot> <noptr> max packets <dot> <noptr> num buf s <dot> <noptr> max pkt size <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> dib identify ( <ptr> fe )
<cls> <noptr> ov set exposure ( <ptr> ov <dot> <noptr> exposure )
<cls> <noptr> dib update l na ( <ptr> state )
<cls> <noptr> six ic resume ( <ptr> dev )
<cls> <noptr> net up uni dvb dvb fini ( <ptr> n dev <dot> <noptr> num )
<cls> <noptr> uvc ioctl g ext ctrls ( <ptr> file <dot> <ptr> f h <dot> <ptr> ctrls )
<cls> <noptr> adv sd v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> tea set freq ( <ptr> radio <dot> <noptr> freq )
<cls> <noptr> stream zap callback ( <ptr> urb )
<cls> <noptr> v pe try selection ( <ptr> ctx <dot> <ptr> s )
<cls> <noptr> vivid g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> stv x get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> fd tvc a get msg ( <ptr> fdt v <dot> <ptr> arg )
<cls> <noptr> sp jpeg reset ( <ptr> regs )
<cls> <noptr> it d write regs ( <ptr> state <dot> <noptr> reg <dot> <noptr> v <dot> <noptr> len )
<cls> <noptr> a zci polls lot status ( <ptr> ca <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> isl set modulation ( <ptr> fe )
<cls> <noptr> t dax get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dib usb d ibm c tuner attach ( <ptr> adap )
<cls> <noptr> read std i ( <ptr> sd <dot> <ptr> std i )
<cls> <noptr> c x audio fini ( )
<cls> <noptr> img ir probe ( <ptr> pdev )
<cls> <noptr> adv x hdmi check d v timings ( <ptr> timings <dot> <ptr> hdl )
<cls> <noptr> init r cmap ter rate cci ner gy shd ( )
<cls> <noptr> imx start streaming ( <ptr> imx )
<cls> <noptr> at b m read signal strength ( <ptr> fe <dot> <ptr> signal )
<cls> <noptr> c x usb driver init ( )
<cls> <noptr> v l fw node endpoint parse parallel bus ( <ptr> fw node <dot> <ptr> ve p <dot> <noptr> bus type )
<cls> <noptr> sp mfc init decode v ( <ptr> ctx )
<cls> <noptr> tegra cec probe ( <ptr> pdev )
<cls> <noptr> fim c is parse sensor config ( <ptr> is <dot> <noptr> index <dot> <ptr> node )
<cls> <noptr> cafe smbus shutdown ( <ptr> cam )
<cls> <noptr> m xl x sf demo d get sync lock status ( <ptr> state <dot> <ptr> sync lock )
<cls> <noptr> c iner gy trc query ( <ptr> d <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> isl set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> hi set ctrl ( <ptr> ctrl )
<cls> <noptr> dvb front end handle ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <ptr> uvc format by guid ( <noptr> guid )
<cls> <noptr> cypress get hex line ( <ptr> fw <dot> <ptr> h x <dot> <ptr> pos )
<cls> <noptr> pwc query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> prepare ext ctrls ( <ptr> hdl <dot> <ptr> cs <dot> <ptr> helpers <dot> <ptr> v dev <dot> <noptr> get )
<cls> <noptr> cio notifier complete ( <ptr> notifier )
<cls> <noptr> stb send dis eq c msg ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> stk try fmt ( <ptr> dev <dot> <ptr> f <dot> <ptr> ctrl )
<cls> <noptr> gpp sk fe update status ( <ptr> st )
<cls> <noptr> l gs gl read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> stv x write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> au irq callback ( <ptr> urb )
<cls> <noptr> d m enable clock ( <noptr> clock sel <dot> <noptr> en )
<cls> <noptr> ati remote close ( <ptr> ati remote )
<cls> <noptr> o vic r ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> isp stat buf sync magic for device ( <ptr> stat <dot> <ptr> buf <dot> <noptr> buf size <dot> <noptr> dir )
<cls> <noptr> h go configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> vs write ( <ptr> sd <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> r vin enum d v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> lg set spi clock ( <ptr> state )
<cls> <noptr> scm set sharp ness ( <ptr> state <dot> <noptr> val )
<cls> <noptr> state eval usb stream run ( <ptr> h dw )
<cls> <noptr> adp open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> h aaf enable ( <ptr> af <dot> <noptr> enable )
<cls> <noptr> v do a probe ( <ptr> pdev )
<cls> <noptr> adv x xce ctx raw status ( <ptr> sd <dot> <noptr> tx raw status )
<cls> <noptr> snd c xxx capture open ( <ptr> sub stream )
<cls> <noptr> avc remote ctrl work ( <ptr> work )
<cls> <noptr> init r cmap tbs nec ( )
<cls> <noptr> f dpg ctrl ( <ptr> ctrl )
<cls> <noptr> hwid show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> radio is ag tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> vp fes input ( <ptr> file <dot> <ptr> priv <dot> <noptr> index )
<cls> <noptr> cec feature abort reason ( <ptr> adap <dot> <ptr> msg <dot> <noptr> reason )
<cls> <noptr> st vic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> au initi soc ( <ptr> dev <dot> <noptr> max packets <dot> <noptr> num buf s <dot> <noptr> max pkt size <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> pct ve ic msg ( <ptr> d <dot> <noptr> addr <dot> <ptr> snd buf <dot> <noptr> snd len <dot> <ptr> rcv buf <dot> <noptr> rcv len )
<cls> <noptr> stv get bits ( <ptr> int p <dot> <noptr> label )
<cls> <noptr> calculate h scale registers ( <ptr> dev <dot> <noptr> in x <dot> <noptr> out x <dot> <noptr> flip lr <dot> <ptr> hps ctrl <dot> <ptr> hp svg ain <dot> <ptr> hp shp rescale <dot> <ptr> h psh scale )
<cls> <noptr> a fic function ality ( <ptr> adapter )
<cls> <noptr> get input lines info ( <ptr> dev )
<cls> <noptr> vb queue init ( <ptr> q )
<cls> <noptr> eeprom read ushort ( <ptr> adapter <dot> <noptr> tag <dot> <ptr> data )
<cls> <noptr> stv activates mod cod ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> au get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> h fi sys property info ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> m xls fant hunt ( <ptr> fe )
<cls> <noptr> dcm i irq thread ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> vb i buf prepare ( <ptr> vb )
<cls> <noptr> td a write reg bulk ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <ptr> max attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> tvp x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mt send burst ( <ptr> fe <dot> <noptr> c )
<cls> <noptr> twin it dev ( <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> v fe check clock rates ( <ptr> v fe )
<cls> <noptr> c pia match video size ( <noptr> width <dot> <noptr> height )
<cls> <noptr> dvb front end clear events ( <ptr> fe )
<cls> <noptr> dvb dmx open ( <ptr> demux )
<cls> <noptr> gpp sk fe set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> tw get audio gain ( <ptr> solo dev <dot> <noptr> ch )
<cls> <noptr> uvc event control ( <ptr> urb <dot> <ptr> status <dot> <noptr> len )
<cls> <noptr> gpio irq ( <noptr> cookie )
<cls> <noptr> cam if request irq s ( <ptr> pdev <dot> <ptr> cam if )
<cls> <noptr> v l sub dev link validate ( <ptr> link )
<cls> <noptr> sms core configure gpio ( <ptr> core dev <dot> <noptr> pin <dot> <ptr> pin config )
<cls> <noptr> b tt vid card ( <ptr> b tv )
<cls> <noptr> th ssd v timings ( <ptr> sd <dot> <ptr> d v timings )
<cls> <noptr> check selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> delta get sync ( <ptr> ctx )
<cls> <noptr> delta mjpeg open ( <ptr> p ctx )
<cls> <noptr> c xdr read statust ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ir raw event store with filter ( <ptr> dev <dot> <ptr> ev )
<cls> <noptr> c x int log ( <noptr> a <dot> <noptr> b )
<cls> <noptr> vid ioc v dec enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> unlock page lru ( <ptr> page <dot> <noptr> isolated )
<cls> <noptr> iv tv api call ( <ptr> it v <dot> <noptr> cmd <dot> <noptr> args <dot> <noptr> data )
<cls> <noptr> nolock t mds ( <ptr> sd )
<cls> <noptr> hdp v rs ctrl ( <ptr> ctrl )
<cls> <noptr> adv x hdmi sd v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> gpp sk fe read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> isp sub clk update ( <ptr> isp )
<cls> <noptr> set quality ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> t dax g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> iv tv yuv handle vertical ( <ptr> it v <dot> <ptr> f )
<cls> <noptr> px p driver init ( )
<cls> <noptr> vivid clear fb ( <ptr> dev )
<cls> <noptr> pkt session set buffers ( <ptr> pkt <dot> <ptr> cookie <dot> <ptr> bd )
<cls> <noptr> y ( <ptr> state )
<cls> <noptr> dwt focus vcm ( <ptr> dw dev <dot> <noptr> val )
<cls> <noptr> mtv set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> saa get current firmware version ( <ptr> dev )
<cls> <noptr> r vin m c init ( <ptr> vin )
<cls> <noptr> net upc i read attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> gpp skus b probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> dvb dmx dev feed stop ( <ptr> dmx dev filter )
<cls> <noptr> pvr buffer getid ( <ptr> b p )
<cls> <noptr> mt calc input freq ( <ptr> state <dot> <ptr> buf )
<cls> <noptr> adv cec write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> c x risc dis asm ( <ptr> port <dot> <ptr> risc )
<cls> <noptr> get mailbox ( <ptr> it v <dot> <ptr> mb data <dot> <noptr> flags )
<cls> <noptr> iv tv g pts frame ( <ptr> it v <dot> <ptr> pts <dot> <ptr> frame )
<cls> <noptr> c x audio thread ( <ptr> data )
<cls> <noptr> asf e get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> dvb dmx sw filter packet ( <ptr> demux <dot> <ptr> buf )
<cls> <noptr> nv t cir wake reg write ( <ptr> nv t <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> c x usb l gdt front end attach ( <ptr> adap )
<cls> <noptr> vp if update resolution ( <ptr> ch )
<cls> <noptr> tw suspend ( <ptr> pci dev <dot> <noptr> state )
<cls> <noptr> csi phy enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> d ibm c set impulse noise ( <ptr> state <dot> <noptr> mode <dot> <noptr> nfft )
<cls> <noptr> m m ols write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> em xx init buttons ( <ptr> dev )
<cls> <noptr> si initialize ( <ptr> s dev )
<cls> <noptr> handle cec message ( <ptr> cro sec cec )
<cls> <noptr> alter aci write attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> cit check button ( <ptr> gsp ca dev )
<cls> <noptr> match fw node ( <ptr> sd <dot> <ptr> asd )
<cls> <noptr> ov get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> ic recv byte ( <ptr> dev )
<cls> <noptr> ati remote probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> adv x hdmi set de timings ( <ptr> state <dot> <noptr> shift )
<cls> <noptr> v bdc get contiguous size ( <ptr> sgt )
<cls> <noptr> dib p tuner sleep ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> c pia query buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> cafe pci suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> saa vb i stop port ( <ptr> port )
<cls> <noptr> stv write reg mask ( <ptr> state <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> tv audio sleep ( <ptr> dev <dot> <noptr> timeout )
<cls> <ptr> plane v addr ( <ptr> tp g <dot> <ptr> buf <dot> <noptr> p <dot> <noptr> bpl <dot> <noptr> h )
<cls> <noptr> c x der read statust c ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> stb get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> gpio ir recv probe ( <ptr> pdev )
<cls> <noptr> fim c sub dev enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> td adi seq c send burst ( <ptr> fe <dot> <noptr> fe sec mini cmd )
<cls> <noptr> j pu parse hdr ( <ptr> buffer <dot> <noptr> size <dot> <ptr> width <dot> <ptr> height )
<cls> <noptr> ov powerup ( <ptr> sensor )
<cls> <noptr> black bird codec settings ( <ptr> dev )
<cls> <noptr> td a get afc ( <ptr> fe <dot> <ptr> afc )
<cls> <noptr> venus sys set coverage ( <ptr> h dev <dot> <noptr> mode )
<cls> <noptr> r tim r ( <ptr> priv <dot> <noptr> imr mem <dot> <noptr> im flag )
<cls> <noptr> bts routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> hi x h dir r x interrupt ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> scc bw array ( <ptr> gsp ca dev <dot> <ptr> ptr <dot> <noptr> len )
<cls> <noptr> g scm m stream off ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> skb af hw set video bus ( <ptr> state )
<cls> <noptr> venus cpu and video core idle ( <ptr> h dev )
<cls> <noptr> init r cmap xmax ( )
<cls> <noptr> mtk jpeg clk init ( <ptr> jpeg )
<cls> <noptr> m xls f tuner get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> saa log status ( <ptr> sd )
<cls> <noptr> dtt ufe read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> de interlace try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> omap isp stat enable ( <ptr> stat <dot> <noptr> enable )
<cls> <noptr> tw x pcm pointer ( <ptr> ss )
<cls> <noptr> vp fec cdc restore defaults ( <ptr> c cdc )
<cls> <noptr> t dax subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> mba front end algo ( <ptr> fe )
<cls> <noptr> c x der shutdown tc ( <ptr> fe )
<cls> <noptr> sa aic adapter prepare ( <ptr> dev <dot> <ptr> ic adapter <dot> <noptr> bitrate )
<cls> <noptr> px adm a start channels ( <ptr> pc dev )
<cls> <noptr> imx g frame interval ( <ptr> sub dev <dot> <ptr> f ival )
<cls> <noptr> omap isp module sync is stopping ( <ptr> wait <dot> <ptr> stopping )
<cls> <ptr> msp standard std name ( <noptr> std )
<cls> <noptr> lg x get prc ( <ptr> state <dot> <ptr> prc )
<cls> <noptr> dvb usb v download firmware ( <ptr> d <dot> <ptr> name )
<cls> <noptr> stv x set pls ( <ptr> state <dot> <noptr> pls code )
<cls> <noptr> lg d tic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> c x card setup pre ic ( <ptr> core )
<cls> <noptr> put byte read ( <ptr> c buf <dot> <noptr> size )
<cls> <noptr> no ons power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> c x drw r reg val mask tab ( <ptr> priv <dot> <ptr> tab <dot> <noptr> tablen )
<cls> <noptr> stk ph tuner attach ( <ptr> adap )
<cls> <noptr> reset and configure ( <ptr> state )
<cls> <noptr> stmt x done ( <ptr> cec <dot> <noptr> status )
<cls> <noptr> ctrl get crop cap pad ( <ptr> cptr <dot> <ptr> val )
<cls> <noptr> block from buf ( <ptr> s <dot> <ptr> buf )
<cls> <noptr> coda job ready ( <ptr> m m priv )
<cls> <noptr> c x der init tc ( <ptr> fe )
<cls> <noptr> v pbe get std info by name ( <ptr> v pbe dev <dot> <ptr> std name )
<cls> <noptr> imx resume ( <ptr> dev )
<cls> <ptr> b disp find fmt ( <noptr> pixel format )
<cls> <noptr> red rat dev resume ( <ptr> int f )
<cls> <ptr> check boost audio ( )
<cls> <noptr> mtm set pad selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> z l read register ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> v op mpeg offset ( <ptr> vh )
<cls> <noptr> ir raw gen pl ( <dptr> ev <dot> <noptr> max <dot> <ptr> timings <dot> <noptr> n <dot> <noptr> data )
<cls> <noptr> enet x disable ( <ptr> dev )
<cls> <noptr> em xx capture start ( <ptr> dev <dot> <noptr> start )
<cls> <noptr> fim c set scaler info ( <ptr> ctx )
<cls> <noptr> fim c is resume ( <ptr> dev )
<cls> <noptr> e driver init ( )
<cls> <noptr> saa video port init ( <ptr> dev )
<cls> <noptr> flex cop pid group filter ctrl ( <ptr> fc <dot> <noptr> onoff )
<cls> <ptr> check empres snr ( )
<cls> <noptr> v l async notifier try complete ( <ptr> notifier )
<cls> <noptr> m x read ( <ptr> udev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> cec claim log addrs ( <ptr> adap <dot> <noptr> block )
<cls> <ptr> vbd mas g dma buf ops v map ( <ptr> d buf )
<cls> <noptr> stb get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> sc config scaler ( <ptr> sc <dot> <ptr> scre g <dot> <ptr> scre g <dot> <ptr> scre g <dot> <noptr> src w <dot> <noptr> srch <dot> <noptr> dst w <dot> <noptr> d sth )
<cls> <noptr> v pen c read reg ( <ptr> inst <dot> <noptr> addr )
<cls> <noptr> td a set aud mode ( <ptr> chip <dot> <noptr> mode )
<cls> <noptr> td latch value ( <ptr> b tv <dot> <noptr> value )
<cls> <noptr> m eye vm open ( <ptr> vma )
<cls> <noptr> c sid find code ( <ptr> code <dot> <noptr> ncode <dot> <noptr> index <dot> <noptr> req code )
<cls> <noptr> device run ( <ptr> priv )
<cls> <noptr> dvb v set delivery system ( <ptr> fe )
<cls> <noptr> gap store ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> spread reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> av set ir config ( <ptr> av )
<cls> <noptr> cal quick dump regs ( <ptr> dev )
<cls> <noptr> snd usb tv prepare ( <ptr> sub stream )
<cls> <noptr> j pu buf queue ( <ptr> vb )
<cls> <noptr> venus session get property ( <ptr> inst <dot> <noptr> ptype )
<cls> <ptr> e tek reg list find mode fmt ( <ptr> meta <dot> <ptr> fmt )
<cls> <noptr> dvb feed stop pid ( <ptr> dvb dmx feed )
<cls> <noptr> v pfe set front end ( <ptr> fe )
<cls> <noptr> load i mem segment ( <ptr> fe i <dot> <ptr> phdr <dot> <ptr> fw <dot> <ptr> dest <dot> <noptr> seg num )
<cls> <noptr> mtk irq disable ( <ptr> ir <dot> <noptr> mask )
<cls> <noptr> m base tfe ( <ptr> state )
<cls> <noptr> c x usb dual dig front end attach ( <ptr> adap )
<cls> <noptr> m xls reset ( <ptr> fe )
<cls> <noptr> u mt tuner attach ( <ptr> adap )
<cls> <noptr> m probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mmp cam suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> fim c clk get ( <ptr> fim c )
<cls> <noptr> tc isr ( <ptr> sd <dot> <noptr> status <dot> <ptr> handled )
<cls> <noptr> ska a set input params ( <ptr> ska a )
<cls> <noptr> coda update profile level ctrls ( <ptr> ctx <dot> <noptr> profileid c <dot> <noptr> levelid c )
<cls> <noptr> siri r init ( )
<cls> <noptr> adv read ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> bcm refresh state ( <ptr> st )
<cls> <noptr> vp gets fre ffb ( <ptr> inst )
<cls> <noptr> c x buf queue ( <ptr> port <dot> <ptr> buf )
<cls> <noptr> saa work ( <ptr> work )
<cls> <noptr> air spy try fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c x usb bluebird gpio pulse ( <ptr> d <dot> <noptr> pin <dot> <noptr> low )
<cls> <noptr> uvc query ctrl ( <ptr> dev <dot> <noptr> query <dot> <noptr> unit <dot> <noptr> int fnum <dot> <noptr> cs <dot> <ptr> data <dot> <noptr> size <dot> <noptr> timeout )
<cls> <noptr> ite sett x duty cycle ( <ptr> rc dev <dot> <noptr> duty cycle )
<cls> <noptr> imx do get pad format ( <ptr> imx <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> td a calc b p filter ( <ptr> fe <dot> <ptr> freq )
<cls> <noptr> bt tv try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> video query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> dvb vb poll ( <ptr> ctx <dot> <ptr> file <dot> <ptr> wait )
<cls> <noptr> c x dt nr dmd interrupt clear ( <ptr> tn r dmd <dot> <noptr> value )
<cls> <noptr> fdt v handler c ( <ptr> fdt v <dot> <noptr> code )
<cls> <noptr> v levent unsubscribe all ( <ptr> f h )
<cls> <noptr> em xx start streaming ( <ptr> dvb )
<cls> <noptr> net up spi transfer ( <ptr> master <dot> <ptr> msg )
<cls> <noptr> v l ctrls ctrl int ( <ptr> ctrl <dot> <noptr> val )
<cls> <noptr> l gdt avs block poll ( <ptr> state )
<cls> <noptr> sms dvb read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> video buf req buf s ( <ptr> q <dot> <ptr> req )
<cls> <noptr> pulse clocks to clock divider ( <noptr> count )
<cls> <noptr> fmc set freq ( <ptr> f m dev <dot> <noptr> freq to set )
<cls> <noptr> m xls fep streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> set gain ( <ptr> gsp ca dev <dot> <noptr> g )
<cls> <noptr> ths read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> ead ( <ptr> state )
<cls> <noptr> spc i polls lot status ( <ptr> en <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> imx set test pattern ( <ptr> priv <dot> <noptr> val )
<cls> <noptr> msm video stop streaming ( <ptr> video )
<cls> <noptr> reg ( <ptr> dev )
<cls> <noptr> ctrl get crop l ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> td a set tone ( <ptr> fe <dot> <noptr> fe sect one mode )
<cls> <noptr> init r cmap r cha upp auge new ( )
<cls> <noptr> c x irq add ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> and ( <ptr> p dec <dot> <ptr> raw yuv <dot> <ptr> plan ary <dot> <ptr> planar u <dot> <ptr> planar v <dot> <noptr> compressed image width <dot> <noptr> real image width )
<cls> <noptr> tm init analog mode ( <ptr> dev )
<cls> <noptr> iv tv g slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> af probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> dvb bt xx stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> f m irq start af jump ( <ptr> f m dev )
<cls> <noptr> e tek update controls ( <ptr> sensor )
<cls> <noptr> mt set parameters ( <ptr> fe )
<cls> <noptr> return buf error ( <ptr> inst <dot> <ptr> v buf )
<cls> <noptr> init r cmap apac view comp ( )
<cls> <noptr> c x der read packet errors t ( <ptr> priv <dot> <ptr> p enum )
<cls> <noptr> read from buf ( <ptr> s <dot> <ptr> a )
<cls> <noptr> if wht ( <ptr> block <dot> <ptr> output block <dot> <noptr> intra )
<cls> <noptr> sh set q am interleave mode legacy ( <ptr> fe )
<cls> <noptr> vp if input to sub dev ( <ptr> vp if cfg <dot> <ptr> chan cfg <dot> <noptr> input index )
<cls> <noptr> saa x write regs ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> fe send command ( <ptr> fe <dot> <noptr> command <dot> <noptr> param length <dot> <noptr> params <dot> <ptr> result length <dot> <noptr> cmd result )
<cls> <noptr> cxa v write expect ( <ptr> c x <dot> <noptr> addr <dot> <noptr> value <dot> <noptr> eval <dot> <noptr> mask )
<cls> <noptr> init r cmap m sit v anywhere plus ( )
<cls> <noptr> dvb dmx dev filter reset ( <ptr> dmx dev filter )
<cls> <noptr> ddb output init ( <ptr> port <dot> <noptr> nr )
<cls> <noptr> pvr l gh x f attach ( <ptr> adap )
<cls> <noptr> b slen ( <ptr> s )
<cls> <noptr> pulse setup ( <ptr> pulse <dot> <ptr> ser io <dot> <ptr> log addrs <dot> <ptr> pa )
<cls> <noptr> ist ps locked ( <ptr> tn r dmd )
<cls> <noptr> saa x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> t dax read signal strength ( <ptr> fe <dot> <ptr> signal )
<cls> <noptr> d tcs set exposure ( <ptr> gsp ca dev <dot> <noptr> expo <dot> <noptr> gain )
<cls> <noptr> cade thandler ( <ptr> t )
<cls> <noptr> m m ops venc device run ( <ptr> priv )
<cls> <noptr> cade tstart rds ( <ptr> dev )
<cls> <noptr> encode plane ( <ptr> input <dot> <ptr> ref p <dot> <dptr> rl co <dot> <ptr> r lcom ax <dot> <ptr> cf <dot> <noptr> height <dot> <noptr> width <dot> <noptr> stride <dot> <noptr> input step <dot> <noptr> is intra <dot> <noptr> next is intra )
<cls> <noptr> c ill flush ( <ptr> cir buf <dot> <ptr> c i w buf )
<cls> <noptr> m x mt demo d init ( <ptr> fe )
<cls> <noptr> snd usb tv trigger ( <ptr> work )
<cls> <noptr> m xlt set params ( <ptr> fe )
<cls> <noptr> m sps ctrl ( <ptr> ctrl )
<cls> <noptr> pt attach fe ( <ptr> pt <dot> <noptr> i )
<cls> <noptr> ov init post alt ( <ptr> gsp ca dev )
<cls> <noptr> f m irq common cmd resp helper ( <ptr> f m dev <dot> <noptr> stage )
<cls> <noptr> video buf read stream ( <ptr> q <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos <dot> <noptr> vb i hack <dot> <noptr> non blocking )
<cls> <noptr> cod as fmt ( <ptr> ctx <dot> <ptr> f <dot> <ptr> r )
<cls> <noptr> which bandwidth ( <ptr> gsp ca dev )
<cls> <noptr> parser fini ( <ptr> inst <dot> <noptr> codecs <dot> <noptr> domain )
<cls> <noptr> check service set ( <ptr> fmt <dot> <noptr> is pal )
<cls> <noptr> v d pread ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> ov init controls ( <ptr> ov )
<cls> <noptr> stv cab get der otf req ( <ptr> state <dot> <noptr> adc hz )
<cls> <noptr> stv wait dis eq c idle ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> l gdt read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> irr x off ( <ptr> irr x )
<cls> <noptr> stv search ( <ptr> fe )
<cls> <noptr> bcm init cold ( <ptr> st )
<cls> <noptr> de interlace queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> via cam vb start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> adv x hdmi init ( <ptr> hdmi )
<cls> <noptr> enc get mpeg dma ( <ptr> solo dev <dot> <noptr> dma <dot> <noptr> off <dot> <noptr> size )
<cls> <ptr> cec dev node data ( <ptr> filp )
<cls> <noptr> d ibm b get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> tua init ( <ptr> fe )
<cls> <noptr> d ibm auto search irq ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> dvb usb generic rw ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len <dot> <noptr> delay ms )
<cls> <noptr> v l subscribe event ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> write ic regno wait ( <ptr> addr <dot> <noptr> index <dot> <noptr> data )
<cls> <noptr> fim c vid ioc query cap ( <ptr> dev <dot> <ptr> cap )
<cls> <noptr> led store ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> irl irc reads can code ( <ptr> file <dot> <ptr> buffer <dot> <noptr> length )
<cls> <noptr> g d buf queue ( <ptr> vb )
<cls> <noptr> delta runtime suspend ( <ptr> dev )
<cls> <noptr> hi enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> mt tic driver init ( )
<cls> <noptr> fin tek cmd size ( <noptr> cmd <dot> <noptr> sub cmd )
<cls> <ptr> check video nr ( )
<cls> <noptr> em xx write reg ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> isc parsed t ( <ptr> dev <dot> <ptr> isc )
<cls> <noptr> configure regx c ( <ptr> p <dot> <ptr> regx c )
<cls> <noptr> rtl xx upid filter ( <ptr> adap <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <ptr> frame boundary ( <ptr> go <dot> <ptr> vb )
<cls> <noptr> send pulse homebrew ( <noptr> length <dot> <noptr> edge )
<cls> <noptr> nxt read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> pv ric basic op ( <ptr> h dw <dot> <noptr> ic addr <dot> <ptr> w data <dot> <noptr> w len <dot> <ptr> r data <dot> <noptr> r len )
<cls> <noptr> c x der active sto sleeps ( <ptr> priv )
<cls> <noptr> pvr log status ( <ptr> file <dot> <ptr> priv )
<cls> <noptr> on fig ( <ptr> fe <dot> <noptr> mode <dot> <noptr> if mode <dot> <noptr> bandwidth <dot> <noptr> if out <dot> <noptr> f x tal <dot> <noptr> agc mode <dot> <noptr> top <dot> <noptr> if out load <dot> <noptr> clock out <dot> <noptr> div out <dot> <noptr> cap select <dot> <noptr> en rssi <dot> <noptr> mod type <dot> <noptr> tf type )
<cls> <noptr> sh set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> se read req ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> silent )
<cls> <noptr> mtk md pvp ude init ( <ptr> v pu )
<cls> <noptr> init ov sensor ( <ptr> sd <dot> <noptr> slave )
<cls> <noptr> stk ppid filter ctrl ( <ptr> adapter <dot> <noptr> onoff )
<cls> <noptr> sa axs sliced fmt ( <ptr> sd <dot> <ptr> fmt )
<cls> <ptr> check ir debug ( )
<cls> <noptr> t vps sliced fmt ( <ptr> sd <dot> <ptr> sv b i )
<cls> <noptr> mtk vcodec enc lt irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> em xx setup x c ( <ptr> dev <dot> <ptr> ctl )
<cls> <noptr> max stu ner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> module init dd bridge ( )
<cls> <noptr> dvb dvr do ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <noptr> m tt set params ( <ptr> priv <dot> <ptr> rect <dot> <noptr> code )
<cls> <noptr> ks read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> cec pin show cmd ( <ptr> sf <dot> <noptr> cmd <dot> <noptr> mode )
<cls> <noptr> saa fini ( )
<cls> <noptr> cam if hw set output dma ( <ptr> vp )
<cls> <noptr> sun ics i stop streaming ( <ptr> v q )
<cls> <noptr> log info frame ( <ptr> sd <dot> <ptr> cri )
<cls> <noptr> a zci slot ts enable ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> po set red balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c x log status ( <ptr> sd )
<cls> <noptr> flex cop module cleanup ( )
<cls> <noptr> vps s set pg frame size ( <noptr> frame size )
<cls> <noptr> sp wakeup ( <ptr> state )
<cls> <noptr> em x xir stop ( <ptr> rc )
<cls> <noptr> sensor write ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> vp if async complete ( <ptr> notifier )
<cls> <noptr> ce u vb queue ( <ptr> vb )
<cls> <noptr> lme cold reset ( <ptr> d )
<cls> <noptr> opera tuner attach ( <ptr> adap )
<cls> <noptr> download micro code ( <ptr> state <dot> <noptr> pmc image <dot> <noptr> length )
<cls> <noptr> dib usb d ibm b front end attach ( <ptr> adap )
<cls> <noptr> stv write bits ( <ptr> state <dot> <noptr> label <dot> <noptr> val )
<cls> <noptr> dr x j dap scu atomic read reg ( <ptr> dev addr <dot> <noptr> addr <dot> <ptr> data <dot> <noptr> flags )
<cls> <ptr> pvr ctrl get desc ( <ptr> cptr )
<cls> <noptr> m cam vid ioc spar m ( <ptr> filp <dot> <ptr> priv <dot> <ptr> a )
<cls> <ptr> card name ( <ptr> id )
<cls> <noptr> go usb send firmware ( <ptr> go <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> fim c is module init ( )
<cls> <noptr> stv x optimize car loop ( <ptr> state <dot> <noptr> mod cod <dot> <noptr> pilots )
<cls> <noptr> calculate inst freq ( <ptr> inst <dot> <noptr> filled len )
<cls> <noptr> tvp write init tab ( <ptr> sd <dot> <ptr> regs )
<cls> <noptr> mba read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> dib tuner attach ( <ptr> adap )
<cls> <noptr> find pes header ( <ptr> buf <dot> <noptr> length <dot> <ptr> frag s )
<cls> <noptr> saa encoder stop port ( <ptr> port )
<cls> <noptr> saa dvb start port ( <ptr> port )
<cls> <noptr> cpi asp arm ( <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> wb cir led brightness set ( <ptr> led c dev <dot> <noptr> brightness )
<cls> <noptr> solo enc fill buf ( <ptr> solo enc <dot> <ptr> vb <dot> <ptr> enc buf )
<cls> <noptr> td a get front end ( <ptr> fe <dot> <ptr> fe params )
<cls> <ptr> check auto idle ( )
<cls> <noptr> l irc dev init ( )
<cls> <noptr> c x audio set path ( <ptr> client )
<cls> <noptr> vb ops venc start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> m tt enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> avi pack flush ( <ptr> p )
<cls> <noptr> demo d attach dr x d ( <ptr> chan )
<cls> <noptr> pwc get c mos sensor ( <ptr> pdev <dot> <ptr> sensor )
<cls> <noptr> scc am if sub devs ctrl ( <ptr> ctrl )
<cls> <noptr> search map ( <noptr> map <dot> <noptr> frequency <dot> <ptr> p param )
<cls> <noptr> em xx resume extension ( <ptr> dev )
<cls> <noptr> gsp ca buffer queue ( <ptr> vb )
<cls> <noptr> do special ( <ptr> go <dot> <noptr> type <dot> <ptr> code <dot> <noptr> space <dot> <ptr> frame len )
<cls> <noptr> l k dtm exhaust stack ( )
<cls> <ptr> check tx sense ( )
<cls> <noptr> pvr v l open ( <ptr> file )
<cls> <noptr> csi phy power auto switch enable ( <ptr> phy <dot> <noptr> enable )
<cls> <noptr> c x does need dma reset ( )
<cls> <noptr> identify by eeprom ( <ptr> b tv <dot> <noptr> eeprom data )
<cls> <noptr> flash read ( <ptr> map <dot> <noptr> offset )
<cls> <noptr> stb write reg range ( <ptr> state <dot> <noptr> buf <dot> <noptr> start <dot> <noptr> len )
<cls> <noptr> td a probe ( <ptr> ic props )
<cls> <noptr> m tts power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> c x black bird probe ( <ptr> drv )
<cls> <noptr> vivid xfer func cap ( <ptr> dev )
<cls> <noptr> rt sys freq sel ( <ptr> priv <dot> <noptr> freq <dot> <noptr> type <dot> <noptr> std <dot> <noptr> del sys )
<cls> <ptr> c x risc field audio ( <ptr> r p <dot> <ptr> sg list <dot> <noptr> offset <dot> <noptr> sync line <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines <dot> <noptr> lp i )
<cls> <noptr> pvr channel done ( <ptr> cp )
<cls> <noptr> gsc mms selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> iv tv validate speed ( <noptr> cur speed <dot> <noptr> new speed )
<cls> <noptr> coda k fifo sync from device ( <ptr> ctx )
<cls> <noptr> iv tv g input ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> sh v our e gab set ( <ptr> vou dev <dot> <noptr> reg <dot> <noptr> value <dot> <noptr> mask )
<cls> <noptr> sms dvb read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> rtl pid filter ( <ptr> fe <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <ptr> tot w ( <ptr> client )
<cls> <noptr> sun ics inotify complete ( <ptr> notifier )
<cls> <noptr> reset camera struct v l ( <ptr> cam )
<cls> <noptr> au analog register ( <ptr> dev <dot> <ptr> interface )
<cls> <noptr> dst card type ( <ptr> state )
<cls> <noptr> ska a set noise ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> fdt v sleep ( <ptr> fe )
<cls> <noptr> m tread ber ( <ptr> fe <dot> <ptr> ber )
<cls> <ptr> check disable auto load ir video ( )
<cls> <noptr> delta aud one ( <ptr> ctx <dot> <ptr> au <dot> <noptr> err )
<cls> <noptr> exy nos jpeg irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> v pu dec start ( <ptr> v pu <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> f m irq handle tune open ded ( <ptr> f m dev )
<cls> <noptr> exy nos jpeg set stream buf address ( <ptr> base <dot> <noptr> address )
<cls> <noptr> igor plug usb ir data ( <ptr> ir <dot> <noptr> len )
<cls> <noptr> au write reg ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> uvc ioctl subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> tv audio check carrier ( <ptr> dev <dot> <ptr> scan )
<cls> <noptr> rcs inotify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> sp mfc enc gv ctrl ( <ptr> ctrl )
<cls> <noptr> flex cop reset block ( <ptr> fc )
<cls> <noptr> alter aci irq ( <ptr> dev )
<cls> <ptr> check auto mute ( )
<cls> <noptr> ska a dump registers ( <ptr> sd )
<cls> <noptr> t dax configure csc ( <ptr> sd )
<cls> <noptr> dib risc check version ( <ptr> state )
<cls> <noptr> adv vpp write ( <ptr> state <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> gpp sk fe enable high ln b voltage ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> c xxx gpio ic write ( <ptr> dev <dot> <noptr> dev addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> mt set if freq ( <ptr> fe <dot> <noptr> freq <dot> <noptr> if )
<cls> <noptr> vb i out stop streaming ( <ptr> v q )
<cls> <noptr> flex cop module init ( )
<cls> <noptr> v pu load firmware ( <ptr> pdev )
<cls> <noptr> m tms stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> omap v out vb start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> stk sensor configure ( <ptr> dev )
<cls> <noptr> c x sensor ( <ptr> gsp ca dev )
<cls> <noptr> r vin setup ( <ptr> vin )
<cls> <noptr> dst send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> em xx toggle reg bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> bit mask )
<cls> <noptr> adv x hdmi s stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> cit seth flip ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> img ir setup ( <ptr> priv )
<cls> <noptr> dib p host bus drive ( <ptr> state <dot> <noptr> drive )
<cls> <noptr> sp jpeg set hac tbl g ( <ptr> regs )
<cls> <noptr> sh vous std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std id )
<cls> <noptr> pcie link get lanes ( <ptr> cobalt )
<cls> <ptr> sh ve u find fmt ( <ptr> f )
<cls> <noptr> sms dvb stats read ( <ptr> file <dot> <ptr> user buf <dot> <noptr> nbytes <dot> <ptr> p pos )
<cls> <noptr> h fi session et b done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> sp mfc get new ctx ( <ptr> dev )
<cls> <noptr> stv ddb get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> is px clk round rate ( <ptr> hw <dot> <noptr> rate <dot> <ptr> parent rate )
<cls> <noptr> c x der active ito sleep tc ( <ptr> priv )
<cls> <noptr> cal enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> inp )
<cls> <noptr> cit restart stream ( <ptr> gsp ca dev )
<cls> <noptr> lg dta get packet error ( <ptr> state )
<cls> <noptr> ctrl isdirty res ver ( <ptr> cptr )
<cls> <noptr> au vb setup ( <ptr> dev )
<cls> <noptr> stv x get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <ptr> check dst addons ( )
<cls> <noptr> c x der read agc gains ( <ptr> priv )
<cls> <noptr> rc repeat ( <ptr> dev )
<cls> <noptr> pvr encoder stop ( <ptr> h dw )
<cls> <noptr> em xx get key ter rate c ( <ptr> ic dev <dot> <ptr> protocol <dot> <ptr> scan code )
<cls> <noptr> pvr ctrl get min ( <ptr> cptr )
<cls> <noptr> ir probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> fim c caps fmt m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> get resources ( <ptr> dev )
<cls> <noptr> adv set output ( <ptr> sd <dot> <noptr> output type )
<cls> <noptr> csc dump regs ( <ptr> csc )
<cls> <noptr> v pu running ( <ptr> v pu )
<cls> <noptr> fim cmm query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> dib pwm gain reset ( <ptr> fe )
<cls> <noptr> bt tv irq wakeup video ( <ptr> b tv <dot> <ptr> wakeup <dot> <ptr> curr <dot> <noptr> state )
<cls> <noptr> vp usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> sh ve u context init ( <ptr> ve u )
<cls> <noptr> e pud mad one irq ( <ptr> c x <dot> <ptr> order )
<cls> <noptr> vim c sen set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> v l ctrl handler log status ( <ptr> hdl <dot> <ptr> prefix )
<cls> <noptr> sq c do stream ( <ptr> work )
<cls> <noptr> pvr dvb stop feed ( <ptr> dvb dmx feed )
<cls> <ptr> m xls f calc phy tune regs ( <noptr> freq <dot> <noptr> bw )
<cls> <noptr> fd tvc a register ( <ptr> fdt v )
<cls> <noptr> img ir enable wake ( <ptr> priv )
<cls> <noptr> de interlace start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> v dec try fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> saa set vb i capture ( <ptr> dev <dot> <ptr> buf <dot> <ptr> next )
<cls> <noptr> dvb demux read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> r card rif enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> c sect pfe stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> imon pad to keys ( <ptr> i ctx <dot> <ptr> buf )
<cls> <noptr> nolock cp ( <ptr> sd )
<cls> <noptr> smi app set compose scaler ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel <dot> <dptr> crops <dot> <ptr> comp )
<cls> <noptr> vivid vid outs std ( <ptr> file <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> is pre store context ( <ptr> isp <dot> <ptr> reg list )
<cls> <noptr> rds wait read ( <ptr> aci )
<cls> <noptr> c xxx set decoder video input ( <ptr> dev <dot> <noptr> pin type <dot> <noptr> input )
<cls> <noptr> bt start ( <ptr> bt <dot> <noptr> control reg <dot> <noptr> op sync or in <dot> <noptr> irq err ignore )
<cls> <noptr> uvc ioctl enum fmt ( <ptr> stream <dot> <ptr> fmt )
<cls> <noptr> dt probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> iv tvs tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> vpx chk sum ( <ptr> buf <dot> <noptr> f <dot> <noptr> count )
<cls> <noptr> or sleep ( <ptr> fe )
<cls> <noptr> saa card list ( <ptr> dev )
<cls> <noptr> vid io csf buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> fb )
<cls> <noptr> erase on ( <ptr> solo dev )
<cls> <noptr> modulation fw class ( <noptr> modulation )
<cls> <noptr> em xx init audio i soc ( <ptr> dev )
<cls> <noptr> c xwork handler ( <ptr> work )
<cls> <noptr> dst pio enable ( <ptr> state )
<cls> <noptr> saa cmd set ( <ptr> dev <dot> <ptr> msg <dot> <ptr> buf )
<cls> <noptr> x c get total gain ( <ptr> priv <dot> <ptr> total gain )
<cls> <noptr> set timing ( <ptr> b tv )
<cls> <noptr> v dec event change ( <ptr> inst <dot> <ptr> ev data <dot> <noptr> sufficient )
<cls> <noptr> mba send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> ccp pwr cfg ( <ptr> ccp )
<cls> <noptr> c x buf swap ( <ptr> buf )
<cls> <noptr> v fe set ds ( <ptr> v fe )
<cls> <noptr> read word be ( <ptr> stream <dot> <ptr> word )
<cls> <noptr> adv set offset ( <ptr> sd <dot> <noptr> auto offset <dot> <noptr> offset a <dot> <noptr> offset b <dot> <noptr> offset c )
<cls> <noptr> usb am radio init ( <ptr> radio )
<cls> <noptr> ic handler ( <ptr> priv )
<cls> <noptr> av cca app info ( <ptr> fdt v <dot> <ptr> app info <dot> <ptr> len )
<cls> <noptr> is i write l ( <ptr> is i <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> init r cmap pixel view ( )
<cls> <noptr> dr x kic unlock ( <ptr> state )
<cls> <noptr> at b m read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> go read addr ( <ptr> go <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> ctrl clear dirty input ( <ptr> cptr )
<cls> <noptr> venc spar m ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> dvb usb v adapter init ( <ptr> d )
<cls> <noptr> c x dual watch ( <ptr> c x )
<cls> <ptr> check led ( )
<cls> <noptr> stb get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> fc write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> c xxx s register ( <ptr> file <dot> <ptr> priv <dot> <ptr> reg )
<cls> <noptr> ves get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> dib p auto search start ( <ptr> demo d )
<cls> <noptr> v l sanitize format ( <ptr> fmt )
<cls> <noptr> pwc g input ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> fdt v front end init ( <ptr> fdt v <dot> <ptr> name )
<cls> <noptr> stv read reg ( <ptr> fe <dot> <noptr> start )
<cls> <noptr> fcd vb get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> hdp vr set audio ( <ptr> dev <dot> <noptr> input <dot> <noptr> codec )
<cls> <noptr> c sid get lane assign ( <ptr> lane cfg )
<cls> <noptr> or set mode ( <ptr> fe <dot> <noptr> mode )
<cls> <noptr> v l ctrls ctrl ( <ptr> ctrl <dot> <noptr> val )
<cls> <noptr> x vip pipeline start stop ( <ptr> pipe <dot> <noptr> start )
<cls> <noptr> stv read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> media request ioctl reinit ( <ptr> req )
<cls> <noptr> dvb dvr ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> c x dt nr dmd set pid ftr ( <ptr> tn r dmd <dot> <ptr> pid ftr cfg )
<cls> <noptr> m xls f streaming ctrl mercury ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> vivid sdr g frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> stm dcm i driver init ( )
<cls> <noptr> saa api configure port vb i ( <ptr> dev <dot> <ptr> port )
<cls> <noptr> dvb sky rc query ( <ptr> d )
<cls> <noptr> z i log tx carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> wl f m vid io cs ctrl ( <ptr> ctrl )
<cls> <noptr> taz check it ( <ptr> chip )
<cls> <noptr> fdp buf prepare field ( <ptr> q data <dot> <ptr> v buf <dot> <noptr> field num )
<cls> <noptr> sa aic xfer ( <ptr> adapter <dot> <ptr> msg <dot> <noptr> num )
<cls> <noptr> ( <ptr> dev )
<cls> <noptr> tea signal ( <ptr> fe <dot> <ptr> buffer )
<cls> <noptr> dr x j open ( <ptr> demo d )
<cls> <noptr> pvr eeprom analyze ( <ptr> h dw )
<cls> <noptr> dr x ki clock ( <ptr> state )
<cls> <noptr> print avi info frame ( <ptr> sd )
<cls> <noptr> gsc cal pre scaler ratio ( <ptr> var <dot> <noptr> src <dot> <noptr> dst <dot> <ptr> ratio )
<cls> <noptr> scc ami freq buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> rb )
<cls> <noptr> ctrl lock status ( <ptr> demo d <dot> <ptr> lock stat )
<cls> <noptr> exy nos jpeg jpg adr ( <ptr> regs <dot> <noptr> addr )
<cls> <noptr> td a cal crf filter curve ( <ptr> fe )
<cls> <noptr> x tune ( <ptr> tn r dmd )
<cls> <noptr> uvc video stats stop ( <ptr> stream )
<cls> <noptr> flex cop usb process frame ( <ptr> fc usb <dot> <ptr> buffer <dot> <noptr> buffer length )
<cls> <noptr> isp get clocks ( <ptr> isp )
<cls> <noptr> vivid sdt v caps ctrl ( <ptr> ctrl )
<cls> <noptr> omap is pcs i init ( <ptr> isp )
<cls> <noptr> cobalt irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> ov set b and ing filter ( <ptr> sensor )
<cls> <noptr> ce u enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> inp )
<cls> <noptr> em xx v l init ( <ptr> dev )
<cls> <noptr> do stream ( <ptr> work )
<cls> <noptr> v pbe try format ( <ptr> disp dev <dot> <ptr> pix fmt <dot> <noptr> check )
<cls> <noptr> h va enum fmt frame ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> tws fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> clock divider to carrier freq ( <noptr> divider )
<cls> <noptr> fdp start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> pt set stream ( <ptr> pt <dot> <noptr> index <dot> <noptr> enabled )
<cls> <noptr> sun ics i runtime resume ( <ptr> dev )
<cls> <noptr> uvc register video ( <ptr> dev <dot> <ptr> stream )
<cls> <noptr> m xl x sf tuner top master ctrl ( <ptr> state <dot> <noptr> onoff )
<cls> <ptr> uvc print chain ( <ptr> chain )
<cls> <noptr> pvr debug if c print status ( <ptr> h dw <dot> <ptr> buf <dot> <noptr> a cnt )
<cls> <noptr> init r cmap as usps ( )
<cls> <noptr> flex cop sleep ( <ptr> fe )
<cls> <noptr> l gdt front end attach ( <ptr> adap )
<cls> <noptr> lme ic func ( <ptr> adapter )
<cls> <noptr> stv cab read strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> fim ch w enable scaler ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> iv tvf b pan display ( <ptr> var <dot> <ptr> info )
<cls> <ptr> notifier to ctx ( <ptr> n )
<cls> <noptr> c x gpio clear ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> c cdc config black clamp ( <ptr> b clamp )
<cls> <noptr> vip gpio reserve ( <ptr> dev <dot> <noptr> pin <dot> <noptr> dir <dot> <ptr> name )
<cls> <noptr> ic is write done ( <ptr> ic adap )
<cls> <noptr> os d write ( <ptr> sd <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> video find format ( <noptr> code <dot> <noptr> pixel format <dot> <ptr> formats <dot> <noptr> n formats )
<cls> <noptr> max get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> venus helper acquire buf ref ( <ptr> v buf )
<cls> <noptr> vivid start generating vid out ( <ptr> dev <dot> <ptr> p streaming )
<cls> <noptr> d ibm set front end ( <ptr> fe )
<cls> <noptr> c x set front end ( <ptr> fe )
<cls> <noptr> mtp inn acle tuner set params ( <ptr> fe )
<cls> <noptr> em press signal change ( <ptr> dev )
<cls> <noptr> a speed video irq ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> ov set streaming ( <ptr> ov <dot> <noptr> on )
<cls> <noptr> tuner attach dtt x ( <ptr> chan )
<cls> <noptr> sc mic read ( <ptr> client <dot> <noptr> addr <dot> <ptr> data )
<cls> <dptr> check mem ( )
<cls> <noptr> ctrl freq set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> slot reset ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> spc sis driver init ( )
<cls> <noptr> saa try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> set flicker ( <ptr> gsp ca dev <dot> <noptr> on <dot> <noptr> apply )
<cls> <noptr> stv xx start ( <ptr> gsp ca dev )
<cls> <noptr> stv x search ( <ptr> fe )
<cls> <noptr> mtk mdp ctx state lock set ( <ptr> ctx <dot> <noptr> state )
<cls> <noptr> wq restart net feed ( <ptr> work )
<cls> <noptr> am radio send cmd ( <ptr> radio <dot> <noptr> cmd <dot> <noptr> arg <dot> <ptr> extra <dot> <noptr> extra len <dot> <noptr> reply )
<cls> <noptr> mtk mdp probe ( <ptr> pdev )
<cls> <noptr> b disp job finish ( <ptr> ctx <dot> <noptr> vb state )
<cls> <noptr> ic write ( <ptr> state <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> tuner stereo ( <noptr> type <dot> <noptr> status )
<cls> <noptr> get word be ( <ptr> buf <dot> <ptr> word )
<cls> <noptr> rtl sdr start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> cs driver init ( )
<cls> <noptr> sp cec get r x buf ( <ptr> cec <dot> <noptr> size <dot> <ptr> buffer )
<cls> <noptr> d vic o fusion h dtv demo d init ( <ptr> fe )
<cls> <ptr> check dump eeprom ( )
<cls> <noptr> six rds on ( <ptr> radio )
<cls> <noptr> g sch w set frm done irq mask ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> saa h get reg ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> c x process vb i data ( <ptr> c x <dot> <ptr> buf )
<cls> <noptr> tc set hdmi phy ( <ptr> sd )
<cls> <noptr> six radios tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <noptr> sensor init ( <ptr> sd )
<cls> <noptr> sh register reset ( <ptr> fe )
<cls> <noptr> stv x recv slave reply ( <ptr> fe <dot> <ptr> reply )
<cls> <noptr> m tt reg read ( <ptr> client <dot> <noptr> command )
<cls> <noptr> init r cmap m sit v anywhere ( )
<cls> <noptr> reg write multiple ( <ptr> client <dot> <ptr> rv <dot> <noptr> n )
<cls> <noptr> verify user ptr ops ( <ptr> q )
<cls> <noptr> budget attach ( <ptr> dev <dot> <ptr> info )
<cls> <noptr> usb tv audio urb received ( <ptr> urb )
<cls> <noptr> mtk v dec pic info update ( <ptr> ctx )
<cls> <noptr> dwr c query ( <ptr> d )
<cls> <noptr> ov init slave id ( <ptr> sensor )
<cls> <noptr> vivid quant ization cap ( <ptr> dev )
<cls> <ptr> tom a radio dev ( <ptr> v l dev )
<cls> <noptr> wcf smbus stop ( <ptr> sd )
<cls> <noptr> l gs gxx soft reset ( <ptr> priv )
<cls> <noptr> mce usb sett x carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> c xxx usb driver init ( )
<cls> <noptr> av writeto decoder ( <ptr> feed <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> philips europa tuner sleep ( <ptr> fe )
<cls> <noptr> d ibm auto search start ( <ptr> demo d )
<cls> <noptr> wbc irt x mask ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> dcm igraph notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <ptr> vb top x a buffer ( <ptr> vb )
<cls> <noptr> c xxx gpio ic start ( <ptr> dev )
<cls> <noptr> h fi session stop ( <ptr> inst )
<cls> <noptr> stv get vit fec ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> uvc video clock init ( <ptr> stream )
<cls> <noptr> v l open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> set dst registers ( <ptr> ctx )
<cls> <noptr> cade t pnp probe ( <ptr> dev <dot> <ptr> devid )
<cls> <noptr> show compression ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> qt init meas ( <ptr> priv <dot> <noptr> reg init val <dot> <ptr> ret val )
<cls> <noptr> sh vou isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> bs write ( <ptr> s <dot> <noptr> count <dot> <noptr> bits )
<cls> <noptr> acket ( <ptr> gsp ca dev <dot> <noptr> v <dot> <noptr> v )
<cls> <noptr> scm parse gpio s ( <ptr> state )
<cls> <noptr> cade t poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> tcm md limits ( <ptr> sensor )
<cls> <noptr> tun ers frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> tegra cec irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> build sub block pattern ( <ptr> p dec )
<cls> <noptr> dtv property cache sync ( <ptr> fe <dot> <ptr> c <dot> <ptr> p )
<cls> <noptr> g vs mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> c pia send one byte command ( <ptr> cam <dot> <ptr> cmd <dot> <noptr> start <dot> <noptr> datum )
<cls> <noptr> s xic transfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> s driver init ( )
<cls> <noptr> uvc ctrl commit entity ( <ptr> dev <dot> <ptr> entity <dot> <noptr> rollback )
<cls> <noptr> set freq ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> pulse send and wait ( <ptr> pulse <dot> <ptr> cmd <dot> <noptr> cmd len <dot> <noptr> response <dot> <noptr> size )
<cls> <noptr> vim crm sub devs ( <ptr> vim c )
<cls> <noptr> d i bag c restart ( <ptr> fe <dot> <noptr> restart )
<cls> <noptr> cxa pie pu cmd irq ( <ptr> c x <dot> <noptr> r pu )
<cls> <noptr> sp cec mask r x interrupts ( <ptr> cec )
<cls> <noptr> m xls f get stream config dvb t ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <noptr> l gs gxx auto detect ( <ptr> priv <dot> <ptr> detected param <dot> <ptr> g i )
<cls> <noptr> si write ( <ptr> state <dot> <noptr> reg <dot> <ptr> src <dot> <noptr> count )
<cls> <noptr> r x nack ( <ptr> pin )
<cls> <noptr> dib set trim ( <ptr> state )
<cls> <noptr> cam if clk get ( <ptr> cam if )
<cls> <noptr> isset fd config yaw angle ( <ptr> is <dot> <noptr> val )
<cls> <noptr> uvc ioctl g parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> parm )
<cls> <noptr> c x usb medi ong fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> set cfg modes ( <ptr> ctx )
<cls> <noptr> solo vlc h ( <ptr> solo dev <dot> <noptr> ch <dot> <noptr> on )
<cls> <noptr> fim c ish w update param sensor frame rate ( <ptr> is )
<cls> <noptr> sp jpeg get dwn grd sch id by fourcc ( <noptr> fourcc )
<cls> <noptr> c x test rom ( <ptr> state )
<cls> <noptr> msm v fe stop streaming ( <ptr> v fe )
<cls> <noptr> xt pg open ( <ptr> sub dev <dot> <ptr> f h )
<cls> <noptr> coda buffer parse headers ( <ptr> ctx <dot> <ptr> src buf <dot> <noptr> payload )
<cls> <ptr> vs pdl list get body ( <ptr> dl )
<cls> <noptr> sp mfc get dec status v ( <ptr> dev )
<cls> <noptr> v levent unsubscribe ( <ptr> sev )
<cls> <noptr> parse protocol change ( <ptr> dev <dot> <ptr> protocols <dot> <ptr> buf )
<cls> <noptr> x vip dma set format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> pci set command ( <ptr> dev )
<cls> <noptr> vid ioc v dec q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> mtk jpeg set dec src ( <ptr> ctx <dot> <ptr> src buf <dot> <ptr> bs )
<cls> <noptr> c xxx s audio sampling freq ( <ptr> c x hdl <dot> <noptr> idx )
<cls> <noptr> dvb front end do ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <noptr> bcm init ( <ptr> fe )
<cls> <noptr> sys get prop image version ( <ptr> dev <dot> <ptr> pkt )
<cls> <noptr> igu an air suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> ec set front end ( <ptr> fe )
<cls> <noptr> m xlf w read ( <ptr> priv <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> adv xxd v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> it d write reg ( <ptr> state <dot> <noptr> r <dot> <noptr> v )
<cls> <noptr> tw enable input ( <ptr> input )
<cls> <noptr> vp swap frm buf s ( <ptr> inst )
<cls> <ptr> list remove job ( <ptr> fdp <dot> <ptr> list )
<cls> <noptr> adv get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> c xvid irq ( <ptr> dev )
<cls> <noptr> gsp ca get mode ( <ptr> gsp ca dev <dot> <noptr> mode <dot> <noptr> pix fmt )
<cls> <noptr> ov xs frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> coda set jpeg compression quality ( <ptr> ctx <dot> <noptr> quality )
<cls> <noptr> init r cmap pixel view new ( )
<cls> <noptr> venus core init ( <ptr> core )
<cls> <noptr> f dpp drv init ( )
<cls> <noptr> hor usa sleep ( <ptr> fe )
<cls> <noptr> exy nos jpeg set interrupt ( <ptr> base <dot> <noptr> version )
<cls> <ptr> v l sub dev to c sit x ( <ptr> sub dev )
<cls> <noptr> nim tuner attach ( <ptr> adap )
<cls> <noptr> t dax sleep ( <ptr> fe )
<cls> <noptr> venus helper set work mode ( <ptr> inst <dot> <noptr> mode )
<cls> <ptr> check led invert ( )
<cls> <noptr> flex cop front end init ( <ptr> fc )
<cls> <noptr> c xxx enable ( <ptr> dev )
<cls> <noptr> it d get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> c xs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> v feb u fflush pending ( <ptr> output <dot> <noptr> state )
<cls> <noptr> init rcl me map ( )
<cls> <noptr> ov reset ( <ptr> sensor )
<cls> <noptr> run start commands ( <ptr> gsp ca dev <dot> <ptr> cam commands <dot> <noptr> n )
<cls> <noptr> ov get gain ( <ptr> sensor )
<cls> <noptr> sa ahs chip command ( <ptr> client <dot> <noptr> command )
<cls> <noptr> x vip graph build dma ( <ptr> x dev )
<cls> <ptr> v prm from fb use list ( <ptr> inst <dot> <ptr> addr )
<cls> <noptr> cxx ctrl query ( <ptr> params <dot> <ptr> q ctrl )
<cls> <noptr> fcd vb init ( <ptr> fe )
<cls> <noptr> set dvb t ( <ptr> state <dot> <noptr> intermediate freq khz <dot> <noptr> tuner freq offset )
<cls> <noptr> t dax irq sus ( <ptr> state <dot> <ptr> flags )
<cls> <noptr> set freq ( <ptr> t <dot> <noptr> freq )
<cls> <noptr> tw irq video done ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> mt set antenna ( <ptr> fe <dot> <noptr> antenna )
<cls> <noptr> m px write ( <ptr> client <dot> <noptr> dev <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> cxa v verify fw ( <ptr> c x <dot> <ptr> fw )
<cls> <noptr> tm set fourcc format ( <ptr> dev )
<cls> <noptr> m i configure alt ( <ptr> gsp ca dev )
<cls> <noptr> sdr cap start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> smss dio module init ( )
<cls> <noptr> cal probe ( <ptr> pdev )
<cls> <noptr> adv csc rgb full limit ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> tm config tuner ( <ptr> dev )
<cls> <noptr> venus session cmd ( <ptr> inst <dot> <noptr> pkt type )
<cls> <noptr> r ga buf map ( <ptr> vb )
<cls> <noptr> scm set fw file version ( <ptr> state )
<cls> <noptr> sp jpeg enc stream int ( <ptr> regs <dot> <noptr> size )
<cls> <noptr> p xac vid ioc g register ( <ptr> file <dot> <ptr> priv <dot> <ptr> reg )
<cls> <noptr> init c xic ( <ptr> c x )
<cls> <noptr> tea status dump ( <ptr> priv <dot> <ptr> buffer )
<cls> <noptr> m cam vb buf queue ( <ptr> vb )
<cls> <noptr> vi u activate overlay ( <ptr> vr )
<cls> <noptr> spc ecr x reset ( <ptr> cec )
<cls> <noptr> setup offsets ( <ptr> vb )
<cls> <noptr> dvb ca private get ( <ptr> ca )
<cls> <noptr> vi u read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> scm spi probe ( <ptr> spi )
<cls> <noptr> saa track gpio ( <ptr> dev <dot> <ptr> msg )
<cls> <noptr> t whis r ( <ptr> dev )
<cls> <noptr> v dec h getparam ( <ptr> h v dec <dot> <noptr> type <dot> <ptr> out )
<cls> <noptr> v lst k poll ( <ptr> fp <dot> <ptr> wait )
<cls> <noptr> call enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> media entity remove links ( <ptr> entity )
<cls> <noptr> delta ipc remove ( <ptr> r pmsg device )
<cls> <noptr> video buf read start ( <ptr> q )
<cls> <noptr> sp mfc power off ( )
<cls> <noptr> tw x set standard ( <ptr> vc <dot> <noptr> id )
<cls> <noptr> m m ols setwd r ( <ptr> info <dot> <noptr> w dr )
<cls> <noptr> m rst get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> ccp init entities ( <ptr> ccp )
<cls> <noptr> mantis ic func ( <ptr> adapter )
<cls> <noptr> fdp m m job ready ( <ptr> priv )
<cls> <noptr> pvr s fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> v f )
<cls> <noptr> em xx init extension ( <ptr> dev )
<cls> <noptr> v dec spar m ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> adv x hdmi propagate pixel rate ( <ptr> hdmi )
<cls> <noptr> v v probe ( <ptr> sd )
<cls> <noptr> m nxt tune ( <ptr> chip <dot> <ptr> c )
<cls> <noptr> scc am if vid ioc try fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> net up write ic ( <ptr> ic adap <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> cod asp sparse profile ( <ptr> ctx <dot> <ptr> vb )
<cls> <ptr> pvr eeprom fetch ( <ptr> h dw )
<cls> <noptr> afr c query ( <ptr> d <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> px a camera suspend ( <ptr> dev )
<cls> <noptr> nw test reg ( <ptr> gsp ca dev <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> cxa vs radio ( <ptr> sd )
<cls> <noptr> ir establish scan code ( <ptr> dev <dot> <ptr> r cmap <dot> <noptr> scan code <dot> <noptr> resize )
<cls> <noptr> uvc ctrl send event ( <ptr> chain <dot> <ptr> handle <dot> <ptr> ctrl <dot> <ptr> mapping <dot> <noptr> value <dot> <noptr> changes )
<cls> <noptr> ddb irq msi ( <ptr> dev <dot> <noptr> nr )
<cls> <noptr> mt get d nc output enable ( <ptr> state <dot> <ptr> p value )
<cls> <noptr> vsp sub dev enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse <dot> <noptr> min width <dot> <noptr> min height <dot> <noptr> max width <dot> <noptr> max height )
<cls> <noptr> mt kir driver init ( )
<cls> <ptr> vs pdl get pre cmd ( <ptr> dl )
<cls> <noptr> tvp get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> set satur ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> ov test pattern set ( <ptr> sensor <dot> <noptr> value )
<cls> <noptr> snc read ( <ptr> gsp ca dev )
<cls> <noptr> e did read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> c x suspend ( <ptr> pci dev <dot> <noptr> state )
<cls> <noptr> pt fetch thread ( <ptr> data )
<cls> <noptr> v dec stop streaming ( <ptr> q )
<cls> <noptr> ska a set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> d dbset dma tables ( <ptr> dev )
<cls> <noptr> sun ics i buffer flip ( <ptr> csi <dot> <noptr> sequence )
<cls> <noptr> lg x get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> ts get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> m xls f get stream config mercury ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <noptr> flex cops ram set dest ( <ptr> fc <dot> <noptr> dest <dot> <noptr> target )
<cls> <noptr> dib x reset ic master ( <ptr> mst )
<cls> <noptr> rtl probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> snd cobalt pcm capture open ( <ptr> sub stream )
<cls> <noptr> adv csi write ( <ptr> state <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> delta frame done ( <ptr> ctx <dot> <ptr> frame <dot> <noptr> err )
<cls> <noptr> sun ics i set power ( <ptr> csi <dot> <noptr> enable )
<cls> <noptr> hdp vr stop streaming ( <ptr> dev )
<cls> <noptr> stv x get dmd lock ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> c x stop audio dma ( <ptr> core )
<cls> <noptr> g scm m job abort ( <ptr> ctx )
<cls> <noptr> scc bread ( <ptr> gsp ca dev <dot> <noptr> reg )
<cls> <noptr> six radio read agc blob ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> vb i buffer setup ( <ptr> q <dot> <ptr> count <dot> <ptr> size )
<cls> <noptr> v l m m ioctl try encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> ec )
<cls> <noptr> venus isr ( <ptr> core )
<cls> <noptr> me son a oce cga write ( <ptr> context <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> venus core ping ( <ptr> core <dot> <noptr> cookie )
<cls> <ptr> tos d ( <ptr> ctrl )
<cls> <noptr> m xlt write regs ( <ptr> state <dot> <ptr> reg pair )
<cls> <noptr> determine norm ( <ptr> sd )
<cls> <noptr> l gdt x get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> upd as frequency ( <ptr> sd <dot> <ptr> freq )
<cls> <noptr> iv tv v len c poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> mantis input init ( <ptr> mantis )
<cls> <noptr> imon ( <ptr> pdev <dot> <noptr> size <dot> <noptr> pix fmt <dot> <noptr> frames <dot> <ptr> compression <dot> <noptr> sendto cam )
<cls> <noptr> serial irt x duty cycle ( <ptr> dev <dot> <noptr> cycle )
<cls> <noptr> cit send ( <ptr> gsp ca dev )
<cls> <noptr> uds compute ratio ( <noptr> input <dot> <noptr> output )
<cls> <ptr> check io mmap ( )
<cls> <noptr> igu an air send ( <ptr> ir <dot> <noptr> size )
<cls> <noptr> vp if get default field ( <ptr> iface )
<cls> <noptr> ves x set inversion ( <ptr> state <dot> <noptr> inversion )
<cls> <noptr> ce u set default fmt ( <ptr> ce udev )
<cls> <ptr> find channel ( <ptr> fe i <dot> <noptr> t sin num )
<cls> <noptr> fim ch wget prev frame index ( <ptr> dev )
<cls> <noptr> adv xx cec adap log addr ( <ptr> adap <dot> <noptr> addr )
<cls> <noptr> stv set initial demo d freq ( <ptr> state <dot> <noptr> freq )
<cls> <noptr> p tot ( <ptr> buf <dot> <noptr> length <dot> <noptr> pid <dot> <ptr> counter <dot> <ptr> feed )
<cls> <noptr> it d set parameters ( <ptr> fe )
<cls> <noptr> scm power off ( <ptr> state )
<cls> <noptr> send pulse ir deo ( <noptr> length <dot> <noptr> target )
<cls> <noptr> hist buf dma ( <ptr> hist )
<cls> <noptr> c x usb l gz tuner attach ( <ptr> adap )
<cls> <noptr> flex cops ram ctrl ( <ptr> fc <dot> <noptr> usb wan <dot> <noptr> sram dma <dot> <noptr> maximum fill )
<cls> <noptr> m chip hic stop ( )
<cls> <noptr> c xvid ioc enum output ( <ptr> file <dot> <ptr> priv <dot> <ptr> o )
<cls> <noptr> m xls fich w xfer msg ( <ptr> state <dot> <ptr> msg )
<cls> <ptr> c x get card ( <noptr> index )
<cls> <noptr> gpp sk get fpga version ( <ptr> d <dot> <ptr> fpga vers )
<cls> <noptr> c x usb aux buf copy ( <ptr> aux buf <dot> <noptr> pos <dot> <ptr> dest <dot> <noptr> len )
<cls> <noptr> preview init params ( <ptr> prev )
<cls> <noptr> smi ic get scl ( <ptr> data <dot> <noptr> sw ctl )
<cls> <ptr> de interlace file ctx ( <ptr> file )
<cls> <noptr> rcs i init p htw hes ( <ptr> priv <dot> <noptr> mbps )
<cls> <noptr> r pf configure frame ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> l gdt x pll r f set ( <ptr> fe <dot> <noptr> index )
<cls> <noptr> v l stream off ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> or write buf ( <ptr> state <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> stv x setup compound ( <ptr> state )
<cls> <noptr> stv x sleep ( <ptr> fe )
<cls> <noptr> pkt session unset buffers ( <ptr> pkt <dot> <ptr> cookie <dot> <ptr> bd )
<cls> <noptr> init ctl reg ( <ptr> gsp ca dev )
<cls> <noptr> hack rfs fmt sdr ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ov get hts ( <ptr> sensor )
<cls> <noptr> v l ctrl radio filter ( <ptr> ctrl )
<cls> <noptr> lg x read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> vi codec start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> h fi session start ( <ptr> inst )
<cls> <noptr> set v l std ( <ptr> client )
<cls> <noptr> vivid send source change ( <ptr> dev <dot> <noptr> type )
<cls> <noptr> vpx g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> cro sec cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> m c register read ( <ptr> dev <dot> <noptr> address <dot> <ptr> value )
<cls> <noptr> adv bt samsung t dt cdh demo d init ( <ptr> fe )
<cls> <noptr> t wxs fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> isset fd config max face ( <ptr> is <dot> <noptr> val )
<cls> <noptr> preview config contrast ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> mtm set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> ctrl get crop c app an ( <ptr> cptr <dot> <ptr> val )
<cls> <noptr> write reg sfp ( <ptr> client <dot> <ptr> regs )
<cls> <noptr> msp sleep ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> px p start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> v pfe restore context ( <ptr> c cdc )
<cls> <noptr> get dvb t signal to noise ( <ptr> state <dot> <ptr> p signal to noise )
<cls> <noptr> c xir stop ( <ptr> core )
<cls> <noptr> tm cards setup ( <ptr> dev )
<cls> <noptr> usb tv usb driver init ( )
<cls> <noptr> adv select input ( <ptr> state <dot> <noptr> input )
<cls> <noptr> fc get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> v l stubs d v timings ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <ptr> uvc queue to stream ( <ptr> queue )
<cls> <noptr> r vin group notify unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> mtk mdp reset handler ( <ptr> priv )
<cls> <noptr> isset isp adjust ( <ptr> is <dot> <noptr> cmd <dot> <noptr> val )
<cls> <noptr> solo start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> saa bus setup ( <ptr> dev )
<cls> <noptr> isp stat buf check magic ( <ptr> stat <dot> <ptr> buf )
<cls> <noptr> dtt u streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> vivid vid adjust sel ( <noptr> flags <dot> <ptr> r )
<cls> <noptr> fim c lite sub devs stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> lme update stats ( <ptr> adap )
<cls> <noptr> uif set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> usb am radio suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> cam if get dma burst ( <noptr> width <dot> <noptr> y bpp <dot> <ptr> m burst <dot> <ptr> r burst )
<cls> <noptr> tw irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> tea ic read ( <ptr> radio )
<cls> <noptr> z d demo dic function ality ( <ptr> adapter )
<cls> <noptr> hift ( <ptr> state <dot> <noptr> offset freq <dot> <noptr> channel mirrored )
<cls> <noptr> au v l open ( <ptr> filp )
<cls> <noptr> m tt init camera ( <ptr> client )
<cls> <noptr> resizer set bilinear ( <ptr> res <dot> <noptr> type )
<cls> <noptr> ctrl get tre ble ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> cal buffer queue ( <ptr> vb )
<cls> <ptr> ddb dev node ( <ptr> device <dot> <ptr> mode )
<cls> <noptr> z xir dec irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> get signal parameters ( <ptr> state )
<cls> <noptr> ves x set front end ( <ptr> fe )
<cls> <noptr> v fe get bpp ( <ptr> formats <dot> <noptr> n formats <dot> <noptr> code )
<cls> <noptr> p xac vb init ( <ptr> vb )
<cls> <noptr> max is enable ( <ptr> ctx <dot> <noptr> enable )
<cls> <noptr> stk try fmt vid cap ( <ptr> filp <dot> <ptr> fmt d <dot> <ptr> idx )
<cls> <noptr> stb table lookup ( <ptr> tab <dot> <noptr> max <dot> <noptr> val )
<cls> <noptr> reg clear ( <ptr> client <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> port has c x d xx ( <ptr> port <dot> <ptr> id )
<cls> <noptr> pvr sh attach ( <ptr> adap )
<cls> <noptr> hi suspend ( <ptr> dev )
<cls> <noptr> stb recv slave reply ( <ptr> fe <dot> <ptr> reply )
<cls> <noptr> tw x buf done ( <ptr> vc <dot> <noptr> pb )
<cls> <noptr> bt write ( <ptr> encoder <dot> <noptr> sub addr <dot> <noptr> data )
<cls> <noptr> rtl sleep ( <ptr> fe )
<cls> <noptr> dml me front end attach ( <ptr> adap )
<cls> <noptr> h f iis r ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> usb tv video init ( <ptr> usb tv )
<cls> <noptr> scratch r m old ( <ptr> usb vision <dot> <noptr> len )
<cls> <noptr> omap isp stat isr ( <ptr> stat )
<cls> <noptr> determine valid ioctl s ( <ptr> v dev )
<cls> <noptr> lg dta set vsb ( <ptr> state )
<cls> <noptr> fin tek shutdown ( <ptr> pdev )
<cls> <noptr> c cdc config gain offset ( )
<cls> <noptr> b disp dbg dump f ctl ( <ptr> s <dot> <noptr> val )
<cls> <noptr> px a camera check link miss ( <ptr> pc dev <dot> <noptr> last submitted <dot> <noptr> last issued )
<cls> <noptr> c sect pfe timer interrupt ( <ptr> t )
<cls> <noptr> ctrl crop l min get ( <ptr> cptr <dot> <ptr> left )
<cls> <noptr> wait ic reg ( <ptr> addr )
<cls> <noptr> vpx usb inout cmd ( <ptr> d <dot> <noptr> cmd <dot> <ptr> o <dot> <noptr> o len <dot> <ptr> i <dot> <noptr> ilen <dot> <noptr> msec )
<cls> <noptr> vb i buffer prepare ( <ptr> q <dot> <ptr> vb <dot> <noptr> field )
<cls> <noptr> pvr h dw qui esc ent timeout ( <ptr> t )
<cls> <noptr> m init controls ( <ptr> gsp ca dev )
<cls> <noptr> dvb pll get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> hack rfs ctrl r x ( <ptr> ctrl )
<cls> <noptr> azi c func ( <ptr> adapter )
<cls> <noptr> uvc ctrl init x u ctrl ( <ptr> dev <dot> <ptr> ctrl )
<cls> <noptr> sun ics i driver init ( )
<cls> <noptr> h dw desc show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> v lst k open ( <ptr> fp )
<cls> <noptr> coda firmware request ( <ptr> dev )
<cls> <noptr> coda g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> led feedback ( <ptr> client )
<cls> <noptr> vp fec cdc set win ( <ptr> c cdc <dot> <ptr> image win <dot> <noptr> frm fmt <dot> <noptr> bpp )
<cls> <noptr> img ir decoder convert ( <ptr> decoder <dot> <ptr> reg timings <dot> <noptr> clock hz )
<cls> <noptr> ctrl std cur set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <ptr> tom tt ( <ptr> client )
<cls> <ptr> adv format info ( <ptr> state <dot> <noptr> code )
<cls> <noptr> b disp s fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ova bst osm ( <noptr> v )
<cls> <noptr> fim ch w set target format ( <ptr> ctx )
<cls> <noptr> c cdc config raw ( )
<cls> <noptr> media get pad index ( <ptr> entity <dot> <noptr> is sink <dot> <noptr> sig type )
<cls> <noptr> ttc is lot shutdown ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> l read signal strength ( <ptr> fe <dot> <ptr> signal strength )
<cls> <noptr> m cam vid io cs input ( <ptr> filp <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> omap isp video cancel stream ( <ptr> video )
<cls> <noptr> ov set vts ( <ptr> sensor <dot> <noptr> vts )
<cls> <noptr> usb shark driver init ( )
<cls> <noptr> vsp pipeline reset ( <ptr> pipe )
<cls> <noptr> mrs set carrier offset ( <ptr> fe <dot> <noptr> offset )
<cls> <noptr> afc ofs dataset ( <ptr> state <dot> <noptr> afc exl <dot> <noptr> afc exh )
<cls> <noptr> ak xs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> h encode frame ( <ptr> inst <dot> <ptr> frm buf <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> mds get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> ite sett x carrier ( <ptr> rc dev <dot> <noptr> carrier )
<cls> <noptr> sun i video open ( <ptr> file )
<cls> <noptr> au v l suspend ( <ptr> dev )
<cls> <noptr> sd init ( <ptr> gsp ca dev )
<cls> <noptr> flex c opus bic req ( <ptr> ic <dot> <noptr> req <dot> <noptr> func <dot> <noptr> chip addr <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> parse max sessions ( <ptr> core <dot> <ptr> data )
<cls> <noptr> c x default ( <ptr> file <dot> <ptr> f h <dot> <noptr> valid prio <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> dt vic msg ( <ptr> d <dot> <noptr> addr <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> coda estimate size image ( <ptr> ctx <dot> <noptr> size image <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> dvb dmx dev add pid ( <ptr> dmx dev <dot> <ptr> filter <dot> <noptr> pid )
<cls> <noptr> lock tuner ( <ptr> state )
<cls> <noptr> rcs i init p htw vme ( <ptr> priv <dot> <noptr> mbps )
<cls> <ptr> check enc idx buf s ( )
<cls> <noptr> t pgs crop compose ( <ptr> tp g <dot> <ptr> crop <dot> <ptr> compose )
<cls> <noptr> v pbe display enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> mtm probe fw ( <ptr> client <dot> <ptr> mtm )
<cls> <noptr> pvr h dw cmd usb stream ( <ptr> h dw <dot> <noptr> run fl )
<cls> <noptr> me so nao cec irq tx ( <ptr> ao cec )
<cls> <noptr> histo enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> sp xic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> no sync ( <ptr> sd )
<cls> <noptr> h vah w runtime suspend ( <ptr> dev )
<cls> <noptr> iv tv irq vsync ( <ptr> it v )
<cls> <noptr> stk stop stream ( <ptr> dev )
<cls> <noptr> isp pipeline suspend ( <ptr> pipe )
<cls> <noptr> trust s mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> c ech pd gpio irqhandler thread ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> stv x read per ( <ptr> fe <dot> <ptr> per )
<cls> <noptr> t dax codec remove ( <ptr> component )
<cls> <noptr> cam if hw clear fifo overflow ( <ptr> vp )
<cls> <noptr> adv x hdmi query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> snd saa cap src get ( <ptr> k control <dot> <ptr> u control )
<cls> <noptr> print pll ( <ptr> dev <dot> <ptr> pll )
<cls> <noptr> m tms fmt ( <ptr> sd <dot> <ptr> fmt <dot> <ptr> m f )
<cls> <noptr> ov set fr ( <ptr> sd )
<cls> <noptr> c x d read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> sh ve u enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> coda mpeg level ( <noptr> levelid c )
<cls> <noptr> pv btp b audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> c x usb streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> lg x write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> v l stub encoder cmd ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> uvc v l read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> exy nos jpeg parse decode h tbl ( <ptr> ctx )
<cls> <noptr> m xls fic start ( <ptr> state )
<cls> <noptr> dib wb dto db ( <ptr> state <dot> <noptr> wb d )
<cls> <noptr> mtm init ( <ptr> mtm )
<cls> <noptr> bt tv sub add device ( <ptr> core <dot> <ptr> name )
<cls> <noptr> px a buffer init ( <ptr> pc dev <dot> <ptr> buf )
<cls> <noptr> cec queue event ( <ptr> adap <dot> <ptr> ev )
<cls> <noptr> init r cmap pinn acle pct vhd ( )
<cls> <noptr> em xx suspend extension ( <ptr> dev )
<cls> <noptr> sp cec adap log addr ( <ptr> adap <dot> <noptr> addr )
<cls> <noptr> sms dvb onresponse ( <ptr> context <dot> <ptr> cb )
<cls> <noptr> pvr channel claim stream ( <ptr> cp <dot> <ptr> sp )
<cls> <noptr> c xxx init dev ( <ptr> dev <dot> <ptr> udev <dot> <noptr> minor )
<cls> <noptr> venus session continue ( <ptr> inst )
<cls> <noptr> g d set dst addr ( <ptr> d <dot> <noptr> a )
<cls> <noptr> ec read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> x vip init resources ( <ptr> x vip )
<cls> <noptr> csi configure ( <ptr> csi )
<cls> <noptr> ska a gpio de assert ( <ptr> priv <dot> <noptr> id )
<cls> <noptr> video buf copyto user ( <ptr> q <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> count <dot> <noptr> non blocking )
<cls> <noptr> h enc init ( <ptr> ctx )
<cls> <noptr> pvr sysfs add controls ( <ptr> sfp )
<cls> <noptr> max i radio tea x set direction ( <ptr> tea <dot> <noptr> output )
<cls> <noptr> c iner gy tfe read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> pvr stream kill ( <ptr> sp )
<cls> <ptr> c x get mdl ( <ptr> s <dot> <noptr> non block <dot> <ptr> err )
<cls> <noptr> sp mfc configure dma memory ( <ptr> mfc dev )
<cls> <noptr> c x out work handler ( <ptr> work )
<cls> <noptr> x c initialize ( <ptr> priv )
<cls> <noptr> af get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> v l async notifier call complete ( <ptr> n )
<cls> <noptr> dib risc apb access read ( <ptr> state <dot> <noptr> address <dot> <noptr> attribute <dot> <ptr> tx <dot> <noptr> tx len <dot> <ptr> b <dot> <noptr> len )
<cls> <noptr> fim cmd sysfs store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> dib usb streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> uvc v l set stream parm ( <ptr> stream <dot> <ptr> parm )
<cls> <noptr> nolock ssp d ( <ptr> sd )
<cls> <noptr> l gdt x read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> imx apply trimming ( <ptr> imx )
<cls> <noptr> dw probe ( <ptr> client )
<cls> <noptr> ov get volatile ctrl ( <ptr> ctrl )
<cls> <noptr> skb af hw set f iv ( <ptr> state <dot> <noptr> f iv )
<cls> <noptr> au setups video mode ( <ptr> state <dot> <noptr> input mode )
<cls> <noptr> c x cancel buffers ( <ptr> dev )
<cls> <noptr> dw load firmware ( <ptr> dev <dot> <ptr> frm wr )
<cls> <noptr> pt set voltage ( <ptr> fe <dot> <noptr> volt )
<cls> <ptr> next unit ( <ptr> adap <dot> <ptr> idx <dot> <ptr> ofs )
<cls> <noptr> dmx c cdc driver init ( )
<cls> <noptr> is buf ref ed ( <ptr> inst <dot> <ptr> v buf )
<cls> <noptr> mtk mdp ctrls create ( <ptr> ctx )
<cls> <ptr> v l to ce u ( <ptr> v l dev )
<cls> <noptr> video mux init cfg ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> ov set ctrl white balance ( <ptr> sensor <dot> <noptr> awb )
<cls> <noptr> vivid fb set var ( <ptr> dev <dot> <ptr> var )
<cls> <noptr> pvr ctrl get value ( <ptr> cptr <dot> <ptr> val ptr )
<cls> <noptr> start preview ( <ptr> dev )
<cls> <noptr> ptr to ptr ( <ptr> ctrl <dot> <noptr> from <dot> <noptr> to )
<cls> <noptr> v fe violation read ( <ptr> v fe )
<cls> <noptr> dib tune ( <ptr> fe )
<cls> <noptr> iv tv yuv u dma stream frame ( <ptr> it v <dot> <ptr> src )
<cls> <noptr> pwc enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sa atv audio get stereo ( <ptr> dev )
<cls> <noptr> pwc get u ctrl ( <ptr> pdev <dot> <noptr> request <dot> <noptr> value <dot> <ptr> data )
<cls> <noptr> z xir dec probe ( <ptr> pdev )
<cls> <noptr> cade t get stereo ( <ptr> dev )
<cls> <noptr> sms core notify clients ( <ptr> core dev )
<cls> <noptr> set src dst params ( <ptr> ctx )
<cls> <noptr> pt reset ram ( <ptr> pt )
<cls> <noptr> adv init ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> c x clone params ( <ptr> fe )
<cls> <noptr> n gene load firm ( <ptr> dev )
<cls> <noptr> v l print default ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> wb cir irq tx ( <ptr> data )
<cls> <noptr> mcc ic notify complete ( <ptr> notifier )
<cls> <noptr> stk x front end attach ( <ptr> adap )
<cls> <noptr> xt pg get bayer phase ( <noptr> code )
<cls> <noptr> dib p set adc state ( <ptr> state <dot> <noptr> no )
<cls> <noptr> dtt ufe get front end ( <ptr> fe <dot> <ptr> fep )
<cls> <noptr> dr x ctrl u code ( <ptr> demo d <dot> <ptr> m c info <dot> <noptr> action )
<cls> <noptr> img ir control ( <ptr> control )
<cls> <noptr> d sbr set freq ( <ptr> radio <dot> <noptr> freq )
<cls> <noptr> m tt set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> sa ats buffer prepare ( <ptr> vb )
<cls> <noptr> venus iface dbg q read ( <ptr> h dev <dot> <ptr> pkt )
<cls> <noptr> mtm resume ( <ptr> mtm )
<cls> <noptr> m anti shif init ( <ptr> ca )
<cls> <ptr> v l ctrl handler to radio ( <ptr> d )
<cls> <noptr> init dll ( <ptr> client )
<cls> <noptr> lg dts w reset ( <ptr> state )
<cls> <noptr> pct ve ic xfer ( <ptr> adapter <dot> <ptr> msg <dot> <noptr> num )
<cls> <noptr> c x set clock ratios ( <ptr> fe )
<cls> <noptr> histo start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> af read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> is pix format valid ( <noptr> pix format )
<cls> <noptr> irq handle io ( <ptr> dev <dot> <noptr> s )
<cls> <noptr> v lis known ioctl ( <noptr> cmd )
<cls> <noptr> dvb ca en thread wakeup ( <ptr> ca )
<cls> <noptr> m spread dsp ( <ptr> client <dot> <noptr> addr )
<cls> <noptr> l gdt read reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> pvr issue simple cmd ( <ptr> h dw <dot> <noptr> cmd code )
<cls> <noptr> tc get reg size ( <noptr> address )
<cls> <noptr> st kac setup ( <ptr> dev )
<cls> <noptr> vb ioctl req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> d ibm c read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> video buf query buf ( <ptr> q <dot> <ptr> b )
<cls> <noptr> saa cmd timeout get ( <ptr> dev <dot> <noptr> seqno )
<cls> <noptr> set b gain ( <ptr> gsp ca dev <dot> <noptr> b gain )
<cls> <noptr> x vt c register device ( <ptr> x vt c )
<cls> <noptr> c x send dis eq c msg ( <ptr> fe <dot> <ptr> d )
<cls> <ptr> check os dy res ( )
<cls> <noptr> isp suspend module pipeline ( <ptr> me )
<cls> <noptr> dib get adc power ( <ptr> fe )
<cls> <noptr> al ( <ptr> state )
<cls> <noptr> vid ioc enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> af tuner sleep ( <ptr> fe )
<cls> <noptr> pvr encoder configure ( <ptr> h dw )
<cls> <ptr> preview get format ( <ptr> prev <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> os d probe ( <ptr> pdev )
<cls> <noptr> sms core set boardid ( <ptr> core <dot> <noptr> id )
<cls> <noptr> m xls f demo d set front end ( <ptr> fe )
<cls> <ptr> check front end debug ( )
<cls> <noptr> n gene stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> bcm hab send request ( <ptr> st <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> fmc set mode ( <ptr> f m dev <dot> <noptr> f m mode )
<cls> <noptr> pca init port expander ( <ptr> state )
<cls> <noptr> stream stop ( <ptr> gsp ca dev )
<cls> <noptr> h vag fmt frame ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> imx write table ( <ptr> priv <dot> <noptr> table )
<cls> <noptr> c x function to pad ( <ptr> client <dot> <noptr> function )
<cls> <noptr> nov at driver init ( )
<cls> <noptr> d mdm x buffer ( <ptr> work )
<cls> <ptr> check r f switch ( )
<cls> <noptr> dcm i get sensor format ( <ptr> dcm i <dot> <ptr> pix )
<cls> <noptr> c x sleep ( <ptr> fe )
<cls> <noptr> f m r x get r f depend soft mute ( <ptr> f m dev <dot> <ptr> curr mute mode )
<cls> <noptr> uvc ioctl spar m ( <ptr> file <dot> <ptr> f h <dot> <ptr> parm )
<cls> <noptr> video buf sync ( <ptr> q <dot> <ptr> buf )
<cls> <noptr> saa dump hw desc ( <ptr> dev )
<cls> <noptr> req buf soutput ( <ptr> dev <dot> <ptr> ctx <dot> <ptr> req buf s )
<cls> <noptr> si handler ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> d m irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> sp mfc clean ctx int flags ( <ptr> ctx )
<cls> <noptr> au suspend ( <ptr> interface <dot> <noptr> message )
<cls> <noptr> rt comp recor ( <noptr> i q )
<cls> <noptr> ich ack wm ( <ptr> h dw <dot> <noptr> ic addr <dot> <ptr> w data <dot> <noptr> w len <dot> <ptr> r data <dot> <noptr> r len )
<cls> <noptr> vs write regs ( <ptr> sd <dot> <ptr> regs )
<cls> <noptr> fim cmd parse port node ( <ptr> f md <dot> <ptr> port <dot> <noptr> index )
<cls> <noptr> m bas get front end algo ( <ptr> fe )
<cls> <noptr> rtl get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> l gs gxx islocked ( <ptr> priv <dot> <ptr> locked )
<cls> <noptr> stv x read reg ( <ptr> stv x <dot> <noptr> reg <dot> <ptr> data )
<cls> <ptr> check full eeprom ( )
<cls> <noptr> z r x xs ctrl ( <ptr> ctrl )
<cls> <noptr> ddb input avail ( <ptr> input )
<cls> <ptr> check loud ness ( )
<cls> <noptr> vps s enable clock ( <noptr> clock sel <dot> <noptr> en )
<cls> <noptr> c cdc config ycbcr ( )
<cls> <noptr> uvc v l poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> rtl sdr submit urb s ( <ptr> dev )
<cls> <noptr> saas ett v norm hw ( <ptr> dev )
<cls> <noptr> sh v oun tsc mode ( <noptr> bus fmt )
<cls> <noptr> i set ( <ptr> state <dot> <noptr> eth <dot> <noptr> via )
<cls> <noptr> cec error inj show ( <ptr> sf <dot> <ptr> unused )
<cls> <noptr> c x set pilot ( <ptr> state <dot> <noptr> pilot )
<cls> <noptr> tmx c callback ( <ptr> ptr <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> pvr dvb stream dostart ( <ptr> adap )
<cls> <noptr> go boot encoder ( <ptr> go <dot> <noptr> initi c )
<cls> <noptr> mce usb cmd data size ( <noptr> cmd <dot> <noptr> sub cmd )
<cls> <noptr> qt init ( <ptr> fe )
<cls> <noptr> or get parameters ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> rtl utu a tuner callback ( <ptr> d <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> f m r x reset rds cache ( <ptr> f m dev )
<cls> <noptr> v pbe set default output ( <ptr> v pbe dev )
<cls> <noptr> device work ( <ptr> w )
<cls> <noptr> pt read reg ( <ptr> pt <dot> <noptr> reg )
<cls> <noptr> spc sis system enable ( <ptr> state <dot> <noptr> on )
<cls> <noptr> tw x g parm ( <ptr> file <dot> <ptr> priv <dot> <ptr> sp )
<cls> <noptr> au get key au ( <ptr> ir )
<cls> <noptr> bt tv probe ( <ptr> dev <dot> <ptr> pci id )
<cls> <noptr> c iner gy tfe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <ptr> check repeat delay ( )
<cls> <noptr> ds get algo ( <ptr> fe )
<cls> <noptr> adp init controls ( <ptr> flash )
<cls> <noptr> sub devs ctrl ( <ptr> ctrl )
<cls> <noptr> dvb ca en set config option ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> l gs gl read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> c x der read packet errors c ( <ptr> priv <dot> <ptr> p enum )
<cls> <noptr> native ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> adv mbus fmt ( <ptr> sd <dot> <ptr> fmt )
<cls> <noptr> bt tvs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> smi app set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> vivid radio r x poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> v pread mac addr ( <ptr> d <dot> <noptr> mac )
<cls> <noptr> c x new station ( <ptr> core )
<cls> <noptr> saa card setup ( <ptr> dev )
<cls> <noptr> red rat dump fw error ( <ptr> r r <dot> <noptr> code )
<cls> <noptr> dib x read word ( <ptr> mst <dot> <noptr> reg )
<cls> <noptr> sp mfc get disp frame type v ( <ptr> ctx )
<cls> <noptr> loop set carrier report ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> c xxx reset analog tuner ( <ptr> dev )
<cls> <noptr> nv t clear tx fifo ( <ptr> nv t )
<cls> <noptr> cec fill conn info from drm ( <ptr> conn info <dot> <ptr> connector )
<cls> <noptr> ic read ( <ptr> state <dot> <noptr> adr <dot> <ptr> val )
<cls> <noptr> stv xx dump bridge ( <ptr> sd )
<cls> <noptr> set volume ( <ptr> client <dot> <noptr> volume )
<cls> <noptr> input handler ( <ptr> data )
<cls> <noptr> stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> v l m m request queue ( <ptr> req )
<cls> <noptr> c x alsa init ( )
<cls> <noptr> ts get tuner gain ( <ptr> fe <dot> <ptr> gain )
<cls> <noptr> c xir and or ( <ptr> dev <dot> <noptr> addr <dot> <noptr> and mask <dot> <noptr> or value )
<cls> <noptr> dvb bt xx start feed ( <ptr> dvb dmx feed )
<cls> <noptr> ska a enum frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <ptr> check n devs ( )
<cls> <noptr> rc prepare r x device ( <ptr> dev )
<cls> <noptr> mba read ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> ov set auto exposure ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> tc query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> z r x xvid ioc req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> cpl d write ( <ptr> cobalt <dot> <noptr> offset <dot> <noptr> val )
<cls> <noptr> tt usb dec send command ( <ptr> dec <dot> <noptr> command <dot> <noptr> param length <dot> <noptr> params <dot> <ptr> result length <dot> <noptr> cmd result )
<cls> <noptr> hack r f buf queue ( <ptr> vb )
<cls> <noptr> bt tv check chipset ( )
<cls> <noptr> bcm set front end ( <ptr> fe )
<cls> <noptr> imon set display type ( <ptr> i ctx )
<cls> <noptr> c x register ( <ptr> dev )
<cls> <noptr> cec adap s phys addr ( <ptr> adap <dot> <ptr> f h <dot> <noptr> block <dot> <ptr> p arg )
<cls> <noptr> fest and by ( <ptr> fe )
<cls> <noptr> cobalt query d v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> ir close ( <ptr> dev )
<cls> <noptr> skb af hw sync cfg ( <ptr> state )
<cls> <noptr> tw handle frame task ( <noptr> data )
<cls> <noptr> node probe ( <ptr> unit <dot> <ptr> id )
<cls> <noptr> ic get status ( <ptr> dev )
<cls> <noptr> pkt sys idle indicator ( <ptr> pkt <dot> <noptr> enable )
<cls> <noptr> wakeup dev ( <ptr> dev <dot> <noptr> reason <dot> <noptr> err )
<cls> <noptr> rvm u x sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> pvr hd wget tuner status ( <ptr> h dw <dot> <ptr> v tp )
<cls> <noptr> iv tvs std dec ( <ptr> it v <dot> <noptr> std )
<cls> <noptr> stb reads reg ( <ptr> state <dot> <noptr> st bic dev <dot> <noptr> stb base addr <dot> <noptr> stb reg offset )
<cls> <noptr> f get line ( <ptr> dev <dot> <noptr> line )
<cls> <noptr> start ( <ptr> state <dot> <noptr> offset freq <dot> <noptr> intermediate frequency )
<cls> <noptr> omap is pcs i reset ( <ptr> csi )
<cls> <noptr> d v bring buffer read user ( <ptr> r buf <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> nxt fe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> dib f wget channel ( <ptr> fe )
<cls> <noptr> f m irq af jump enable int resp ( <ptr> f m dev )
<cls> <noptr> black bird find mailbox ( <ptr> dev )
<cls> <noptr> scm o if try format ( <ptr> state <dot> <ptr> cfg <dot> <ptr> fmt <dot> <dptr> fs )
<cls> <noptr> ecm xls tuner attach ( <ptr> adap )
<cls> <noptr> v l async notifier can complete ( <ptr> notifier )
<cls> <noptr> cec receive msg ( <ptr> f h <dot> <ptr> msg <dot> <noptr> block )
<cls> <noptr> uvc video clock reset ( <ptr> stream )
<cls> <noptr> vivid vb igen sliced ( <ptr> vb i <dot> <noptr> ish z <dot> <noptr> seq nr )
<cls> <noptr> d dbc i attach ( <ptr> port <dot> <noptr> bitrate )
<cls> <noptr> c x dt nr dmd dvb t mon tps info ( <ptr> tn r dmd <dot> <ptr> info )
<cls> <noptr> igu an air driver init ( )
<cls> <noptr> d ibm fe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> v l m m ioctl req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> rb )
<cls> <ptr> check antenna pwr ( )
<cls> <noptr> wl f m vid io csh w freq seek ( <ptr> file <dot> <ptr> priv <dot> <ptr> seek )
<cls> <noptr> m cam set config needed ( <ptr> cam <dot> <noptr> needed )
<cls> <noptr> mtk vcodec dec p woff ( <ptr> pm )
<cls> <noptr> sp mfc open inst cmd v ( <ptr> ctx )
<cls> <noptr> v pbe start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> snd c x card trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> fim ch w activate input dma ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> lg tuner pwr save polarity ( <ptr> state <dot> <noptr> polarity )
<cls> <noptr> uvc ctrl add mapping ( <ptr> dev <dot> <ptr> ctrl <dot> <ptr> mapping )
<cls> <noptr> gs g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> d ibm write tab ( <ptr> state <dot> <ptr> buf )
<cls> <noptr> de interlace init ( <ptr> dev )
<cls> <noptr> isp save ctx ( <ptr> isp )
<cls> <noptr> bt tv read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> tw x g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> id )
<cls> <noptr> tcg mbus config ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> budget av init ( )
<cls> <noptr> m xlt get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ir spi probe ( <ptr> spi )
<cls> <noptr> ks status ( <ptr> sd <dot> <ptr> p status <dot> <ptr> p std )
<cls> <noptr> philip std ml request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> max send burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> l mic driver init ( )
<cls> <noptr> rtl u power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> c x d set ber per period t ( <ptr> fe )
<cls> <noptr> snd c x pcm trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> ctrl channel set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> slot id )
<cls> <noptr> c x input ir open ( <ptr> rc )
<cls> <noptr> preview enable in val aw ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> m m ols set exposure ( <ptr> info <dot> <noptr> exposure )
<cls> <noptr> au driver init ( )
<cls> <noptr> show saturation ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> g sch w set sfr update ( <ptr> ctx )
<cls> <noptr> cit init ibm net cam pro ( <ptr> gsp ca dev )
<cls> <noptr> k ss stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> me son a oce cga read ( <ptr> context <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> m cam vbs g buf prepare ( <ptr> vb )
<cls> <noptr> mjpeg frame header ( <ptr> go <dot> <ptr> buf <dot> <noptr> q )
<cls> <noptr> fim c is ic resume ( <ptr> dev )
<cls> <noptr> mtm reg set ( <ptr> client <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> fce num freq bands ( <ptr> sd <dot> <ptr> b and )
<cls> <noptr> tcc ec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> go loader driver init ( )
<cls> <noptr> ir nec decode init ( )
<cls> <noptr> flite hw set test pattern ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> adv s std output ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> ica v write ( <ptr> ic <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> stv xx write sensor ( <ptr> sd <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> x vip pipeline cleanup ( <ptr> pipe )
<cls> <noptr> csi enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> v fe set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> ths driver init ( )
<cls> <noptr> uds set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> get v l plane ( <ptr> p <dot> <ptr> p <dot> <noptr> memory )
<cls> <noptr> adv checkedid status ( <ptr> sd )
<cls> <noptr> g d clear int ( <ptr> d )
<cls> <noptr> dtt ufe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> vb thread stop ( <ptr> q )
<cls> <noptr> ctrl std cur clear dirty ( <ptr> cptr )
<cls> <noptr> adic driver init ( )
<cls> <noptr> v pu get v dec hwc apa ( <ptr> pdev )
<cls> <noptr> au setup c vbs mode ( <ptr> state <dot> <noptr> input mode )
<cls> <noptr> v fe isr ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> solo timer sync ( <ptr> solo dev )
<cls> <noptr> cobalt stop ( <ptr> regs <dot> <ptr> adap )
<cls> <noptr> skb af hw set awb ( <ptr> state <dot> <noptr> awb )
<cls> <noptr> sms core registry get mode ( <ptr> dev path )
<cls> <noptr> tt usb dec init stb ( <ptr> dec )
<cls> <noptr> vid io cs mod ulator ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> vpx fe read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> isc clk register ( <ptr> isc <dot> <noptr> id )
<cls> <noptr> au init ( <ptr> fe )
<cls> <noptr> c x dio spi write reg ( <ptr> io <dot> <noptr> tgt <dot> <noptr> sub address <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> c xxx find mailbox ( <ptr> dev )
<cls> <noptr> iv tv open ( <ptr> filp )
<cls> <noptr> ov set saturation ( <ptr> reg map <dot> <noptr> value )
<cls> <noptr> hel ene probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> ener x restore hw buffer ( <ptr> dev )
<cls> <noptr> f crc cal add ( <ptr> fe <dot> <noptr> rc val )
<cls> <noptr> v l print dbg register ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> mtk mdp m m buf prepare ( <ptr> vb )
<cls> <noptr> img ir set wakeup filter ( <ptr> dev <dot> <ptr> sc filter )
<cls> <noptr> bt status ( <ptr> sd <dot> <ptr> p status <dot> <ptr> p std )
<cls> <noptr> rtl sdr stop streaming ( <ptr> v q )
<cls> <noptr> irs any o decode init ( )
<cls> <noptr> j te w post power on ( <ptr> sensor )
<cls> <ptr> v pu mapping d m addr ( <ptr> pdev <dot> <noptr> dt cmd mem addr )
<cls> <noptr> pvr g ctrl ( <ptr> file <dot> <ptr> priv <dot> <ptr> vc )
<cls> <noptr> a zci read cam control ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <ptr> check alternate ( )
<cls> <noptr> is ppm resume ( <ptr> dev )
<cls> <noptr> kon ica stream on ( <ptr> gsp ca dev )
<cls> <noptr> af eeprom hash ( <ptr> d )
<cls> <noptr> g ous bez usb write interrupt ( <ptr> go <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> smi ir irq ( <ptr> ir <dot> <noptr> int status )
<cls> <noptr> set pre saw ( <ptr> state <dot> <ptr> p pre saw cfg )
<cls> <noptr> upd a probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> radio isa log status ( <ptr> file <dot> <ptr> priv )
<cls> <noptr> vs pdu pipeline setup r pf ( <ptr> vsp <dot> <ptr> pipe <dot> <ptr> r pf <dot> <ptr> uif <dot> <noptr> br x input )
<cls> <noptr> show def ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vid ioc enum audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> ctrl set white balance ( <ptr> is <dot> <noptr> value )
<cls> <noptr> sa ago stream start ( <ptr> go )
<cls> <noptr> av fw query ( <ptr> av <dot> <noptr> tag <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> f m power down ( <ptr> f m dev )
<cls> <noptr> dr x j reset mode ( <ptr> ext attr )
<cls> <noptr> max driver init ( )
<cls> <noptr> sp mfc sleep cmd v ( <ptr> dev )
<cls> <noptr> usb vision setup ( <ptr> usb vision <dot> <noptr> format )
<cls> <noptr> img irs any o filter ( <ptr> in <dot> <ptr> out <dot> <noptr> protocols )
<cls> <noptr> m rst set pll freq ( <ptr> dev <dot> <noptr> tuner freq mhz )
<cls> <noptr> c x init ( )
<cls> <noptr> at b mic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> scm check status ( <ptr> state <dot> <noptr> value )
<cls> <noptr> usb control msg ( <ptr> dev <dot> <noptr> pipe <dot> <noptr> request <dot> <noptr> request type <dot> <noptr> value <dot> <noptr> index <dot> <ptr> data <dot> <noptr> size <dot> <noptr> timeout )
<cls> <noptr> sp mfc get crop info h v ( <ptr> ctx )
<cls> <noptr> m xls f ctrl program regs ( <ptr> state <dot> <ptr> ctrl reg info )
<cls> <noptr> px p size image ( <ptr> fmt <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> saa api set gop size ( <ptr> port )
<cls> <noptr> smi ic get scl ( <ptr> data )
<cls> <noptr> dib write regs ( <ptr> state <dot> <noptr> r <dot> <ptr> b <dot> <noptr> c )
<cls> <noptr> loads code ( <ptr> fe <dot> <noptr> type <dot> <ptr> id <dot> <noptr> int freq <dot> <noptr> scode )
<cls> <noptr> c x initialize codec ( <ptr> dev <dot> <noptr> start encoder )
<cls> <noptr> adc synchron ization ( <ptr> state )
<cls> <noptr> v pfe schedule next buffer ( <ptr> v pfe )
<cls> <noptr> saa x g sliced fmt ( <ptr> sd <dot> <ptr> sliced )
<cls> <noptr> fin tek disable cir ( <ptr> fin tek )
<cls> <ptr> check spi enable ( )
<cls> <noptr> m cam ctl r stop ( <ptr> cam )
<cls> <noptr> mce write ( <ptr> ir <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> v l print enum d v timings ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> d m disable irq s ( <ptr> dev )
<cls> <noptr> stream next buffer check queue ( <ptr> q <dot> <noptr> no block )
<cls> <noptr> m m ols set saturation ( <ptr> info <dot> <noptr> val )
<cls> <noptr> nv t suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> pvr probe ( <ptr> int f <dot> <ptr> devid )
<cls> <ptr> check enable rc ( )
<cls> <noptr> ven cops ctrl ( <ptr> ctrl )
<cls> <noptr> via cam int disable ( <ptr> cam )
<cls> <ptr> check volume ( )
<cls> <noptr> rom ( <ptr> adapter <dot> <noptr> tag <dot> <noptr> max len <dot> <ptr> data <dot> <ptr> p length )
<cls> <noptr> cod adecoder req buf s ( <ptr> ctx <dot> <ptr> rb )
<cls> <noptr> ov set power off ( <ptr> sensor )
<cls> <noptr> pvr stream done ( <ptr> sp )
<cls> <noptr> d sbr stop ( <ptr> radio )
<cls> <noptr> empres sun register ( )
<cls> <noptr> init rc maps u ( )
<cls> <noptr> vid ioc try encoder cmd ( <ptr> filp <dot> <ptr> priv <dot> <ptr> a )
<cls> <noptr> scratch set extra ptr ( <ptr> usb vision <dot> <ptr> ptr <dot> <noptr> len )
<cls> <noptr> ir lookup by scan code ( <ptr> r cmap <dot> <noptr> scan code )
<cls> <noptr> c x wait for ln b ( <ptr> fe )
<cls> <noptr> ic read eeprom ( <ptr> adapter <dot> <noptr> adr <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> usb vision restart i soc ( <ptr> usb vision )
<cls> <noptr> ov x restart ( <ptr> sd )
<cls> <ptr> pvr hd wget ctrl byid ( <ptr> h dw <dot> <noptr> ctl id )
<cls> <noptr> get crop info ( <ptr> inst <dot> <ptr> cr )
<cls> <noptr> saa vb i acquire port ( <ptr> port )
<cls> <noptr> tea x init ( <ptr> b tv )
<cls> <noptr> via cam vb queue ( <ptr> vb )
<cls> <noptr> v fe set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> program capture engine ( <ptr> dev <dot> <noptr> planar )
<cls> <noptr> v fe calc inter pre so ( <noptr> input <dot> <noptr> output )
<cls> <noptr> wpf s stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> sm ife init ( <ptr> port )
<cls> <noptr> vivid get std cap ( <ptr> dev )
<cls> <noptr> c x der inits ( <ptr> fe )
<cls> <noptr> norm h delay ( <noptr> norm )
<cls> <noptr> ptic reset ( <ptr> pt )
<cls> <noptr> vb ioctl stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> dvb dev get free adapter num ( )
<cls> <noptr> coda runtime resume ( <ptr> dev )
<cls> <noptr> ov get vts ( <ptr> sensor )
<cls> <noptr> c x irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> pt init front ends ( <ptr> pt )
<cls> <noptr> pluto driver init ( )
<cls> <noptr> saa buffer re queue ( <ptr> dev <dot> <ptr> q )
<cls> <noptr> tp g calc buffer line ( <ptr> tp g <dot> <noptr> y <dot> <noptr> field )
<cls> <noptr> opera set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> c x der d vbs read snr ( <ptr> priv <dot> <noptr> del sys <dot> <ptr> snr )
<cls> <ptr> nv t find chip ( <ptr> nv t <dot> <noptr> id )
<cls> <noptr> bl direct cmd ( <ptr> state <dot> <noptr> target addr <dot> <noptr> rom offset <dot> <noptr> nrof elements <dot> <noptr> timeout )
<cls> <noptr> m chip get picture ( <ptr> buf <dot> <noptr> buf size )
<cls> <noptr> dib usb tuner probe and attach ( <ptr> adap )
<cls> <noptr> preview set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> vid ioc enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> c cdc set frame format ( <noptr> frm fmt )
<cls> <noptr> tm set audio std ( <ptr> dev )
<cls> <noptr> pt start dma ( <ptr> adap )
<cls> <noptr> vivid videos frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> stv wait dis eq c fifo ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> x vip dma enum format ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sa ats unregister ( <ptr> ops )
<cls> <noptr> scm set autofocus ( <ptr> state <dot> <noptr> caf )
<cls> <noptr> tcc ec isr ( <ptr> sd <dot> <noptr> int status <dot> <ptr> handled )
<cls> <noptr> m eye ioc still j capt ( <ptr> len )
<cls> <noptr> pct ver c query ( <ptr> d )
<cls> <noptr> max write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> do auto gain ( <ptr> gsp ca dev )
<cls> <noptr> c x g register ( <ptr> dev <dot> <ptr> reg )
<cls> <noptr> msp xx g set aud mode ( <ptr> client )
<cls> <ptr> check coda debug ( )
<cls> <noptr> sun i video buffer prepare ( <ptr> vb )
<cls> <noptr> uvc ioctl query ctrl ( <ptr> file <dot> <ptr> f h <dot> <ptr> q c )
<cls> <noptr> stv track optimization ( <ptr> fe )
<cls> <noptr> mtp open ( <ptr> sub dev <dot> <ptr> f h )
<cls> <noptr> a speed video set input ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <noptr> bt tv suspend ( <ptr> pci dev <dot> <noptr> state )
<cls> <noptr> hd css top ( <ptr> sd )
<cls> <ptr> r ga get frame ( <ptr> ctx <dot> <noptr> type )
<cls> <ptr> check qss ( )
<cls> <noptr> tt usb ir process ir data ( <ptr> tt <dot> <ptr> buf )
<cls> <noptr> uvc debug fs stats open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> nv t get r xir data ( <ptr> nv t )
<cls> <noptr> ptic read byte ( <ptr> pt <dot> <noptr> addr <dot> <ptr> addr p <dot> <noptr> last )
<cls> <noptr> c x prep dev ( <ptr> c x <dot> <noptr> type )
<cls> <ptr> check sdr cap nr ( )
<cls> <noptr> sms usb start streaming ( <ptr> dev )
<cls> <noptr> isc set default fmt ( <ptr> isc )
<cls> <noptr> skb af hw set croprect s ( <ptr> state )
<cls> <noptr> f m irq send rds data get cmd ( <ptr> f m dev )
<cls> <noptr> sh ve u reg read ( <ptr> ve u <dot> <noptr> reg )
<cls> <noptr> get audio sampling rate ( <ptr> sd )
<cls> <noptr> cxa vs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> c xir log status ( <ptr> sd )
<cls> <noptr> sh reset ( <ptr> state )
<cls> <noptr> calc mtv gain ( <noptr> linear gain )
<cls> <noptr> venus helper init instance ( <ptr> inst )
<cls> <noptr> jlj write ( <ptr> gsp ca dev <dot> <ptr> command )
<cls> <noptr> new to cur ( <ptr> f h <dot> <ptr> ctrl <dot> <noptr> ch flags )
<cls> <noptr> ska as stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> e pu debug irq ( <ptr> c x <dot> <ptr> order )
<cls> <noptr> setup q table ( <ptr> gsp ca dev <dot> <noptr> q table )
<cls> <noptr> ir raw event register ( <ptr> dev )
<cls> <noptr> ctrl isdirty bass ( <ptr> cptr )
<cls> <noptr> smi ic set sda ( <ptr> dev <dot> <noptr> state <dot> <noptr> sw ctl )
<cls> <ptr> check dump bridge ( )
<cls> <noptr> s ( <ptr> av <dot> <noptr> v pid <dot> <noptr> api d <dot> <noptr> tt pid <dot> <noptr> sub pid <dot> <noptr> pcr pid )
<cls> <noptr> sa ats stop ( <ptr> dev )
<cls> <noptr> tim b radio vid io cs frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v l print audio out ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> sp mfc get d spl status v ( <ptr> dev )
<cls> <noptr> video buf read one ( <ptr> q <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos <dot> <noptr> non blocking )
<cls> <noptr> dib fw set channel union ( <ptr> fe )
<cls> <noptr> adb probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sp jpeg h tbl dc ( <ptr> regs <dot> <noptr> t )
<cls> <noptr> c x buffer queue ( <ptr> vb )
<cls> <noptr> p cms ctrl ( <ptr> ctrl )
<cls> <noptr> hack r f driver init ( )
<cls> <noptr> adv x hdmi enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> pvr h dw disconnect ( <ptr> h dw )
<cls> <noptr> pulse connect ( <ptr> ser io <dot> <ptr> drv )
<cls> <noptr> rv ins ctrl ( <ptr> ctrl )
<cls> <noptr> venus session get seq hdr ( <ptr> inst <dot> <noptr> seq hdr <dot> <noptr> seq hdr len )
<cls> <noptr> de interlace g fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> bt tv init tuner ( <ptr> b tv )
<cls> <noptr> f m irq handle set pires p ( <ptr> f m dev )
<cls> <noptr> pvr led ctrl ha upp auge ( <ptr> h dw <dot> <noptr> onoff )
<cls> <noptr> c x v l read ( <ptr> filp <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> pos )
<cls> <noptr> v l async notifier asd valid ( <ptr> notifier <dot> <ptr> asd <dot> <noptr> this index )
<cls> <noptr> mtm power on ( <ptr> dev )
<cls> <noptr> m x b attach ( <ptr> dev <dot> <ptr> info )
<cls> <noptr> block to buf ( <ptr> s <dot> <ptr> block buf )
<cls> <noptr> vid ioc d q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> mtk jpeg dec set bs info ( <ptr> base <dot> <noptr> addr <dot> <noptr> size )
<cls> <noptr> stv xx i soc nego ( <ptr> gsp ca dev )
<cls> <noptr> rtf imr ( <ptr> priv <dot> <ptr> i q pont )
<cls> <noptr> budget dis eq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> cec gpio status ( <ptr> adap <dot> <ptr> file )
<cls> <noptr> ska set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> saa buffer queue ( <ptr> dev <dot> <ptr> q <dot> <ptr> buf )
<cls> <noptr> flex cop pci write ibi reg ( <ptr> fc <dot> <noptr> r <dot> <noptr> v )
<cls> <noptr> net up initialize ( <ptr> dev )
<cls> <noptr> cmp establish pp connection ( <ptr> fdt v <dot> <noptr> plug <dot> <noptr> channel )
<cls> <ptr> au attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> v l f his singular ( <ptr> f h )
<cls> <noptr> mtv set power ( <ptr> mtv <dot> <noptr> on )
<cls> <noptr> mtk jpeg q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> av vb i reset ( <ptr> file )
<cls> <noptr> ov x detect sensor ( <ptr> sd )
<cls> <noptr> v pen c encode ( <ptr> handle <dot> <noptr> opt <dot> <ptr> frm buf <dot> <ptr> b sbuf <dot> <ptr> result )
<cls> <noptr> nv t cir l dev init ( <ptr> nv t )
<cls> <noptr> stk pd init ( <ptr> dev )
<cls> <noptr> adv init setup ( <ptr> sd )
<cls> <noptr> u x ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> td a set parameters ( <ptr> fe )
<cls> <noptr> ctrl cxx clear dirty ( <ptr> cptr )
<cls> <noptr> c x der chip id ( <ptr> priv )
<cls> <noptr> c x dt nr dmd dvb t tune ( <ptr> tn r dmd <dot> <ptr> tune param )
<cls> <noptr> shark write reg ( <ptr> tea <dot> <noptr> reg )
<cls> <noptr> get ca object pos ( <ptr> r )
<cls> <ptr> check dst algo ( )
<cls> <noptr> pwc set u ctrl ( <ptr> pdev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> data )
<cls> <noptr> t dah set bandwidth ( <ptr> state <dot> <noptr> bandwidth )
<cls> <noptr> vsp uif write ( <ptr> uif <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> n gene ic init ( <ptr> dev <dot> <noptr> dev nr )
<cls> <noptr> sp mfc set flush ( <ptr> ctx <dot> <noptr> flush )
<cls> <noptr> ctrl set crop t ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> dvb tq am get acc pkt err ( <ptr> state <dot> <ptr> packet err )
<cls> <noptr> tm set audio r input ( <ptr> dev )
<cls> <noptr> twi c driver init ( )
<cls> <noptr> move fb list use to free ( <ptr> inst )
<cls> <noptr> uvc ioctl query buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> v l m m ioctl try decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> dc )
<cls> <noptr> ske cg x init v l ctrls ( <ptr> priv )
<cls> <noptr> ter rate c htc usb xs init ( <ptr> dev )
<cls> <ptr> media entity remote pad ( <ptr> pad )
<cls> <noptr> c x init sub devs ( <ptr> c x )
<cls> <noptr> v fe enable output ( <ptr> line )
<cls> <noptr> v l phys addr for input ( <noptr> phys addr <dot> <noptr> input )
<cls> <noptr> mtk mdp suspend ( <ptr> dev )
<cls> <noptr> cec poll ( <ptr> filp <dot> <ptr> poll )
<cls> <noptr> iv tv init on first open ( <ptr> it v )
<cls> <ptr> dib get tuner interface ( <ptr> fe )
<cls> <noptr> em xx probe i cir ( <ptr> dev )
<cls> <noptr> c x avg tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> mt get code rate ( <ptr> state <dot> <ptr> cr )
<cls> <noptr> ak x fill fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> adv x afe std ( <noptr> std )
<cls> <noptr> serial ir irqhandler ( <noptr> i <dot> <ptr> blah )
<cls> <noptr> sp jpeg adjust fourcc to sub sampling ( <noptr> subs <dot> <noptr> in fourcc <dot> <ptr> out fourcc <dot> <ptr> ctx )
<cls> <noptr> saa x set size ( <ptr> sd <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> tm set audio bitrate ( <ptr> dev <dot> <noptr> bitrate )
<cls> <noptr> check fmt ( <ptr> file <dot> <noptr> type )
<cls> <noptr> cxf lat iron mux ( <ptr> dev <dot> <noptr> input )
<cls> <noptr> ptic begin ( <ptr> pt <dot> <ptr> addr p )
<cls> <noptr> fim c lite log status ( <ptr> sd )
<cls> <noptr> vp dma firmware cb ( <ptr> f <dot> <ptr> context )
<cls> <ptr> video remote sub dev ( <ptr> video <dot> <ptr> pad )
<cls> <noptr> c x gpio init ( <ptr> c x )
<cls> <noptr> ports show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> td a write byte ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> bt tv irq switch vb i ( <ptr> b tv )
<cls> <ptr> v l f wht get pix fmt ( <noptr> idx )
<cls> <noptr> generic set freq ( <ptr> fe <dot> <noptr> freq <dot> <noptr> bw <dot> <noptr> type <dot> <noptr> std <dot> <noptr> del sys )
<cls> <noptr> stk has ac ( <ptr> dev )
<cls> <noptr> smi stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> ir raw gen pd ( <dptr> ev <dot> <noptr> max <dot> <ptr> timings <dot> <noptr> n <dot> <noptr> data )
<cls> <noptr> rtl driver init ( )
<cls> <noptr> c x irqhandler ( <ptr> sd <dot> <noptr> status <dot> <ptr> handled )
<cls> <noptr> si set over samp ( <ptr> state <dot> <noptr> dvb rate )
<cls> <noptr> z cxx g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> sd start video ( <ptr> gsp ca dev )
<cls> <noptr> stk vid ioc stream on ( <ptr> filp <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> m i pid configure from tx ( <ptr> bridge )
<cls> <noptr> v l get e did phys addr ( <ptr> e did <dot> <noptr> size <dot> <ptr> offset )
<cls> <noptr> dib identify ( <ptr> client )
<cls> <noptr> iv tvs fmt vid out overlay ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> dvb sky streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> ov write reg ( <ptr> client <dot> <noptr> reg <dot> <noptr> len <dot> <noptr> val )
<cls> <noptr> m m ols swap byte ( <ptr> data <dot> <noptr> length )
<cls> <noptr> bt tv rc irq ( <ptr> b tv )
<cls> <noptr> saa api set gpio bit ( <ptr> dev <dot> <noptr> unitid <dot> <noptr> pin )
<cls> <noptr> h aaf set params ( <ptr> af <dot> <ptr> new conf )
<cls> <noptr> fim c ish w set is pbuf mask ( <ptr> is <dot> <noptr> mask )
<cls> <ptr> check g buffers ( )
<cls> <noptr> tm usb driver init ( )
<cls> <noptr> get transfer size ( <ptr> mode )
<cls> <noptr> smi ir start ( <ptr> ir )
<cls> <noptr> af identify state ( <ptr> udev <dot> <ptr> props <dot> <dptr> desc <dot> <ptr> cold )
<cls> <noptr> x vip graph notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> unused )
<cls> <noptr> tx short bit ( <ptr> pin )
<cls> <noptr> m cam v l open ( <ptr> filp )
<cls> <noptr> get m v buf size ( <noptr> width <dot> <noptr> height )
<cls> <noptr> c x audio irq ( <ptr> dev <dot> <noptr> status <dot> <noptr> mask )
<cls> <noptr> atmel is i probe ( <ptr> pdev )
<cls> <noptr> usb vis ionic write max ( <ptr> usb vision <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> exy nos jpeg q tbl ( <ptr> regs <dot> <noptr> t <dot> <noptr> n )
<cls> <noptr> isc try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> loop set learning mode ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> b disp hw getop cfg ( <ptr> ctx <dot> <ptr> c )
<cls> <noptr> fim ch w set in dma ( <ptr> ctx )
<cls> <noptr> mn xs sleep ( <ptr> chip )
<cls> <noptr> gov l ctrl init ( <ptr> go )
<cls> <noptr> ov resume ( <ptr> dev )
<cls> <noptr> post art ( <ptr> sd )
<cls> <noptr> ctrl get crop cap bl ( <ptr> cptr <dot> <ptr> val )
<cls> <noptr> c x der mon read bers ( <ptr> priv <dot> <ptr> bit error <dot> <ptr> bit count )
<cls> <noptr> vid ioc ge did ( <ptr> file <dot> <ptr> f h <dot> <ptr> e did )
<cls> <noptr> as usb start stream ( <ptr> dev )
<cls> <noptr> irl irc scan code event ( <ptr> dev <dot> <ptr> lsc )
<cls> <noptr> vim m buf queue ( <ptr> vb )
<cls> <noptr> restart feeds ( <ptr> av )
<cls> <noptr> request modules ( <ptr> dev )
<cls> <noptr> vb req un prepare ( <ptr> obj )
<cls> <noptr> ete kic reg list find write ( <ptr> client <dot> <ptr> meta <dot> <noptr> type )
<cls> <ptr> check debug isp ( )
<cls> <noptr> d ibm demo d reset ( <ptr> state )
<cls> <noptr> dib pread status ( <ptr> fe <dot> <ptr> stat )
<cls> <noptr> wl fmt x set spacing ( <ptr> radio <dot> <noptr> spacing )
<cls> <noptr> c x dt nr dmd dvb t mon l pre ( <ptr> tn r dmd <dot> <ptr> l pre )
<cls> <ptr> check no auto detect ( )
<cls> <noptr> v fe global reset ( <ptr> v fe )
<cls> <noptr> bt tv risc packed ( <ptr> b tv <dot> <ptr> risc <dot> <ptr> sg list <dot> <noptr> offset <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> skip lines <dot> <noptr> store lines )
<cls> <noptr> recover arm ( <ptr> av )
<cls> <noptr> iv tvs audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> v out )
<cls> <noptr> tw g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> id )
<cls> <noptr> vivid fb check var ( <ptr> var <dot> <ptr> info )
<cls> <noptr> m xls fic check status ( <ptr> state )
<cls> <noptr> shark led set blue pulse ( <ptr> led c dev <dot> <noptr> value )
<cls> <ptr> check irq debug ( )
<cls> <noptr> f set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> fill event ( <ptr> ev <dot> <ptr> ctrl <dot> <noptr> changes )
<cls> <noptr> fmt x set preemp h filter ( <ptr> f m dev <dot> <noptr> pre emphasis )
<cls> <noptr> dmx c cdc probe ( <ptr> pdev )
<cls> <noptr> pvr sysfs add debug if c ( <ptr> sfp )
<cls> <noptr> ic wait done ( <ptr> ic adap )
<cls> <noptr> vpx read mac addr ( <ptr> d <dot> <noptr> mac )
<cls> <ptr> check de emphasis ( )
<cls> <noptr> cec notifier set phys addr from e did ( <ptr> n <dot> <ptr> e did )
<cls> <noptr> uvc fraction to interval ( <noptr> numerator <dot> <noptr> denominator )
<cls> <noptr> encoders show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> td a get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> de quantize intra ( <ptr> coeff )
<cls> <noptr> sr u try format ( <ptr> sr u <dot> <ptr> config <dot> <noptr> pad <dot> <ptr> fmt )
<cls> <noptr> dib ppid filter ( <ptr> fe <dot> <noptr> id <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> techn is atus bic access ( <ptr> udev <dot> <noptr> device addr <dot> <ptr> tx <dot> <noptr> tx len <dot> <ptr> r x <dot> <noptr> r x len )
<cls> <noptr> dst get fec ( <ptr> state )
<cls> <noptr> via cam set scale ( <ptr> cam )
<cls> <noptr> opera stv set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> t dax o sleep ( <ptr> fe )
<cls> <noptr> vid ioc try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sms usb detect mode ( <ptr> context <dot> <ptr> mode )
<cls> <ptr> to cam ( <ptr> dev )
<cls> <noptr> put v l plane ( <ptr> p <dot> <ptr> p <dot> <noptr> memory )
<cls> <noptr> pvr io read get buffer ( <ptr> cp )
<cls> <noptr> set red blue ( <ptr> gsp ca dev )
<cls> <ptr> nv t get dev ( <ptr> nv t )
<cls> <noptr> ov x get default format ( <ptr> m f )
<cls> <noptr> init r cmap behold ( )
<cls> <noptr> dvb ca en parse attributes ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> mtm init ( <ptr> client )
<cls> <noptr> init r cmap medi on x ( )
<cls> <ptr> adv xx get d v timings cap ( <ptr> sd <dot> <noptr> pad )
<cls> <noptr> sh ve u queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> mtm power on ( <ptr> mtm )
<cls> <noptr> c x audios ctrl ( <ptr> ctrl )
<cls> <noptr> frac times e ( <noptr> n <dot> <noptr> d )
<cls> <noptr> fim c pipeline enable ( <ptr> ep <dot> <ptr> f md )
<cls> <noptr> process frame ( <ptr> cam )
<cls> <noptr> pkt sys pc prep ( <ptr> pkt )
<cls> <noptr> l gag c polarity ( <ptr> state <dot> <noptr> if agc polarity <dot> <noptr> r fag c polarity )
<cls> <noptr> get key aver media card bus ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> n gene get buffers ( <ptr> dev )
<cls> <noptr> xt pg parse of ( <ptr> xt pg )
<cls> <noptr> opera driver init ( )
<cls> <noptr> ir kbd driver init ( )
<cls> <noptr> gpp sk fe read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> z d streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> uvc ioctl enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> pvr buffer wipe ( <ptr> b p )
<cls> <noptr> pb set auto gain target ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> px a camera irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> saa g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> sit x rds ps ( <ptr> s dev <dot> <noptr> psid <dot> <ptr> ps char )
<cls> <noptr> play video cb ( <ptr> buf <dot> <noptr> count <dot> <ptr> priv )
<cls> <noptr> bt tv g register ( <ptr> file <dot> <ptr> f <dot> <ptr> reg )
<cls> <noptr> iv tv irq dma read ( <ptr> it v )
<cls> <noptr> ttc i read attribute mem ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> et video ( <ptr> gsp ca dev <dot> <noptr> on )
<cls> <noptr> scc am ifg selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> sel )
<cls> <noptr> lme int read ( <ptr> adap )
<cls> <noptr> v l flash s ctrl ( <ptr> c )
<cls> <noptr> v l f h del ( <ptr> f h )
<cls> <noptr> em x xir change protocol ( <ptr> rc dev <dot> <ptr> rc proto )
<cls> <noptr> no onic driver init ( )
<cls> <noptr> spx read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> buffer queue ( <ptr> q <dot> <ptr> vb )
<cls> <noptr> c x d get front end t ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> mce usb handle command ( <ptr> ir <dot> <ptr> buf in )
<cls> <noptr> m tt close ( <ptr> sub dev <dot> <ptr> f h )
<cls> <noptr> isp if isr x ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> m chip cont compression start ( )
<cls> <noptr> saa api collect debug ( <ptr> dev )
<cls> <noptr> saa set window ( <ptr> dev <dot> <noptr> width <dot> <noptr> height <dot> <noptr> field )
<cls> <noptr> iov crc ( <noptr> c <dot> <ptr> iov <dot> <noptr> cnt )
<cls> <noptr> isp pipeline disable ( <ptr> pipe )
<cls> <noptr> is i formats init ( <ptr> is i )
<cls> <noptr> vp fec cdc config defaults ( <ptr> c cdc )
<cls> <noptr> sp mfc wait wakeup ( <ptr> dev )
<cls> <noptr> r card rif enable r x ( <ptr> sdr )
<cls> <noptr> td a calc ga int aper ( <ptr> fe <dot> <ptr> freq )
<cls> <ptr> ln b h attach ( <ptr> fe <dot> <ptr> ic <dot> <noptr> override set <dot> <noptr> override clear <dot> <noptr> ic addr )
<cls> <noptr> saa set gpio ( <ptr> dev <dot> <noptr> port <dot> <noptr> data )
<cls> <noptr> c x input ir start ( <ptr> dev )
<cls> <noptr> fim c stop capture ( <ptr> fim c <dot> <noptr> suspend )
<cls> <noptr> opera ic func ( <ptr> adapter )
<cls> <noptr> smi app pixel order ( <ptr> sensor )
<cls> <noptr> tt usb dec set model ( <ptr> dec <dot> <noptr> model )
<cls> <noptr> smi app get all limits ( <ptr> sensor )
<cls> <noptr> c x d converts complement ( <noptr> value <dot> <noptr> bit len )
<cls> <noptr> as x cmd get tune status ( <ptr> adap <dot> <ptr> p status )
<cls> <noptr> stv x set gpio ( <ptr> fe <dot> <noptr> gpio <dot> <noptr> dir <dot> <noptr> value <dot> <noptr> x or value )
<cls> <noptr> cit write reg ( <ptr> gsp ca dev <dot> <noptr> value <dot> <noptr> index )
<cls> <noptr> dvb dmx write ( <ptr> demux <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> o vic driver init ( )
<cls> <noptr> spc a full reset ( <ptr> gsp ca dev )
<cls> <noptr> tx clk tx s carrier ( <ptr> c <dot> <noptr> freq <dot> <ptr> divider )
<cls> <noptr> spc asynch ( <ptr> gsp ca dev )
<cls> <noptr> cio irq handle once ( <ptr> cio <dot> <noptr> int status )
<cls> <noptr> asf e get code rate ( <noptr> arg )
<cls> <noptr> tegra cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time ms <dot> <ptr> msg )
<cls> <noptr> alter api d feed control ( <ptr> demux dev <dot> <noptr> filt nr <dot> <ptr> feed <dot> <noptr> onoff )
<cls> <noptr> smi app read only ( <ptr> sensor <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> adv x afe get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> tvp x query std ( <ptr> sd <dot> <ptr> std id )
<cls> <noptr> c x parse std ( <ptr> c x )
<cls> <noptr> any see ctrl msg ( <ptr> d <dot> <ptr> sbuf <dot> <noptr> slen <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <ptr> to instance ( <ptr> core <dot> <noptr> sessionid )
<cls> <noptr> fops write ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> ir spit x ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> count )
<cls> <noptr> reset ctrl log status ( <ptr> sd )
<cls> <noptr> saa shutdown ( <ptr> dev )
<cls> <noptr> dib compute pll parameters ( <ptr> fe )
<cls> <noptr> mn x cmn power on ( <ptr> chip )
<cls> <noptr> gain ify ( <noptr> in )
<cls> <noptr> v pbe disp adj position ( <ptr> disp dev <dot> <ptr> layer <dot> <noptr> top <dot> <noptr> left )
<cls> <noptr> pct ve front end attach ( <ptr> a )
<cls> <noptr> d v bring buffer flush ( <ptr> r buf )
<cls> <noptr> adv xx enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> ivc mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> port has x o ( <ptr> port <dot> <ptr> type <dot> <ptr> id )
<cls> <noptr> adv wr and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> clr mask <dot> <noptr> val mask )
<cls> <noptr> hdp v ric write ( <ptr> dev <dot> <noptr> bus <dot> <noptr> addr <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> isc async complete ( <ptr> notifier )
<cls> <noptr> skb af configure gpio s ( <ptr> state )
<cls> <noptr> stv write reg ( <ptr> int p <dot> <noptr> reg addr <dot> <noptr> reg data )
<cls> <noptr> e pud mad one ( <ptr> c x <dot> <ptr> order )
<cls> <noptr> philip std apl l set ( <ptr> fe )
<cls> <noptr> c x enum input ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <noptr> saas frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> tp g get text fg color ( <ptr> tp g )
<cls> <noptr> net up unid v bci setup ( <ptr> n dev <dot> <ptr> pci dev )
<cls> <noptr> gsc driver init ( )
<cls> <noptr> set ag crf ( <ptr> state <dot> <ptr> pag c cfg <dot> <noptr> is dtv )
<cls> <noptr> f m r tea ext init ( <ptr> tea )
<cls> <ptr> v l m m get curr priv ( <ptr> m m dev )
<cls> <noptr> via sensor power down ( <ptr> cam )
<cls> <noptr> tw xx show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> coda set default color space ( <ptr> fmt )
<cls> <noptr> ov stop streaming ( <ptr> ov )
<cls> <noptr> d v bring buffer pkt next ( <ptr> r buf <dot> <noptr> idx <dot> <ptr> pkt len )
<cls> <noptr> pwc set video mode ( <ptr> pdev <dot> <noptr> width <dot> <noptr> height <dot> <noptr> pix fmt <dot> <noptr> frames <dot> <ptr> compression <dot> <noptr> sendto cam )
<cls> <noptr> any see init ( <ptr> d )
<cls> <noptr> c x m box func ( <ptr> priv <dot> <noptr> command <dot> <noptr> in <dot> <noptr> out <dot> <noptr> data )
<cls> <noptr> stk vid ioc try fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt d )
<cls> <noptr> dvb bulk copy ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> wl f m get tx c tune ( <ptr> radio )
<cls> <noptr> td a charge pump source ( <ptr> fe <dot> <noptr> pll <dot> <noptr> force )
<cls> <noptr> saas frequency ( <ptr> port <dot> <ptr> f )
<cls> <noptr> iv tv video command ( <ptr> it v <dot> <ptr> id <dot> <ptr> dc <dot> <noptr> try )
<cls> <noptr> tvp volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> dib sleep ( <ptr> fe )
<cls> <noptr> gem tek s mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> f rb write ( <noptr> l <dot> <noptr> is pulse )
<cls> <noptr> l z bpp pl ( <ptr> sd <dot> <noptr> ppl )
<cls> <noptr> vp if wr bit ( <noptr> reg <dot> <noptr> bit <dot> <noptr> val )
<cls> <noptr> em xx dvb suspend ( <ptr> dev )
<cls> <noptr> c xxx initialize stream xfer ( <ptr> dev <dot> <noptr> media type )
<cls> <noptr> stv cab get m clk ( <ptr> fe <dot> <noptr> ext cl khz )
<cls> <noptr> v bdc prepare ( <ptr> buf priv )
<cls> <noptr> preview config input size ( <ptr> prev <dot> <noptr> active )
<cls> <noptr> c cdc get fid ( )
<cls> <noptr> r tls drs ctrl ( <ptr> ctrl )
<cls> <noptr> de interlace driver init ( )
<cls> <noptr> v pfe async complete ( <ptr> notifier )
<cls> <dptr> check firmware ( )
<cls> <noptr> is if enable output tos dram ( <noptr> en )
<cls> <noptr> tea set aud out mode ( <ptr> radio <dot> <noptr> aud mode )
<cls> <noptr> pbs top ( <ptr> sd )
<cls> <noptr> fdp enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> td a read regs ( <ptr> state <dot> <noptr> reg <dot> <ptr> b <dot> <noptr> len )
<cls> <noptr> c xxx write ctrl reg ( <ptr> dev <dot> <noptr> req <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <ptr> c x queue get mdl ( <ptr> s <dot> <noptr> id <dot> <noptr> bytes used )
<cls> <noptr> power enable ( <ptr> info )
<cls> <noptr> t atus ( <ptr> gsp ca dev )
<cls> <noptr> c x gpio enable ( <ptr> dev <dot> <noptr> mask <dot> <noptr> as output )
<cls> <noptr> snd cobalt pcm hw params ( <ptr> sub stream <dot> <ptr> params )
<cls> <noptr> vp fec cdc config black com pense ( <ptr> c cdc <dot> <ptr> b comp )
<cls> <noptr> m xls f tuner get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dst pack size ( <ptr> state <dot> <noptr> p size )
<cls> <noptr> l gs gl write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> stb set delivery ( <ptr> state )
<cls> <noptr> vivid videog frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> get pic info ( <ptr> inst <dot> <ptr> pic )
<cls> <noptr> affe read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> f m irq handle power enb ( <ptr> f m dev )
<cls> <noptr> adv x configure reg map ( <ptr> state <dot> <noptr> region )
<cls> <noptr> ml x setup ( <ptr> data )
<cls> <noptr> c pia usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> ska a set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> tcp robe of ( <ptr> state )
<cls> <noptr> color to ycbcr ( <ptr> tp g <dot> <noptr> r <dot> <noptr> g <dot> <noptr> b <dot> <ptr> y <dot> <ptr> cb <dot> <ptr> cr )
<cls> <noptr> sub devs video routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> smi read eeprom ( <ptr> ic <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> ak xic driver init ( )
<cls> <noptr> m xls flg front end attach ( <ptr> adap <dot> <noptr> f eid )
<cls> <noptr> video mux ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> tim b radio probe ( <ptr> pdev )
<cls> <noptr> dib set param override ( <ptr> fe )
<cls> <noptr> nim front end attach ( <ptr> adap )
<cls> <noptr> c sit x stop ( <ptr> c sit x )
<cls> <noptr> go ic init ( <ptr> go )
<cls> <noptr> as cote set reg bits ( <ptr> priv <dot> <noptr> reg <dot> <noptr> data <dot> <noptr> mask )
<cls> <noptr> preview config outline offset ( <ptr> prev <dot> <noptr> offset )
<cls> <noptr> c xxx stop stream ( <ptr> dev <dot> <noptr> ep mask )
<cls> <noptr> v pfe clear intr ( <ptr> c cdc <dot> <noptr> v d int )
<cls> <noptr> em xx vol put mute ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> h vah w err irq thread ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> c sit x driver init ( )
<cls> <noptr> e init ( <ptr> dev )
<cls> <noptr> tt usb ir brightness set ( <ptr> led dev <dot> <noptr> brightness )
<cls> <noptr> dvb dvr set buffer size ( <ptr> dmx dev <dot> <noptr> size )
<cls> <noptr> as urb stream irq ( <ptr> urb )
<cls> <noptr> command set lights ( <ptr> gsp ca dev )
<cls> <noptr> init r cmap asus pc ( )
<cls> <noptr> via cam fmt pre ( <ptr> user fmt <dot> <ptr> sensor fmt )
<cls> <noptr> cafe ctl r init ( <ptr> m cam )
<cls> <noptr> imx set frame length ( <ptr> priv <dot> <noptr> val )
<cls> <noptr> c pia usb stream stop ( <ptr> cam )
<cls> <noptr> ska as ctrl ( <ptr> ctrl )
<cls> <noptr> exy nos jpeg set frame buf address ( <ptr> base <dot> <ptr> exy nos jpeg addr )
<cls> <noptr> c x card list ( <ptr> core <dot> <ptr> pci )
<cls> <noptr> mn xs wake ( <ptr> chip )
<cls> <noptr> isp if set power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> tuner read status ( <ptr> fe )
<cls> <noptr> iv tv alsa announce pcm data ( <ptr> it vsc <dot> <ptr> pcm data <dot> <noptr> numbytes )
<cls> <noptr> flex cop set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> dw ser itic transfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> saa vb start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> set matrix ( <ptr> gsp ca dev )
<cls> <noptr> isc async bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> is stream error ( <noptr> err )
<cls> <noptr> dvb front end add event ( <ptr> fe <dot> <noptr> status )
<cls> <noptr> smi app writes ( <ptr> sensor <dot> <ptr> regs <dot> <noptr> len )
<cls> <noptr> v l ctrl g ctrl ( <ptr> ctrl )
<cls> <noptr> set tv audio ( <ptr> core )
<cls> <noptr> v spr wpf s ctrl ( <ptr> ctrl )
<cls> <noptr> set bass ( <ptr> c x <dot> <noptr> bass )
<cls> <noptr> px pbuf prepare ( <ptr> vb )
<cls> <noptr> tuner suspend ( <ptr> dev )
<cls> <noptr> v v stop ( <ptr> sd )
<cls> <noptr> saa write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> set mpeg tei handling ( <ptr> demo d )
<cls> <noptr> saa x has reg ( <noptr> id <dot> <noptr> reg )
<cls> <noptr> sp jpegs selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> vid io cs aud out ( <ptr> file <dot> <ptr> f h <dot> <ptr> v out )
<cls> <noptr> gpio mux s audio routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> tea route ( <ptr> m x b <dot> <noptr> idx )
<cls> <noptr> l m set ctrl ( <ptr> ctrl )
<cls> <noptr> affe get front end ( <ptr> fe <dot> <ptr> fep )
<cls> <noptr> start wr probe ( <ptr> gsp ca dev <dot> <noptr> sensor )
<cls> <noptr> is new manual ( <ptr> master )
<cls> <noptr> cobalt sed id ( <ptr> file <dot> <ptr> f h <dot> <ptr> e did )
<cls> <noptr> c xvid ioc enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ov x stop ( <ptr> sd )
<cls> <noptr> ctrl std sym to val ( <ptr> cptr <dot> <ptr> buf ptr <dot> <noptr> buf size <dot> <ptr> msk p <dot> <ptr> val p )
<cls> <noptr> mmo lsf w start ( <ptr> sd )
<cls> <noptr> isset fd config smile mode ( <ptr> is <dot> <noptr> val )
<cls> <noptr> c x g tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> isp pipeline wait resizer ( <ptr> isp )
<cls> <noptr> sp mfc get enc frame buffer v ( <ptr> ctx <dot> <ptr> y addr <dot> <ptr> c addr )
<cls> <noptr> s rpc probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> r card r ifs frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> pvr led ctrl ( <ptr> h dw <dot> <noptr> onoff )
<cls> <noptr> snd usb tv card trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> med usa set video standard ( <ptr> dev )
<cls> <noptr> vp dma map desc buf ( <ptr> vp dma <dot> <ptr> buf )
<cls> <noptr> c x check encoder ( <ptr> dev )
<cls> <noptr> fim c capture mark jpeg xfer ( <ptr> ctx <dot> <noptr> color )
<cls> <noptr> meta cap buf queue ( <ptr> vb )
<cls> <noptr> sp cec set addr ( <ptr> cec <dot> <noptr> addr )
<cls> <noptr> ir sony encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> set dei shadow registers ( <ptr> ctx )
<cls> <noptr> stv x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mds dis eq c send burst ( <ptr> fe <dot> <noptr> fe sec mini cmd )
<cls> <noptr> vivid loop caps ctrl ( <ptr> ctrl )
<cls> <noptr> l gs gxx read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> pvr context reset input limits ( <ptr> mp )
<cls> <noptr> td a write regs ( <ptr> fe <dot> <noptr> idx <dot> <noptr> len <dot> <noptr> lock ic )
<cls> <noptr> dvb front end should wakeup ( <ptr> fe )
<cls> <ptr> check debug c i ( )
<cls> <noptr> vi codec request validate ( <ptr> req )
<cls> <noptr> tt usb dec start sec feed ( <ptr> dvb dmx feed )
<cls> <noptr> vs ppm resume ( <ptr> dev )
<cls> <noptr> scm configure gpio s ( <ptr> state )
<cls> <noptr> dvb net ule new payload ( <ptr> h )
<cls> <noptr> c x input fini ( <ptr> dev )
<cls> <ptr> get dma direction ( <noptr> status )
<cls> <noptr> lg dtr fag c loop ( <ptr> state <dot> <ptr> p )
<cls> <noptr> solo ic function ality ( <ptr> adap )
<cls> <noptr> venc enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> ov x enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> dvb ca en write data ( <ptr> ca <dot> <noptr> slot <dot> <ptr> buf <dot> <noptr> bytes write )
<cls> <noptr> fim cmd register clk provider ( <ptr> f md )
<cls> <noptr> max enable high ln b voltage ( <ptr> fe <dot> <noptr> arg )
<cls> <noptr> cobalt dma stop streaming ( <ptr> s )
<cls> <noptr> sr u max width ( <ptr> entity <dot> <ptr> pipe )
<cls> <noptr> td await for irq ( <ptr> fe <dot> <noptr> max wait <dot> <noptr> step <dot> <noptr> irq )
<cls> <noptr> filter ( <ptr> adap <dot> <ptr> filter )
<cls> <noptr> ves x read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> trace st bit ( <ptr> name <dot> <noptr> val )
<cls> <noptr> x vip clr and set ( <ptr> x vip <dot> <noptr> addr <dot> <noptr> clr <dot> <noptr> set )
<cls> <noptr> rtl xx u usb driver init ( )
<cls> <noptr> d m xts feed set ( <ptr> ts feed <dot> <noptr> pid <dot> <noptr> ts type <dot> <noptr> pes type <dot> <noptr> timeout )
<cls> <noptr> b disp dbg dump rs f ( <ptr> s <dot> <noptr> val <dot> <ptr> name )
<cls> <noptr> nv t cir wake l dev init ( <ptr> nv t )
<cls> <noptr> cafe init ( )
<cls> <noptr> c sid try format ( <ptr> c sid <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <noptr> lme ic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <ptr> check mtk vcodec dbg ( )
<cls> <noptr> c xxx dev init ( <ptr> dev )
<cls> <noptr> m bas get pre ber ( <ptr> fe <dot> <noptr> layer <dot> <ptr> error <dot> <ptr> count )
<cls> <noptr> fim ch w set camera type ( <ptr> fim c <dot> <ptr> source )
<cls> <noptr> tuner td aping ( <ptr> input <dot> <noptr> adr )
<cls> <noptr> a speed video get input ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> vivid vb igen set timeofday ( <ptr> packet )
<cls> <noptr> r card rif resume ( <ptr> dev )
<cls> <noptr> dvb ca ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <noptr> stk start streaming ( <ptr> dev )
<cls> <noptr> pvr hd wget input allowed ( <ptr> h dw )
<cls> <noptr> dib gain apply ( <ptr> state <dot> <noptr> gain delta <dot> <noptr> top delta <dot> <noptr> force )
<cls> <noptr> iv tvs fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> hel ene read regs ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> vsp dlm setup ( <ptr> vsp )
<cls> <noptr> po dump registers ( <ptr> sd )
<cls> <noptr> me so nao cec irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> mt set if freq ( <ptr> fe <dot> <noptr> r fin <dot> <noptr> if <dot> <noptr> if <dot> <noptr> from <dot> <noptr> to )
<cls> <noptr> c x set symbol rate ( <ptr> state <dot> <noptr> rate )
<cls> <noptr> dvb usb device power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> c cdc configure clamp ( <ptr> c cdc )
<cls> <noptr> c cdc config outline offset ( <ptr> c cdc <dot> <noptr> bpl <dot> <noptr> field )
<cls> <noptr> o vic w ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> vim ms ctrl ( <ptr> ctrl )
<cls> <noptr> ov configure alt ( <ptr> gsp ca dev )
<cls> <noptr> vp decode end proc ( <ptr> inst )
<cls> <noptr> sp jpeg final mcu num int enable ( <ptr> regs <dot> <noptr> enb l )
<cls> <ptr> check alt tuner ( )
<cls> <noptr> p xac vb queue ( <ptr> vb )
<cls> <noptr> sd probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> fdp write ( <ptr> fdp <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> hdp vr cancel queue ( <ptr> dev )
<cls> <noptr> av set k ( <ptr> budget <dot> <noptr> state )
<cls> <noptr> fmc set region ( <ptr> f m dev <dot> <noptr> region to set )
<cls> <noptr> rtx tal check ( <ptr> priv )
<cls> <noptr> g sgd v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> c x d read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> venc set p internal ( <ptr> sd )
<cls> <noptr> net up poll c is lot status ( <ptr> en <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> c sit x v d phy setup ( <ptr> c sit x )
<cls> <noptr> video ic del list ( <ptr> v q <dot> <noptr> state )
<cls> <noptr> mtk vcodec enc reset handler ( <ptr> priv )
<cls> <ptr> check full luma range ( )
<cls> <noptr> pvr h dw set input allowed ( <ptr> h dw <dot> <noptr> change mask <dot> <noptr> change val )
<cls> <noptr> tlv aic b driver init ( )
<cls> <noptr> stv ter agc iir rst ( <ptr> state )
<cls> <noptr> am radio set mute ( <ptr> radio <dot> <noptr> mute )
<cls> <noptr> f m irq af jump set pi ( <ptr> f m dev )
<cls> <noptr> h va driver init ( )
<cls> <noptr> dvb vb stream off ( <ptr> ctx )
<cls> <noptr> h vah w getip version ( <ptr> h va )
<cls> <noptr> load firmware ( <ptr> state <dot> <ptr> fw name )
<cls> <noptr> v l prio max ( <ptr> global )
<cls> <noptr> hist get buf size ( <ptr> conf )
<cls> <noptr> c x sw irq disable ( <ptr> c x <dot> <noptr> val )
<cls> <noptr> sp jpeg y ( <ptr> regs <dot> <noptr> y )
<cls> <noptr> venc g fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> emma prp irq ( <noptr> irq emma <dot> <ptr> data )
<cls> <noptr> cec notifier register ( <ptr> n <dot> <ptr> adap <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <ptr> vim c pix map by index ( <noptr> i )
<cls> <noptr> dvb dmx dev feed restart ( <ptr> filter )
<cls> <noptr> scm gpio de assert ( <ptr> priv <dot> <noptr> id )
<cls> <noptr> dib usb d ibm c front end attach ( <ptr> adap )
<cls> <noptr> dvb usb start feed ( <ptr> dvb dmx feed )
<cls> <noptr> mtk jpeg resume ( <ptr> dev )
<cls> <noptr> c x usb dual dig rev tuner attach ( <ptr> adap )
<cls> <noptr> tmi soc copy ( <ptr> urb )
<cls> <ptr> dr x d attach ( <ptr> config <dot> <ptr> priv <dot> <ptr> ic <dot> <ptr> dev )
<cls> <noptr> r ga runtime resume ( <ptr> dev )
<cls> <noptr> ska a seth v flip ( <ptr> gsp ca dev )
<cls> <noptr> win fast audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> dib usb pan asonic tuner attach ( <ptr> adap )
<cls> <noptr> c x der read ber ( <ptr> fe )
<cls> <noptr> m xlr f probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> saa histogram reset ( <ptr> hg <dot> <ptr> name )
<cls> <noptr> watch stereo ( <ptr> client )
<cls> <noptr> imx read reg ( <ptr> imx <dot> <noptr> addr <dot> <ptr> value )
<cls> <noptr> iv tv mailbox cache invalidate ( <ptr> it v )
<cls> <noptr> device open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> dvb dmx dev filter state set ( <ptr> dmx dev filter <dot> <noptr> state )
<cls> <noptr> sub dev notifier bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> cxx hdl api ( <ptr> hdl <dot> <noptr> cmd <dot> <noptr> args )
<cls> <noptr> go usb vendor request ( <ptr> go <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> transfer buffer <dot> <noptr> length <dot> <noptr> in )
<cls> <noptr> d ibm c set bandwidth ( <ptr> state <dot> <noptr> bw )
<cls> <noptr> c x init power ( <ptr> c x <dot> <noptr> low pwr )
<cls> <noptr> std init compound ( <ptr> ctrl <dot> <noptr> idx <dot> <noptr> ptr )
<cls> <noptr> info frame write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sp mfc dec calc d pb size v ( <ptr> ctx )
<cls> <noptr> dib p tuner write ser par ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> hdc s init ( <ptr> sd )
<cls> <noptr> imx parse fw node ( <ptr> dev )
<cls> <noptr> venus h fico reset resource ( <ptr> core <dot> <noptr> id <dot> <noptr> size <dot> <noptr> addr <dot> <ptr> cookie )
<cls> <noptr> vs driver init ( )
<cls> <noptr> pct ve init ( <ptr> dev )
<cls> <noptr> uvc queue init ( <ptr> queue <dot> <noptr> type <dot> <noptr> drop corrupted )
<cls> <noptr> r ga isr ( <noptr> irq <dot> <ptr> prv )
<cls> <noptr> msi probe ( <ptr> spi )
<cls> <noptr> ddb redirect ( <noptr> i <dot> <noptr> p )
<cls> <noptr> v pfe get sub dev input index ( <ptr> v pfe <dot> <ptr> sub dev index <dot> <ptr> sub dev input index <dot> <noptr> app input index )
<cls> <noptr> h enc set param ( <ptr> handle <dot> <noptr> type <dot> <ptr> enc prm )
<cls> <noptr> scm set stabili zation ( <ptr> state <dot> <noptr> val )
<cls> <noptr> pt demo d block init ( <ptr> pt )
<cls> <noptr> z l front end attach ( <ptr> d )
<cls> <noptr> sp mfc cmd host riscv ( <ptr> dev <dot> <noptr> cmd <dot> <ptr> args )
<cls> <noptr> uvc ioctl try fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> d dbf e attach m xl xx ( <ptr> input )
<cls> <noptr> imx set ctrl ( <ptr> ctrl )
<cls> <noptr> get v l input ( <ptr> p <dot> <ptr> p )
<cls> <noptr> cobalt set interrupt ( <ptr> cobalt <dot> <noptr> enable )
<cls> <noptr> adb check monitor present status ( <ptr> sd )
<cls> <noptr> smi pcie driver init ( )
<cls> <ptr> pvr stream get buffer ( <ptr> sp <dot> <noptr> id )
<cls> <noptr> adv x afe set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> sun ics iis format supported ( <ptr> csi <dot> <noptr> pix format <dot> <noptr> mbus code )
<cls> <noptr> pb set auto gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> tt usb update ln b ( <ptr> tt usb )
<cls> <noptr> pon probe ( <ptr> gsp ca dev )
<cls> <noptr> hel ene set params ( <ptr> fe )
<cls> <noptr> video buf read zero copy ( <ptr> q <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> td a init p lls ( <ptr> fe )
<cls> <noptr> is rect enclosed ( <ptr> a <dot> <ptr> b )
<cls> <noptr> dib xic func ( <ptr> adapter )
<cls> <noptr> q mdc driver init ( )
<cls> <noptr> c sla write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> tp g init ( <ptr> tp g <dot> <noptr> w <dot> <noptr> h )
<cls> <noptr> flite hw set camera bus ( <ptr> dev <dot> <ptr> si )
<cls> <noptr> init r cmap azure wave adt u ( )
<cls> <ptr> check persistent config ( )
<cls> <noptr> call get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> vp add tof b free list ( <ptr> inst <dot> <ptr> fb )
<cls> <noptr> v l async notifier add fw node remote sub dev ( <ptr> notif <dot> <ptr> endpoint <dot> <ptr> asd )
<cls> <noptr> venc runtime suspend ( <ptr> dev )
<cls> <noptr> af init ( <ptr> d )
<cls> <noptr> sh vous fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> dtg std ( <ptr> filp <dot> <ptr> p <dot> <ptr> norm )
<cls> <noptr> wcf smbus write byte ( <ptr> sd <dot> <noptr> v )
<cls> <noptr> interrupt hw ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> h vah fill slice header ( <ptr> p ctx <dot> <ptr> slice header addr <dot> <ptr> ctrls <dot> <noptr> frame num <dot> <ptr> header size <dot> <ptr> header offset <dot> <ptr> header offset <dot> <ptr> header offset )
<cls> <noptr> stv send burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> fc probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> check which ( <noptr> which )
<cls> <noptr> usb urb kill v ( <ptr> stream )
<cls> <noptr> get vsb post v iter b iber ( <ptr> dev addr <dot> <ptr> ber <dot> <ptr> cnt )
<cls> <noptr> stv get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <ptr> v prm from fb disp list ( <ptr> inst )
<cls> <noptr> v fe src pad code ( <ptr> line <dot> <noptr> sink code <dot> <noptr> index <dot> <noptr> src req code )
<cls> <noptr> x vip dma complete ( <ptr> param )
<cls> <noptr> pt sync ( <ptr> pt )
<cls> <noptr> smi app suspend ( <ptr> dev )
<cls> <noptr> mcl kre calc rate ( <ptr> hw <dot> <noptr> parent rate )
<cls> <noptr> get key pinn acle ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle <dot> <noptr> parity offset <dot> <noptr> marker <dot> <noptr> code modulo )
<cls> <noptr> ctrl clear dirty saturation ( <ptr> cptr )
<cls> <noptr> sh set mpeg timing ( <ptr> fe <dot> <noptr> mode )
<cls> <noptr> uvc v l put x u query ( <ptr> kp <dot> <ptr> up )
<cls> <noptr> sh get freq offset ( <ptr> state )
<cls> <noptr> img ir probe hw ( <ptr> priv )
<cls> <noptr> m anti shif write mem ( <ptr> ca <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> d i bfe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> loop set wakeup filter ( <ptr> dev <dot> <ptr> sc )
<cls> <noptr> dvb front ends w zigzag ( <ptr> fe )
<cls> <noptr> copy vb i data ( <ptr> c x <dot> <noptr> lines <dot> <noptr> pts stamp )
<cls> <noptr> go usb function ality ( <ptr> adapter )
<cls> <noptr> set q am channel ( <ptr> demo d <dot> <ptr> channel <dot> <noptr> tuner freq offset )
<cls> <noptr> vivid thread vid out tick ( <ptr> dev )
<cls> <noptr> sh ve ud q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> v pbe display driver init ( )
<cls> <noptr> write reg ( <ptr> c i <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> pwc i soc init ( <ptr> pdev )
<cls> <noptr> sp mfc run enc frame ( <ptr> ctx )
<cls> <noptr> am gxx set power on ( <ptr> data )
<cls> <noptr> twe num input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> v do a driver init ( )
<cls> <noptr> d ibm cic enumeration ( <ptr> ic <dot> <noptr> noof demo ds <dot> <noptr> default addr <dot> <noptr> cfg )
<cls> <noptr> gs g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> m xls fwrite reg mask ( <ptr> state <dot> <noptr> addr <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> adv x hdmi has signal ( <ptr> state )
<cls> <noptr> m nxt wake ( <ptr> chip )
<cls> <noptr> avd i seq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> affe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> s rpc try frame size ( <ptr> m f )
<cls> <ptr> v l async notifier find v l dev ( <ptr> notifier )
<cls> <noptr> coda encode ctrls ( <ptr> ctx )
<cls> <noptr> e dvb sleep ( <ptr> fe )
<cls> <noptr> m xic func ( <ptr> adapter )
<cls> <noptr> saa api set audio detection ( <ptr> port <dot> <noptr> auto detect )
<cls> <noptr> reg reqs ( <ptr> gsp ca dev <dot> <ptr> p reqs <dot> <noptr> n reqs )
<cls> <noptr> sr u partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> partition <dot> <noptr> partition idx <dot> <ptr> window )
<cls> <noptr> air spy ctrl msg ( <ptr> s <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> g scm m stop streaming ( <ptr> q )
<cls> <noptr> saa set hps source and sync ( <ptr> dev <dot> <noptr> source <dot> <noptr> sync )
<cls> <noptr> command set flicker ctrl ( <ptr> gsp ca dev )
<cls> <noptr> any see delic dev ( <ptr> d )
<cls> <noptr> delta mjpeg read header ( <ptr> p ctx <dot> <ptr> data <dot> <noptr> size <dot> <ptr> header <dot> <ptr> data offset )
<cls> <noptr> via cam configure sensor ( <ptr> cam )
<cls> <noptr> usb tvs std ( <ptr> file <dot> <ptr> priv <dot> <noptr> norm )
<cls> <noptr> gov l init ( <ptr> go )
<cls> <noptr> scm set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ddb ic function ality ( <ptr> adap )
<cls> <noptr> em x xir resume ( <ptr> dev )
<cls> <noptr> px p irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> video check format ( <ptr> video )
<cls> <noptr> event seq changed ( <ptr> core <dot> <ptr> inst <dot> <ptr> pkt )
<cls> <noptr> coda bitstream end flag ( <ptr> ctx )
<cls> <noptr> c x der calc if freq x tal ( <noptr> x tal <dot> <noptr> if hz )
<cls> <noptr> m xls f init ( <ptr> d )
<cls> <noptr> uvc set le value ( <ptr> mapping <dot> <noptr> value <dot> <ptr> data )
<cls> <noptr> usb vision power on ( <ptr> usb vision )
<cls> <noptr> ov x enum frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <noptr> alp std mb tuner set params ( <ptr> fe )
<cls> <noptr> put checksum ( <ptr> check string <dot> <noptr> length )
<cls> <noptr> ska a probe ( <ptr> sd )
<cls> <noptr> sa atv audio set mute ( <ptr> dev )
<cls> <noptr> saa dma stop ( <ptr> dev )
<cls> <noptr> saa api transition port ( <ptr> port <dot> <noptr> mode )
<cls> <ptr> check v bin r ( )
<cls> <noptr> mtp power on ( <ptr> mtp )
<cls> <noptr> m cam vid ioc try fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> f m irq handle flag get cmd resp ( <ptr> f m dev )
<cls> <noptr> em xx set model ( <ptr> dev )
<cls> <noptr> c x dt nr dmd init ( <ptr> tn r dmd )
<cls> <noptr> c xs sliced fmt ( <ptr> sd <dot> <ptr> sv b i )
<cls> <noptr> mt sleep ( <ptr> fe )
<cls> <noptr> venus shutdown not z ( <ptr> core )
<cls> <noptr> tws std ( <ptr> sd <dot> <noptr> norm )
<cls> <noptr> sp jpeg clear timer stat ( <ptr> regs )
<cls> <noptr> si wait stc ( <ptr> s dev <dot> <noptr> use cs )
<cls> <noptr> cade t init ( )
<cls> <noptr> m xls f config pin mux modes ( <ptr> state <dot> <noptr> pin mux config )
<cls> <noptr> cio vb buf queue ( <ptr> vb )
<cls> <noptr> l gdt spectral inversion ( <ptr> state <dot> <ptr> p <dot> <noptr> inversion )
<cls> <noptr> c xxx i soc irq callback ( <ptr> urb )
<cls> <noptr> m spread reg ( <ptr> av <dot> <noptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> mtv calc ratio ( <noptr> input <dot> <noptr> output )
<cls> <noptr> v fe get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> v pe runtime get ( <ptr> pdev )
<cls> <noptr> go ic master xfer ( <ptr> adapter <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> c xxx tuner pre channel change ( <ptr> dev )
<cls> <noptr> af read word agc ( <ptr> d <dot> <noptr> reg hi <dot> <noptr> reg lo <dot> <noptr> pos <dot> <noptr> len <dot> <ptr> value )
<cls> <noptr> nova trc query ( <ptr> d <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> v pfe attach irq ( <ptr> v pfe )
<cls> <noptr> m x rc core query ( <ptr> d )
<cls> <noptr> copy codes ( <ptr> dst <dot> <ptr> src <dot> <noptr> count )
<cls> <noptr> dr x k read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <ptr> check sca mult ( )
<cls> <noptr> dib fw pid filter ( <ptr> fe <dot> <noptr> id <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> ir spi driver init ( )
<cls> <ptr> find cs is format ( <ptr> m f )
<cls> <noptr> stv xx i soc init ( <ptr> gsp ca dev )
<cls> <noptr> mce kbd mode ( <ptr> data )
<cls> <noptr> dvb c philip std ml tuner set params ( <ptr> fe )
<cls> <noptr> uvc v l get x u query ( <ptr> kp <dot> <ptr> up )
<cls> <noptr> stv cab fsm signal type ( <noptr> q am fsm status )
<cls> <noptr> dvb ca write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> cam if hw set input path ( <ptr> vp )
<cls> <noptr> img ir set protocol ( <ptr> priv <dot> <noptr> proto )
<cls> <ptr> check audio debug ( )
<cls> <noptr> wb cir led brightness get ( <ptr> led c dev )
<cls> <noptr> is if close ( <ptr> device )
<cls> <noptr> c x dt nr dmd dvb t mon mode guard ( <ptr> tn r dmd <dot> <ptr> mode <dot> <ptr> guard )
<cls> <noptr> dump write message ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> c x irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> v fe set real ign cfg ( <ptr> v fe <dot> <ptr> line <dot> <noptr> enable )
<cls> <noptr> stv send legacy dish cmd ( <ptr> fe <dot> <noptr> cmd )
<cls> <noptr> iv tv setup v l decode stream ( <ptr> s )
<cls> <ptr> check fw debug ( )
<cls> <noptr> dst c icommand ( <ptr> state <dot> <ptr> data <dot> <ptr> ca string <dot> <noptr> len <dot> <noptr> read )
<cls> <noptr> m bas read status and stats ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> c xxx add into dev list ( <ptr> dev )
<cls> <noptr> ete kic create msg ( <ptr> client <dot> <noptr> len <dot> <noptr> reg <dot> <noptr> val <dot> <ptr> msg <dot> <ptr> buf )
<cls> <noptr> ite resume ( <ptr> pdev )
<cls> <noptr> wl f m set r x freq ( <ptr> radio <dot> <noptr> freq )
<cls> <noptr> s timer ( <ptr> t )
<cls> <noptr> c x irt x g parameters ( <ptr> sd <dot> <ptr> p )
<cls> <noptr> wm probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> stv get lock timeout ( <ptr> demo d timeout <dot> <ptr> fec timeout <dot> <noptr> s rate <dot> <noptr> algo )
<cls> <noptr> au analog stream disable ( <ptr> d )
<cls> <noptr> pvr send request ex ( <ptr> h dw <dot> <noptr> timeout <dot> <noptr> probe fl <dot> <ptr> write data <dot> <noptr> write len <dot> <ptr> read data <dot> <noptr> read len )
<cls> <noptr> mtk mdp comp clock off ( <ptr> dev <dot> <ptr> comp )
<cls> <noptr> set size ( <ptr> dev <dot> <noptr> task <dot> <noptr> width <dot> <noptr> height <dot> <noptr> interlace )
<cls> <noptr> sp mfc get min scratch buf size ( <ptr> dev )
<cls> <ptr> adv xx format info ( <ptr> state <dot> <noptr> code )
<cls> <noptr> sp mfc load firmware ( <ptr> dev )
<cls> <noptr> hist ioctl ( <ptr> sd <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> vim c deb calc rgb sink ( <ptr> v deb <dot> <ptr> frame <dot> <noptr> lin <dot> <noptr> col <dot> <noptr> rgb )
<cls> <noptr> d ibm bfe init non mobile ( <ptr> fe )
<cls> <noptr> get key k world pc u ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> init r cmap dnt v lived v bt ( )
<cls> <noptr> vid cap buf finish ( <ptr> vb )
<cls> <noptr> m spread dem ( <ptr> client <dot> <noptr> addr )
<cls> <ptr> info from header ( <ptr> phdr )
<cls> <noptr> l gs g read signal strength ( <ptr> priv <dot> <ptr> signal )
<cls> <noptr> c xxx g register ( <ptr> file <dot> <ptr> priv <dot> <ptr> reg )
<cls> <noptr> c x log status ( <ptr> file <dot> <ptr> f h )
<cls> <ptr> check tx duty cycle ( )
<cls> <noptr> tvp x read reg ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> iv tv stop decoding ( <ptr> id <dot> <noptr> flags <dot> <noptr> pts )
<cls> <noptr> c x dt nr dmd dvb t set plp cfg ( <ptr> tn r dmd <dot> <noptr> auto plp <dot> <noptr> pl pid )
<cls> <noptr> m xls f disable port ( <ptr> state )
<cls> <noptr> i sig parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> flex cop device initialize ( <ptr> fc )
<cls> <noptr> smi app read ( <ptr> sensor <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> only )
<cls> <noptr> pvr td a attach ( <ptr> adap )
<cls> <noptr> td aag cout ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> any see rd reg mask ( <ptr> d <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> mask )
<cls> <noptr> c xdr sleep c ( <ptr> fe )
<cls> <noptr> vp ifg fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> isp if init formats ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> vi codec mark last buf ( <ptr> ctx )
<cls> <noptr> au disable source ( <ptr> entity )
<cls> <noptr> vid out start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> exy nos jpeg set enc dec mode ( <ptr> base <dot> <noptr> mode )
<cls> <noptr> alter aci read cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> c x set fec ( <ptr> state <dot> <noptr> mod <dot> <noptr> fec )
<cls> <noptr> ref ( <ptr> state <dot> <noptr> high )
<cls> <noptr> tuner attach probe ( <ptr> chan )
<cls> <ptr> check enable msi ( )
<cls> <noptr> c x set ref div ( <ptr> state <dot> <noptr> ref div )
<cls> <noptr> imx write reg ( <ptr> imx <dot> <noptr> reg <dot> <noptr> len <dot> <noptr> val )
<cls> <noptr> g sch w sets w reset ( <ptr> dev )
<cls> <noptr> v sph go write ( <ptr> h go <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> set type ( <ptr> c <dot> <noptr> type <dot> <noptr> new mode mask <dot> <ptr> new config <dot> <ptr> ptr <dot> <noptr> int <dot> <noptr> int <dot> <ptr> ptr )
<cls> <noptr> m cam cam configure ( <ptr> cam )
<cls> <noptr> hvr q cs audio ( <ptr> priv <dot> <noptr> enable )
<cls> <ptr> v l fw node mbus type tostring ( <noptr> type )
<cls> <noptr> bulk w ( <ptr> gsp ca dev <dot> <noptr> tag <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> case t pmt ( <ptr> state <dot> <ptr> pca message <dot> <ptr> hw buffer <dot> <noptr> reply <dot> <noptr> query )
<cls> <noptr> videos fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> n gene ic set bus ( <ptr> dev <dot> <noptr> bus )
<cls> <noptr> mrs set front end ( <ptr> fe )
<cls> <ptr> sms core find client ( <ptr> core dev <dot> <noptr> datatype <dot> <noptr> id )
<cls> <noptr> v pbe displays output ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> tlv aic blog status ( <ptr> sd )
<cls> <noptr> c sid set clock rates ( <ptr> c sid )
<cls> <noptr> vivid cec xferd one worker ( <ptr> work )
<cls> <noptr> isp stat buf process ( <ptr> stat <dot> <noptr> buf state )
<cls> <noptr> usb vision set compress params ( <ptr> usb vision )
<cls> <noptr> r card rif buf s done ( <dptr> buf )
<cls> <noptr> tea stereo ( <ptr> fe <dot> <ptr> buffer )
<cls> <noptr> c x dt nr dmd dvb t mon carrier offset sub ( <ptr> tn r dmd <dot> <ptr> offset )
<cls> <noptr> fim c ish w open sensor ( <ptr> is <dot> <ptr> sensor )
<cls> <noptr> slot shutdown x o ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> m tt registered ( <ptr> sub dev )
<cls> <ptr> vivid get format ( <ptr> dev <dot> <noptr> pixel format )
<cls> <noptr> pvr encoder prep config ( <ptr> h dw )
<cls> <noptr> dvb register front end ( <ptr> dvb <dot> <ptr> fe )
<cls> <noptr> su identify state ( <ptr> udev <dot> <ptr> props <dot> <dptr> desc <dot> <ptr> cold )
<cls> <noptr> cit set hue ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> fim c buf queue ( <ptr> vb )
<cls> <noptr> coda firmware supported ( <noptr> ver num )
<cls> <noptr> msi iso stop ( <ptr> dev )
<cls> <noptr> c xxx close ( <ptr> filp )
<cls> <noptr> air spy kill urb s ( <ptr> s )
<cls> <noptr> fim ch w set input addr ( <ptr> dev <dot> <ptr> p addr )
<cls> <noptr> lg x gets ccc block mode ( <ptr> state <dot> <ptr> scc c block )
<cls> <noptr> pvr h dw wait ( <ptr> h dw <dot> <noptr> state )
<cls> <noptr> mtk mdpi star get crop ( <noptr> target )
<cls> <noptr> dvb front end compat ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> histo set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> go usb onboard write interrupt ( <ptr> go <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> omap v out vb prepare ( <ptr> vb )
<cls> <noptr> vim c is source ( <ptr> ent )
<cls> <noptr> isc set fmt ( <ptr> isc <dot> <ptr> f )
<cls> <noptr> cmp not rail ( <ptr> a <dot> <ptr> b <dot> <noptr> count )
<cls> <noptr> j pu open ( <ptr> file )
<cls> <noptr> tw x pcm close ( <ptr> ss )
<cls> <noptr> swap bytes ( <ptr> b <dot> <noptr> length )
<cls> <noptr> m m queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> as get stats ( <ptr> priv <dot> <ptr> demo d stats )
<cls> <noptr> gpp sk set tuner mode ( <ptr> fe <dot> <noptr> mode )
<cls> <noptr> csi set out addr ( <ptr> csi <dot> <noptr> addr )
<cls> <noptr> au get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> mtm row time ( <ptr> sensor <dot> <noptr> width )
<cls> <noptr> vid blk read word ( <ptr> dev <dot> <noptr> saddr <dot> <ptr> data )
<cls> <noptr> venus helper init codec freq data ( <ptr> inst )
<cls> <noptr> stv get timing off st ( <ptr> int p <dot> <noptr> s rate <dot> <noptr> demo d )
<cls> <noptr> msi driver init ( )
<cls> <noptr> sms to mode ( <noptr> mode )
<cls> <noptr> c sid src pad code ( <ptr> c sid <dot> <noptr> sink code <dot> <noptr> index <dot> <noptr> src req code )
<cls> <noptr> cmp lock ( <ptr> fdt v <dot> <noptr> addr <dot> <noptr> data )
<cls> <ptr> find format ( <ptr> info <dot> <ptr> cfg <dot> <noptr> which <dot> <noptr> type )
<cls> <noptr> adv set e did ( <ptr> sd <dot> <ptr> e )
<cls> <noptr> usb vision compress iso chron ous ( <ptr> usb vision <dot> <ptr> urb )
<cls> <noptr> ce u try fmt ( <ptr> ce udev <dot> <ptr> v l fmt <dot> <ptr> sdm bus code )
<cls> <noptr> mtm reg clear ( <ptr> client <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> i spi srs bl ( <ptr> isp )
<cls> <noptr> f send byte ( <ptr> dev <dot> <noptr> dta )
<cls> <noptr> scm get af status ( <ptr> state <dot> <ptr> ctrl )
<cls> <noptr> az write ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> saas std output ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> m cam setup vb ( <ptr> cam )
<cls> <noptr> vid io cs fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> a probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> fdp compute stride ( <ptr> pix <dot> <ptr> fmt )
<cls> <noptr> sh send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> td a read signal strength ( <ptr> fe <dot> <ptr> signal )
<cls> <noptr> mt get inversion ( <ptr> state <dot> <ptr> i )
<cls> <noptr> nv t clear cir wake fifo ( <ptr> nv t )
<cls> <noptr> m nxt read status ( <ptr> chip <dot> <ptr> c <dot> <ptr> status )
<cls> <noptr> afr d reg ( <ptr> d <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tms ctrl ( <ptr> ctrl )
<cls> <noptr> usb vision parse lines ( <ptr> usb vision <dot> <ptr> p copy len )
<cls> <noptr> exy nos jpeg set encode tbl select ( <ptr> base <dot> <noptr> level )
<cls> <noptr> sn div tv card set names ( <ptr> it vsc )
<cls> <noptr> v l m m buf copy metadata ( <ptr> out vb <dot> <ptr> cap vb <dot> <noptr> copy frame flags )
<cls> <noptr> init ava v ( <ptr> av )
<cls> <noptr> c xxx send gpio cmd ( <ptr> dev <dot> <noptr> gpio bit <dot> <ptr> gpio val <dot> <noptr> len <dot> <noptr> request <dot> <noptr> direction )
<cls> <noptr> init l mlb tx ( <ptr> b tv )
<cls> <noptr> med usa set decoder duration ( <ptr> dev <dot> <noptr> decoder <dot> <noptr> duration )
<cls> <noptr> c xsp c i ctrl ( <ptr> priv <dot> <noptr> read <dot> <noptr> addr <dot> <noptr> data <dot> <ptr> mem )
<cls> <noptr> vb start streaming ( <ptr> q )
<cls> <noptr> fim cmm enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> cobalt g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> scc am if runtime suspend ( <ptr> dev )
<cls> <noptr> a fic write ( <ptr> d <dot> <noptr> ic addr <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> vi u resume ( <ptr> op )
<cls> <noptr> mpeg ops attach ( <ptr> ops <dot> <ptr> dev )
<cls> <noptr> is pre store ctx ( <ptr> isp )
<cls> <noptr> t mic send regs ( <ptr> dev <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <ptr> vs pdl ext cmd get ( <ptr> pool )
<cls> <noptr> msp sis clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> x c get afc ( <ptr> fe <dot> <ptr> afc )
<cls> <noptr> d ibm c auto search is irq ( <ptr> demo d )
<cls> <noptr> c x get fec ( <ptr> fe )
<cls> <noptr> venc open ( <ptr> file )
<cls> <noptr> check pad ( <ptr> sd <dot> <noptr> pad )
<cls> <noptr> tm set volume adc ( <ptr> dev <dot> <noptr> vol )
<cls> <noptr> tvp enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> v lg fmt ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> td a update std map ( <ptr> fe <dot> <ptr> map )
<cls> <noptr> cobalt notify ( <ptr> sd <dot> <noptr> notification <dot> <ptr> arg )
<cls> <noptr> scc am if vid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <ptr> check icu delay ( )
<cls> <noptr> m px setup ( <ptr> t )
<cls> <noptr> v l stub enum frame intervals ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> t dax reset n ( <ptr> state )
<cls> <noptr> wait session msg ( <ptr> inst )
<cls> <noptr> a speed video buf prepare ( <ptr> vb )
<cls> <noptr> print input mask ( <noptr> msk <dot> <ptr> buf <dot> <noptr> a cnt )
<cls> <noptr> pv ric register ir ( <ptr> h dw )
<cls> <noptr> copy timestamp ( <ptr> vb <dot> <ptr> pb )
<cls> <noptr> x vip clr or set ( <ptr> x vip <dot> <noptr> addr <dot> <noptr> mask <dot> <noptr> set )
<cls> <noptr> is res streaming ( <ptr> dev <dot> <ptr> f h )
<cls> <noptr> sh init ( <ptr> fe )
<cls> <noptr> set tv norm ( <ptr> b tv <dot> <noptr> norm )
<cls> <noptr> cec gpio read v ( <ptr> adap )
<cls> <noptr> ts get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> ode ( <ptr> fe <dot> <noptr> mod type <dot> <noptr> bandwidth )
<cls> <noptr> sa aic write out ( <ptr> dev <dot> <ptr> dword <dot> <noptr> short delay )
<cls> <noptr> c x d stop feed ( <ptr> feed )
<cls> <ptr> ts attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <noptr> v ls crop ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> vp fes fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> gem tek gr x sub c hans ( <ptr> isa )
<cls> <noptr> v fe disable output ( <ptr> line )
<cls> <noptr> vpx s std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> h va open encoder ( <ptr> ctx <dot> <noptr> stream format <dot> <noptr> pixel format <dot> <dptr> pen c )
<cls> <noptr> lg x initialize ( <ptr> state )
<cls> <noptr> c x usb dee tuner attach ( <ptr> adap )
<cls> <noptr> sun i video link validate get format ( <ptr> pad <dot> <ptr> fmt )
<cls> <noptr> ska a write array ( <ptr> sd <dot> <ptr> msg )
<cls> <noptr> gpio irt x set carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> td air cal init ( <ptr> fe )
<cls> <noptr> sp micro controller start ( <ptr> state )
<cls> <noptr> saa suspend ( <ptr> pci dev <dot> <noptr> state )
<cls> <noptr> adb csc conversion mode ( <ptr> sd <dot> <noptr> mode )
<cls> <noptr> dcm i stop streaming ( <ptr> v q )
<cls> <ptr> vs pdl mdl body get ( <ptr> dlm )
<cls> <ptr> find d inode ( <ptr> demux dev )
<cls> <noptr> iv tv u dma fills g list ( <ptr> dma <dot> <ptr> dma page <dot> <noptr> map offset )
<cls> <noptr> c cdc is shift able ( <noptr> in <dot> <noptr> out <dot> <noptr> additional shift )
<cls> <noptr> e tek set power ( <ptr> sensor <dot> <noptr> on )
<cls> <noptr> mce usb set r x wide b and ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> set ts clk mode and freq ( <ptr> tn r dmd <dot> <noptr> sys )
<cls> <noptr> dib fw write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> buffer complete ( <ptr> urb )
<cls> <noptr> preview get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> venus reset cpu ( <ptr> core )
<cls> <noptr> c x sram channel setup audio ( <ptr> dev <dot> <ptr> ch <dot> <noptr> bpl <dot> <noptr> risc )
<cls> <noptr> vic am control msg ( <ptr> gsp ca dev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> vp ifs output ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> v l m m job finish ( <ptr> m m dev <dot> <ptr> m mctx )
<cls> <noptr> ene sett x carrier ( <ptr> r dev <dot> <noptr> carrier )
<cls> <noptr> memory write ( <ptr> core <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> dr x j close ( <ptr> demo d )
<cls> <noptr> saa buffer base ( <ptr> buf )
<cls> <noptr> fim c cap g fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> dvb dmx init ( <ptr> dvb demux )
<cls> <noptr> show brightness ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> philip stu tuner set params ( <ptr> fe )
<cls> <noptr> it d get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> h level ( <noptr> lvl )
<cls> <noptr> t dax probe version ( <ptr> fe )
<cls> <noptr> nxt read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ds firmware ondemand ( <ptr> fe )
<cls> <noptr> c x setup x c ( <ptr> core <dot> <ptr> ctl )
<cls> <noptr> adb enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> tegra cec adap monitor all enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> a lps b srv tuner set params ( <ptr> fe )
<cls> <noptr> descriptor list chain ( <ptr> this <dot> <ptr> next )
<cls> <noptr> pwc set auto gain ( <ptr> pdev )
<cls> <noptr> a speed video check and set polarity ( <ptr> video )
<cls> <noptr> smi app get mbus code ( <ptr> sub dev <dot> <noptr> pad )
<cls> <noptr> vsp entity configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> isp initialize modules ( <ptr> isp )
<cls> <noptr> nv t cir wake reg read ( <ptr> nv t <dot> <noptr> offset )
<cls> <noptr> dib streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> c pia set property mirror ( <ptr> cam <dot> <noptr> prop val )
<cls> <noptr> c xdr gpio get ( <ptr> chip <dot> <noptr> nr )
<cls> <noptr> vp bit get scl ( <ptr> data )
<cls> <ptr> pvr ctrl get name ( <ptr> cptr )
<cls> <noptr> wl f m vid ioc log status ( <ptr> file <dot> <ptr> priv )
<cls> <noptr> bt tv irq wakeup vb i ( <ptr> b tv <dot> <ptr> wakeup <dot> <noptr> state )
<cls> <noptr> control r xde modulation enable ( <ptr> c <dot> <noptr> enable )
<cls> <noptr> c x sram channel setup ( <ptr> core <dot> <ptr> ch <dot> <noptr> bpl <dot> <noptr> risc )
<cls> <noptr> tvp query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <ptr> check index ( )
<cls> <noptr> l gdt x sw reset ( <ptr> state )
<cls> <noptr> cmd init ( <ptr> cmd <dot> <ptr> buf <dot> <noptr> w len <dot> <noptr> r len )
<cls> <noptr> pvr h dw state log state ( <ptr> h dw )
<cls> <noptr> shutdown ( <ptr> state )
<cls> <noptr> fim c ish wget set file addr ( <ptr> is )
<cls> <noptr> m anti shif read io m ( <ptr> ca <dot> <noptr> addr )
<cls> <noptr> dib pid filter ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> td adi seq c set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> vip active buf next ( <ptr> vip )
<cls> <noptr> cio runtime suspend ( <ptr> dev )
<cls> <noptr> s x read mac address ( <ptr> d <dot> <noptr> mac )
<cls> <noptr> media device k pad tou pad ( <ptr> k pad <dot> <ptr> u pad )
<cls> <noptr> stack push ( <ptr> graph <dot> <ptr> entity )
<cls> <noptr> wait dis ( <ptr> state <dot> <noptr> flag <dot> <noptr> val )
<cls> <noptr> a power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> ene set clear reg mask ( <ptr> dev <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> set )
<cls> <noptr> tango ir driver init ( )
<cls> <noptr> ( <noptr> x <dot> <ptr> str )
<cls> <noptr> tm set reg mask ( <ptr> dev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <noptr> mask )
<cls> <noptr> vi u start dma ( <ptr> dev )
<cls> <noptr> stb search tm g ( <ptr> state )
<cls> <noptr> e dvb get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> fmi set pins ( <ptr> handle <dot> <noptr> pins )
<cls> <noptr> snd c x card set names ( <ptr> c x sc )
<cls> <noptr> isp if link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> hopper irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> vc x probe sensor ( <ptr> gsp ca dev )
<cls> <noptr> v fe isr comp done ( <ptr> v fe <dot> <noptr> comp )
<cls> <noptr> sun ics i sub dev get fmt ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> so i init sensor ( <ptr> gsp ca dev )
<cls> <noptr> c xxx audio init ( <ptr> dev )
<cls> <noptr> max read rom table ( <ptr> priv )
<cls> <noptr> tw video fini ( <ptr> dev )
<cls> <noptr> c x dt nr dmd dvb t mon ssi ( <ptr> tn r dmd <dot> <ptr> ssi )
<cls> <noptr> dvb dmx release ts feed ( <ptr> dmx <dot> <ptr> ts feed )
<cls> <noptr> fmi set freq ( <ptr> fmi )
<cls> <noptr> rca rfc p probe ( <ptr> pdev )
<cls> <noptr> isp video pipeline validate ( <ptr> isp )
<cls> <noptr> m m ops venc job ready ( <ptr> m m priv )
<cls> <noptr> z d demo d get tune settings ( <ptr> fe <dot> <ptr> settings )
<cls> <noptr> iv tv u dma setup ( <ptr> it v <dot> <noptr> iv tv dest addr <dot> <ptr> user buf <dot> <noptr> size inbytes )
<cls> <noptr> bt tv init card ( <ptr> b tv )
<cls> <noptr> c x alsa dma map ( <ptr> dev )
<cls> <noptr> ov read reg ( <ptr> ov <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> c pia set contrast ( <ptr> cam <dot> <noptr> value )
<cls> <noptr> fill encoder block ( <ptr> input <dot> <ptr> dst <dot> <noptr> stride <dot> <noptr> input step )
<cls> <noptr> tv eeprom ha upp auge analog ( <ptr> tve e <dot> <ptr> eeprom data )
<cls> <noptr> vp dma raw chan add out dtd ( <ptr> list <dot> <noptr> width <dot> <noptr> stride <dot> <ptr> crect <dot> <ptr> fmt <dot> <noptr> dma addr <dot> <noptr> max w <dot> <noptr> max h <dot> <noptr> raw vp dma chan <dot> <noptr> flags )
<cls> <noptr> r card rif disable r x ( <ptr> sdr )
<cls> <noptr> iv tv start v l encode stream ( <ptr> s )
<cls> <noptr> adv x xs routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> tw video init ( <ptr> dev <dot> <noptr> video nr )
<cls> <noptr> smi app set format source ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> g scm m q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> x vip dma try format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> saa dump bus desc ( <ptr> dev )
<cls> <noptr> get snr ( <ptr> fe )
<cls> <noptr> mtk jpeg dec hard reset ( <ptr> base )
<cls> <noptr> vp wait dec end ( <ptr> inst )
<cls> <noptr> mtk mdp v pus end api pi ( <ptr> v pu <dot> <noptr> msgid )
<cls> <noptr> uvc ioctl enum fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> mtk mdp driver init ( )
<cls> <noptr> is if get line length ( )
<cls> <noptr> vp if enum output ( <ptr> file <dot> <ptr> f h <dot> <ptr> output )
<cls> <noptr> i q vt set ( <ptr> state <dot> <noptr> i q inv )
<cls> <noptr> dvb dmx mem copy ( <ptr> f <dot> <ptr> d <dot> <ptr> s <dot> <noptr> len )
<cls> <noptr> c x init fe ( <ptr> fe )
<cls> <noptr> previews ctrl ( <ptr> ctrl )
<cls> <noptr> td a read byte ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> audio input ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> rtl xx u front end attach ( <ptr> adap )
<cls> <noptr> mtm probe ( <ptr> client <dot> <ptr> devid )
<cls> <noptr> stb d vbs calc dev ( <ptr> state )
<cls> <noptr> r cmm mode ( <ptr> data )
<cls> <noptr> c x request acquire ( <ptr> drv )
<cls> <noptr> ds front end attach ( <ptr> d )
<cls> <noptr> mtk jpeg dec get int status ( <ptr> base )
<cls> <noptr> imx s register ( <ptr> sub dev <dot> <ptr> reg )
<cls> <ptr> check cal ( )
<cls> <ptr> pvr hd wget type ( <ptr> h dw )
<cls> <noptr> sony b tfm px driver init ( )
<cls> <noptr> skb af hw set anti flicker ( <ptr> state <dot> <noptr> v )
<cls> <noptr> event sys error ( <ptr> core <dot> <noptr> event <dot> <ptr> pkt )
<cls> <ptr> fim c find remote sensor ( <ptr> entity )
<cls> <noptr> pkt session get seq hdr ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> seq hdr <dot> <noptr> seq hdr len )
<cls> <noptr> sh ve u scale v ( <ptr> ve u <dot> <noptr> size in <dot> <noptr> size out <dot> <noptr> crop out )
<cls> <noptr> td a lookup map ( <ptr> fe <dot> <noptr> map type <dot> <ptr> freq <dot> <ptr> val )
<cls> <noptr> sdp io write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> dvb t activate presets ( <ptr> state )
<cls> <noptr> c xxx initi soc ( <ptr> dev <dot> <noptr> max packets <dot> <noptr> num buf s <dot> <noptr> max pkt size <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> stv write regs ( <ptr> fe <dot> <noptr> buf <dot> <noptr> start <dot> <noptr> len )
<cls> <noptr> x c debug dump ( <ptr> priv )
<cls> <noptr> z l read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> m xlt synth lock status ( <ptr> state <dot> <ptr> r f locked <dot> <ptr> ref locked )
<cls> <noptr> msp xx g modus ( <ptr> client )
<cls> <noptr> sp jpeg clear enc stream stat ( <ptr> regs )
<cls> <noptr> b disp hw get h vinc ( <ptr> ctx <dot> <ptr> h inc <dot> <ptr> vinc )
<cls> <noptr> mtk v dec lock ( <ptr> ctx )
<cls> <noptr> ov parsed t ( <ptr> sensor )
<cls> <noptr> l read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> budget c i init ( )
<cls> <ptr> check usb xfer mode ( )
<cls> <noptr> sh vou rega read ( <ptr> vou dev <dot> <noptr> reg )
<cls> <noptr> dib get time us ( <ptr> fe <dot> <noptr> layer )
<cls> <noptr> six ic probe ( <ptr> client )
<cls> <noptr> usb tv configure for norm ( <ptr> usb tv <dot> <noptr> norm )
<cls> <ptr> r vin format from pixel ( <ptr> vin <dot> <noptr> pixel format )
<cls> <noptr> b tt vic read bytes ( <ptr> b tv <dot> <ptr> msg <dot> <noptr> last )
<cls> <noptr> td a get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> stv d dbset front end ( <ptr> fe )
<cls> <noptr> max init power manager ( <ptr> ctx )
<cls> <noptr> adv xx registered ( <ptr> sd )
<cls> <noptr> h va try fmt frame ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> toml v ( <ptr> sub dev )
<cls> <ptr> check dvb dev debug ( )
<cls> <noptr> v l fw node reference parse int props ( <ptr> dev <dot> <ptr> notifier <dot> <ptr> p )
<cls> <noptr> ov x select params ( <ptr> m f <dot> <dptr> c fmt <dot> <dptr> win )
<cls> <noptr> pvr g ext ctrls ( <ptr> file <dot> <ptr> priv <dot> <ptr> ctls )
<cls> <noptr> solo enc init ( <ptr> solo dev )
<cls> <noptr> tw prepare frame headers ( <ptr> input )
<cls> <noptr> ccp phy ifconfig ( <ptr> ccp <dot> <ptr> bus cfg )
<cls> <noptr> m chip delay ( <noptr> reg <dot> <noptr> v )
<cls> <noptr> red rat get ir data ( <ptr> r r <dot> <noptr> len )
<cls> <noptr> adv smbus write ic block data ( <ptr> client <dot> <noptr> command <dot> <noptr> length <dot> <ptr> values )
<cls> <noptr> dvb sky t set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> ov configure regulator s ( <ptr> ov )
<cls> <noptr> stb writes reg ( <ptr> state <dot> <noptr> st bic dev <dot> <noptr> stb base addr <dot> <noptr> stb reg offset <dot> <noptr> stb data )
<cls> <noptr> stk vid ioc g fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> budget patch attach ( <ptr> dev <dot> <ptr> info )
<cls> <noptr> tv audio thread ( <ptr> data )
<cls> <noptr> enet x sample ( <ptr> dev )
<cls> <noptr> ctrl freq clear dirty ( <ptr> cptr )
<cls> <noptr> init r cmap genius tv goa mce ( )
<cls> <noptr> v dec runtime suspend ( <ptr> dev )
<cls> <noptr> vivid enum fmt vid ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sms usb stop streaming ( <ptr> dev )
<cls> <noptr> v pbe get output ( <ptr> v pbe dev )
<cls> <noptr> c x dt nr dmd sett spin high low ( <ptr> tn r dmd <dot> <noptr> en <dot> <noptr> value )
<cls> <noptr> get max endpoint ( <ptr> udev <dot> <ptr> alt <dot> <ptr> msg type <dot> <ptr> curre <dot> <ptr> tme p )
<cls> <noptr> dib read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> sms dvb stop feed ( <ptr> feed )
<cls> <ptr> v l sub dev to video mux ( <ptr> sd )
<cls> <noptr> ov x set params ( <ptr> ov x )
<cls> <ptr> check power save ( )
<cls> <noptr> m chip get frame ( )
<cls> <noptr> l gdt mpeg mode polarity ( <ptr> state )
<cls> <noptr> delta subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> tc hdmi misc int handler ( <ptr> sd <dot> <ptr> handled )
<cls> <noptr> mantis get mac ( <ptr> mantis )
<cls> <noptr> init r cmap bee link gs ( )
<cls> <noptr> wl f m sett x power ( <ptr> radio <dot> <noptr> power )
<cls> <noptr> skb af probe ( <ptr> c )
<cls> <noptr> max set params ( <ptr> fe )
<cls> <noptr> v l async register sub dev ( <ptr> sd )
<cls> <noptr> pvr h dw encoder wait timeout ( <ptr> t )
<cls> <noptr> iv tv query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> vcap )
<cls> <noptr> rc sip htw write mbps ( <ptr> priv <dot> <noptr> mbps <dot> <ptr> values <dot> <noptr> code )
<cls> <noptr> dvb usb v generic write ( <ptr> d <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> hdmi read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> req ( <noptr> p kin <dot> <noptr> pk out <dot> <noptr> insert ext syn chro <dot> <noptr> sync size )
<cls> <noptr> sh ve u device run ( <ptr> priv )
<cls> <noptr> iv tv write vb i line ( <ptr> it v <dot> <ptr> d <dot> <ptr> cc <dot> <ptr> found cc )
<cls> <noptr> change mode ( <ptr> adap <dot> <noptr> mode )
<cls> <noptr> ener x enable ( <ptr> dev )
<cls> <noptr> h varun work ( <ptr> work )
<cls> <noptr> a speed video stop streaming ( <ptr> q )
<cls> <noptr> dsp buffer init ( <ptr> dev )
<cls> <noptr> v l device register sub dev nodes ( <ptr> v l dev )
<cls> <noptr> max load f m nap ( <ptr> ctx )
<cls> <noptr> usb d sbr probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> ska a set anti flicker ( <ptr> ska a <dot> <noptr> value )
<cls> <noptr> c cdc config black com pense ( <ptr> b comp )
<cls> <noptr> pos eth v flip ( <ptr> gsp ca dev )
<cls> <noptr> delta job abort ( <ptr> priv )
<cls> <noptr> dr xxx j sleep ( <ptr> fe )
<cls> <noptr> solo enc set input ( <ptr> file <dot> <ptr> priv <dot> <noptr> index )
<cls> <noptr> m xls write reg ( <ptr> fe <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> latch )
<cls> <noptr> au read reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> ctrl is pointer ( <ptr> file <dot> <noptr> id )
<cls> <noptr> coda stop streaming ( <ptr> q )
<cls> <noptr> via cam quick irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> fim ch w enable capture ( <ptr> ctx )
<cls> <noptr> usb vision stream interrupt ( <ptr> usb vision )
<cls> <noptr> h fi session rel res done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> tuner signal ( <noptr> status )
<cls> <noptr> av fe read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> usb tv audio resume ( <ptr> usb tv )
<cls> <noptr> m eye ioc g params ( <ptr> p )
<cls> <noptr> one ( <ptr> isa )
<cls> <noptr> tvp get vb i ( <ptr> sd <dot> <noptr> line )
<cls> <noptr> c cdc config vp ( <ptr> c cdc )
<cls> <noptr> state eval encoder ok ( <ptr> h dw )
<cls> <noptr> v l print new line ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> os d clear ( <ptr> sd <dot> <noptr> mask <dot> <noptr> offset )
<cls> <noptr> stk probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> g volatile ctrl ( <ptr> ov x <dot> <ptr> ctrl )
<cls> <noptr> media device usb init ( <ptr> m dev <dot> <ptr> udev <dot> <ptr> board name <dot> <ptr> driver name )
<cls> <noptr> ov get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> stax vip init controls ( <ptr> vip )
<cls> <noptr> dcm i buf queue ( <ptr> vb )
<cls> <noptr> r vin group get mask ( <ptr> vin <dot> <noptr> csi id <dot> <noptr> channel )
<cls> <noptr> r j ns register ( <ptr> sd <dot> <ptr> reg )
<cls> <ptr> c sit x get fmt from mbus ( <noptr> mbus )
<cls> <noptr> fim ch wget in flip ( <ptr> ctx )
<cls> <noptr> uvc ctrl status event work ( <ptr> work )
<cls> <noptr> c cdc configure black comp ( <ptr> c cdc )
<cls> <noptr> solo gpio chip direction output ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> adv x csi set pixel rate ( <ptr> sd <dot> <noptr> rate )
<cls> <noptr> c x d read block err t ( <ptr> tn r dmd <dot> <ptr> block err <dot> <ptr> block count )
<cls> <noptr> om sensor init ( <ptr> gsp ca dev )
<cls> <noptr> recv control msg ( <ptr> dev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> cp <dot> <noptr> size )
<cls> <noptr> stv blind search algo ( <ptr> fe )
<cls> <noptr> cleanup ref queue ( <ptr> ctx )
<cls> <noptr> mtm read ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> scm set jpeg quality ( <ptr> state <dot> <noptr> quality )
<cls> <noptr> iv tvs video encoding ( <ptr> c x hdl <dot> <noptr> val )
<cls> <noptr> cec transmit msg f h ( <ptr> adap <dot> <ptr> msg <dot> <ptr> f h <dot> <noptr> block )
<cls> <noptr> stk read reg ( <ptr> dev <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> sa aic register ( <ptr> bus )
<cls> <noptr> venus set q hdr defaults ( <ptr> q hdr )
<cls> <noptr> vim c sca enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> handle ( <ptr> av <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> dib sad calib ( <ptr> state )
<cls> <noptr> adb get e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> bt tv tea x set direction ( <ptr> tea <dot> <noptr> output )
<cls> <noptr> fmc is rds data available ( <ptr> f m dev <dot> <ptr> file <dot> <ptr> pts )
<cls> <noptr> t wxs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> pvr std get usable ( )
<cls> <noptr> as get tps ( <ptr> priv <dot> <ptr> tps )
<cls> <noptr> any see read reg ( <ptr> d <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> vid ioc query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> vs psr u write ( <ptr> sr u <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> net u pic interrupt ( <ptr> ic )
<cls> <noptr> video buf queue core init ( <ptr> q <dot> <ptr> ops <dot> <ptr> dev <dot> <ptr> irq lock <dot> <noptr> type <dot> <noptr> field <dot> <noptr> m size <dot> <ptr> priv <dot> <ptr> int ops <dot> <ptr> ext lock )
<cls> <noptr> td alog status ( <ptr> sd )
<cls> <noptr> init r cmap trek stor ( )
<cls> <noptr> budget stop feed ( <ptr> feed )
<cls> <noptr> cxx xic send bytes ( <ptr> ic adap <dot> <ptr> msg )
<cls> <noptr> ov regulator s disable ( <ptr> ov )
<cls> <noptr> adv x hdmi read pixel clock ( <ptr> state )
<cls> <noptr> g sch w set input buf masking ( <ptr> dev <dot> <noptr> shift <dot> <noptr> enable )
<cls> <noptr> venc try fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ite decode bytes ( <ptr> dev <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> adb s audio stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> wait for call done ( <ptr> state <dot> <noptr> mask )
<cls> <noptr> stb first sub range ( <ptr> state )
<cls> <noptr> c xdr read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> dib xic gate ctrl ( <ptr> mst <dot> <noptr> tx <dot> <noptr> addr <dot> <noptr> onoff )
<cls> <noptr> ov seth w ( <ptr> sd <dot> <noptr> h start <dot> <noptr> h stop <dot> <noptr> v start <dot> <noptr> v stop )
<cls> <noptr> fcd vb set params ( <ptr> fe )
<cls> <noptr> venus hal taxi ( <ptr> h dev )
<cls> <noptr> v l stubs f buf ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> dib update tuning table ( <ptr> fe <dot> <noptr> cfg sensitivity )
<cls> <noptr> ic w seq ( <ptr> gsp ca dev <dot> <ptr> ptr )
<cls> <noptr> r ga get addr offset ( <ptr> frm <dot> <noptr> x <dot> <noptr> y <dot> <noptr> w <dot> <noptr> h )
<cls> <noptr> pvr buffer get status ( <ptr> b p )
<cls> <noptr> c pia set brightness ( <ptr> cam <dot> <noptr> value )
<cls> <noptr> sp mfc handle frame new ( <ptr> ctx <dot> <noptr> err )
<cls> <noptr> is i set fmt ( <ptr> is i <dot> <ptr> f )
<cls> <noptr> aug register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> c x d write spi ( <ptr> spi <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> v pu clock enable ( <ptr> v pu )
<cls> <noptr> vim c sens ctrl ( <ptr> ctrl )
<cls> <noptr> stb read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> hi x h dir enable ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> sp cec copy packet ( <ptr> cec <dot> <ptr> data <dot> <noptr> count <dot> <noptr> retries )
<cls> <ptr> get queue ctx ( <ptr> m mctx <dot> <noptr> type )
<cls> <noptr> dvb usb v remote init ( <ptr> d )
<cls> <noptr> mtv registered ( <ptr> sub dev )
<cls> <noptr> tw buffer count ( <noptr> size <dot> <noptr> count )
<cls> <noptr> spc i write attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <ptr> check os d x res ( )
<cls> <noptr> transfer check ( <ptr> gsp ca dev <dot> <ptr> data )
<cls> <noptr> scm probe ( <ptr> client )
<cls> <noptr> sh v eug fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> skb af bound range ( <ptr> start <dot> <ptr> len <dot> <noptr> max )
<cls> <noptr> vou adjust output ( <ptr> geo <dot> <noptr> std )
<cls> <noptr> sun ics iis r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> cafe smbus write done ( <ptr> m cam )
<cls> <noptr> sk as ctrl ( <ptr> ctrl )
<cls> <noptr> tc irq poll timer ( <ptr> t )
<cls> <noptr> v pe try fmt ( <ptr> ctx <dot> <ptr> f <dot> <ptr> fmt <dot> <noptr> type )
<cls> <noptr> v l device register sub dev ( <ptr> v l dev <dot> <ptr> sd )
<cls> <noptr> resizer enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> ic w vector ( <ptr> gsp ca dev <dot> <noptr> buffer <dot> <noptr> len )
<cls> <noptr> lg dta mpeg mode polarity ( <ptr> state <dot> <noptr> edge <dot> <noptr> valid )
<cls> <noptr> put v led id ( <ptr> p <dot> <ptr> p )
<cls> <noptr> b disp dbg dump r z i ( <ptr> s <dot> <noptr> val <dot> <ptr> name )
<cls> <noptr> dib get tune state ( <ptr> fe )
<cls> <noptr> aus top streaming ( <ptr> v q )
<cls> <noptr> adb e did handler ( <ptr> work )
<cls> <noptr> v levent dequeue ( <ptr> f h <dot> <ptr> event )
<cls> <noptr> dib p get stats ( <ptr> demo d <dot> <noptr> stat )
<cls> <noptr> pt update power ( <ptr> pt )
<cls> <ptr> v l ctrl request hdl ctrl find ( <ptr> hdl <dot> <noptr> id )
<cls> <noptr> av firm version ( <ptr> av )
<cls> <noptr> me son a oce cga irq r x ( <ptr> ao cec )
<cls> <noptr> vsp video suspend ( <ptr> vsp )
<cls> <noptr> mrs read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> tvp xs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> dr x j dap scu atomic write reg ( <ptr> dev addr <dot> <noptr> addr <dot> <noptr> data <dot> <noptr> flags )
<cls> <noptr> mtp enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> techni sat usb set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> show max ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> fill table dcd ( <ptr> p dec )
<cls> <noptr> ctrl gets rate ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> ctrl set bass ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> tm remove from dev list ( <ptr> dev )
<cls> <noptr> wp tuner write ser par ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> gpio write ( <ptr> c x )
<cls> <noptr> v l print d v timings ( <ptr> dev prefix <dot> <ptr> prefix <dot> <ptr> t <dot> <noptr> detailed )
<cls> <noptr> fim cmd link notify ( <ptr> link <dot> <noptr> flags <dot> <noptr> notification )
<cls> <noptr> m cam frame task let ( <noptr> data )
<cls> <noptr> q mdc wakeup ( <ptr> state )
<cls> <noptr> pvr h dw device reset ( <ptr> h dw )
<cls> <noptr> scm set saturation ( <ptr> state <dot> <noptr> val )
<cls> <noptr> c x input process measurements ( <ptr> dev <dot> <noptr> over run )
<cls> <noptr> tw input std get ( <ptr> input <dot> <ptr> std )
<cls> <noptr> vp if enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> input )
<cls> <noptr> n gene command gpio set ( <ptr> dev <dot> <noptr> select <dot> <noptr> level )
<cls> <noptr> h get level ( <ptr> inst <dot> <noptr> level )
<cls> <noptr> dvb usb v adapter dvb init ( <ptr> adap )
<cls> <noptr> t dax codec probe ( <ptr> component )
<cls> <noptr> mtk jpeg dec fill param ( <ptr> param )
<cls> <noptr> techni sat usb eeprom l rc read ( <ptr> d <dot> <noptr> offset <dot> <ptr> b <dot> <noptr> length <dot> <noptr> tries )
<cls> <noptr> scm system status wait ( <ptr> state <dot> <noptr> value <dot> <noptr> delay <dot> <noptr> steps )
<cls> <noptr> read sensor register ( <ptr> gsp ca dev <dot> <noptr> address )
<cls> <noptr> via cam stop engine ( <ptr> cam )
<cls> <noptr> v l m m ioctl q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> vid io cs aud input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> bt tv reinit bt ( <ptr> b tv )
<cls> <noptr> video ice num fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> z xir dec driver init ( )
<cls> <noptr> trust init ( )
<cls> <noptr> wl f m suspend ( <ptr> radio )
<cls> <noptr> gpp sk power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> m cam vid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> saa set capture ( <ptr> dev <dot> <ptr> buf <dot> <ptr> next )
<cls> <noptr> flex cop usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> dib pfe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> gsd v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> t dax probe ( <ptr> ic adap <dot> <noptr> ic addr )
<cls> <noptr> clock divider to freq ( <noptr> divider <dot> <noptr> rollover s )
<cls> <noptr> sms dvb sleep ( <ptr> fe )
<cls> <noptr> smi app pll configure ( <ptr> sensor )
<cls> <noptr> adv set termination ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> venc enable vps s clock ( <noptr> v enctype <dot> <noptr> type <dot> <noptr> p clock )
<cls> <noptr> l gdt read fec lock status ( <ptr> state <dot> <ptr> locked )
<cls> <noptr> cobalt g output ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> i )
<cls> <ptr> mtv get p data ( <ptr> client )
<cls> <noptr> iv tv process options ( <ptr> it v )
<cls> <noptr> j pu wait reset ( <ptr> j pu )
<cls> <noptr> csi phy set power ( <ptr> phy <dot> <noptr> power )
<cls> <noptr> it disable tx interrupt ( <ptr> dev )
<cls> <noptr> r ga cmd set src addr ( <ptr> ctx <dot> <ptr> mmu pages )
<cls> <noptr> saa api set video mux ( <ptr> port )
<cls> <noptr> lme pid filter ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> isc reset awb ctrls ( <ptr> isc )
<cls> <noptr> z l dump regs ( <ptr> fe )
<cls> <noptr> saa enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> load fwd irect ( <ptr> fn <dot> <ptr> mem <dot> <ptr> it v <dot> <noptr> size )
<cls> <noptr> em xx register extension ( <ptr> ops )
<cls> <noptr> sz push half space ( <ptr> sz <dot> <noptr> value )
<cls> <noptr> simple get r f strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> ves x set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> omap isp video return buffers ( <ptr> video <dot> <noptr> state )
<cls> <noptr> sd complete frame ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> gap show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> scm set timing register for vdd ( <ptr> state )
<cls> <noptr> r tls drs tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> saa cmd send ( <ptr> dev <dot> <noptr> id <dot> <noptr> command <dot> <noptr> control selector <dot> <noptr> size <dot> <ptr> buf )
<cls> <noptr> m tt driver init ( )
<cls> <noptr> vivid vb igen raw ( <ptr> vb i <dot> <ptr> vb i fmt <dot> <ptr> buf )
<cls> <noptr> saa x write regs ( <ptr> dev <dot> <ptr> vals <dot> <noptr> start <dot> <noptr> n )
<cls> <noptr> vps m px set aud mode ( <ptr> sd <dot> <noptr> aud mode )
<cls> <noptr> alter aci start feed ( <ptr> feed )
<cls> <noptr> tcs e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> mt init fe ( <ptr> fe )
<cls> <noptr> c x read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> fim c capture hw init ( <ptr> fim c )
<cls> <noptr> ddb input start ( <ptr> input )
<cls> <noptr> d ibm get front end ( <ptr> fe <dot> <ptr> fep )
<cls> <noptr> exy nos jpeg set sys int enable ( <ptr> base <dot> <noptr> value )
<cls> <noptr> r card r ifs fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v l m m try schedule ( <ptr> m mctx )
<cls> <noptr> ov write reg list ( <ptr> ov <dot> <ptr> r list )
<cls> <noptr> mtv get format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> saa encoder pause port ( <ptr> port )
<cls> <noptr> stv x get lock tm g ( <ptr> state )
<cls> <noptr> dvb dummy fe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> coda finish encode ( <ptr> ctx )
<cls> <noptr> ml vic driver init ( )
<cls> <noptr> c xdr gpio set ( <ptr> chip <dot> <noptr> nr <dot> <noptr> val )
<cls> <noptr> ddb input stop all ( <ptr> input )
<cls> <noptr> stv cab standby ( <ptr> fe <dot> <noptr> standby on )
<cls> <noptr> cxx xir init ( <ptr> dev )
<cls> <noptr> hardware init port ( )
<cls> <noptr> venus iface cmd q write ( <ptr> h dev <dot> <ptr> pkt )
<cls> <noptr> m tt power on ( <ptr> priv )
<cls> <noptr> m x f mdm e tuner attach ( <ptr> adap )
<cls> <noptr> preview params unlock ( <ptr> prev <dot> <noptr> update <dot> <noptr> shadow )
<cls> <noptr> stb d vbs get dmd status ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> adb setrgb quant ization mode ( <ptr> sd <dot> <ptr> ctrl )
<cls> <noptr> sp cec mask tx interrupts ( <ptr> cec )
<cls> <noptr> set pls ( <ptr> state <dot> <noptr> pls code )
<cls> <noptr> sp mfc set enc params ( <ptr> ctx )
<cls> <noptr> opera front end attach ( <ptr> d )
<cls> <ptr> find std name ( <ptr> arr ptr <dot> <noptr> arrsize <dot> <ptr> buf ptr <dot> <noptr> buf size )
<cls> <noptr> ov x set brightness ( <ptr> ov x <dot> <noptr> val )
<cls> <noptr> c cdc print status ( <ptr> c cdc )
<cls> <noptr> it x sleep ( <ptr> fe )
<cls> <noptr> uvc ioctl query menu ( <ptr> file <dot> <ptr> f h <dot> <ptr> q m )
<cls> <noptr> is px clk set rate ( <ptr> hw <dot> <noptr> rate <dot> <noptr> parent rate )
<cls> <noptr> b tread ( <ptr> decoder <dot> <noptr> reg )
<cls> <noptr> c x audio pci driver init ( )
<cls> <noptr> usb tv enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> irr cmm raw encoder ( <dptr> ev <dot> <noptr> max <dot> <noptr> n <dot> <noptr> data )
<cls> <noptr> mtm reg mask ( <ptr> client <dot> <noptr> reg <dot> <noptr> data <dot> <noptr> mask )
<cls> <noptr> rtl xx u read config ( <ptr> d )
<cls> <noptr> x vip pipeline validate ( <ptr> pipe <dot> <ptr> start )
<cls> <noptr> ene setup default settings ( <ptr> dev )
<cls> <noptr> et size ( <ptr> gsp ca dev <dot> <noptr> code <dot> <noptr> x mult <dot> <noptr> y mult )
<cls> <noptr> d ibus bic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> dmc cdc driver init ( )
<cls> <noptr> tc init interrupts ( <ptr> sd )
<cls> <noptr> pvr encoder adjust ( <ptr> h dw )
<cls> <noptr> dvb dmx sw filter section packet ( <ptr> feed <dot> <ptr> buf )
<cls> <noptr> csi phy settle cnt calc ( <noptr> pixel clock <dot> <noptr> bpp <dot> <noptr> num lanes <dot> <noptr> timer clk rate )
<cls> <ptr> check default trans time ( )
<cls> <noptr> v l m m ioctl stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> sp mfc deinit hw ( <ptr> dev )
<cls> <noptr> saa vb i pause port ( <ptr> port )
<cls> <noptr> vp fes fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> au stream interrupt ( <ptr> dev )
<cls> <noptr> pvr sysfs internal check ( <ptr> chp )
<cls> <noptr> adv status to v l ( <noptr> status )
<cls> <noptr> read cam control x o ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> dcm i enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> ov x configure gpio sp data ( <ptr> ov x <dot> <ptr> p data )
<cls> <noptr> mrs sleep ( <ptr> fe )
<cls> <noptr> frame alignment ( <noptr> fmt )
<cls> <noptr> ensor ( <ptr> gsp ca dev )
<cls> <noptr> iv tv g fmt vid out overlay ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> isp sub dev try format ( <ptr> isp <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> l m init controls ( <ptr> flash )
<cls> <noptr> g d start ( <ptr> d )
<cls> <ptr> h va find encoder ( <ptr> ctx <dot> <noptr> pixel format <dot> <noptr> stream format )
<cls> <noptr> v pbe display enum output ( <ptr> file <dot> <ptr> priv <dot> <ptr> output )
<cls> <noptr> qt read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> c xxx init audio i soc ( <ptr> dev )
<cls> <noptr> cxa vs clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> stk sensor write reg vals ( <ptr> dev <dot> <ptr> rv )
<cls> <noptr> vs pdu maps g ( <ptr> dev <dot> <ptr> sgt )
<cls> <noptr> r vin enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> px a camera dma irq ( <ptr> pc dev <dot> <noptr> act dma )
<cls> <ptr> check dsp debug ( )
<cls> <noptr> m tt gain value ( <ptr> gain )
<cls> <noptr> vp dma set bgcolor ( <ptr> vp dma <dot> <ptr> fmt <dot> <noptr> color )
<cls> <noptr> mds select ( <ptr> mux c <dot> <noptr> chan )
<cls> <noptr> em xx audio analog set ( <ptr> dev )
<cls> <noptr> sp jpeg h tbl ac ( <ptr> regs <dot> <noptr> t )
<cls> <noptr> x tune ( <ptr> tn r dmd <dot> <noptr> sys <dot> <noptr> freq khz <dot> <noptr> bandwidth <dot> <noptr> isc able <dot> <noptr> shift frequency khz )
<cls> <noptr> hdmi write clr set ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> set color ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> budget patch dis eq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> h fi sys ping done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> saa g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> toks ( <ptr> sd )
<cls> <noptr> pwc snapshot button ( <ptr> pdev <dot> <noptr> down )
<cls> <noptr> tx remove byte ( <ptr> pin )
<cls> <noptr> c xic new ir ( <ptr> c x <dot> <ptr> adap <dot> <noptr> hw <dot> <ptr> type <dot> <noptr> addr )
<cls> <noptr> ad resume ( <ptr> dev )
<cls> <noptr> omap v out vbs top streaming ( <ptr> v q )
<cls> <noptr> load default r x configur ation ( <ptr> f m dev )
<cls> <noptr> t mir fini ( <ptr> dev )
<cls> <noptr> stk sensor wakeup ( <ptr> dev )
<cls> <noptr> cal irq ( <noptr> irq cal <dot> <ptr> data )
<cls> <noptr> coda driver init ( )
<cls> <ptr> v fe buf get pending ( <ptr> output )
<cls> <noptr> six radio freq is inside of the b and ( <noptr> freq <dot> <noptr> b and )
<cls> <noptr> sms ir event ( <ptr> core dev <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> init r cmap vegas x ( )
<cls> <noptr> max set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> flash copy from ( <ptr> map <dot> <ptr> to <dot> <noptr> from <dot> <noptr> len )
<cls> <noptr> tw handle frame ( <ptr> frame )
<cls> <noptr> mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> any see c is lot shutdown ( <ptr> c i <dot> <noptr> slot )
<cls> <noptr> flex cop fe request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> fdp device process ( <ptr> ctx )
<cls> <noptr> bps nr show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> via cam driver init ( )
<cls> <noptr> stk ppid filter ( <ptr> adapter <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> ov set ctrl test pattern ( <ptr> sensor <dot> <noptr> value )
<cls> <noptr> cec monitor pin cnt dec ( <ptr> adap )
<cls> <noptr> adb rd ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> m xl x sf demo d get rs lock status ( <ptr> state <dot> <ptr> rs lock )
<cls> <noptr> fim c runtime suspend ( <ptr> dev )
<cls> <noptr> flex cop pid feed control ( <ptr> fc <dot> <ptr> dvb dmx feed <dot> <noptr> onoff )
<cls> <noptr> alter aci stop feed ( <ptr> feed )
<cls> <noptr> r ga probe ( <ptr> pdev )
<cls> <noptr> snd solo capture volume get ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> output work ( <ptr> work )
<cls> <noptr> check format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> z r xx probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> c xxx set gpio bit ( <ptr> dev <dot> <noptr> gpio bit <dot> <noptr> gpio val )
<cls> <noptr> stk usb driver init ( )
<cls> <noptr> flite hw set output dma ( <ptr> dev <dot> <ptr> f <dot> <noptr> enable )
<cls> <noptr> m xls fic stop ( <ptr> state )
<cls> <noptr> d wx led ctrl ( <ptr> fe <dot> <noptr> off on )
<cls> <noptr> port has stv aa ( <ptr> port <dot> <ptr> id )
<cls> <noptr> tw video input init ( <ptr> input <dot> <noptr> video nr )
<cls> <noptr> mtk mdp set frame size ( <ptr> frame <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> venus sys error handler ( <ptr> work )
<cls> <noptr> ds read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> media write ( <ptr> filp <dot> <ptr> buf <dot> <noptr> sz <dot> <ptr> off )
<cls> <noptr> stk v lvm open ( <ptr> vma )
<cls> <noptr> any see ic func ( <ptr> adapter )
<cls> <noptr> c duty tx s duty cycle ( <ptr> c <dot> <noptr> duty cycle )
<cls> <noptr> z l write ( <ptr> fe <dot> <noptr> i buf <dot> <noptr> ilen )
<cls> <noptr> bt tv risc planar ( <ptr> b tv <dot> <ptr> risc <dot> <ptr> sg list <dot> <noptr> yoffset <dot> <noptr> y bpl <dot> <noptr> y padding <dot> <noptr> y lines <dot> <noptr> u offset <dot> <noptr> v offset <dot> <noptr> h shift <dot> <noptr> v shift <dot> <noptr> c padding )
<cls> <noptr> c xstream configure m dls ( <ptr> s )
<cls> <noptr> c x resume ( <ptr> pci dev )
<cls> <noptr> tt usb ir suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> j l c stream start vga small ( <ptr> gsp ca dev )
<cls> <noptr> lg dta pre monitoring ( <ptr> state )
<cls> <noptr> init r cmap imon rsc ( )
<cls> <noptr> set balance ( <ptr> sd )
<cls> <noptr> vivid cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> init r cmap cec ( )
<cls> <noptr> l gdt x init ( <ptr> fe )
<cls> <noptr> dvb net ule new ts cell ( <ptr> h )
<cls> <noptr> mtk md presume ( <ptr> dev )
<cls> <noptr> tw x enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> init r cmap aver tv ( )
<cls> <noptr> register decoders ( <ptr> delta )
<cls> <noptr> cal start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> process frame data em xx ( <ptr> dev <dot> <ptr> data pkt <dot> <noptr> data len )
<cls> <noptr> enet x irq sim ( <ptr> t )
<cls> <noptr> ov power on ( <ptr> sd )
<cls> <noptr> adv x csi set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> setup sensor notification ( <ptr> f md <dot> <ptr> sensor <dot> <ptr> fim csd )
<cls> <noptr> or read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> delta complete eos ( <ptr> ctx <dot> <ptr> frame )
<cls> <noptr> c x usb ddm b drain video ( <ptr> d )
<cls> <noptr> pvr encoder v cmd ( <ptr> h dw <dot> <noptr> cmd <dot> <noptr> args )
<cls> <noptr> sms core gpio configure ( <ptr> core dev <dot> <noptr> pin num <dot> <ptr> p gpio config )
<cls> <noptr> c x dvb set front end ( <ptr> fe )
<cls> <noptr> dst set front end ( <ptr> fe )
<cls> <noptr> tc set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> v sph sit write ( <ptr> h sit <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> dib change protocol ( <ptr> rc <dot> <ptr> rc proto )
<cls> <noptr> pb set exposure ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> or reset ( <ptr> fe )
<cls> <noptr> c x api call ( <ptr> c x <dot> <noptr> cmd <dot> <noptr> args <dot> <noptr> data )
<cls> <noptr> coda bitstream flush ( <ptr> ctx )
<cls> <noptr> sh vou g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> exy nos jpeg try down scale ( <ptr> ctx <dot> <ptr> r )
<cls> <noptr> v lg crop ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> skb af parse gpio s ( <ptr> gpio s <dot> <ptr> dev )
<cls> <noptr> b disp g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> debug if c match keyword ( <ptr> buf <dot> <noptr> count <dot> <ptr> keyword )
<cls> <noptr> as x cmd stop streaming ( <ptr> adap )
<cls> <noptr> cit start ibm net cam pro ( <ptr> gsp ca dev )
<cls> <noptr> fim c capture set format ( <ptr> fim c <dot> <ptr> f )
<cls> <noptr> v few ord per line ( <noptr> format <dot> <noptr> pixel per line )
<cls> <noptr> sd init a ( <ptr> gsp ca dev )
<cls> <noptr> ov x set slave ids ( <ptr> sd <dot> <noptr> slave )
<cls> <noptr> ctrl hsm get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> air spy set mixer gain ( <ptr> s )
<cls> <noptr> x sleep ( <ptr> tn r dmd )
<cls> <noptr> vb ops venc buf queue ( <ptr> vb )
<cls> <noptr> vivid radio write ( <ptr> file <dot> <ptr> buf <dot> <noptr> size <dot> <ptr> offset )
<cls> <noptr> ts read signal strength ( <ptr> fe <dot> <ptr> signal strength )
<cls> <noptr> cec error inj write ( <ptr> file <dot> <ptr> u buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> sun ics i sub dev set fmt ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> snd c x pcm pointer ( <ptr> sub stream )
<cls> <noptr> pvr boot ( <ptr> b tv )
<cls> <noptr> ctrl crop l max get ( <ptr> cptr <dot> <ptr> left )
<cls> <noptr> tvp reader r ( <ptr> sd <dot> <noptr> reg <dot> <ptr> dst <dot> <ptr> err )
<cls> <noptr> rv ins std ( <ptr> file <dot> <ptr> priv <dot> <noptr> a )
<cls> <noptr> dcm i set sensor format ( <ptr> dcm i <dot> <ptr> pix )
<cls> <ptr> scm find frame size ( <ptr> fmt <dot> <noptr> idx )
<cls> <noptr> cec gpio read h pd ( <ptr> adap )
<cls> <noptr> solo enum frame sizes ( <ptr> file <dot> <ptr> priv <dot> <ptr> f size )
<cls> <noptr> coda device run ( <ptr> m m priv )
<cls> <noptr> gsc wait reset ( <ptr> dev )
<cls> <noptr> ccp try format ( <ptr> ccp <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <noptr> stv set bits ( <ptr> reg <dot> <noptr> label <dot> <noptr> val )
<cls> <noptr> bcm writer am ( <ptr> st <dot> <noptr> addr <dot> <ptr> b <dot> <noptr> len )
<cls> <noptr> m x init ep ( <ptr> int f )
<cls> <noptr> t wxs ctrl ( <ptr> ctrl )
<cls> <noptr> fcs frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> mtm set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> is cs ctrl ( <ptr> ctrl )
<cls> <noptr> vsp sub dev enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code <dot> <ptr> codes <dot> <noptr> n codes )
<cls> <noptr> f m v l vid ioc g freq ( <ptr> file <dot> <ptr> priv <dot> <ptr> freq )
<cls> <noptr> video open ( <ptr> dev <dot> <ptr> file )
<cls> <noptr> ctrl clear dirty hue ( <ptr> cptr )
<cls> <noptr> vid io cdv timings cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> t dax init ( <ptr> fe )
<cls> <ptr> check non interlaced ( )
<cls> <noptr> ks init ( <ptr> sd )
<cls> <noptr> c x vb timeout ( <ptr> t )
<cls> <noptr> v pe try fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> fim cmd get clocks ( <ptr> f md )
<cls> <noptr> write reg vals ( <ptr> sd <dot> <ptr> reg vals <dot> <noptr> n )
<cls> <noptr> m xls fic send data ( <ptr> state <dot> <noptr> index <dot> <ptr> w data )
<cls> <noptr> show val custom ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sp mfc ctx ready ( <ptr> ctx )
<cls> <noptr> pvr ctl timeout ( <ptr> t )
<cls> <noptr> t dax probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> c x usb medi ong tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> tuner )
<cls> <noptr> dib set clock ( <ptr> d <dot> <noptr> en pll <dot> <noptr> pll src <dot> <noptr> pll range <dot> <noptr> clock gpio <dot> <noptr> pll pre div <dot> <noptr> pll loop div <dot> <noptr> free div <dot> <noptr> ds u scaler )
<cls> <noptr> saa api configure port mpeg ps ( <ptr> dev <dot> <ptr> port <dot> <ptr> fmt )
<cls> <noptr> az rc query ( <ptr> d <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> sp mfc sys init cmd v ( <ptr> dev )
<cls> <noptr> fd tvc a get caps ( <ptr> arg )
<cls> <noptr> dvb dmx dev filter stop ( <ptr> dmx dev filter )
<cls> <noptr> d ibm c auto search start ( <ptr> demo d )
<cls> <noptr> vim c cap buffer prepare ( <ptr> vb )
<cls> <noptr> spc ecu n mask r x interrupts ( <ptr> cec )
<cls> <noptr> mcc ic resume ( <ptr> cam )
<cls> <noptr> sic write reg data ( <ptr> state <dot> <noptr> ic addr <dot> <ptr> rd <dot> <noptr> size )
<cls> <noptr> add packet ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> aur c read ( <ptr> ir <dot> <noptr> reg <dot> <noptr> val <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> c x dt nr dmd dvb t mon bb header ( <ptr> tn r dmd <dot> <noptr> type <dot> <ptr> bb header )
<cls> <noptr> fim c cap stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> tuner detach ( <ptr> fe )
<cls> <noptr> scm o if open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> ic adapter init ( <ptr> ic adap <dot> <ptr> algo <dot> <ptr> name <dot> <ptr> mst )
<cls> <noptr> v ls output ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> q mdc set config ( <ptr> fe <dot> <ptr> priv cfg )
<cls> <noptr> az tech gr x sub c hans ( <ptr> isa )
<cls> <noptr> cit init model ( <ptr> gsp ca dev )
<cls> <noptr> bt contrast ( <ptr> b tv <dot> <noptr> cont )
<cls> <noptr> v dec enum fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> fri io power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> c cdc get line length ( )
<cls> <noptr> hor usa set params ( <ptr> fe )
<cls> <noptr> q com venus driver init ( )
<cls> <noptr> sdp write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> v l enum output ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> smi app setup flash stro be ( <ptr> sensor )
<cls> <noptr> vim c deb adjust sink fmt ( <ptr> fmt )
<cls> <noptr> cafe smbus setup ( <ptr> cam )
<cls> <noptr> ov get default format ( <ptr> format )
<cls> <noptr> read flags ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> flags )
<cls> <noptr> tw x snd pcm init ( <ptr> dev )
<cls> <ptr> c x get driver ( <ptr> dev <dot> <noptr> b type )
<cls> <noptr> dib x write word ( <ptr> mst <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> budget patch set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> cpi as ctrl ( <ptr> ctrl )
<cls> <noptr> os d set ( <ptr> sd <dot> <noptr> mask <dot> <noptr> offset )
<cls> <noptr> vid ioc enum fmt meta out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> fd tvc aio poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> media dev node register ( <ptr> m dev <dot> <ptr> dev node <dot> <ptr> owner )
<cls> <noptr> csi if enable ( <ptr> isp <dot> <ptr> csi <dot> <noptr> enable )
<cls> <noptr> venc start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> vsp video setup pipeline ( <ptr> pipe )
<cls> <noptr> em press fini ( <ptr> dev )
<cls> <ptr> br x get compose ( <ptr> br x <dot> <ptr> cfg <dot> <noptr> pad )
<cls> <noptr> sh set freq offset ( <ptr> state <dot> <noptr> freq offset )
<cls> <noptr> dib x master ic write ( <ptr> mst <dot> <ptr> msg <dot> <noptr> stop )
<cls> <noptr> solo eeprom read ( <ptr> solo dev <dot> <noptr> loc )
<cls> <noptr> tm init dev ( <ptr> dev )
<cls> <noptr> m basic read reg ( <ptr> state <dot> <noptr> ic addr <dot> <noptr> reg )
<cls> <noptr> si read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> lg set output interface ( <ptr> state )
<cls> <noptr> expo adjust ( <ptr> gsp ca dev <dot> <noptr> expo )
<cls> <noptr> media entity setup link notify ( <ptr> link <dot> <noptr> flags )
<cls> <noptr> get csi input format ( <ptr> s dev <dot> <noptr> mbus code <dot> <noptr> pix format )
<cls> <noptr> c x irt xs parameters ( <ptr> sd <dot> <ptr> p )
<cls> <noptr> ctrl isdirty crop h ( <ptr> cptr )
<cls> <noptr> c xic init ( <ptr> core <dot> <ptr> pci )
<cls> <noptr> r card rif stop ( <ptr> sdr )
<cls> <noptr> venus dump packet ( <ptr> h dev <dot> <ptr> packet )
<cls> <noptr> media device register entity notify ( <ptr> m dev <dot> <ptr> nptr )
<cls> <noptr> v pfe calc format size ( <ptr> v pfe <dot> <ptr> fmt <dot> <ptr> f )
<cls> <noptr> change protocol ( <ptr> rc dev <dot> <ptr> rc type )
<cls> <noptr> mtk jpeg dec soft reset ( <ptr> base )
<cls> <noptr> c sla probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> simple set params ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> get inf dev status ( <ptr> sd <dot> <ptr> dual flag <dot> <ptr> stereo flag )
<cls> <noptr> emic recv bytes ( <ptr> dev <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> configure transfer mode ( <ptr> cam <dot> <noptr> alt )
<cls> <noptr> adp of init ( <ptr> client <dot> <ptr> flash <dot> <ptr> node )
<cls> <noptr> f m r x get volume ( <ptr> f m dev <dot> <ptr> curr vol )
<cls> <noptr> f mrt eax get pins ( <ptr> tea )
<cls> <noptr> is dvb t ( <ptr> state )
<cls> <noptr> venus sys set debug ( <ptr> h dev <dot> <noptr> debug )
<cls> <noptr> tuner resume ( <ptr> dev )
<cls> <noptr> cobalt log status ( <ptr> file <dot> <ptr> priv f h )
<cls> <noptr> snd cobalt p cmp b prepare ( <ptr> sub stream )
<cls> <noptr> cam if prepare addr ( <ptr> vp <dot> <ptr> vb <dot> <ptr> p addr )
<cls> <noptr> gen mpeg hdr to package ( <ptr> go <dot> <ptr> code <dot> <noptr> space <dot> <ptr> frame len )
<cls> <noptr> vid ioc ven cs ctrl ( <ptr> ctrl )
<cls> <noptr> vid ioc try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check os d upper ( )
<cls> <noptr> t wxs std ( <ptr> file <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> af download firmware ( <ptr> udev <dot> <ptr> fw )
<cls> <noptr> roup ( <ptr> fe <dot> <noptr> control num <dot> <noptr> value <dot> <noptr> control group )
<cls> <noptr> vpx fe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> media device init ( <ptr> m dev )
<cls> <noptr> max load full f m nap ( <ptr> ctx )
<cls> <noptr> adv x afe fill format ( <ptr> afe <dot> <ptr> fmt )
<cls> <noptr> ce u try fmt ( <ptr> ce udev <dot> <ptr> v l fmt )
<cls> <noptr> sun ics i notifier init ( <ptr> csi )
<cls> <noptr> fdt v read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> dvb ca enc am ready irq ( <ptr> pub ca <dot> <noptr> slot )
<cls> <noptr> ske cg x set ahb address ( <ptr> sd )
<cls> <noptr> spc sis clear counters ( <ptr> state )
<cls> <noptr> c xxx set alt setting ( <ptr> dev <dot> <noptr> index <dot> <noptr> alt )
<cls> <noptr> em xx attach x c ( <noptr> addr <dot> <ptr> dev )
<cls> <noptr> c pia enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> fri io reset ( <ptr> d )
<cls> <noptr> pulse cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> c x usb medi on cf ref c start sch ( <ptr> dvb dev <dot> <ptr> bt <dot> <noptr> first field <dot> <noptr> buf )
<cls> <noptr> sp mfc wakeup ( <ptr> dev )
<cls> <noptr> m x mt front end attach vp ( <ptr> adap )
<cls> <noptr> pvr io read stop ( <ptr> cp )
<cls> <noptr> mn x read status ( <ptr> fe <dot> <ptr> status )
<cls> <ptr> check adjust ( )
<cls> <ptr> tvp x get p data ( <ptr> client )
<cls> <noptr> v l query ext ctrl ( <ptr> hdl <dot> <ptr> q c )
<cls> <noptr> adv pkt mem wr and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> clr mask <dot> <noptr> val mask )
<cls> <noptr> philip std ax tuner init ( <ptr> fe )
<cls> <ptr> check radio freq ( )
<cls> <noptr> nxt x setup front end parameters ( <ptr> fe )
<cls> <noptr> video ice num frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> siemens budget set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> venus helper vbs top streaming ( <ptr> q )
<cls> <noptr> cio sub dev open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> stv searchs rate fine ( <ptr> fe )
<cls> <noptr> max re calibrate adc ( <ptr> ctx )
<cls> <noptr> adv xaf es input ( <ptr> afe <dot> <noptr> input )
<cls> <noptr> pvr h dw execute tuner poll ( <ptr> h dw )
<cls> <noptr> c xdr sleep t ( <ptr> fe )
<cls> <noptr> philip std ax request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> td a write ( <ptr> state <dot> <ptr> buf )
<cls> <noptr> fc set params ( <ptr> fe )
<cls> <noptr> dib preset stats ( <ptr> demo d )
<cls> <noptr> dvb cae nio write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> af usb driver init ( )
<cls> <noptr> c xdr read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> adv delayed work enable hot plug ( <ptr> work )
<cls> <noptr> scale clocks ( <ptr> inst )
<cls> <noptr> v l clk get rate ( <ptr> clk )
<cls> <noptr> m clk enable ( <ptr> hw )
<cls> <noptr> stb init ( <ptr> fe )
<cls> <noptr> ene isr ( <noptr> irq <dot> <ptr> data )
<cls> <ptr> smi app get hw config ( <ptr> dev )
<cls> <noptr> vs g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> tc irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> scm set frame size ( <ptr> state )
<cls> <noptr> hel ene enter power save ( <ptr> priv )
<cls> <ptr> check dma reset workaround ( )
<cls> <noptr> cio suspend ( <ptr> dev )
<cls> <noptr> vp fec cdc seth wif params ( <ptr> c cdc <dot> <ptr> params )
<cls> <noptr> f m v l vid ioc g mod ulator ( <ptr> file <dot> <ptr> priv <dot> <ptr> mod )
<cls> <noptr> td axb w ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> tv audio probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> r vin m c try format ( <ptr> vin <dot> <ptr> pix )
<cls> <noptr> r f val set ( <ptr> state <dot> <noptr> f <dot> <noptr> s mrt <dot> <noptr> r )
<cls> <ptr> cmd to str ( <noptr> cmd )
<cls> <noptr> uvc print terms ( <ptr> terms <dot> <noptr> dir <dot> <ptr> buffer )
<cls> <noptr> call get e did ( <ptr> sd <dot> <ptr> e did )
<cls> <ptr> uvc find endpoint ( <ptr> alt s <dot> <noptr> ep addr )
<cls> <noptr> delta vba u prepare ( <ptr> vb )
<cls> <ptr> get queued job ( <ptr> fdp )
<cls> <ptr> isp stat buf get ( <ptr> stat <dot> <ptr> data )
<cls> <noptr> ov set pixel clock ( <ptr> ov )
<cls> <noptr> img i rend repeat ( <ptr> priv )
<cls> <noptr> c cdc enable ( <noptr> en )
<cls> <noptr> init r cmap k world plus tv analog ( )
<cls> <noptr> h aaf setup regs ( <ptr> af <dot> <ptr> priv )
<cls> <noptr> call set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <ptr> find format by code ( <ptr> v pfe <dot> <noptr> code )
<cls> <noptr> m tps ctrl ( <ptr> ctrl )
<cls> <noptr> dib xic gated gpio xfer ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> csi try format ( <ptr> csi <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <noptr> cec cec notify ( <ptr> adap <dot> <noptr> pa )
<cls> <noptr> v pfe open ( <ptr> file )
<cls> <noptr> init r cmap ads tech dvb t pci ( )
<cls> <noptr> img ir set filter ( <ptr> dev <dot> <noptr> type <dot> <ptr> sc filter )
<cls> <noptr> pvr io read read ( <ptr> cp <dot> <ptr> buf <dot> <noptr> cnt )
<cls> <noptr> stv set voltage ( <ptr> fe <dot> <noptr> volt )
<cls> <noptr> any see get hw info ( <ptr> d <dot> <ptr> id )
<cls> <noptr> sp mfc buf prepare ( <ptr> vb )
<cls> <noptr> digit vic func ( <ptr> adapter )
<cls> <noptr> stv x activate mod cod single ( <ptr> state )
<cls> <noptr> img i rend timer ( <ptr> t )
<cls> <noptr> c pia usb resume ( <ptr> int f )
<cls> <noptr> it put tx byte ( <ptr> dev <dot> <noptr> value )
<cls> <noptr> c x d update pid filter ( <ptr> dvb spi <dot> <ptr> cfg <dot> <noptr> is all pid filter )
<cls> <noptr> ov write array ( <ptr> sd <dot> <ptr> regs <dot> <noptr> array size )
<cls> <noptr> pwm irt x ( <ptr> dev <dot> <ptr> tx buf <dot> <noptr> count )
<cls> <noptr> omap vid apply changes ( <ptr> v out )
<cls> <noptr> saa v v init ( <ptr> dev <dot> <ptr> ext v v )
<cls> <noptr> stream enc dma append ( <ptr> s <dot> <noptr> data )
<cls> <noptr> spread ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> tuner i clock ( <ptr> fe <dot> <noptr> lock )
<cls> <noptr> cec adap g connector info ( <ptr> adap <dot> <ptr> p arg )
<cls> <noptr> find next packet ( <ptr> buf <dot> <noptr> pos <dot> <noptr> count <dot> <noptr> pkt size )
<cls> <noptr> read data ( <ptr> ca <dot> <noptr> slot <dot> <ptr> e buf <dot> <noptr> e count )
<cls> <noptr> c xs video routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> c x der read status tt ( <ptr> priv <dot> <ptr> sync <dot> <ptr> ts lock <dot> <ptr> unlock )
<cls> <noptr> snd c x wm volume put ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> front end init ( <ptr> card <dot> <noptr> type )
<cls> <noptr> bri stol front end attach ( <ptr> adap )
<cls> <noptr> vsp video pipeline setup partitions ( <ptr> pipe )
<cls> <noptr> nv t resume ( <ptr> pdev )
<cls> <noptr> pt suspend ( <ptr> dev )
<cls> <noptr> hgt hue are ass ctrl ( <ptr> ctrl )
<cls> <noptr> fim ch w set output path ( <ptr> ctx )
<cls> <ptr> check enc yuv buf s ( )
<cls> <noptr> snd cobalt pcm ioctl ( <ptr> sub stream <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> am radio get stat ( <ptr> radio <dot> <ptr> is stereo <dot> <ptr> signal )
<cls> <noptr> pvr h dw status poll ( <ptr> h dw )
<cls> <noptr> m xl x sf soft reset ( <ptr> state )
<cls> <noptr> set ( <ptr> state <dot> <noptr> c ren <dot> <noptr> af cen )
<cls> <noptr> mds read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> is if enum pix ( <ptr> pix <dot> <noptr> i )
<cls> <noptr> cobalt irq log status ( <ptr> cobalt )
<cls> <noptr> as dvb dmx start feed ( <ptr> dvb dmx feed )
<cls> <noptr> preview config chroma suppression ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> v l print jpeg compression ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> dib read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> read reg fp ( <ptr> client <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> show device bridge ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> is hdmi ( <ptr> sd )
<cls> <noptr> stv ter standby ( <ptr> fe <dot> <noptr> standby on )
<cls> <noptr> m tread status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> c sit x reset ( <ptr> c sit x )
<cls> <noptr> sh get symbol rate ( <ptr> state )
<cls> <noptr> ctrl set volume ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> dst read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> skb af hw validate cfg ( <ptr> state )
<cls> <noptr> mt get symbol rate ( <ptr> state <dot> <ptr> sr )
<cls> <noptr> j l c stream start v gal g ( <ptr> gsp ca dev )
<cls> <noptr> usb vision request intra ( <ptr> usb vision )
<cls> <noptr> pt set tuner power ( <ptr> pt <dot> <noptr> tuner on <dot> <noptr> am pon )
<cls> <noptr> store associate remote ( <ptr> d <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> ks g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> mtk vcodec enc queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> pulse interrupt ( <ptr> ser io <dot> <noptr> data <dot> <noptr> flags )
<cls> <noptr> au init ( )
<cls> <noptr> z d front end attach ( <ptr> adap )
<cls> <noptr> c sid reset ( <ptr> c sid )
<cls> <noptr> ctrl set cfg mpeg output ( <ptr> demo d <dot> <ptr> cfg data )
<cls> <ptr> check pcm debug ( )
<cls> <noptr> pico lote train it ( <ptr> b tv )
<cls> <noptr> isp video capture buffer prepare ( <ptr> vb )
<cls> <noptr> msi ctrl msg ( <ptr> dev <dot> <noptr> cmd <dot> <noptr> data )
<cls> <noptr> adv xx probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> d vba play ( <ptr> av <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> non block <dot> <noptr> type )
<cls> <ptr> v l async find match ( <ptr> notifier <dot> <ptr> sd )
<cls> <noptr> bs ( <ptr> av <dot> <noptr> window nr <dot> <noptr> x <dot> <noptr> y )
<cls> <noptr> vivid meta caps ctrl ( <ptr> ctrl )
<cls> <noptr> scm o if enum frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <ptr> vb plane cookie ( <ptr> vb <dot> <noptr> plane no )
<cls> <noptr> iv tv process eeprom ( <ptr> it v )
<cls> <noptr> spc sis runtime suspend ( <ptr> dev )
<cls> <noptr> it map ( <ptr> av )
<cls> <noptr> tea ic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> calculate v scale registers ( <ptr> dev <dot> <noptr> field <dot> <noptr> iny <dot> <noptr> out y <dot> <ptr> hps v scale <dot> <ptr> hp svg ain )
<cls> <noptr> vid ioc soutput ( <ptr> file <dot> <ptr> priv f h <dot> <noptr> i )
<cls> <noptr> ir nec scan code to raw ( <noptr> protocol <dot> <noptr> scan code )
<cls> <noptr> cxa v write ( <ptr> c x <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> tc log status ( <ptr> sd )
<cls> <noptr> adv x identify chip ( <ptr> state )
<cls> <noptr> asf e read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> isp if set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> so los jpeg q p ( <ptr> solo dev <dot> <noptr> ch <dot> <noptr> q p )
<cls> <noptr> ovf xic w ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> dib firmware post pll init ( <ptr> fe )
<cls> <noptr> th sgd v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> exy nos jpeg get int status ( <ptr> base )
<cls> <noptr> video try fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> l gs gl start demo d ( <ptr> state )
<cls> <noptr> c xir probe ( <ptr> sd )
<cls> <noptr> command pause ( <ptr> gsp ca dev )
<cls> <noptr> ctrl ( <ptr> fc <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> sa ago send firmware ( <ptr> go <dot> <ptr> data <dot> <noptr> len )
<cls> <ptr> check disable v do a ( )
<cls> <noptr> c x dvb advise acquire ( <ptr> drv )
<cls> <noptr> m xl x sf get chip info ( <ptr> state )
<cls> <noptr> ir mce kbd process keyboard data ( <ptr> dev <dot> <noptr> scan code )
<cls> <noptr> mtk md ppm suspend ( <ptr> dev )
<cls> <noptr> gl init ( <ptr> d )
<cls> <noptr> mce usb dev resume ( <ptr> int f )
<cls> <noptr> h fi core resume ( <ptr> core <dot> <noptr> force )
<cls> <noptr> as x pid filter ( <ptr> dev <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> vp dma clear list stat ( <ptr> vp dma <dot> <noptr> irq num <dot> <noptr> list num )
<cls> <noptr> parse codecs ( <ptr> core <dot> <ptr> data )
<cls> <noptr> f m irq handle low rssi finish ( <ptr> f m dev )
<cls> <noptr> smi app propagate ( <ptr> sub dev <dot> <ptr> cfg <dot> <noptr> which <dot> <noptr> target )
<cls> <noptr> dib ctrl wr ( <ptr> d <dot> <ptr> tx <dot> <noptr> tx len )
<cls> <noptr> z r x xvid ioc g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v ls frequency ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> put v l window ( <ptr> p <dot> <ptr> p )
<cls> <noptr> z i log tx ( <ptr> rc dev <dot> <ptr> tx buf <dot> <noptr> count )
<cls> <noptr> radio isa query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> cam if hw set effect ( <ptr> cam if <dot> <noptr> effect <dot> <noptr> cr <dot> <noptr> cb )
<cls> <noptr> rc validate filter ( <ptr> dev <dot> <ptr> filter )
<cls> <noptr> uvc commit video ( <ptr> stream <dot> <ptr> probe )
<cls> <noptr> advo pch sel ( <ptr> state )
<cls> <noptr> sp mfc wait for done dev ( <ptr> dev <dot> <noptr> command )
<cls> <noptr> rv inse did ( <ptr> file <dot> <ptr> f h <dot> <ptr> e did )
<cls> <noptr> c iner gy tfe read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dvb v set delivery system ( <ptr> fe <dot> <noptr> desired system )
<cls> <noptr> c xxx enable ic port ( <ptr> dev <dot> <noptr> is port )
<cls> <noptr> mba read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dvb register adapters ( <ptr> dev )
<cls> <noptr> adv d v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> cec fill msg report features ( <ptr> adap <dot> <ptr> msg <dot> <noptr> laid x )
<cls> <noptr> vp fec cdc get line length ( <ptr> c cdc )
<cls> <noptr> sms dvb print is db stat sex ( <ptr> debug data <dot> <ptr> p )
<cls> <noptr> swp info get ( <ptr> state <dot> <noptr> fos c start <dot> <noptr> s mrt <dot> <noptr> v <dot> <noptr> r <dot> <noptr> swp ofs <dot> <ptr> fos c <dot> <ptr> afc ex freq <dot> <ptr> afc exl <dot> <ptr> afc exh )
<cls> <noptr> um tmt demo d init ( <ptr> fe )
<cls> <noptr> dvb demux open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> video ics input ( <ptr> file <dot> <ptr> f h <dot> <noptr> inp )
<cls> <noptr> venc enum fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> flex cop usb driver init ( )
<cls> <noptr> omap v out default crop ( <ptr> pix <dot> <ptr> f buf <dot> <ptr> crop )
<cls> <noptr> a fic func ( <ptr> adapter )
<cls> <noptr> af download firmware old ( <ptr> d <dot> <ptr> fw )
<cls> <noptr> via sensor power setup ( <ptr> cam )
<cls> <noptr> dcm i buffer done ( <ptr> dcm i <dot> <ptr> buf <dot> <noptr> bytes used <dot> <noptr> err )
<cls> <noptr> sdd q callback ( <ptr> gsp ca dev )
<cls> <noptr> spc sis enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> send space ( <noptr> len )
<cls> <noptr> venus session load res ( <ptr> inst )
<cls> <noptr> pvr ctrl set mask value ( <ptr> cptr <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> dib p identify ( <ptr> st )
<cls> <noptr> c x flush queues ( <ptr> s )
<cls> <noptr> b thu e ( <ptr> b tv <dot> <noptr> hue )
<cls> <noptr> media ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg <dot> <ptr> ptr <dot> <noptr> int <dot> <ptr> ptr )
<cls> <noptr> cxa v initialize ( <ptr> sd )
<cls> <noptr> dvb usb v adapter stream init ( <ptr> adap )
<cls> <noptr> ska a set color f x ( <ptr> ska a <dot> <noptr> val )
<cls> <noptr> a fic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> control r xs carrier window ( <ptr> c <dot> <noptr> carrier <dot> <ptr> carrier range low <dot> <ptr> carrier range high )
<cls> <noptr> z l sleep ( <ptr> fe )
<cls> <noptr> mtk venc unlock ( <ptr> ctx )
<cls> <noptr> c xdr gpio direction output ( <ptr> chip <dot> <noptr> nr <dot> <noptr> val )
<cls> <ptr> check standard ( )
<cls> <noptr> td a set standby mode ( <ptr> fe <dot> <noptr> sm <dot> <noptr> sml t <dot> <noptr> sm xt )
<cls> <noptr> state eval pipeline config ( <ptr> h dw )
<cls> <noptr> m xls fic bit bang recv byte ( <ptr> state <dot> <ptr> pbyte )
<cls> <noptr> hel ene driver init ( )
<cls> <noptr> ska power on ( <ptr> sensor )
<cls> <noptr> usb tv stop ( <ptr> usb tv )
<cls> <noptr> sp jpeg out form raw ( <ptr> regs <dot> <noptr> format )
<cls> <noptr> iv tv get scl old ( <ptr> data )
<cls> <noptr> fim ch w set pre scaler ( <ptr> ctx )
<cls> <noptr> t daa setup ( <ptr> chip )
<cls> <noptr> saa x reset ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> mode init ov sensor regs ( <ptr> sd )
<cls> <noptr> dump reg range ( <ptr> sd <dot> <ptr> s <dot> <noptr> init <dot> <noptr> end <dot> <noptr> max line )
<cls> <noptr> uds partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> partition <dot> <noptr> partition idx <dot> <ptr> window )
<cls> <noptr> msp probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> s rpc pwr ctrl ( <ptr> sd <dot> <noptr> reset <dot> <noptr> sleep )
<cls> <noptr> to pixels per line ( <noptr> hts <dot> <noptr> f index )
<cls> <noptr> sh set gpio ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> tt usb ir set led ( <ptr> tt )
<cls> <noptr> sun i video frame done ( <ptr> video )
<cls> <noptr> ir j vc encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> mtk mdp check scaler ratio ( <ptr> var <dot> <noptr> src w <dot> <noptr> srch <dot> <noptr> dst w <dot> <noptr> d sth <dot> <noptr> rot )
<cls> <noptr> venus helper vb buf prepare ( <ptr> vb )
<cls> <noptr> v l query menu ( <ptr> hdl <dot> <ptr> q m )
<cls> <noptr> ska set brightness ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> device process ( <ptr> ctx <dot> <ptr> inv b <dot> <ptr> out vb )
<cls> <noptr> venus session parse seq hdr ( <ptr> inst <dot> <noptr> seq hdr <dot> <noptr> seq hdr len )
<cls> <noptr> usb exchange ( <ptr> gsp ca dev <dot> <noptr> data )
<cls> <ptr> to sh vou buffer ( <ptr> vb )
<cls> <noptr> v l async notifier try all sub devs ( <ptr> notifier )
<cls> <noptr> m i init at startup ( <ptr> gsp ca dev )
<cls> <noptr> isc try configurer lp dma ( <ptr> isc <dot> <noptr> direct dump )
<cls> <noptr> vim c sca fill src frame ( <ptr> const v sca <dot> <ptr> const sink frame )
<cls> <noptr> bt tvs frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check t daa ( )
<cls> <noptr> wl f m upload firmware patch ( <ptr> radio )
<cls> <ptr> saa unitid name ( <ptr> dev <dot> <noptr> unitid )
<cls> <noptr> is q am ( <ptr> state )
<cls> <noptr> vim c sca fill pix ( <ptr> const ptr <dot> <ptr> const pixel <dot> <noptr> bpp )
<cls> <noptr> fim c is load firmware ( <ptr> fw <dot> <ptr> context )
<cls> <noptr> venc runtime resume ( <ptr> dev )
<cls> <noptr> control r x irq watermark ( <ptr> c <dot> <noptr> level )
<cls> <noptr> gpio irt x driver init ( )
<cls> <noptr> load dec table ( <ptr> inst )
<cls> <noptr> stv x get v iter b i ( <ptr> state )
<cls> <noptr> vsp pipeline frame end ( <ptr> pipe )
<cls> <noptr> venus sys set default properties ( <ptr> h dev )
<cls> <noptr> c sect p feel f sanity check ( <ptr> fe i <dot> <ptr> fw )
<cls> <noptr> mce usb get parameters ( <ptr> ir )
<cls> <noptr> dml me tuner ( <ptr> adap )
<cls> <noptr> ic wr reg ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> n )
<cls> <noptr> ce u try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vp dma update dma addr ( <ptr> vp dma <dot> <ptr> list <dot> <noptr> dma addr <dot> <ptr> write dtd <dot> <noptr> drop <dot> <noptr> idx )
<cls> <noptr> irr c decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> fim c caps selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> bt tv init module ( )
<cls> <noptr> ov set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> m eye resume ( <ptr> pdev )
<cls> <noptr> pvr h dw set cur freq ( <ptr> h dw <dot> <noptr> val )
<cls> <noptr> smi ir init ( <ptr> dev )
<cls> <noptr> no signal t mds ( <ptr> sd )
<cls> <noptr> r pf configure partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> it d init ( <ptr> fe )
<cls> <noptr> msi buf queue ( <ptr> vb )
<cls> <noptr> l gs gxx auto lock ( <ptr> priv )
<cls> <noptr> c x der init stats ( <ptr> fe )
<cls> <noptr> smr tinfo get ( <ptr> state <dot> <noptr> rate )
<cls> <noptr> stream zap probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> vid io cs fmt vid out m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> i sun scaled ok ( <noptr> width <dot> <noptr> height <dot> <ptr> rect )
<cls> <noptr> m chipset frame rate ( )
<cls> <noptr> c x usb nano power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> a speed video get resolution ( <ptr> video )
<cls> <noptr> str crx interrupt ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> ddb mci config ( <ptr> state <dot> <noptr> config )
<cls> <noptr> l m mode ctrl ( <ptr> flash <dot> <noptr> led mode )
<cls> <noptr> pkt session ftb ( <ptr> pkt <dot> <ptr> cookie <dot> <ptr> out frame )
<cls> <noptr> eg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> of get csi sid ( <ptr> np )
<cls> <noptr> iv tv halt firmware ( <ptr> it v )
<cls> <noptr> de interlace irq ( <noptr> irq <dot> <ptr> data )
<cls> <ptr> check input types ( )
<cls> <noptr> saa bus dump ( <ptr> dev )
<cls> <noptr> r x remove byte ( <ptr> pin )
<cls> <noptr> st stop ( <ptr> sd )
<cls> <noptr> snd saa volume get ( <ptr> k control <dot> <ptr> u control )
<cls> <noptr> gpio set ( <ptr> sd <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> c x der get if hz ( <ptr> priv <dot> <noptr> def hz )
<cls> <noptr> m m ols enable interrupt ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> ctrl set cfg afe gain ( <ptr> demo d <dot> <ptr> afe gain )
<cls> <noptr> iv tv try fmt vid out overlay ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> reg write ( <ptr> state <dot> <ptr> regs <dot> <noptr> num )
<cls> <noptr> spc i read attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> c x get service set ( <ptr> fmt )
<cls> <noptr> em xx pre card setup ( <ptr> dev )
<cls> <noptr> rtl set front end ( <ptr> fe )
<cls> <noptr> td a check it ( <ptr> chip )
<cls> <noptr> six x wait dis eq c idle ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> mt get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> v l m m try queue ( <ptr> m m dev <dot> <ptr> m mctx )
<cls> <noptr> vs pdu init ( <ptr> dev )
<cls> <noptr> c x video wakeup ( <ptr> dev <dot> <ptr> q <dot> <noptr> count )
<cls> <noptr> v l print enum output ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> d m xts feed stop filtering ( <ptr> ts feed )
<cls> <noptr> venus boot core ( <ptr> h dev )
<cls> <noptr> mtp set power ( <ptr> sub dev <dot> <noptr> on )
<cls> <noptr> dvb usb v probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> vp ifg fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> ene hw detect ( <ptr> dev )
<cls> <noptr> black bird api cmd ( <ptr> dev <dot> <noptr> command <dot> <noptr> input cnt <dot> <noptr> output cnt )
<cls> <noptr> iv tvs aud out ( <ptr> file <dot> <ptr> f h <dot> <ptr> v out )
<cls> <noptr> fdp irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> v lsp arm cap ( <ptr> v dev <dot> <ptr> sd <dot> <ptr> a )
<cls> <noptr> l gdt set if ( <ptr> state <dot> <ptr> p )
<cls> <noptr> fdt vdi seq c send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> adv log info frames ( <ptr> sd )
<cls> <noptr> wake system ( <ptr> cam )
<cls> <noptr> vp if driver init ( )
<cls> <noptr> venc set p ( <ptr> sd )
<cls> <noptr> c x irr xwork handler ( <ptr> work )
<cls> <noptr> venus power off ( <ptr> h dev )
<cls> <noptr> uvc ioctl sext ctrls ( <ptr> file <dot> <ptr> f h <dot> <ptr> ctrls )
<cls> <ptr> check alt dma ( )
<cls> <noptr> j pu enum fmt ( <ptr> f <dot> <noptr> type )
<cls> <noptr> dvb dummy fe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> d rxjs etl na state ( <ptr> demo d <dot> <noptr> state )
<cls> <noptr> stv init ( <ptr> fe )
<cls> <noptr> set v flip ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> d ibm b x send attr ( <ptr> state <dot> <noptr> id <dot> <ptr> data <dot> <noptr> len <dot> <noptr> attr )
<cls> <noptr> c xxx v l open ( <ptr> filp )
<cls> <noptr> tvp x driver init ( )
<cls> <noptr> uds enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> ven csd v timings ( <ptr> sd <dot> <ptr> d v timings )
<cls> <noptr> ctrl get brightness ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> j l c stop ( <ptr> gsp ca dev )
<cls> <noptr> coda set frame cache ( <ptr> ctx <dot> <noptr> fourcc )
<cls> <noptr> ptf e init ( <ptr> pt )
<cls> <noptr> scc am if vid ioc enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> input )
<cls> <noptr> isp video stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> sun ics i irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> v pbe displays std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std id )
<cls> <noptr> pvr h dw cmd mode switch ( <ptr> h dw <dot> <noptr> digital fl )
<cls> <noptr> stv get if khz ( <ptr> state <dot> <ptr> if khz )
<cls> <noptr> vo pjpeg size ( <ptr> vh )
<cls> <noptr> c x usb video radio open ( <ptr> f )
<cls> <ptr> check dma interval ( )
<cls> <noptr> tc enable interrupts ( <ptr> sd <dot> <noptr> cable connected )
<cls> <noptr> debug string ( <ptr> msg <dot> <noptr> length <dot> <noptr> offset )
<cls> <noptr> tvp v dp init ( <ptr> sd )
<cls> <noptr> venus soft int ( <ptr> h dev )
<cls> <noptr> omap isp preview isr ( <ptr> prev )
<cls> <noptr> preview enabled rk frame capture ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> av fe lock fix ( <ptr> av <dot> <noptr> status )
<cls> <noptr> mpegts configure polarity ( <ptr> state )
<cls> <ptr> check iv tv pci latency ( )
<cls> <noptr> pvr hd wv l get minor number ( <ptr> h dw <dot> <noptr> index )
<cls> <noptr> v pread reg ( <ptr> d <dot> <noptr> reg )
<cls> <noptr> m tt mcu write ( <ptr> client <dot> <noptr> command <dot> <noptr> data )
<cls> <noptr> vb ops venc stop streaming ( <ptr> q )
<cls> <noptr> dmv pss set sync pol ( <noptr> sync )
<cls> <noptr> max set eur x mode ( <ptr> ctx <dot> <noptr> r x mode )
<cls> <noptr> init r cmap d vic o portable ( )
<cls> <noptr> preview config ( <ptr> prev <dot> <ptr> cfg )
<cls> <noptr> imon mce key lookup ( <ptr> i ctx <dot> <noptr> scan code )
<cls> <noptr> int irq ( <ptr> urb )
<cls> <noptr> fan store ( <ptr> device <dot> <ptr> d <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> flash write ( <ptr> map <dot> <noptr> datum <dot> <noptr> offset )
<cls> <noptr> v lic sub dev init ( <ptr> sd <dot> <ptr> client <dot> <ptr> ops )
<cls> <ptr> check ibm net cam pro ( )
<cls> <noptr> c x get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> d sbr get stat ( <ptr> radio )
<cls> <noptr> isset isp effect ( <ptr> is <dot> <noptr> cmd )
<cls> <noptr> im xic driver init ( )
<cls> <noptr> omap isp stat init ( <ptr> stat <dot> <ptr> name <dot> <ptr> sd ops )
<cls> <noptr> tm dvb register ( )
<cls> <noptr> m probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> ov set auto exposure ( <ptr> sensor <dot> <noptr> on )
<cls> <noptr> c x der read signal strength ( <ptr> fe )
<cls> <noptr> tw frame interval set ( <ptr> input )
<cls> <noptr> temp mon set fan ( <ptr> link )
<cls> <noptr> c x wait for dis eq c ( <ptr> state )
<cls> <noptr> td a send dis eq c msg ( <ptr> fe <dot> <ptr> m )
<cls> <noptr> dr xxx j set l na ( <ptr> fe )
<cls> <noptr> ca get message ( <ptr> state <dot> <ptr> pca message <dot> <ptr> arg )
<cls> <noptr> d v bring buffer avail ( <ptr> r buf )
<cls> <noptr> init x oci ( <ptr> port )
<cls> <noptr> ov fill fmt ( <ptr> mode <dot> <ptr> fmt )
<cls> <noptr> tea get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> set cam quality ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> vb exp buf ( <ptr> q <dot> <ptr> eb )
<cls> <noptr> dvb usb adapter init ( <ptr> d <dot> <ptr> adapter n rs )
<cls> <noptr> v pfe set sdr addr ( <ptr> c cdc <dot> <noptr> addr )
<cls> <noptr> isp video q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> b )
<cls> <noptr> v fe output update pong addr ( <ptr> v fe <dot> <ptr> output <dot> <noptr> sync )
<cls> <noptr> coda dec seq init work ( <ptr> work )
<cls> <noptr> n gene start feed ( <ptr> dvb dmx feed )
<cls> <noptr> ov g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> fim c lite open ( <ptr> file )
<cls> <noptr> six get report ( <ptr> radio <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> td a configure ( <ptr> fe )
<cls> <noptr> buffer filled ( <ptr> dev <dot> <ptr> dma q <dot> <ptr> buf )
<cls> <noptr> ce u parsed t ( <ptr> ce udev )
<cls> <noptr> v fe get output ( <ptr> line )
<cls> <noptr> az front end attach ( <ptr> adap )
<cls> <noptr> tw risc buffer ( <ptr> pci <dot> <ptr> buf <dot> <ptr> sg list <dot> <noptr> top offset <dot> <noptr> bottom offset <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines )
<cls> <noptr> add out dtd ( <ptr> ctx <dot> <noptr> port )
<cls> <ptr> fim c capture try format ( <ptr> ctx <dot> <ptr> width <dot> <ptr> height <dot> <ptr> code <dot> <ptr> fourcc <dot> <noptr> pad )
<cls> <noptr> video mux s stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> ec read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> hdp v ric read ( <ptr> dev <dot> <noptr> bus <dot> <noptr> addr <dot> <ptr> w data <dot> <noptr> w len <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> smi app resume ( <ptr> dev )
<cls> <noptr> pvr context set notify ( <ptr> mp <dot> <noptr> fl )
<cls> <noptr> cxx xic mux register ( <ptr> dev <dot> <noptr> mux no )
<cls> <noptr> fim c ish w wait int msr int msd ( <ptr> is )
<cls> <noptr> m xls f adap fe sleep ( <ptr> fe )
<cls> <noptr> tca set attenuation ( <ptr> f m r <dot> <noptr> att <dot> <noptr> channel )
<cls> <noptr> cam if is streaming ( <ptr> cam if )
<cls> <noptr> td a read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> a speed video get d v timings ( <ptr> file <dot> <ptr> f h <dot> <ptr> timings )
<cls> <noptr> hist reset mem ( <ptr> hist )
<cls> <noptr> snc long command ( <ptr> gsp ca dev <dot> <ptr> command )
<cls> <noptr> isp videog input ( <ptr> file <dot> <ptr> f h <dot> <ptr> input )
<cls> <noptr> sp mfc set dec desc buffer ( <ptr> ctx )
<cls> <noptr> pvr context global init ( )
<cls> <noptr> c x cancel buffers ( <ptr> port )
<cls> <noptr> x c get version ( <ptr> priv <dot> <ptr> hw major version <dot> <ptr> hw minor version <dot> <ptr> fw major version <dot> <ptr> fw minor version )
<cls> <noptr> rt set analog freq ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> c x audio set io ( <ptr> c x )
<cls> <noptr> d ibm b set front end ( <ptr> fe <dot> <noptr> tuner )
<cls> <noptr> v pep drv init ( )
<cls> <noptr> tt usb dec driver init ( )
<cls> <noptr> smi app read ( <ptr> sensor <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> afe write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> rtl read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> state neither active nor queued ( <ptr> q <dot> <ptr> vb )
<cls> <noptr> v pfe query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> vsp hgt write ( <ptr> hgt <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> dib ic enumeration ( <ptr> host <dot> <noptr> noof demo ds <dot> <noptr> default addr <dot> <noptr> first addr <dot> <noptr> is dib p )
<cls> <noptr> vb icap buf queue ( <ptr> vb )
<cls> <noptr> v l query cap ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> mt set tone ( <ptr> fe <dot> <noptr> t )
<cls> <noptr> cec adap g log addrs ( <ptr> adap <dot> <ptr> p arg )
<cls> <noptr> start msc am ( <ptr> gsp ca dev )
<cls> <noptr> ov res roundup ( <ptr> width <dot> <ptr> height )
<cls> <noptr> r ving std ( <ptr> file <dot> <ptr> priv <dot> <ptr> a )
<cls> <noptr> a speed video open ( <ptr> file )
<cls> <noptr> vp dma list busy ( <ptr> vp dma <dot> <noptr> list num )
<cls> <noptr> dvb usb v suspend ( <ptr> int f <dot> <noptr> msg )
<cls> <noptr> c x usb aver power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> vid io cs fmt vid overlay ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> flex cop usb read write dw ( <ptr> fc <dot> <noptr> w reg offs pci <dot> <ptr> val <dot> <noptr> read )
<cls> <noptr> ic wr ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> bt tv stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> vim cd ebs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> set blue balance ( <ptr> gsp ca dev )
<cls> <noptr> video buf dma contig user put ( <ptr> mem )
<cls> <ptr> check dvb demux feed err pkts ( )
<cls> <noptr> dst error recovery ( <ptr> state )
<cls> <noptr> set field ( <ptr> val p <dot> <noptr> field <dot> <noptr> mask )
<cls> <noptr> sp mfc configure common memory ( <ptr> mfc dev )
<cls> <noptr> ske cg xs stream ( <ptr> priv <dot> <noptr> on )
<cls> <noptr> dvb usb set active fe ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> dib get stats ( <ptr> fe <dot> <noptr> stat )
<cls> <noptr> fim c cap g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> cam if video try format ( <ptr> vp <dot> <ptr> pix <dot> <dptr> f fmt )
<cls> <noptr> saa h unmute ( <ptr> sd )
<cls> <noptr> msi config show ( <ptr> cobalt <dot> <ptr> pci dev )
<cls> <noptr> probe ( <ptr> state <dot> <ptr> cfg )
<cls> <ptr> is px clk src get ( <ptr> clk spec <dot> <ptr> data )
<cls> <noptr> flite hw reset ( <ptr> dev )
<cls> <noptr> adv x driver init ( )
<cls> <ptr> v l ctrl find ( <ptr> hdl <dot> <noptr> id )
<cls> <noptr> stb search carrier ( <ptr> state )
<cls> <noptr> t mir int start ( <ptr> dev )
<cls> <noptr> adv status ( <ptr> state <dot> <ptr> status <dot> <ptr> std )
<cls> <noptr> vivid fb pan display ( <ptr> var <dot> <ptr> info )
<cls> <noptr> stk start stream ( <ptr> dev )
<cls> <noptr> m i pid detect ( <ptr> bridge )
<cls> <noptr> p xac vb start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> ov get reso dist ( <ptr> mode <dot> <ptr> frame fmt )
<cls> <noptr> atmel is i runtime suspend ( <ptr> dev )
<cls> <noptr> vps s suspend ( <ptr> dev )
<cls> <noptr> m x b update aud mode ( <ptr> m x b )
<cls> <noptr> cec post state event ( <ptr> adap )
<cls> <ptr> dib get component bus interface ( <ptr> fe )
<cls> <noptr> img ir timing defaults ( <ptr> range <dot> <ptr> defaults )
<cls> <noptr> ic w ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <ptr> buffer <dot> <noptr> len <dot> <noptr> mode )
<cls> <noptr> digit val pst ded tuner calc regs ( <ptr> fe <dot> <ptr> pll buf <dot> <noptr> buf len )
<cls> <noptr> ske cg x probe ( <ptr> client <dot> <ptr> id )
<cls> <ptr> checkid ( )
<cls> <noptr> c x der read ber c ( <ptr> priv <dot> <ptr> bit error <dot> <ptr> bit count )
<cls> <noptr> v l device set name ( <ptr> v l dev <dot> <ptr> basename <dot> <ptr> instance )
<cls> <ptr> affe attach ( <ptr> d )
<cls> <noptr> pvr saa sub dev update ( <ptr> h dw <dot> <ptr> sd )
<cls> <noptr> ccd cls c isr ( <ptr> c cdc <dot> <noptr> events )
<cls> <noptr> aur c resume ( <ptr> dev )
<cls> <noptr> c x video mux ( <ptr> dev <dot> <noptr> input )
<cls> <noptr> vic am read frame ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> g vc mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> c x der dvb t set profile ( <ptr> priv <dot> <noptr> profile )
<cls> <noptr> rcs i start receiver ( <ptr> priv )
<cls> <noptr> v pfe initialize device ( <ptr> v pfe )
<cls> <noptr> intervals show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> d ibm sad calib ( <ptr> state )
<cls> <ptr> coda get v do a data ( )
<cls> <noptr> ov set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> cade tread ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> t vps ctrl ( <ptr> ctrl )
<cls> <noptr> isp video set selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> m mol sic driver init ( )
<cls> <noptr> med usa set contrast ( <ptr> dev <dot> <noptr> contrast <dot> <noptr> decoder )
<cls> <noptr> n put ( <ptr> gsp ca dev <dot> <ptr> norm e <dot> <ptr> channel )
<cls> <noptr> last nodes open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> adv x write ( <ptr> state <dot> <noptr> page <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> c x irq enable all ( <ptr> dev )
<cls> <noptr> fin tek set reg bit ( <ptr> fin tek <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> c x read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> r x add byte ( <ptr> pin )
<cls> <noptr> stv ter lock algo ( <ptr> state )
<cls> <ptr> check pll ( )
<cls> <noptr> is cs fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> de interlace p drv init ( )
<cls> <noptr> fix pt div ( <noptr> dividend <dot> <noptr> divisor <dot> <ptr> quotient <dot> <ptr> fraction )
<cls> <noptr> get key pvr ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> td a set analog params ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> imx g register ( <ptr> sub dev <dot> <ptr> reg )
<cls> <noptr> sh ve u poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> v l async match notify ( <ptr> notifier <dot> <ptr> v l dev <dot> <ptr> sd <dot> <ptr> asd )
<cls> <noptr> af pid filter ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> v pis last sub frm ( <ptr> inst )
<cls> <noptr> adv xtx power ( <ptr> tx <dot> <noptr> on )
<cls> <noptr> px a camera build formats ( <ptr> pc dev )
<cls> <noptr> cxa v audios ctrl ( <ptr> ctrl )
<cls> <noptr> bcm read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> usb tv enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> d ibm c pid control ( <ptr> fe <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> r tls drg frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ds set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> j l c start new frame ( <ptr> gsp ca dev )
<cls> <noptr> wcf reads b ( <ptr> sd )
<cls> <noptr> tc print register map ( <ptr> sd )
<cls> <noptr> im ontouch event ( <ptr> i ctx <dot> <ptr> buf )
<cls> <noptr> ske cg x read fw ver ( <ptr> sd )
<cls> <noptr> fim c capture irqhandler ( <ptr> fim c <dot> <noptr> deq buf )
<cls> <noptr> sms dvb update is dbt stats ( <ptr> client <dot> <ptr> p )
<cls> <noptr> tea shift ( <noptr> val )
<cls> <ptr> iv tv get card ( <noptr> index )
<cls> <noptr> c x set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> qt get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> ov set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> crc ( <noptr> crc <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> d ibm pid filter ( <ptr> fe <dot> <noptr> id <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> tx long start ( <ptr> pin )
<cls> <noptr> stv carrier width ( <noptr> s rate <dot> <noptr> ro )
<cls> <noptr> ov reg write ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> pac write reg ( <ptr> gsp ca dev <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> ic xfer ( <ptr> ic adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> hvr init sensor ( <ptr> gsp ca dev )
<cls> <noptr> m xlt read reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tms top audio dma ( <ptr> chip )
<cls> <noptr> mt set analog params ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> wcf smbus read ack ( <ptr> sd )
<cls> <noptr> isc async unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> td a read ( <ptr> state <dot> <ptr> buf )
<cls> <noptr> px pv l pix fmt tops format ( <noptr> v l pix fmt )
<cls> <noptr> coda scale quant table ( <ptr> q tab <dot> <noptr> scale )
<cls> <noptr> tfe p update l na ( <ptr> fe <dot> <noptr> agc global )
<cls> <noptr> vi codec try ctrl ( <ptr> ctrl )
<cls> <noptr> afa f front end attach ( <ptr> adap )
<cls> <noptr> dsd i seq c send burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> is if get frame format ( )
<cls> <noptr> fin tek cir reg read ( <ptr> fin tek <dot> <noptr> offset )
<cls> <ptr> check budget patch ( )
<cls> <noptr> alter aci write cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> r car vin probe ( <ptr> pdev )
<cls> <noptr> v l print frequency ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> sms core detect mode ( <ptr> core dev )
<cls> <noptr> ter rate c active radio upgrade ( <ptr> b tv )
<cls> <noptr> stax vip suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> c x get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> m xls f attach demo d ( <ptr> adap <dot> <noptr> f eid )
<cls> <noptr> ths log channel status ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> stv set bandwidth ( <ptr> fe <dot> <noptr> bandwidth )
<cls> <noptr> ves write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> v dec h init ( <ptr> ctx )
<cls> <noptr> msp detect stereo ( <ptr> client )
<cls> <noptr> v iure set ( <ptr> reg )
<cls> <noptr> flex cop dvb init ( <ptr> fc )
<cls> <noptr> td a get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> philips cd tuner set params ( <ptr> fe )
<cls> <noptr> m xls fic bit bang send byte ( <ptr> state <dot> <noptr> byte )
<cls> <noptr> set par ( <ptr> gsp ca dev <dot> <noptr> par val )
<cls> <noptr> dst put c i ( <ptr> state <dot> <ptr> data <dot> <noptr> len <dot> <ptr> ca string <dot> <noptr> read )
<cls> <noptr> start feed ( <ptr> dvb dmx feed )
<cls> <noptr> c xxx power suspend ( <ptr> dev )
<cls> <noptr> do command extended ( <ptr> gsp ca dev <dot> <noptr> command <dot> <noptr> a <dot> <noptr> b <dot> <noptr> c <dot> <noptr> d <dot> <noptr> e <dot> <noptr> f <dot> <noptr> g <dot> <noptr> h <dot> <noptr> i <dot> <noptr> j <dot> <noptr> k <dot> <noptr> l )
<cls> <noptr> isp stat init entities ( <ptr> stat <dot> <ptr> name <dot> <ptr> sd ops )
<cls> <noptr> t dax enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> lfs to v l ctrl config ( <ptr> s <dot> <ptr> c )
<cls> <noptr> ov get pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> solo enc buf finish ( <ptr> vb )
<cls> <noptr> dvb t cal css i ( <ptr> tn r dmd <dot> <noptr> r f lvl <dot> <ptr> ssi )
<cls> <noptr> cal wr dma addr ( <ptr> ctx <dot> <noptr> dma addr )
<cls> <noptr> c x set aud clk freq ( <ptr> client <dot> <noptr> freq )
<cls> <noptr> v lic driver init ( )
<cls> <noptr> g d open ( <ptr> file )
<cls> <noptr> uds pass bandwidth ( <noptr> ratio )
<cls> <noptr> sh ve u q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> spc ecp drv init ( )
<cls> <noptr> h encode sps ( <ptr> inst <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> csc set coeff ( <ptr> csc <dot> <ptr> csc reg <dot> <ptr> src fmt <dot> <ptr> dst fmt )
<cls> <noptr> l gdt async lock poll ( <ptr> state )
<cls> <noptr> v deco pg volatile ctrl ( <ptr> ctrl )
<cls> <noptr> uvc find control ( <ptr> entity <dot> <noptr> v lid <dot> <dptr> mapping <dot> <dptr> control <dot> <noptr> next )
<cls> <noptr> a uic msg ( <ptr> d <dot> <noptr> addr <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> cec receive ( <ptr> adap <dot> <ptr> f h <dot> <noptr> block <dot> <ptr> p arg )
<cls> <noptr> sh write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> it wm ( <ptr> dev <dot> <noptr> val <dot> <noptr> index )
<cls> <noptr> dvb usb data complete raw ( <ptr> stream <dot> <ptr> buffer <dot> <noptr> length )
<cls> <noptr> pvr g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std )
<cls> <ptr> ddb irq set ( <ptr> dev <dot> <noptr> link <dot> <noptr> nr <dot> <ptr> ptr <dot> <ptr> data )
<cls> <noptr> pvr h dw gpio get in ( <ptr> h dw <dot> <ptr> dp )
<cls> <noptr> cal enum frame intervals ( <ptr> file <dot> <ptr> priv <dot> <ptr> f ival )
<cls> <noptr> sms core register client ( <ptr> core dev <dot> <ptr> params <dot> <dptr> client )
<cls> <noptr> si sleep ( <ptr> fe )
<cls> <noptr> flex cop dis eq c send byte ( <ptr> fe <dot> <noptr> data )
<cls> <ptr> v l m m next buf ( <ptr> q ctx )
<cls> <noptr> z l read reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> go snd pcm trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> ctrl check input ( <ptr> cptr <dot> <noptr> v )
<cls> <noptr> gsp ca init transfer ( <ptr> gsp ca dev )
<cls> <noptr> sms dvb read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> iv tvs frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> m urb complete ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> v pe probe ( <ptr> pdev )
<cls> <noptr> sc dump regs ( <ptr> sc )
<cls> <noptr> si read reg ( <ptr> state <dot> <noptr> reg )
<cls> <ptr> c x core get ( <ptr> pci )
<cls> <noptr> vivid req validate ( <ptr> req )
<cls> <noptr> mtk vcodec enc clock off ( <ptr> pm )
<cls> <noptr> iv tvf b set par ( <ptr> info )
<cls> <noptr> iv tv set funcs ( <ptr> v dev )
<cls> <noptr> ov x set white balance ( <ptr> ov x <dot> <noptr> awb )
<cls> <noptr> coda open ( <ptr> file )
<cls> <noptr> tv audio thread d dep ( <ptr> data )
<cls> <noptr> init r cmap total media in hand ( )
<cls> <noptr> br x set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> uvc queue buffer re queue ( <ptr> queue <dot> <ptr> buf )
<cls> <noptr> pvr dvb stream start ( <ptr> adap )
<cls> <noptr> adv cec read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> serial ir probe ( <ptr> dev )
<cls> <noptr> m tt init pll ( <ptr> client )
<cls> <noptr> fcst and by ( <ptr> sd )
<cls> <noptr> c x d get front end ( <ptr> fe <dot> <ptr> props )
<cls> <noptr> stv set video mode ( <ptr> gsp ca dev <dot> <noptr> mode )
<cls> <noptr> cobalt dma start streaming ( <ptr> s )
<cls> <noptr> cem xls tuner attach ( <ptr> adap )
<cls> <noptr> sp jpeg coef ( <ptr> regs <dot> <noptr> i <dot> <noptr> j <dot> <noptr> coef )
<cls> <noptr> c pia set high power ( <ptr> cam )
<cls> <noptr> tv eeprom read ( <ptr> c <dot> <ptr> ee data <dot> <noptr> len )
<cls> <noptr> stk d front end attach ( <ptr> adap )
<cls> <noptr> vi codec return buf s ( <ptr> q <dot> <noptr> state )
<cls> <noptr> tm alsa register ( )
<cls> <noptr> em xx v l fini ( <ptr> dev )
<cls> <noptr> vic am do stream ( <ptr> work )
<cls> <ptr> check retry m mio ( )
<cls> <noptr> imx power on ( <ptr> dev )
<cls> <noptr> copy cap to ref ( <ptr> cap <dot> <ptr> info <dot> <ptr> state )
<cls> <noptr> gsc register mmdevice ( <ptr> gsc )
<cls> <noptr> l gdt afe sleep ( <ptr> fe )
<cls> <noptr> solo pci driver init ( )
<cls> <noptr> m xls f demo d read signal strength ( <ptr> fe <dot> <ptr> signal strength )
<cls> <noptr> demo d attach c x d xx ( <ptr> input <dot> <noptr> par <dot> <noptr> osc )
<cls> <noptr> cobalt ge did ( <ptr> file <dot> <ptr> f h <dot> <ptr> e did )
<cls> <noptr> e tek power on ( <ptr> sensor )
<cls> <noptr> d ibus bic msg ( <ptr> d <dot> <noptr> addr <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> ov mask set ( <ptr> client <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> set )
<cls> <noptr> dvb tstart ( <ptr> state )
<cls> <noptr> em xx set x clk ic speed ( <ptr> dev )
<cls> <noptr> video stop streaming ( <ptr> q )
<cls> <noptr> v ls std ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> mtk mdp set default params ( <ptr> ctx )
<cls> <noptr> sms core registry set type ( <ptr> dev path <dot> <noptr> type )
<cls> <ptr> find inode ( <ptr> ic adap <dot> <noptr> ic addr )
<cls> <noptr> iv tv read eeprom ( <ptr> it v <dot> <ptr> tv )
<cls> <noptr> m xls f disable is port ( <ptr> state )
<cls> <noptr> r track g signal ( <ptr> isa )
<cls> <noptr> as cote init ( <ptr> fe )
<cls> <noptr> msp c set mode ( <ptr> client <dot> <noptr> mode )
<cls> <noptr> c x usb dee front end attach ( <ptr> adap )
<cls> <ptr> b disp fmt to str ( <noptr> frame )
<cls> <noptr> d m read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> isl enable high ln b voltage ( <ptr> fe <dot> <noptr> arg )
<cls> <noptr> any seem t demo d init ( <ptr> fe )
<cls> <noptr> set r gain ( <ptr> gsp ca dev <dot> <noptr> r gain )
<cls> <noptr> lg dta select ( <ptr> mux c <dot> <noptr> chan )
<cls> <noptr> sun ics i update config ( <ptr> csi <dot> <ptr> config )
<cls> <noptr> vpx fe refresh state ( <ptr> st )
<cls> <noptr> sa aic eeprom ( <ptr> dev <dot> <ptr> ee data <dot> <noptr> len )
<cls> <noptr> vb req prepare ( <ptr> obj )
<cls> <noptr> configure encrypted ( <ptr> gsp ca dev )
<cls> <noptr> avc cap mt ( <ptr> fdt v <dot> <ptr> msg <dot> <noptr> length )
<cls> <noptr> set illum ( <ptr> gsp ca dev )
<cls> <noptr> adv x afe propagate pixel rate ( <ptr> afe )
<cls> <ptr> check port ( )
<cls> <noptr> lg x set par ade ( <ptr> state <dot> <noptr> id )
<cls> <noptr> wcf write fs b ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> coda job abort ( <ptr> priv )
<cls> <noptr> ir raw event store with timeout ( <ptr> dev <dot> <ptr> ev )
<cls> <noptr> als apb fnc ( <ptr> vb <dot> <ptr> priv )
<cls> <noptr> session register buf s ( <ptr> inst )
<cls> <noptr> sprint cfg ( <ptr> s dev <dot> <ptr> mode )
<cls> <noptr> set or x nsu ao x ( <ptr> demo d <dot> <noptr> active )
<cls> <noptr> net upc i write cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> mrs read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> fim c buf prepare ( <ptr> vb )
<cls> <noptr> bt tv bit set scl ( <ptr> data <dot> <noptr> state )
<cls> <noptr> irr x open ( <ptr> dev )
<cls> <noptr> techni sat usb driver init ( )
<cls> <noptr> t dax set frequency ( <ptr> fe <dot> <noptr> new frequency )
<cls> <noptr> pvr channel disclaim stream ( <ptr> cp )
<cls> <noptr> hex ium attach ( <ptr> dev <dot> <ptr> info )
<cls> <ptr> check space ( )
<cls> <noptr> px p bytes per line ( <ptr> fmt <dot> <noptr> width )
<cls> <noptr> video mux link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> as cote sleep ( <ptr> fe )
<cls> <noptr> omap isp preview restore context ( <ptr> isp )
<cls> <noptr> serial to parallel code ( <noptr> serial )
<cls> <noptr> rtl u read config ( <ptr> d )
<cls> <noptr> sun ics i set format ( <ptr> s dev )
<cls> <noptr> ska a try format ( <ptr> ska a <dot> <ptr> m f )
<cls> <ptr> check tea ( )
<cls> <noptr> uvc status init ( <ptr> dev )
<cls> <noptr> hel ene set params t ( <ptr> fe )
<cls> <noptr> sh vou reg m write ( <ptr> vou dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> msi set gain ( <ptr> dev <dot> <noptr> ln again <dot> <noptr> mixer gain <dot> <noptr> if gain )
<cls> <noptr> saa read ( <ptr> sd )
<cls> <noptr> v pfe config enable ( <ptr> c cdc <dot> <noptr> flag )
<cls> <noptr> ccp enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> v l q buf ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> str c send l irc timeout ( <ptr> r dev )
<cls> <noptr> sa aic reset ( <ptr> dev )
<cls> <noptr> vb ops wait finish ( <ptr> v q )
<cls> <noptr> regr ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> index <dot> <noptr> length )
<cls> <noptr> via cam do try fmt ( <ptr> cam <dot> <ptr> u pix <dot> <ptr> spi x )
<cls> <noptr> bt tv query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> b )
<cls> <noptr> ths setup ( <ptr> sd <dot> <ptr> bt )
<cls> <noptr> ccp if enable ( <ptr> ccp <dot> <noptr> enable )
<cls> <noptr> pvr query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> tw x dma mode get ( <ptr> buffer <dot> <ptr> kp )
<cls> <noptr> mtk mdp prepare addr ( <ptr> ctx <dot> <ptr> vb <dot> <ptr> frame <dot> <ptr> addr )
<cls> <noptr> sms core get device mode ( <ptr> core dev )
<cls> <ptr> venc try fmt common ( <ptr> inst <dot> <ptr> f )
<cls> <noptr> send task let ( <noptr> arg )
<cls> <noptr> ir m ware ( <ptr> gsp ca dev )
<cls> <noptr> ska a configure pixel clocks ( <ptr> ska a )
<cls> <noptr> ce power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> ava v register ( <ptr> av )
<cls> <noptr> r tls drg tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <ptr> check dvb m fe wait time ( )
<cls> <noptr> cec receive notify ( <ptr> adap <dot> <ptr> msg <dot> <noptr> is reply )
<cls> <noptr> adv log status ( <ptr> sd )
<cls> <noptr> saa vb if ini ( <ptr> dev )
<cls> <noptr> c pia set saturation ( <ptr> cam <dot> <noptr> value )
<cls> <noptr> stk setup format ( <ptr> dev )
<cls> <noptr> ska a set frame interval ( <ptr> ska a <dot> <ptr> fi )
<cls> <noptr> ccp set inaddr ( <ptr> ccp <dot> <noptr> addr )
<cls> <noptr> wcf writes b ( <ptr> sd <dot> <noptr> value )
<cls> <noptr> tv audio set stereo ( <ptr> dev <dot> <ptr> audio <dot> <noptr> mode )
<cls> <noptr> omap v out isr ( <ptr> arg <dot> <noptr> irq status )
<cls> <noptr> ov stream enable ( <ptr> sensor )
<cls> <noptr> iv tvf b write ( <ptr> info <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> f m r x set de emphasis mode ( <ptr> f m dev <dot> <noptr> mode )
<cls> <noptr> set awb ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> as cote write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ov set auto white balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> pvr dvb stream end ( <ptr> adap )
<cls> <noptr> h aaf busy ( <ptr> af )
<cls> <noptr> net u pic xfer ( <ptr> adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> software stro be mode inactive ( <dptr> ctrls )
<cls> <ptr> check ndm abu fs ( )
<cls> <noptr> stb check range ( <ptr> state )
<cls> <noptr> ctrl clear dirty contrast ( <ptr> cptr )
<cls> <noptr> wpf configure write back chain ( <ptr> wpf <dot> <ptr> dl )
<cls> <noptr> g scm m stream on ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> vid ioc ven cs fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> mds set front end ( <ptr> fe )
<cls> <noptr> sp jpegs ctrl ( <ptr> ctrl )
<cls> <noptr> total frame size ( <ptr> q data )
<cls> <noptr> c sect pfe debug fs init ( <ptr> fe i )
<cls> <noptr> ddb ports attach ( <ptr> dev )
<cls> <noptr> hex ium set standard ( <ptr> hex ium <dot> <ptr> v dec )
<cls> <noptr> flex cop usb init ( <ptr> fc usb )
<cls> <noptr> c eug input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> iri mon register ( <ptr> dev )
<cls> <noptr> spc aping ( <ptr> gsp ca dev )
<cls> <noptr> fdp open ( <ptr> file )
<cls> <noptr> tvp write ( <ptr> sd <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> fim c isopen ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> dst gpio out b ( <ptr> state <dot> <noptr> mask <dot> <noptr> enb b <dot> <noptr> out high <dot> <noptr> delay )
<cls> <ptr> check nic am ( )
<cls> <noptr> q mdc init ( <ptr> fe )
<cls> <noptr> stk i soc irq ( <ptr> urb )
<cls> <noptr> tt usb dec init filters ( <ptr> dec )
<cls> <noptr> resizer get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> vim cd ebs ctrl ( <ptr> ctrl )
<cls> <ptr> check dvb override tune delay ( )
<cls> <noptr> attach init ( <ptr> state )
<cls> <noptr> mtp reset ( <ptr> mtp )
<cls> <noptr> stv x optimize track ( <ptr> state )
<cls> <noptr> irl irc read ( <ptr> file <dot> <ptr> buffer <dot> <noptr> length <dot> <ptr> p pos )
<cls> <noptr> spc e ctx reset ( <ptr> cec )
<cls> <noptr> tc reset phy ( <ptr> sd )
<cls> <noptr> exy no shuff tbl ( <noptr> class <dot> <noptr> id <dot> <noptr> len val )
<cls> <noptr> vp fes selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> meta out buf request complete ( <ptr> vb )
<cls> <noptr> vsp entity configure partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> chip read ( <ptr> chip )
<cls> <noptr> get key behold m xx ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <ptr> check frame rate ( )
<cls> <noptr> c x d read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <ptr> alt xfer ( <ptr> alt <dot> <noptr> xfer <dot> <noptr> xfe rep )
<cls> <noptr> solo stop streaming ( <ptr> q )
<cls> <noptr> iv tv firmware copy ( <ptr> it v )
<cls> <noptr> sms dvb stats wait read ( <ptr> debug data )
<cls> <noptr> v ius top dma ( <ptr> dev )
<cls> <noptr> c x der tuned one ( <ptr> priv )
<cls> <noptr> tegra cec irq thread handler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> c x stop v bid ma ( <ptr> dev )
<cls> <noptr> hor usa write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> simple get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> a speed video set parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> solo gpio set ( <ptr> solo dev <dot> <noptr> value )
<cls> <noptr> rt standby ( <ptr> priv )
<cls> <noptr> ov set brightness ( <ptr> reg map <dot> <noptr> value )
<cls> <noptr> sh ve us fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> or read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> isl write ( <ptr> isl <dot> <noptr> reg )
<cls> <noptr> adv get e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> six radio init debug fs ( <ptr> radio )
<cls> <ptr> check tv freq ( )
<cls> <noptr> stv x set v iter b i ( <ptr> state )
<cls> <noptr> vpx fe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> m chip dma setup ( <noptr> dma addr )
<cls> <noptr> stax vip init buffer ( <ptr> vip )
<cls> <noptr> vivid radio r x stu ner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> net up uni dvb dma worker ( <ptr> work )
<cls> <noptr> alp std lb request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> uif set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c x set frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check transfer mode ( )
<cls> <noptr> color to hsv ( <ptr> tp g <dot> <noptr> r <dot> <noptr> g <dot> <noptr> b <dot> <ptr> h <dot> <ptr> s <dot> <ptr> v )
<cls> <noptr> sdi soc init ( <ptr> gsp ca dev )
<cls> <noptr> mrs tab set ( <ptr> state <dot> <ptr> tab )
<cls> <noptr> radios i default ( <ptr> file <dot> <ptr> p <dot> <noptr> valid prio <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> send stop ( <ptr> gsp ca dev )
<cls> <noptr> ov cosine ( <noptr> theta )
<cls> <noptr> m cam ctl r irq enable ( <ptr> cam )
<cls> <noptr> c x dts read ( <ptr> arg )
<cls> <noptr> x vip pipeline prepare ( <ptr> pipe <dot> <ptr> dma )
<cls> <noptr> mmp cam calc d phy ( <ptr> m cam )
<cls> <ptr> get hw queued job ( <ptr> fdp )
<cls> <noptr> stm cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> img ir timing range convert ( <ptr> out <dot> <ptr> in <dot> <noptr> tolerance <dot> <noptr> clock hz <dot> <noptr> shift )
<cls> <noptr> scm get fw version ( <ptr> state )
<cls> <noptr> dib ctrl clock ( <ptr> d <dot> <noptr> clk mhz <dot> <noptr> clock out gp )
<cls> <noptr> stk ph front end attach ( <ptr> adap )
<cls> <noptr> c cdc config color patterns ( <ptr> pat <dot> <ptr> pat )
<cls> <noptr> h get profile ( <ptr> inst <dot> <noptr> profile )
<cls> <noptr> saa init ( )
<cls> <noptr> v lg frequency ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> ska a write ( <ptr> c <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> a use tif ( <ptr> fe <dot> <noptr> if freq )
<cls> <noptr> vsp entity link setup source ( <ptr> source pad <dot> <ptr> sink pad <dot> <noptr> flags )
<cls> <noptr> d i bag c control ( <ptr> fe <dot> <noptr> restart )
<cls> <noptr> sets w standby ( <ptr> sd <dot> <noptr> standby )
<cls> <noptr> ctrl freq min get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> c x dt nr dmd set and save reg bits ( <ptr> tn r dmd <dot> <noptr> tgt <dot> <noptr> bank <dot> <noptr> address <dot> <noptr> value <dot> <noptr> bit mask )
<cls> <noptr> simple init ( <ptr> fe )
<cls> <noptr> isp disable clocks ( <ptr> isp )
<cls> <noptr> irr cmm decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> nxt x set ts param ( <ptr> fe <dot> <noptr> is punct ured )
<cls> <noptr> ss audio routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> iv tv try decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> dec )
<cls> <noptr> cc plc x config ( <ptr> ccp <dot> <ptr> config )
<cls> <noptr> ov update pad format ( <ptr> mode <dot> <ptr> fmt )
<cls> <noptr> video buf copy stream ( <ptr> q <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> count <dot> <noptr> pos <dot> <noptr> vb i hack <dot> <noptr> non blocking )
<cls> <noptr> t dat une ( <ptr> fe <dot> <ptr> map <dot> <noptr> freq <dot> <noptr> bw )
<cls> <noptr> h aae wb validate params ( <ptr> ae wb <dot> <ptr> new conf )
<cls> <noptr> dvb usb read remote control ( <ptr> work )
<cls> <noptr> power down aud ( <ptr> demo d )
<cls> <noptr> sp mfc get img width v ( <ptr> dev )
<cls> <noptr> si read property ( <ptr> s dev <dot> <noptr> prop <dot> <ptr> pv )
<cls> <noptr> tx v power present ( <ptr> sd )
<cls> <noptr> preview max out width ( <ptr> prev )
<cls> <noptr> ir xmp decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> int timeout handler ( <ptr> t )
<cls> <noptr> l gdt set reg bit ( <ptr> state <dot> <noptr> reg <dot> <noptr> bit <dot> <noptr> onoff )
<cls> <noptr> exy nos jpeg set encout fmt ( <ptr> base <dot> <noptr> out fmt <dot> <noptr> version )
<cls> <ptr> check comb filter ( )
<cls> <noptr> adv set gain ( <ptr> sd <dot> <noptr> auto gain <dot> <noptr> gain a <dot> <noptr> gain b <dot> <noptr> gain c )
<cls> <noptr> dvb sky t attach ( <ptr> adap )
<cls> <noptr> s rpc set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> tc format change ( <ptr> sd )
<cls> <noptr> media request ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> c xstream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> v l async notifier init ( <ptr> notifier )
<cls> <noptr> img ir driver init ( )
<cls> <noptr> t dax o set params ( <ptr> fe )
<cls> <noptr> pkt set version ( <noptr> version )
<cls> <noptr> rtl xx ur d regs ( <ptr> d <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> set audio regs ( <ptr> sd <dot> <ptr> decoder )
<cls> <noptr> six get freq ( <ptr> radio <dot> <ptr> freq )
<cls> <noptr> send data block ( <ptr> ir <dot> <noptr> cmd <dot> <ptr> code block )
<cls> <noptr> hi identify module ( <ptr> hi )
<cls> <noptr> dvb front end open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> mt clear power mask bits ( <ptr> state <dot> <noptr> bits )
<cls> <noptr> v pbe display enum d v timings ( <ptr> file <dot> <ptr> priv <dot> <ptr> timings )
<cls> <noptr> smi app pll calculate ( <ptr> dev <dot> <ptr> limits <dot> <ptr> op limits <dot> <ptr> pll <dot> <ptr> opp ll <dot> <noptr> mul <dot> <noptr> div <dot> <noptr> lane op clock ratio )
<cls> <noptr> e tek suspend ( <ptr> dev )
<cls> <noptr> pct ve power ctrl ( <ptr> d <dot> <noptr> i )
<cls> <noptr> c x audio fini dev ( <ptr> pci )
<cls> <noptr> fim c ish wget sensor max frame rate ( <ptr> is )
<cls> <noptr> f m v l fops poll ( <ptr> file <dot> <ptr> pts )
<cls> <noptr> adv x power down tx ( <ptr> tx )
<cls> <noptr> r ga cmd set ( <ptr> ctx )
<cls> <noptr> isp if enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <ptr> check m m ion delay ( )
<cls> <noptr> media entity pads init ( <ptr> entity <dot> <noptr> numpad s <dot> <ptr> pads )
<cls> <noptr> usb vision un request intra ( <ptr> usb vision )
<cls> <noptr> fim c is get clocks ( <ptr> is )
<cls> <noptr> adb notify monitor detect ( <ptr> sd )
<cls> <noptr> pwc vid ioc fill fmt ( <ptr> f <dot> <noptr> width <dot> <noptr> height <dot> <noptr> pix fmt )
<cls> <noptr> tt usb dec setup urb s ( <ptr> dec )
<cls> <noptr> init r cmap imon pad ( )
<cls> <noptr> xcf w upload ( <ptr> fe )
<cls> <noptr> vid ioc subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> g vs init ( <ptr> b tv )
<cls> <noptr> vivid init ( )
<cls> <noptr> mtk jpeg clk off ( <ptr> jpeg )
<cls> <noptr> em xx start feed ( <ptr> feed )
<cls> <noptr> venc set nts c ( <ptr> sd )
<cls> <noptr> iv tv read ( <ptr> s <dot> <ptr> u buf <dot> <noptr> tot count <dot> <noptr> non block )
<cls> <noptr> unit number show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> tm dvb attach front end ( <ptr> dev )
<cls> <noptr> as cote leave power save ( <ptr> priv )
<cls> <noptr> ctrl isdirty mute ( <ptr> cptr )
<cls> <noptr> snd cobalt p cmp b trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> av record cb ( <ptr> pt <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> module start ( )
<cls> <noptr> tw seth sync ( <ptr> client )
<cls> <noptr> mtm reg read ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> uvc video encode data ( <ptr> stream <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> fim c parsed t ( <ptr> fim c <dot> <ptr> clk freq )
<cls> <noptr> h vah w err interrupt ( <noptr> irq <dot> <ptr> data )
<cls> <ptr> to v pfe ( <ptr> c cdc )
<cls> <noptr> c x irr x g parameters ( <ptr> sd <dot> <ptr> p )
<cls> <noptr> budget read fe status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> c x setup pci ( <ptr> c x <dot> <ptr> pci dev <dot> <ptr> pci id )
<cls> <ptr> feed to pluto ( <ptr> feed )
<cls> <noptr> m xt da front end attach ( <ptr> adap )
<cls> <noptr> resizer set input offset ( <ptr> res <dot> <noptr> offset )
<cls> <noptr> write ts header ( <noptr> pid <dot> <ptr> counter <dot> <noptr> pes start <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> is if probe ( <ptr> pdev )
<cls> <noptr> dr x d sleep ( <ptr> fe )
<cls> <noptr> cxf w ( <ptr> gsp ca dev )
<cls> <noptr> urb completion ( <ptr> pur b )
<cls> <noptr> cxf lat iron write ( <ptr> dev <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> c xvid ioc g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> vpx fe set front end ( <ptr> fe )
<cls> <noptr> vsp video verify format ( <ptr> video )
<cls> <noptr> v l ctrl check ( <ptr> ctrl <dot> <ptr> q ctrl <dot> <ptr> menu items )
<cls> <noptr> hor usa enter power save ( <ptr> priv )
<cls> <noptr> sms core send request and wait ( <ptr> core dev <dot> <ptr> buffer <dot> <noptr> size <dot> <ptr> completion )
<cls> <noptr> adv x afe g std ( <ptr> sd <dot> <ptr> norm )
<cls> <noptr> sms client send request ( <ptr> client <dot> <ptr> buffer <dot> <noptr> size )
<cls> <noptr> mt single write ( <ptr> fe <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> init r cmap win fast ( )
<cls> <noptr> r card rif buf queue ( <ptr> vb )
<cls> <noptr> c x audio init dev ( <ptr> dev )
<cls> <noptr> em xx capture area set ( <ptr> dev <dot> <noptr> h start <dot> <noptr> v start <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> mtv init cfg ( <ptr> sub dev <dot> <ptr> cfg )
<cls> <noptr> ati remote dump ( <ptr> dev <dot> <ptr> data <dot> <noptr> len )
<cls> <ptr> to skb af ( <ptr> sd )
<cls> <noptr> cio sub dev link validate get format ( <ptr> pad <dot> <ptr> fmt )
<cls> <noptr> ctrl clear dirty brightness ( <ptr> cptr )
<cls> <noptr> check parameters ( )
<cls> <noptr> output handler ( <ptr> data )
<cls> <noptr> ns to pulse clocks ( <noptr> ns )
<cls> <noptr> venus session et b ( <ptr> inst <dot> <ptr> in frame )
<cls> <noptr> r vin format bytes per line ( <ptr> vin <dot> <ptr> pix )
<cls> <noptr> init r cmap pinn acle grey ( )
<cls> <noptr> pvr hd wget ctrl count ( <ptr> h dw )
<cls> <noptr> v l sub dev notify event ( <ptr> sd <dot> <ptr> ev )
<cls> <noptr> de interlace write ( <ptr> dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> hi open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> c x d integ cancel ( <ptr> tn r dmd )
<cls> <noptr> six x set symbol rate ( <ptr> fe <dot> <noptr> s rate )
<cls> <noptr> fmt spm pfunc ( <ptr> file <dot> <ptr> priv <dot> <ptr> f <dot> <noptr> func )
<cls> <noptr> sp mfc power on ( )
<cls> <noptr> me son a oce car bit bit time set ( <ptr> ao cec <dot> <noptr> bit set <dot> <noptr> time set )
<cls> <noptr> load per type ( <ptr> core <dot> <noptr> session type )
<cls> <noptr> nv te f m enable ( <ptr> nv t )
<cls> <noptr> fim ch w set scaler ( <ptr> ctx )
<cls> <noptr> avc recv ( <ptr> fdt v <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> avi pack reset ( <ptr> p )
<cls> <noptr> mtv g frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> keen e cmd set ( <ptr> radio )
<cls> <noptr> ene close ( <ptr> r dev )
<cls> <noptr> fim ch w set out dma size ( <ptr> ctx )
<cls> <noptr> preview video queue ( <ptr> video <dot> <ptr> buffer )
<cls> <noptr> c x g chip info ( <ptr> file <dot> <ptr> f h <dot> <ptr> chip )
<cls> <noptr> adb set isr ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> c xs std ( <ptr> file <dot> <ptr> f h <dot> <noptr> std )
<cls> <noptr> c x sram channel dump ( <ptr> core <dot> <ptr> ch )
<cls> <noptr> get key fly dvb trio ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> write field ( <ptr> state <dot> <noptr> field <dot> <noptr> val )
<cls> <noptr> d ibm c setup pwm state ( <ptr> state )
<cls> <noptr> reset camera struct ( <ptr> cam )
<cls> <noptr> set exposure ( <ptr> gsp ca dev <dot> <noptr> expo )
<cls> <noptr> g sch w set in size ( <ptr> ctx )
<cls> <ptr> check nb packet buffer size ( )
<cls> <noptr> extract mask pos ( <noptr> label <dot> <ptr> mask <dot> <ptr> pos )
<cls> <noptr> ctrl isdirty crop l ( <ptr> cptr )
<cls> <noptr> fin tek clear reg bit ( <ptr> fin tek <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> flex cop d max fer control ( <ptr> fc <dot> <noptr> dma idx <dot> <noptr> index <dot> <noptr> onoff )
<cls> <noptr> pvr v l notify ( <ptr> f hp )
<cls> <noptr> xt pg update pattern control ( <ptr> xt pg <dot> <noptr> pass through <dot> <noptr> pattern )
<cls> <noptr> c xxx set analog freq ( <ptr> dev <dot> <noptr> freq )
<cls> <noptr> snd tea x hw init ( <ptr> tea )
<cls> <noptr> ov x select fps ( <ptr> priv <dot> <ptr> tp f )
<cls> <noptr> solo query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> saa g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> dvb dummy fe read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> iv tvs register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> r ving input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> stv search carr sw loop ( <ptr> int p <dot> <noptr> freq incr <dot> <noptr> timeout <dot> <noptr> zigzag <dot> <noptr> max step <dot> <noptr> demo d )
<cls> <noptr> dcm i pipeline start ( <ptr> dcm i )
<cls> <noptr> ddb open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> ener x select input ( <ptr> dev <dot> <noptr> gpioa )
<cls> <noptr> f m config r x mute reg ( <ptr> f m dev )
<cls> <noptr> c x pll tune ( <ptr> fe )
<cls> <noptr> sms dvb updated vb stats ( <ptr> client <dot> <ptr> p )
<cls> <noptr> tp g get color ( <ptr> tp g <dot> <noptr> pat line <dot> <noptr> x )
<cls> <noptr> imon parse press type ( <ptr> i ctx <dot> <ptr> buf <dot> <noptr> k type )
<cls> <noptr> delta mjpeg get stream info ( <ptr> p ctx <dot> <ptr> stream info )
<cls> <noptr> samsung t dt cdh demo d init ( <ptr> fe )
<cls> <noptr> dib get r f output ( <ptr> fe )
<cls> <ptr> to mtv ( <ptr> sd )
<cls> <ptr> dib p get ic master ( <ptr> demo d <dot> <noptr> int f <dot> <noptr> g ating )
<cls> <noptr> u das routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <ptr> uvc v buf to buffer ( <ptr> buf )
<cls> <noptr> vp ifg d v timings ( <ptr> file <dot> <ptr> priv <dot> <ptr> timings )
<cls> <noptr> get key pinn acle color ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> em xx do ics can ( <ptr> dev <dot> <noptr> bus )
<cls> <noptr> last request show ( <ptr> s <dot> <ptr> data )
<cls> <ptr> vim c pix map by code ( <noptr> code )
<cls> <noptr> usb vision init ( )
<cls> <noptr> dr xxx j ic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> net up eeprom read ( <ptr> ic adap <dot> <noptr> addr )
<cls> <noptr> m xls fstream config bulk ( <ptr> stream <dot> <noptr> endpoint )
<cls> <noptr> fan show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mt write ( <ptr> fe <dot> <noptr> i buf <dot> <noptr> ilen )
<cls> <noptr> v pfe req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> req buf )
<cls> <noptr> ak x probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> tuner log status ( <ptr> sd )
<cls> <noptr> mtk mdp comp init ( <ptr> dev <dot> <ptr> node <dot> <ptr> comp <dot> <noptr> compid )
<cls> <noptr> ir mce kbd decode init ( )
<cls> <noptr> fim c alpha ctrl update ( <ptr> ctx )
<cls> <noptr> fd tvc a ready ( <ptr> stat )
<cls> <noptr> dmx c cdc resume ( <ptr> dev )
<cls> <noptr> c x reset ( <ptr> dev )
<cls> <noptr> ska a open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> sp write ic ( <ptr> s <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> isc runtime resume ( <ptr> dev )
<cls> <noptr> lg x read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> c cdc get frame format ( )
<cls> <noptr> tun ers radio ( <ptr> sd )
<cls> <noptr> c sit x probe ( <ptr> pdev )
<cls> <noptr> rcs i read ( <ptr> priv <dot> <noptr> reg )
<cls> <noptr> tw g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> ska aic read ( <ptr> client <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> px a camera deactivate ( <ptr> pc dev )
<cls> <noptr> tvp driver init ( )
<cls> <noptr> saa irq dequeue ( <ptr> dev )
<cls> <noptr> tt usb dec process packet ( <ptr> dec )
<cls> <noptr> em x xir fini ( <ptr> dev )
<cls> <noptr> m x probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> m xlt write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> c xs video encoding ( <ptr> c x hdl <dot> <noptr> val )
<cls> <noptr> c i of bpt init dummy ( <ptr> cio )
<cls> <noptr> vim c sca init cfg ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> csi phy hw version read ( <ptr> csi phy <dot> <ptr> dev )
<cls> <noptr> six set seek ( <ptr> radio <dot> <ptr> seek )
<cls> <noptr> venc calc b p frames ( <noptr> gop size <dot> <noptr> con seq b <dot> <ptr> bf <dot> <ptr> pf )
<cls> <noptr> l m mode ctrl ( <ptr> flash )
<cls> <noptr> tcs sett sid ( <ptr> fe )
<cls> <noptr> sub devs audio routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> v ls ext ctrls ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> saa enable is ( <ptr> dev )
<cls> <noptr> uvc ctrl get rel speed ( <ptr> mapping <dot> <noptr> query <dot> <ptr> data )
<cls> <noptr> copy image block crc b ( <ptr> src <dot> <ptr> dst <dot> <noptr> bytes per line <dot> <noptr> scale bits )
<cls> <noptr> ov x g frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> radio is as frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c x set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> vsp lut write ( <ptr> lut <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> sh soft reset ( <ptr> fe )
<cls> <noptr> ov probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> v pfe g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std id )
<cls> <noptr> c x usb medi on cf ref code ( <ptr> dvb dev <dot> <ptr> bt <dot> <noptr> first field <dot> <noptr> max lines <dot> <noptr> max line samples <dot> <noptr> buf )
<cls> <noptr> flex copi c func ( <ptr> adapter )
<cls> <noptr> stv x car width ( <noptr> s rate <dot> <noptr> roll off )
<cls> <noptr> sp firmware upload ( <ptr> state <dot> <ptr> fw )
<cls> <noptr> init r cmap ati x ( )
<cls> <noptr> exy nos jpeg set huff tbl ( <ptr> base )
<cls> <noptr> skip ( <ptr> buf <dot> <noptr> len )
<cls> <noptr> cec write clr set ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> vp if suspend ( <ptr> dev )
<cls> <noptr> aud vbs top feed ( <ptr> feed )
<cls> <noptr> bpp from code ( <noptr> code )
<cls> <noptr> bt tv switch type ( <ptr> f h <dot> <noptr> type )
<cls> <noptr> c xdr gpio ( <ptr> fe <dot> <ptr> gpio )
<cls> <noptr> sp jpeg jpg adr ( <ptr> regs <dot> <noptr> addr )
<cls> <noptr> c xs audio routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> ov set power off ( <ptr> ov )
<cls> <noptr> td a standby ( <ptr> fe )
<cls> <noptr> imx write mb reg ( <ptr> priv <dot> <noptr> addr <dot> <noptr> val <dot> <noptr> nbytes )
<cls> <noptr> uvc ctrl init ctrl ( <ptr> dev <dot> <ptr> ctrl )
<cls> <noptr> m rst sleep ( <ptr> fe )
<cls> <noptr> c x irs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> stb search data ( <ptr> state )
<cls> <noptr> m sig tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> sh get inversion ( <ptr> state )
<cls> <noptr> fops open ( <ptr> file )
<cls> <noptr> stv sleep ( <ptr> fe )
<cls> <noptr> ts reg map unlock ( <ptr> dev )
<cls> <noptr> ska a set brightness ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> go usb interface reset ( <ptr> go )
<cls> <noptr> s set front end ( <ptr> fe )
<cls> <noptr> sms to status ( <noptr> is demo d locked <dot> <noptr> isr f locked )
<cls> <noptr> stv read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> saa encoder configure ( <ptr> port )
<cls> <noptr> vid ioc g jpeg comp ( <ptr> file <dot> <ptr> priv <dot> <ptr> jpeg comp )
<cls> <noptr> vivid sdr s frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> z l write ( <ptr> state <dot> <noptr> buf <dot> <noptr> count )
<cls> <noptr> bt tv enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> upd alog status ( <ptr> sd )
<cls> <noptr> ss ctrl ( <ptr> ctrl )
<cls> <noptr> irr x suspend ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> vb i buffer filled ( <ptr> dev <dot> <ptr> dma q <dot> <ptr> buf )
<cls> <noptr> c xir close ( <ptr> rc )
<cls> <noptr> kon ica stream off ( <ptr> gsp ca dev )
<cls> <noptr> ske cg x enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> bt tv log status ( <ptr> file <dot> <ptr> f )
<cls> <ptr> check irq i switch ( )
<cls> <noptr> any see wr reg mask ( <ptr> d <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> t dax setup format ( <ptr> state <dot> <noptr> code )
<cls> <noptr> set reg bits ( <ptr> reg pair <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> ic w buf ( <ptr> gsp ca dev <dot> <ptr> buf <dot> <noptr> sz )
<cls> <noptr> omnis g dma abort channel ( <ptr> s )
<cls> <noptr> sh front end attach ( <ptr> adap )
<cls> <noptr> nv t clear reg bit ( <ptr> nv t <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> f mrt eax set direction ( <ptr> tea <dot> <noptr> output )
<cls> <noptr> adv set isr ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> solo ic flush ( <ptr> solo dev <dot> <noptr> wr )
<cls> <noptr> nv t shutdown ( <ptr> pdev )
<cls> <noptr> c xs ctrl ( <ptr> ctrl )
<cls> <noptr> stv x set bandwidth ( <ptr> fe <dot> <noptr> bandwidth )
<cls> <noptr> ska a initialize isp ( <ptr> sd )
<cls> <noptr> em xx init camera ( <ptr> dev )
<cls> <ptr> check disable rc ( )
<cls> <noptr> r car vin driver init ( )
<cls> <noptr> sp mfc probe ( <ptr> pdev )
<cls> <noptr> coda try fmt ( <ptr> ctx <dot> <ptr> codec <dot> <ptr> f )
<cls> <noptr> stk vid io cs fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt d )
<cls> <noptr> v l async sub dev notifier register ( <ptr> sd <dot> <ptr> notifier )
<cls> <noptr> mn get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> stb sleep ( <ptr> fe )
<cls> <noptr> img ir echo timer ( <ptr> t )
<cls> <noptr> or read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <ptr> check dvb demux speed check ( )
<cls> <noptr> tuner command ( <ptr> client <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> fim c ish w change mode ( <ptr> is )
<cls> <noptr> irl irc open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> z r xx board init ( <ptr> cam )
<cls> <noptr> rcs i set phy pll ( <ptr> priv <dot> <noptr> mbps )
<cls> <noptr> c x start v bid ma ( <ptr> dev <dot> <ptr> q <dot> <ptr> buf )
<cls> <noptr> vid ioc enum aud input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> iv tv process vb i data ( <ptr> it v <dot> <ptr> buf <dot> <noptr> pts stamp <dot> <noptr> stream type )
<cls> <noptr> preview enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> ov get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pluto read rev ( <ptr> pluto )
<cls> <noptr> a vir handler ( <ptr> av <dot> <noptr> ir com )
<cls> <noptr> vid ioc stream off ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> pid ftr setting ( <ptr> tn r dmd <dot> <ptr> pid ftr cfg )
<cls> <noptr> au resume ( <ptr> interface )
<cls> <noptr> h vah wits irq thread ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> cec wait timeout ( <ptr> work )
<cls> <noptr> adv probe ( <ptr> client )
<cls> <noptr> v l flash update led brightness ( <ptr> v l flash <dot> <ptr> ctrl )
<cls> <noptr> snd tea x init ( <ptr> tea <dot> <ptr> owner )
<cls> <noptr> stv ddb read signal strength ( <ptr> fe )
<cls> <noptr> fim ch w set in dma size ( <ptr> ctx )
<cls> <noptr> sun i video try fmt ( <ptr> video <dot> <ptr> f )
<cls> <noptr> vp fes std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std id )
<cls> <noptr> c xxx afe init channels ( <ptr> dev )
<cls> <noptr> adv x csi set virtual channel ( <ptr> tx <dot> <noptr> vc )
<cls> <noptr> l m init controls ( <ptr> flash <dot> <noptr> led no )
<cls> <noptr> c x dt nr dmd sleep ( <ptr> tn r dmd )
<cls> <noptr> stv start search ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> uvc dismiss privileges ( <ptr> handle )
<cls> <noptr> adv x write regs ( <ptr> state <dot> <ptr> regs )
<cls> <noptr> gen mjpeg hdr to package ( <ptr> go <dot> <ptr> code <dot> <noptr> space )
<cls> <ptr> r ga fmt find ( <ptr> f )
<cls> <noptr> c xdr set front end ( <ptr> fe )
<cls> <noptr> m cam ctl r stop dma ( <ptr> cam )
<cls> <noptr> video enum input ( <ptr> file <dot> <ptr> f h <dot> <ptr> input )
<cls> <noptr> em x xir start ( <ptr> rc )
<cls> <noptr> r x clk r xs max pulse width ( <ptr> c <dot> <noptr> ns <dot> <ptr> divider )
<cls> <noptr> pac do auto gain ( <ptr> gsp ca dev )
<cls> <noptr> sh vou g output ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> m sleep range ( <noptr> delay base )
<cls> <ptr> isl attach ( <ptr> fe <dot> <ptr> ic <dot> <noptr> ic addr <dot> <noptr> override set <dot> <noptr> override clear <dot> <noptr> override tone )
<cls> <noptr> last open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> max set lo freq ( <ptr> ctx <dot> <noptr> lo freq )
<cls> <noptr> c x usb bluebird rc query ( <ptr> d )
<cls> <noptr> n genes lot reset ( <ptr> dev )
<cls> <noptr> ov set stream mip i ( <ptr> sensor <dot> <noptr> on )
<cls> <noptr> tt usb dec stop iso xfer ( <ptr> dec )
<cls> <noptr> em dvb init ha upp auge wint v dual hd ( <ptr> dev )
<cls> <noptr> c x usb medi ons input ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <noptr> hor usa write regs ( <ptr> priv <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> fim c isp video irqhandler ( <ptr> is )
<cls> <noptr> cpi as input ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <noptr> tw x query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> dib update pll ( <ptr> fe <dot> <ptr> pll <dot> <noptr> bw <dot> <noptr> ratio )
<cls> <noptr> sh vou hw init ( <ptr> vou dev )
<cls> <noptr> tt usb dec fed vbs read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> sh set if freq ( <ptr> fe <dot> <noptr> khz )
<cls> <noptr> uds try format ( <ptr> uds <dot> <ptr> config <dot> <noptr> pad <dot> <ptr> fmt )
<cls> <noptr> tw probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> smi app init late controls ( <ptr> sensor )
<cls> <noptr> ov mode restore ( <ptr> sensor )
<cls> <noptr> ctrl get crop cap b h ( <ptr> cptr <dot> <ptr> val )
<cls> <noptr> stv x setup ( <ptr> fe )
<cls> <noptr> saa init ( <ptr> budget av )
<cls> <noptr> ves set tv freq ( <ptr> dev <dot> <noptr> freq )
<cls> <noptr> vid out buf out validate ( <ptr> vb )
<cls> <noptr> ov set m i pip clk ( <ptr> sensor <dot> <noptr> rate )
<cls> <noptr> iv tv g aud out ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <noptr> hel ene set params s ( <ptr> fe )
<cls> <noptr> bri stol tuner attach ( <ptr> adap )
<cls> <noptr> v pe enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check luma filter ( )
<cls> <noptr> c cdc enable v port ( <noptr> flag )
<cls> <ptr> check force pid filter usage ( )
<cls> <noptr> pvr ctrl get def ( <ptr> cptr <dot> <ptr> val ptr )
<cls> <noptr> a speed video driver init ( )
<cls> <noptr> ska probe ( <ptr> sd )
<cls> <noptr> h vah w runtime resume ( <ptr> dev )
<cls> <noptr> video ic query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> vcap )
<cls> <noptr> is if set frame format ( <noptr> frm fmt )
<cls> <ptr> dev node bits ( <noptr> vfl type )
<cls> <noptr> sms core get boardid ( <ptr> core )
<cls> <noptr> os d init ( <ptr> sd )
<cls> <noptr> mantis ic read ( <ptr> mantis <dot> <ptr> msg )
<cls> <noptr> tvp query d v ( <ptr> sd <dot> <ptr> index )
<cls> <ptr> jpeg huffman tables ( <ptr> length )
<cls> <noptr> m xlt sleep ( <ptr> fe )
<cls> <noptr> smi app set compose b inner ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel <dot> <dptr> crops <dot> <ptr> comp )
<cls> <noptr> coda get max dimensions ( <ptr> dev <dot> <ptr> codec <dot> <ptr> max w <dot> <ptr> max h )
<cls> <noptr> vsp uif read ( <ptr> uif <dot> <noptr> reg )
<cls> <noptr> p xac vb prepare ( <ptr> vb )
<cls> <noptr> pvr hd wget cur freq ( <ptr> h dw )
<cls> <noptr> cal process buffer complete ( <ptr> ctx )
<cls> <noptr> td a dump regs ( <ptr> fe <dot> <noptr> extended )
<cls> <noptr> sp jpeg rst int enable ( <ptr> regs <dot> <noptr> enable )
<cls> <noptr> v l async notifier has async sub dev ( <ptr> notifier <dot> <ptr> asd )
<cls> <noptr> venus helper set raw format ( <ptr> inst <dot> <noptr> h fi format <dot> <noptr> buf type )
<cls> <noptr> tt usb dec start feed ( <ptr> dvb dmx feed )
<cls> <noptr> init hardware ( )
<cls> <noptr> get m m fmt flags ( <noptr> stream type )
<cls> <noptr> q am demo d ulator command ( <ptr> state <dot> <noptr> number of parameters )
<cls> <noptr> ms register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> lg x read reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> arm thread ( <ptr> data )
<cls> <noptr> c xxx v dev init ( <ptr> dev <dot> <ptr> v fd <dot> <ptr> template <dot> <ptr> type name )
<cls> <noptr> t dax g d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> uvc ioctl s fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> dib ctrl tim f ( <ptr> fe <dot> <noptr> op <dot> <noptr> tim f )
<cls> <noptr> mba send dis eq c msg ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> s pcs isset params ( <ptr> state )
<cls> <noptr> fim c lite probe ( <ptr> pdev )
<cls> <noptr> ctrl get audio mode ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> x c get quality ( <ptr> priv <dot> <ptr> quality )
<cls> <noptr> l gs gl soft reset ( <ptr> state )
<cls> <noptr> cio notifier bound ( <ptr> notifier <dot> <ptr> sd <dot> <ptr> asd )
<cls> <noptr> pwc init controls ( <ptr> pdev )
<cls> <noptr> ctrl get crop cap dt ( <ptr> cptr <dot> <ptr> val )
<cls> <noptr> t dax detect tx v ( <ptr> sd )
<cls> <noptr> img ir change protocol ( <ptr> dev <dot> <ptr> ir type )
<cls> <noptr> table lookup ( <ptr> table <dot> <noptr> table size <dot> <noptr> reg value )
<cls> <noptr> ctrl master state get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> scm load fw ( <ptr> sd )
<cls> <noptr> delta runtime resume ( <ptr> dev )
<cls> <noptr> stv x front end algo ( <ptr> fe )
<cls> <noptr> sms dvb stats open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> em xx card setup ( <ptr> dev )
<cls> <noptr> ov start streaming ( <ptr> ov )
<cls> <noptr> rtl rdd e mod reg ( <ptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> ir raw load modules ( <ptr> protocols )
<cls> <noptr> am radio set stereo ( <ptr> radio <dot> <noptr> stereo )
<cls> <noptr> c pia stream off ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> sms dvb debug fs register ( )
<cls> <noptr> e set if gain ( <ptr> fe )
<cls> <noptr> css register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> cio v l enum fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> pvr hd wget input available ( <ptr> h dw )
<cls> <noptr> dib x tuner reset ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> td a write ( <ptr> sd <dot> <noptr> sub addr <dot> <noptr> val )
<cls> <noptr> ctrl get balance ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> enet x set transmitter s ( <ptr> dev )
<cls> <noptr> dib host bus drive ( <ptr> state <dot> <noptr> drive )
<cls> <noptr> venus sys set power control ( <ptr> h dev <dot> <noptr> enable )
<cls> <noptr> omni sgd main it ( <ptr> cobalt )
<cls> <ptr> isp stat buf find oldest or empty ( <ptr> stat )
<cls> <noptr> v l print enc idx ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> exy nos jpeg set y ( <ptr> regs <dot> <noptr> y )
<cls> <noptr> dtt ufe set front end ( <ptr> fe )
<cls> <noptr> cio csi calc timing ( <ptr> cio <dot> <ptr> q <dot> <ptr> timing )
<cls> <noptr> m sig frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> enable punct urer ate ( <ptr> state <dot> <noptr> rate )
<cls> <noptr> ves x set fec ( <ptr> state <dot> <noptr> fec )
<cls> <noptr> c x usb medi on field order ( <ptr> c x dev )
<cls> <noptr> sig mod ulator ( <ptr> sd <dot> <ptr> vm )
<cls> <noptr> vsp device get ( <ptr> vsp )
<cls> <noptr> isc start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> c xxx set mode ( <ptr> dev <dot> <noptr> set mode )
<cls> <noptr> sp jpeg runtime suspend ( <ptr> dev )
<cls> <noptr> sp cec irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> resizer set output offset ( <ptr> res <dot> <noptr> offset )
<cls> <noptr> ce u stop streaming ( <ptr> v q )
<cls> <ptr> check wss cfg ( )
<cls> <ptr> v bdc get dma buf ( <ptr> buf priv <dot> <noptr> flags )
<cls> <noptr> taz set aud mode ( <ptr> chip <dot> <noptr> mode )
<cls> <noptr> iv tv stream init ( <ptr> it v <dot> <noptr> type )
<cls> <ptr> check learning mode force ( )
<cls> <noptr> sp clr pending tx ( <ptr> cec )
<cls> <noptr> sp mfc set enc params vp ( <ptr> ctx )
<cls> <ptr> to ske cg x ( <ptr> sd )
<cls> <noptr> sf w chunk complete ( <ptr> urb )
<cls> <noptr> philip std ml tuner init ( <ptr> fe )
<cls> <noptr> vp if stop streaming ( <ptr> v q )
<cls> <noptr> ite open ( <ptr> rc dev )
<cls> <noptr> simple get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> t dax query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> c x set freq ( <ptr> core <dot> <ptr> f )
<cls> <noptr> air spy set ln again ( <ptr> s )
<cls> <noptr> tm set reg ( <ptr> dev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index )
<cls> <noptr> fdp configured e int mode ( <ptr> ctx <dot> <ptr> job )
<cls> <noptr> command set compression ( <ptr> gsp ca dev )
<cls> <noptr> sp mfc set enc params mpeg ( <ptr> ctx )
<cls> <noptr> wl f m fops open ( <ptr> file )
<cls> <noptr> scmd status ( <ptr> vc <dot> <ptr> p status )
<cls> <noptr> spc sis seth sync settle ( <ptr> state <dot> <noptr> settle )
<cls> <noptr> pvr h dw setup ( <ptr> h dw )
<cls> <noptr> m i pid stream enable ( <ptr> bridge )
<cls> <noptr> resizer link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> v pfe reg read ( <ptr> c cdc <dot> <noptr> offset )
<cls> <noptr> l gs gxx write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> data )
<cls> <ptr> finish field prepare next ( <ptr> dev <dot> <ptr> buf <dot> <ptr> dma q )
<cls> <noptr> b tt vir stop ( <ptr> b tv )
<cls> <noptr> saa buffer display ( <ptr> buf )
<cls> <noptr> shark led work ( <ptr> work )
<cls> <noptr> c xxx is blk initialize ( <ptr> dev )
<cls> <noptr> go start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> mds driver init ( )
<cls> <noptr> c xde run freeze regs ( <ptr> priv )
<cls> <noptr> v dec subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> vid ioc req buf s ( <ptr> file <dot> <ptr> f h <dot> <ptr> b )
<cls> <noptr> stb post proc ( <ptr> state <dot> <noptr> ctl <dot> <noptr> enable )
<cls> <noptr> tc sleep mode ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> me so nir shutdown ( <ptr> pdev )
<cls> <noptr> vid ioc log status ( <ptr> file <dot> <ptr> priv )
<cls> <noptr> v dec vp decode ( <ptr> h v dec <dot> <ptr> bs <dot> <ptr> fb <dot> <ptr> res chg )
<cls> <noptr> av set vid mode ( <ptr> av <dot> <noptr> mode )
<cls> <noptr> cal async bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> via cam open ( <ptr> filp )
<cls> <noptr> m cam set contig buffer ( <ptr> cam <dot> <noptr> frame )
<cls> <noptr> is igraph parse ( <ptr> is i <dot> <ptr> node )
<cls> <noptr> m anti shif write wait ( <ptr> ca )
<cls> <noptr> si get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> ske cg x power off ( <ptr> priv )
<cls> <noptr> v l print buffer ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> dr xxx j read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <ptr> fim c find format ( <ptr> pixel format <dot> <ptr> mbus code <dot> <noptr> mask <dot> <noptr> index )
<cls> <noptr> tcc ec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> fill raw fmt s ( <ptr> cap <dot> <ptr> fmt s <dot> <noptr> num fmt s )
<cls> <noptr> sun ics i enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> inp )
<cls> <noptr> saa set output type ( <ptr> sd <dot> <noptr> output )
<cls> <noptr> tc initial setup ( <ptr> sd )
<cls> <noptr> mt kvp u driver init ( )
<cls> <noptr> power disable ( <ptr> info )
<cls> <noptr> pt start polling ( <ptr> pt )
<cls> <noptr> lg dta monitor vsb ( <ptr> state )
<cls> <noptr> iv tv queue init ( <ptr> q )
<cls> <noptr> omap isp stat dma isr ( <ptr> stat )
<cls> <noptr> hi x h dir probe ( <ptr> pdev )
<cls> <noptr> ov xs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> stv x optimize car loop short ( <ptr> state )
<cls> <noptr> vsp video stream on ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> ptic read bit ( <ptr> pt <dot> <noptr> addr <dot> <ptr> addr p )
<cls> <noptr> pvr h dw cpu fw set enabled ( <ptr> h dw <dot> <noptr> mode <dot> <noptr> enable flag )
<cls> <noptr> nxt write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> smi app open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> t dab ass ( <noptr> val )
<cls> <noptr> or rect ion ( <ptr> state <dot> <noptr> frequency )
<cls> <noptr> solo fill buf ( <ptr> solo dev <dot> <ptr> vb )
<cls> <noptr> ov get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> opera pid filter ( <ptr> adap <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> so log config ( <ptr> solo dev )
<cls> <noptr> dvb sky tc attach ( <ptr> adap )
<cls> <noptr> saa bus verify ( <ptr> dev )
<cls> <noptr> t dax configure vid out ( <ptr> state )
<cls> <noptr> v lsh w freq seek ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> is if get fid ( )
<cls> <noptr> tv preset ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> spc sis suspend ( <ptr> dev )
<cls> <noptr> iv tv stop all captures ( <ptr> it v )
<cls> <noptr> f m download firmware ( <ptr> f m dev <dot> <ptr> fw name )
<cls> <noptr> device frame end ( <ptr> fdp <dot> <noptr> state )
<cls> <noptr> ite get carrier freq bits ( <noptr> freq )
<cls> <noptr> saa write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> v pu irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> read pc card ( <ptr> c i <dot> <noptr> address <dot> <ptr> data <dot> <noptr> n )
<cls> <noptr> v pfe enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> m configure ( <ptr> gsp ca dev <dot> <ptr> id )
<cls> <noptr> imx stop streaming ( <ptr> imx )
<cls> <noptr> c x std setup ( <ptr> client )
<cls> <noptr> via cam g fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> c x set scl ( <ptr> data <dot> <noptr> state )
<cls> <ptr> g obj type ( <noptr> type )
<cls> <noptr> af usb module init ( )
<cls> <noptr> ir raw event store edge ( <ptr> dev <dot> <noptr> pulse )
<cls> <noptr> ge comp ( <noptr> a <dot> <noptr> width )
<cls> <noptr> sp mfc set enc params hevc ( <ptr> ctx )
<cls> <noptr> upd as register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> radio sip driver probe ( <ptr> pdev )
<cls> <noptr> scm enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> em xx is ac ready ( <ptr> dev )
<cls> <noptr> d sic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> coda start decoding ( <ptr> ctx )
<cls> <ptr> video dev data ( <ptr> file )
<cls> <noptr> saa buffer cfg port ( <ptr> port )
<cls> <noptr> usb vision register video ( <ptr> usb vision )
<cls> <noptr> solo ring stop ( <ptr> solo dev )
<cls> <noptr> cam ss init sub devices ( <ptr> cam ss )
<cls> <noptr> dib risc debug buf ( <ptr> state <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> m x mt front end attach ( <ptr> adap )
<cls> <noptr> ak x get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> vcodec send api pi ( <ptr> v pu <dot> <noptr> msgid )
<cls> <noptr> clear buffers ( <ptr> chan )
<cls> <noptr> pvr ctrl custom value to sym ( <ptr> cptr <dot> <noptr> mask <dot> <noptr> val <dot> <ptr> buf <dot> <noptr> max len <dot> <ptr> len )
<cls> <ptr> adv get d v timings cap ( <ptr> sd )
<cls> <noptr> via cam probe ( <ptr> pdev )
<cls> <noptr> v l find d v timings cea vic ( <ptr> t <dot> <noptr> vic )
<cls> <noptr> reg w buf ( <ptr> gsp ca dev <dot> <ptr> cmd )
<cls> <noptr> isset drc control ( <ptr> is <dot> <noptr> val )
<cls> <ptr> pvr config get name ( <noptr> cfg )
<cls> <noptr> stk clean iso ( <ptr> dev )
<cls> <noptr> hd css ctrl ( <ptr> ctrl )
<cls> <noptr> q mdc set srch mode ( <ptr> state <dot> <noptr> fast )
<cls> <noptr> isc enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> fdt v set front end ( <ptr> fe )
<cls> <noptr> pluto hw init ( <ptr> pluto )
<cls> <noptr> mtk vcodec enc irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> ves read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> l gs gxx init ( <ptr> fe )
<cls> <noptr> pinn sat tuner init ( <ptr> fe )
<cls> <noptr> isp if enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <ptr> get isp dma ( <ptr> is )
<cls> <noptr> any see read config ( <ptr> d )
<cls> <noptr> adv smbus write byte nocheck ( <ptr> client <dot> <noptr> command <dot> <noptr> value )
<cls> <noptr> si init pll ( <ptr> state )
<cls> <noptr> ov reset ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> exy nos jpeg clear timer status ( <ptr> regs )
<cls> <noptr> vb buffer done ( <ptr> vb <dot> <noptr> state )
<cls> <noptr> stv ter read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> ct ivy ( <ptr> budget <dot> <noptr> voltage )
<cls> <noptr> ddb mci cmd ( <ptr> state <dot> <ptr> command <dot> <ptr> result )
<cls> <noptr> mtk jpeg enum fmt ( <ptr> mtk jpeg formats <dot> <noptr> n <dot> <ptr> f <dot> <noptr> type )
<cls> <noptr> xt pgp m suspend ( <ptr> dev )
<cls> <ptr> check m mbs ( )
<cls> <noptr> set blue balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> f dps ctrl ( <ptr> ctrl )
<cls> <noptr> usb vis ionic register ( <ptr> usb vision )
<cls> <noptr> stv ter gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> mtk v dec queue res chg event ( <ptr> ctx )
<cls> <noptr> spc sis irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> dst checksum ( <ptr> buf <dot> <noptr> len )
<cls> <ptr> media entity find link ( <ptr> source <dot> <ptr> sink )
<cls> <noptr> vs pdu pipeline configure ( <ptr> pipe )
<cls> <noptr> ov set ctrl hue ( <ptr> sensor <dot> <noptr> value )
<cls> <noptr> c x usb aux buf init ( <ptr> dvb dev <dot> <ptr> aux buf <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> isset fd config mouth detect ( <ptr> is <dot> <noptr> val )
<cls> <noptr> decode plane ( <ptr> cf <dot> <dptr> rl co <dot> <noptr> height <dot> <noptr> width <dot> <ptr> ref <dot> <noptr> ref stride <dot> <noptr> ref step <dot> <ptr> dst <dot> <noptr> dst stride <dot> <noptr> dst step <dot> <noptr> un compressed <dot> <ptr> endof rl co buf )
<cls> <noptr> techni sat usb set led ( <ptr> d <dot> <noptr> red <dot> <noptr> st )
<cls> <noptr> ffset ( <noptr> mode <dot> <noptr> stand erd )
<cls> <noptr> si wait init done ( <ptr> state )
<cls> <noptr> d ibm c identify ( <ptr> state )
<cls> <noptr> is i enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> wl f m rds on ( <ptr> radio )
<cls> <noptr> v l m m q buf ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> buf )
<cls> <noptr> vpx read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> cam if try compose ( <ptr> cam if <dot> <ptr> vp <dot> <ptr> r )
<cls> <noptr> c pia usb stream pause ( <ptr> cam )
<cls> <noptr> cam if hw set target format ( <ptr> vp )
<cls> <noptr> isc clk init ( <ptr> isc )
<cls> <noptr> media device get info ( <ptr> dev <dot> <ptr> arg )
<cls> <noptr> delta put auto suspend ( <ptr> ctx )
<cls> <noptr> au read signal strength ( <ptr> fe <dot> <ptr> signal strength )
<cls> <noptr> vp beg std ( <ptr> v pbe dev <dot> <ptr> std id )
<cls> <noptr> td a set ins mod ( <ptr> fe )
<cls> <noptr> sa ats fini ( <ptr> dev )
<cls> <noptr> d ibm c sleep ( <ptr> demo d )
<cls> <noptr> v l format block height ( <ptr> info <dot> <noptr> plane )
<cls> <noptr> saa set clipping rect ( <ptr> f h )
<cls> <noptr> v l ctrl query fill ( <ptr> q ctrl <dot> <noptr> min <dot> <noptr> max <dot> <noptr> step <dot> <noptr> def )
<cls> <noptr> m chip sync ( <noptr> reg )
<cls> <noptr> c x irr x read ( <ptr> sd <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> num )
<cls> <noptr> cec pin high ( <ptr> pin )
<cls> <noptr> tw set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> vp dma addin dtd ( <ptr> list <dot> <noptr> width <dot> <noptr> stride <dot> <ptr> crect <dot> <ptr> fmt <dot> <noptr> dma addr <dot> <noptr> chan <dot> <noptr> field <dot> <noptr> flags <dot> <noptr> frame width <dot> <noptr> frame height <dot> <noptr> start h <dot> <noptr> start v )
<cls> <noptr> net upc i get mem ( <ptr> dev )
<cls> <ptr> get medi onkey map ( <ptr> interface )
<cls> <noptr> set vw size ( <ptr> cam <dot> <noptr> size )
<cls> <noptr> set tre ble ( <ptr> c x <dot> <noptr> tre ble )
<cls> <noptr> ov runtime resume ( <ptr> dev )
<cls> <noptr> stk p tuner attach ( <ptr> adap )
<cls> <noptr> saa v v init module ( )
<cls> <noptr> status ( <ptr> state <dot> <ptr> p lock status )
<cls> <noptr> venus helper queued pb buf s ( <ptr> inst )
<cls> <noptr> ad registered ( <ptr> sub dev )
<cls> <noptr> h vah fill data nal ( <ptr> p ctx <dot> <noptr> stuff ing bytes <dot> <ptr> addr <dot> <noptr> stream size <dot> <ptr> size )
<cls> <noptr> exy nos jpeg img adr ( <ptr> regs <dot> <ptr> img addr )
<cls> <noptr> pvr ctl write complete ( <ptr> urb )
<cls> <noptr> v l stub gen c index ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> dst check stv ( <ptr> state )
<cls> <noptr> gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> r vin crop scale comp gen ( <ptr> vin )
<cls> <noptr> stv get err count ( <ptr> int p <dot> <noptr> cntr <dot> <noptr> demo d )
<cls> <noptr> dvb sky stream ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> vid io css election ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> is ifconfig csc ( <ptr> df csc )
<cls> <noptr> ov set virtual channel ( <ptr> sd <dot> <noptr> channel )
<cls> <noptr> dvb video ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <noptr> fim c capture state cleanup ( <ptr> fim c <dot> <noptr> suspend )
<cls> <noptr> usb urb submit ( <ptr> stream )
<cls> <noptr> smi app read no quirk ( <ptr> sensor <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> pv ric core init ( <ptr> h dw )
<cls> <noptr> m xlt tuner attach ( <ptr> adap )
<cls> <noptr> fim c sub dev get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> init r cmap em ter rate c ( )
<cls> <noptr> dtv property process set ( <ptr> fe <dot> <ptr> file <dot> <noptr> cmd <dot> <noptr> data )
<cls> <ptr> to noon ( <ptr> sd )
<cls> <noptr> ttc i init ( <ptr> a )
<cls> <noptr> sh ve uis streamer ( <ptr> ve u <dot> <ptr> ve u file <dot> <noptr> type )
<cls> <noptr> exy no shuff tbl len ( <noptr> class <dot> <noptr> id )
<cls> <noptr> vsp pipeline stop ( <ptr> pipe )
<cls> <noptr> hdp vr register ic adapter ( <ptr> dev )
<cls> <noptr> ish w update params ( <ptr> is )
<cls> <noptr> ska a set exposure ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> simple set aux byte ( <ptr> fe <dot> <noptr> config <dot> <noptr> aux )
<cls> <noptr> swap buffer ( <ptr> p <dot> <noptr> len )
<cls> <noptr> omap isp preview busy ( <ptr> prev )
<cls> <noptr> mtm seth v flip ( <ptr> gsp ca dev )
<cls> <noptr> preview enable one shot ( <ptr> prev )
<cls> <noptr> adb update monitor present status ( <ptr> sd )
<cls> <noptr> i soc enable ( <ptr> gsp ca dev )
<cls> <ptr> to vs ( <ptr> sd )
<cls> <noptr> c x dvb register ( <ptr> port )
<cls> <noptr> ov set auto gain ( <ptr> sensor <dot> <noptr> on )
<cls> <noptr> simple sleep ( <ptr> fe )
<cls> <noptr> j te w limits ( <ptr> sensor )
<cls> <noptr> d ibm set agc config ( <ptr> state <dot> <noptr> b and )
<cls> <noptr> restart video queue ( <ptr> dev <dot> <ptr> q )
<cls> <noptr> try mailbox ( <ptr> it v <dot> <ptr> mb data <dot> <noptr> mb )
<cls> <noptr> ov stream disable ( <ptr> sensor )
<cls> <noptr> pt set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> cam poll ( <ptr> c i )
<cls> <ptr> ts out exchange ( <ptr> priv <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> clock <dot> <noptr> flags )
<cls> <noptr> r tread ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> philip std tuner sleep ( <ptr> fe )
<cls> <noptr> io read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> stk sensor set brightness ( <ptr> dev <dot> <noptr> br )
<cls> <noptr> t pgp recalculate line ( <ptr> tp g )
<cls> <noptr> ic slave did read ack ( <ptr> ic adap )
<cls> <noptr> i x v read status reg ( <ptr> state )
<cls> <noptr> command set v l offset ( <ptr> gsp ca dev )
<cls> <noptr> mtm set color f x ( <ptr> mtm <dot> <noptr> val )
<cls> <noptr> coda g fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> stv x delivery search ( <ptr> state )
<cls> <noptr> dib ctrl agc filter ( <ptr> fe <dot> <noptr> open )
<cls> <noptr> bt tv irq next video ( <ptr> b tv <dot> <ptr> set )
<cls> <noptr> po probe ( <ptr> sd )
<cls> <ptr> check io shift ( )
<cls> <noptr> v pfe video buf setup ( <ptr> v q <dot> <ptr> count <dot> <ptr> size )
<cls> <ptr> c x format by fourcc ( <noptr> fourcc )
<cls> <noptr> img ir change frequency ( <ptr> priv <dot> <ptr> change )
<cls> <noptr> adv query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> polls lot status ( <ptr> ca <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> adv x hdmi get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> saa x g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> ati remote initialize ( <ptr> ati remote )
<cls> <noptr> c i get data ( <ptr> c i buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> d ibm b x get message attr ( <ptr> state <dot> <noptr> id <dot> <ptr> msg <dot> <ptr> size <dot> <noptr> attr )
<cls> <noptr> p xac sensor set power ( <ptr> pc dev <dot> <noptr> on )
<cls> <noptr> b disp g fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ic irq show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> videog input ( <ptr> file <dot> <ptr> f h <dot> <ptr> input )
<cls> <noptr> iv tv get output ( <ptr> it v <dot> <noptr> index <dot> <ptr> output )
<cls> <noptr> pvr send request ( <ptr> h dw <dot> <ptr> write data <dot> <noptr> write len <dot> <ptr> read data <dot> <noptr> read len )
<cls> <noptr> g sch w set out image format ( <ptr> ctx )
<cls> <noptr> saa alsa d main it ( <ptr> dev <dot> <noptr> nr pages )
<cls> <noptr> dvb device open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> c x dev setup ( <ptr> dev )
<cls> <noptr> is px clk update ( <ptr> x clk <dot> <noptr> divider )
<cls> <noptr> adv g tv norms ( <ptr> sd <dot> <ptr> norm )
<cls> <noptr> any see rc query ( <ptr> d )
<cls> <noptr> msm v fe register entities ( <ptr> v fe <dot> <ptr> v l dev )
<cls> <noptr> deltas fmt frame ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> tw x video init ( <ptr> dev )
<cls> <noptr> csi isr buffer ( <ptr> csi )
<cls> <noptr> reg w lin tbl ( <noptr> val <dot> <noptr> offset <dot> <noptr> i )
<cls> <noptr> iv tv g fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> dc mig fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> x c write reg ( <ptr> priv <dot> <noptr> reg addr <dot> <noptr> ic data )
<cls> <noptr> m xls write regs ( <ptr> fe <dot> <ptr> addr table <dot> <ptr> data table <dot> <noptr> len )
<cls> <noptr> usb keen e resume ( <ptr> int f )
<cls> <noptr> maxs ctrl ( <ptr> ctrl )
<cls> <noptr> b disp ctx state isset ( <noptr> mask <dot> <ptr> ctx )
<cls> <noptr> mtp enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> iv tvp io work handler ( <ptr> it v )
<cls> <noptr> spc ax setup q table ( <ptr> gsp ca dev <dot> <noptr> request <dot> <noptr> y base <dot> <noptr> c base <dot> <noptr> q table )
<cls> <noptr> c x mdl swap ( <ptr> mdl )
<cls> <noptr> handle iso ( <ptr> context <dot> <noptr> cycle <dot> <noptr> header length <dot> <ptr> header <dot> <ptr> data )
<cls> <noptr> tvp probe ( <ptr> c )
<cls> <noptr> process ir data ( <ptr> ir <dot> <noptr> len )
<cls> <noptr> saa pg table build ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> cam if hw set camera crop ( <ptr> cam if )
<cls> <noptr> af reset prev iter b i ( <ptr> fe )
<cls> <noptr> saa hss ctrl ( <ptr> ctrl )
<cls> <noptr> lg dta set modulation ( <ptr> state <dot> <ptr> p )
<cls> <noptr> mtk jpeg dec start ( <ptr> base )
<cls> <noptr> net upc is lot shutdown ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> z l init ( <ptr> fe )
<cls> <noptr> d v bus bic init ( <ptr> d )
<cls> <noptr> uvc ctrl send slave event ( <ptr> chain <dot> <ptr> handle <dot> <ptr> master <dot> <noptr> slave id )
<cls> <noptr> m m ols do scene mode ( <ptr> info <dot> <noptr> mode )
<cls> <noptr> ska a read ( <ptr> client <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> v l clk disable ( <ptr> clk )
<cls> <noptr> isp video capture start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> alsa fnc ( <ptr> vb <dot> <ptr> priv )
<cls> <noptr> dib reset pll common ( <ptr> state <dot> <ptr> bw )
<cls> <noptr> smi ic set scl ( <ptr> data <dot> <noptr> state <dot> <noptr> sw ctl )
<cls> <noptr> pvr ctrl is writable ( <ptr> cptr )
<cls> <noptr> m xls f hw do set gpio ( <ptr> state <dot> <noptr> gpio <dot> <noptr> direction <dot> <noptr> val )
<cls> <noptr> ov g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> fim cmd init ( )
<cls> <noptr> validate by version ( <noptr> flags <dot> <noptr> version )
<cls> <noptr> i spread ( <noptr> offset )
<cls> <noptr> cpi ag input ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> c x usb medi on cf ref cv bis mpl ( <ptr> dvb dev <dot> <ptr> bt <dot> <noptr> buf )
<cls> <noptr> dib set dc servo ( <ptr> fe <dot> <noptr> dc servo cutoff )
<cls> <noptr> c cdc configure fpc ( <ptr> c cdc )
<cls> <noptr> stv write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> em xx audio suspend ( <ptr> dev )
<cls> <ptr> get enc v l ioctl ops ( )
<cls> <noptr> is dynamic buf mode ( <ptr> inst )
<cls> <noptr> m tt get format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> ov read ( <ptr> client <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> fim cmd probe ( <ptr> pdev )
<cls> <noptr> med usa set brightness ( <ptr> dev <dot> <noptr> brightness <dot> <noptr> decoder )
<cls> <noptr> c x dt nr dmd dvb t mon sampling offset sub ( <ptr> tn r dmd <dot> <ptr> ppm )
<cls> <noptr> n ( <ptr> cam )
<cls> <noptr> ths s power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> put v l standard ( <ptr> p <dot> <ptr> p )
<cls> <noptr> preview config luma enhancement ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> uvc ctrl get ( <ptr> chain <dot> <ptr> ctrl <dot> <ptr> mapping <dot> <ptr> value )
<cls> <noptr> c x der active t to sleep tc ( <ptr> priv )
<cls> <noptr> ich ack c x ( <ptr> h dw <dot> <noptr> ic addr <dot> <ptr> w data <dot> <noptr> w len <dot> <ptr> r data <dot> <noptr> r len )
<cls> <noptr> te acs routing ( <ptr> sd <dot> <noptr> i <dot> <noptr> o <dot> <noptr> config )
<cls> <noptr> sh ve u query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <ptr> cec notifier parse hdmi phandle ( <ptr> dev )
<cls> <noptr> px pv l pix fmt to out format ( <noptr> v l pix fmt )
<cls> <noptr> iv tvf b blank ( <noptr> blank mode <dot> <ptr> info )
<cls> <noptr> saa board init ( <ptr> dev )
<cls> <ptr> check ir sample rate ( )
<cls> <noptr> cxx handler seth z ( <ptr> c x hdl <dot> <noptr> ish z )
<cls> <noptr> set sub carrier freq ( <ptr> sd <dot> <noptr> pass through )
<cls> <noptr> vivid cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> init r cmap tango ( )
<cls> <noptr> au media graph notify ( <ptr> new <dot> <ptr> notify data )
<cls> <noptr> sh set q am am hum mode legacy ( <ptr> fe )
<cls> <noptr> b sr bsp trailing ( <ptr> s )
<cls> <noptr> isc configure ( <ptr> isc )
<cls> <noptr> c x set bandwidth ( <ptr> state <dot> <noptr> bandwidth khz )
<cls> <noptr> vid ioc v dec enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v pfe resume ( <ptr> dev )
<cls> <noptr> saa g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> id )
<cls> <noptr> h fi session ftb done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> z r xx open ( <ptr> file )
<cls> <noptr> c x set pixel format ( <ptr> dev <dot> <noptr> channel select <dot> <noptr> format )
<cls> <ptr> check full ts ( )
<cls> <noptr> rtl slave ts ctrl ( <ptr> client <dot> <noptr> enable )
<cls> <noptr> ddb device attrs add ( <ptr> dev )
<cls> <noptr> usb tv query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> ic reset ( <ptr> dev )
<cls> <noptr> s start read pipe ( <ptr> dev )
<cls> <noptr> v pe irq ( <noptr> irq v pe <dot> <ptr> data )
<cls> <noptr> dr x k sleep ( <ptr> fe )
<cls> <noptr> img ir set wake filter ( <ptr> priv <dot> <ptr> filter )
<cls> <noptr> bt tv input timer ( <ptr> t )
<cls> <noptr> norm min h ( <ptr> vc )
<cls> <noptr> cobalt g parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> ctrl clear dirty bass ( <ptr> cptr )
<cls> <noptr> avp t init ( <ptr> p <dot> <ptr> feed )
<cls> <noptr> ec driver init ( )
<cls> <noptr> net up uni dvb fini dev ( <ptr> pci dev )
<cls> <noptr> pvr h dw setup low ( <ptr> h dw )
<cls> <noptr> vb core stream on ( <ptr> q <dot> <noptr> type )
<cls> <noptr> resizer set output size ( <ptr> res <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> v pfe g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> r card rif dma complete ( <ptr> dma async param )
<cls> <noptr> k mem cache shrink all ( <ptr> s )
<cls> <noptr> video mux probe ( <ptr> pdev )
<cls> <noptr> fim c irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> g sch w set output path ( <ptr> ctx )
<cls> <noptr> vid io cs fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ir open ( <ptr> dev )
<cls> <noptr> c cdc set out addr ( <ptr> c cdc <dot> <noptr> addr )
<cls> <ptr> check iv tv yuv threshold ( )
<cls> <noptr> go update board ( <ptr> go )
<cls> <ptr> check adjust yoffset ( )
<cls> <noptr> m bas init fe ( <ptr> fe )
<cls> <noptr> em xx audio ep packet size ( <ptr> udev <dot> <ptr> e )
<cls> <noptr> m i pid async unbind ( <ptr> notifier <dot> <ptr> ssub dev <dot> <ptr> asd )
<cls> <noptr> cec pin adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> red rat dev driver init ( )
<cls> <noptr> iri mon decode scan code ( <ptr> dev )
<cls> <noptr> mantis d main it ( <ptr> mantis )
<cls> <noptr> bts at ( <ptr> b tv <dot> <noptr> color )
<cls> <noptr> isp video try format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> saa dump regs ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> px p setup csc ( <ptr> ctx )
<cls> <noptr> c x der read status i ( <ptr> priv <dot> <ptr> sync <dot> <ptr> ts lock <dot> <ptr> unlock )
<cls> <noptr> dvb dvr write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> venus session start ( <ptr> inst )
<cls> <noptr> c x stu ner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> usb vision v l open ( <ptr> file )
<cls> <noptr> mpeg sequence header ( <ptr> go <dot> <ptr> buf <dot> <noptr> ext )
<cls> <noptr> sdch ipinfo ( <ptr> gsp ca dev <dot> <ptr> chip )
<cls> <noptr> dib set adc state ( <ptr> state <dot> <noptr> no )
<cls> <noptr> rc key down no timeout ( <ptr> dev <dot> <noptr> protocol <dot> <noptr> scan code <dot> <noptr> toggle )
<cls> <noptr> fim ch w disable capture ( <ptr> dev )
<cls> <ptr> check x tal ( )
<cls> <noptr> a fwrite regi c ( <ptr> d <dot> <noptr> addr <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sub dev log status ( <ptr> sd )
<cls> <noptr> tt usb driver init ( )
<cls> <ptr> check use front end ( )
<cls> <noptr> update formatter ( <ptr> sensor <dot> <noptr> streaming )
<cls> <noptr> sc set vs coeffs ( <ptr> sc <dot> <ptr> addr <dot> <noptr> srch <dot> <noptr> d sth )
<cls> <noptr> tv audio get stereo ( <ptr> dev <dot> <ptr> audio )
<cls> <noptr> ir raw event prepare ( <ptr> dev )
<cls> <noptr> sp jpeg result stat ok ( <ptr> regs )
<cls> <noptr> net up uni dvb isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> media device get topology ( <ptr> m dev <dot> <ptr> arg )
<cls> <ptr> check desc mode ( )
<cls> <noptr> tw x dma delay ( <ptr> t )
<cls> <noptr> dvb filter pest s ( <ptr> pts <dot> <ptr> pes <dot> <noptr> len <dot> <noptr> payload start )
<cls> <noptr> dt tur c query ( <ptr> d )
<cls> <noptr> debug f cp ( <ptr> data <dot> <noptr> length )
<cls> <noptr> pvr io read done ( <ptr> cp )
<cls> <noptr> fim c lite try compose ( <ptr> fim c <dot> <ptr> r )
<cls> <noptr> uvc ioctl query ext ctrl ( <ptr> file <dot> <ptr> f h <dot> <ptr> q ec )
<cls> <noptr> fim c isp sub dev set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> d ibm c set timing ( <ptr> state <dot> <noptr> nfft <dot> <noptr> bw <dot> <noptr> update offset )
<cls> <noptr> reg wix buf ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <ptr> buffer <dot> <noptr> len )
<cls> <noptr> net up uni dvb dvb init ( <ptr> n dev <dot> <noptr> num )
<cls> <noptr> fim cmm shutdown ( <ptr> ctx )
<cls> <noptr> c x dt nr dmd mon internal cpu status sub ( <ptr> tn r dmd <dot> <ptr> status )
<cls> <noptr> slot ts enable x o ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> vb core exp buf ( <ptr> q <dot> <ptr> fd <dot> <noptr> type <dot> <noptr> index <dot> <noptr> plane <dot> <noptr> flags )
<cls> <noptr> last request open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> b disp start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> command set ecp timing ( <ptr> gsp ca dev )
<cls> <noptr> isp pipeline wait c cdc ( <ptr> isp )
<cls> <noptr> v l device register ( <ptr> dev <dot> <ptr> v l dev )
<cls> <noptr> t dax log status ( <ptr> sd )
<cls> <noptr> vid ioc g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> get key fusion h dtv ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> spx sleep ( <ptr> fe )
<cls> <ptr> vsp histogram buffer get ( <ptr> histo )
<cls> <noptr> std log ( <ptr> ctrl )
<cls> <noptr> init r cmap any see ( )
<cls> <noptr> v l m m fop poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> d ibm reset gpio ( <ptr> st )
<cls> <noptr> try write address ( <ptr> ic adap <dot> <noptr> addr <dot> <noptr> retries )
<cls> <noptr> m x write seq ( <ptr> udev <dot> <noptr> request <dot> <ptr> seq )
<cls> <noptr> uvc parse vendor control ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> buf len )
<cls> <noptr> vpx fe send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> rtl wr demo d reg ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> mtv write ( <ptr> c <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> vs pdu atomic begin ( <ptr> dev <dot> <noptr> pipe index )
<cls> <noptr> px p query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> av fe set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> m m ols busy wait ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value <dot> <noptr> mask <dot> <noptr> timeout )
<cls> <ptr> to a kvc m ( <ptr> ctrl )
<cls> <noptr> v pe query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> fim c is ic probe ( <ptr> pdev )
<cls> <noptr> v pbe set output ( <ptr> v pbe dev <dot> <noptr> index )
<cls> <noptr> btr isc program ( <ptr> bt <dot> <noptr> op sync or in )
<cls> <noptr> bt init ( <ptr> sd <dot> <noptr> arg )
<cls> <noptr> nim md tuner attach ( <ptr> adap )
<cls> <noptr> lg x read lock status ( <ptr> state <dot> <ptr> acq lock <dot> <ptr> sync lock )
<cls> <noptr> ic wait read done ( <ptr> ic adap )
<cls> <noptr> vi codecs ctrl ( <ptr> ctrl )
<cls> <noptr> sensor write ( <ptr> gsp ca dev <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> md set high voltage ( <ptr> fe <dot> <noptr> arg )
<cls> <noptr> hi check hw cfg ( <ptr> dev )
<cls> <noptr> imx get regulator s ( <ptr> dev <dot> <ptr> imx )
<cls> <noptr> sensor read ( <ptr> gsp ca dev <dot> <noptr> reg )
<cls> <noptr> tt usb init controller ( <ptr> tt usb )
<cls> <noptr> ule test snd u ( <ptr> p )
<cls> <noptr> d m enable irq s ( <ptr> dev )
<cls> <ptr> check enable r f gain ctrl ( )
<cls> <noptr> mtk mdp check crop change ( <noptr> new w <dot> <noptr> new h <dot> <ptr> w <dot> <ptr> h )
<cls> <noptr> adv check d v timings ( <ptr> t <dot> <ptr> hdl )
<cls> <noptr> gpp sk fe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> omap isp preview isr frame sync ( <ptr> prev )
<cls> <noptr> sp jpeg adjust subs ctrl ( <ptr> ctx <dot> <ptr> ctrl val )
<cls> <noptr> stv d vbs acq workaround ( <ptr> fe )
<cls> <noptr> csi init ( <ptr> ctx )
<cls> <noptr> vs pdu atomic flush ( <ptr> dev <dot> <noptr> pipe index <dot> <ptr> cfg )
<cls> <noptr> coda enc param change ( <ptr> ctx )
<cls> <noptr> mn xs read status ( <ptr> chip <dot> <ptr> c <dot> <ptr> status )
<cls> <noptr> omap is pcs i phy init ( <ptr> isp )
<cls> <ptr> check assume end ura ( )
<cls> <noptr> v pbe display try fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> v v set analog gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> net up uni dvb request m mio ( <ptr> pci dev )
<cls> <ptr> x vip dma remote sub dev ( <ptr> local <dot> <ptr> pad )
<cls> <noptr> iv tv irq dec data req ( <ptr> it v )
<cls> <noptr> snd c x volume get ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> ov set awb ( <ptr> ov <dot> <noptr> enable auto )
<cls> <noptr> td a crf tracking filter calibration ( <ptr> fe <dot> <noptr> freq <dot> <noptr> bw )
<cls> <noptr> tvp x detect ( <ptr> sd <dot> <ptr> decoder )
<cls> <noptr> px a camera activate ( <ptr> pc dev )
<cls> <noptr> mba sleep ( <ptr> fe )
<cls> <noptr> c x usb medi on put ( <ptr> dvb dev )
<cls> <noptr> preview config d cor ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> rtl set if ( <ptr> fe <dot> <noptr> if freq )
<cls> <noptr> m xl x sf demo d get tps code rate ( <ptr> state <dot> <ptr> code rate )
<cls> <noptr> v l ctrl handler init class ( <ptr> hdl <dot> <noptr> nrof controls hint <dot> <ptr> key <dot> <ptr> name )
<cls> <noptr> mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> em xx alsa register ( )
<cls> <noptr> adv ssd pio ( <ptr> sd <dot> <ptr> s )
<cls> <noptr> t mir int work ( <ptr> work )
<cls> <noptr> m eye open ( <ptr> file )
<cls> <noptr> ska a set prev config ( <ptr> ska a <dot> <ptr> preset )
<cls> <noptr> pwc vid ioc try fmt ( <ptr> pdev <dot> <ptr> f )
<cls> <noptr> omap isp sub clk disable ( <ptr> isp <dot> <noptr> res )
<cls> <noptr> saa x probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> debug cmd store ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> init r cmap real audio keys ( )
<cls> <noptr> ir mce kbd decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> pb probe ( <ptr> sd )
<cls> <noptr> ddb probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> vid ioc g fmt meta out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> digit v nxt tuner set params ( <ptr> fe )
<cls> <noptr> v pes fmt ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> ener x reset ( <ptr> dev )
<cls> <ptr> check no mouse ( )
<cls> <noptr> igu an air sett x mask ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> em x xir work ( <ptr> work )
<cls> <noptr> csi set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> dib search status ( <noptr> irq <dot> <noptr> lock )
<cls> <noptr> c x dvb gate ctrl ( <ptr> port <dot> <noptr> open )
<cls> <noptr> cpi avl poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> dvb v type ( <noptr> delivery system )
<cls> <noptr> v v callback ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> tv audio log status ( <ptr> sd )
<cls> <noptr> dtv set front end ( <ptr> fe )
<cls> <noptr> ce u calc plane sizes ( <ptr> ce udev <dot> <ptr> ce u fmt <dot> <ptr> pix )
<cls> <ptr> check stereo threshold ( )
<cls> <noptr> sp cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> read cam control ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> philip std tuner set params ( <ptr> fe )
<cls> <noptr> saa cmd signal ( <ptr> dev <dot> <noptr> seqno )
<cls> <noptr> z l init regs ( <ptr> state )
<cls> <noptr> bcm reset ( <ptr> st )
<cls> <noptr> x v tcp robe ( <ptr> pdev )
<cls> <noptr> v fe isr read ( <ptr> v fe <dot> <ptr> value <dot> <ptr> value )
<cls> <noptr> px pdevice run ( <ptr> priv )
<cls> <ptr> adv xx dummy client ( <ptr> sd <dot> <noptr> page )
<cls> <ptr> check probe ( )
<cls> <noptr> tch d mic bit int handler ( <ptr> sd <dot> <ptr> handled )
<cls> <noptr> i x v set params ( <ptr> fe )
<cls> <noptr> set bandwidth ( <ptr> fe <dot> <noptr> cutoff frequency )
<cls> <noptr> pwc button ctrl ( <ptr> pdev <dot> <noptr> value )
<cls> <noptr> mtv write ( <ptr> c <dot> <noptr> addr space <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> dib fw reset ( <ptr> fe )
<cls> <noptr> sa air qts done ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> meta cap buf prepare ( <ptr> vb )
<cls> <noptr> pvr h dw cmd deep reset ( <ptr> h dw )
<cls> <noptr> d v bring buffer pkt read ( <ptr> r buf <dot> <noptr> idx <dot> <noptr> offset <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> c xxx is ocv b i copy ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> adb isr ( <ptr> sd <dot> <noptr> status <dot> <ptr> handled )
<cls> <noptr> venus session set buffers ( <ptr> inst <dot> <ptr> bd )
<cls> <noptr> vim c sen init cfg ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> sun ics i try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> encoder on port b ( <ptr> dev )
<cls> <noptr> usb vision stop i soc ( <ptr> usb vision )
<cls> <noptr> c x usb bluebird gpio rw ( <ptr> d <dot> <noptr> change mask <dot> <noptr> new val )
<cls> <noptr> set auto bright ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> ctrl set saturation ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> dst read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> it x front end attach ( <ptr> adap )
<cls> <noptr> csi lane config ( <ptr> ctx )
<cls> <noptr> av stop feed ( <ptr> feed )
<cls> <noptr> dvb pll sleep ( <ptr> fe )
<cls> <noptr> g d set v stretch ( <ptr> d <dot> <ptr> src <dot> <ptr> dst )
<cls> <noptr> bt tv buffer activate video ( <ptr> b tv <dot> <ptr> set )
<cls> <noptr> med usa set resolution ( <ptr> dev <dot> <noptr> width <dot> <noptr> decoder select )
<cls> <ptr> check proc reload ( )
<cls> <noptr> pluto reset front end ( <ptr> pluto <dot> <noptr> re enable )
<cls> <noptr> isset fd config eye detect ( <ptr> is <dot> <noptr> val )
<cls> <noptr> sp mfc err dec v ( <noptr> err )
<cls> <noptr> c xxx gpio ic write ack ( <ptr> dev )
<cls> <noptr> af wr reg ( <ptr> d <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> vi codec subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> sh ve ub h ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> solo valid pix fmt ( <noptr> pix fmt <dot> <noptr> dev type )
<cls> <noptr> dtv driver init ( )
<cls> <noptr> hor usa leave power save ( <ptr> priv )
<cls> <noptr> techni sat usb read mac address ( <ptr> d <dot> <noptr> mac )
<cls> <noptr> lme int response ( <ptr> lme urb )
<cls> <noptr> pvr hd wget unit number ( <ptr> h dw )
<cls> <noptr> it x probe ( <ptr> pdev )
<cls> <noptr> a speed video enable mode detect ( <ptr> video )
<cls> <noptr> resizer set in type ( <ptr> res <dot> <noptr> type )
<cls> <noptr> dvb demux ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> fim c lite g fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> smi app write no quirk ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> val )
<cls> <ptr> sd to dw vcm ( <ptr> sub dev )
<cls> <noptr> d ibm b x process ( <ptr> state <dot> <noptr> attr )
<cls> <noptr> resizer enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> load dram ( <ptr> av <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> gpio irt x set duty cycle ( <ptr> dev <dot> <noptr> duty cycle )
<cls> <noptr> tt usb dec fed vbs set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> ska a gpio assert ( <ptr> priv <dot> <noptr> id )
<cls> <noptr> usb vision set alternate ( <ptr> dev )
<cls> <noptr> rtl bulk write ( <ptr> client <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> val count )
<cls> <noptr> si set power state ( <ptr> s dev <dot> <noptr> value )
<cls> <noptr> v fe flush buffers ( <ptr> vid <dot> <noptr> state )
<cls> <noptr> omap isp video register ( <ptr> video <dot> <ptr> v dev )
<cls> <noptr> norm h total ( <noptr> norm )
<cls> <noptr> config edi input mode ( <ptr> ctx <dot> <noptr> mode )
<cls> <noptr> ( <ptr> b tv )
<cls> <noptr> adv set power ( <ptr> state <dot> <noptr> on )
<cls> <noptr> max read bits ( <ptr> ctx <dot> <noptr> idx <dot> <noptr> msb <dot> <noptr> lsb )
<cls> <noptr> pvr ctrl custom sym to value ( <ptr> cptr <dot> <ptr> buf <dot> <noptr> len <dot> <ptr> mask ptr <dot> <ptr> val ptr )
<cls> <ptr> mtk jpeg buf remove ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> c x usb medi on register analog radio ( <ptr> dvb dev )
<cls> <noptr> saa read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> c x usb mt demo d init ( <ptr> fe )
<cls> <noptr> os ddm vid ping pong ( <ptr> sd <dot> <noptr> field inversion <dot> <noptr> fb base phys <dot> <ptr> l config )
<cls> <ptr> e sub dev to dev ( <ptr> sd )
<cls> <noptr> l init ( <ptr> fe )
<cls> <noptr> c xdr probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> init timing params ( <ptr> irr x )
<cls> <noptr> adv x hdmi set video timings ( <ptr> state <dot> <ptr> timings )
<cls> <noptr> ves read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> user flags ( <ptr> ctrl )
<cls> <ptr> check mpeg buf s ( )
<cls> <noptr> td a setw ref ( <ptr> fe <dot> <noptr> sample freq hz <dot> <noptr> bw )
<cls> <noptr> adv xx parsed t ( <ptr> state )
<cls> <noptr> dib fw set diversity in ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> l read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> mtm disconnect ( <ptr> sd )
<cls> <noptr> is i enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> ves read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> stv get video mode ( <ptr> gsp ca dev )
<cls> <noptr> fim c isset initial params ( <ptr> is )
<cls> <noptr> a speed video init ( <ptr> video )
<cls> <noptr> tt usb dec set pids ( <ptr> dec )
<cls> <noptr> t efs frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> ske cg xs stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> g d set src addr ( <ptr> d <dot> <noptr> a )
<cls> <noptr> vpx fe read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> usb vision radio open ( <ptr> file )
<cls> <noptr> l gs gl get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> msi enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> bt tv read ee ( <ptr> b tv <dot> <ptr> ee data <dot> <noptr> addr )
<cls> <noptr> vsp uds write ( <ptr> uds <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> flex copi c init ( <ptr> fc )
<cls> <noptr> c x risc data buffer ( <ptr> pci <dot> <ptr> risc <dot> <ptr> sg list <dot> <noptr> bpl <dot> <noptr> lines <dot> <noptr> lp i )
<cls> <noptr> mtm set global gain ( <ptr> mtm <dot> <noptr> gain )
<cls> <noptr> vp fec cdc config black clamp ( <ptr> c cdc <dot> <ptr> b clamp )
<cls> <noptr> cio resume ( <ptr> dev )
<cls> <noptr> ov prog d flt ( <ptr> client <dot> <noptr> clk rc )
<cls> <noptr> erm ( <noptr> f ref <dot> <noptr> num <dot> <noptr> denom )
<cls> <noptr> l m torch brt ctrl ( <ptr> flash <dot> <noptr> led no <dot> <noptr> brt )
<cls> <noptr> no signal ( <ptr> sd )
<cls> <noptr> parse audio std option ( )
<cls> <noptr> px a camera dma irq y ( <ptr> data )
<cls> <noptr> vs pdu pipeline frame end ( <ptr> pipe <dot> <noptr> completion )
<cls> <noptr> m xl x sf demo d reset irq status ( <ptr> state )
<cls> <noptr> dib fw identify ( <ptr> fe )
<cls> <noptr> uvc reset resume ( <ptr> int f )
<cls> <noptr> scm get platform data ( <ptr> state )
<cls> <noptr> csi link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> p xps ctrl ( <ptr> ctrl )
<cls> <noptr> ov x get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> x pu ack ( <ptr> c x <dot> <noptr> sw )
<cls> <noptr> m xlt get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> dib set ic speed ( <ptr> d <dot> <noptr> scl khz )
<cls> <noptr> fim c sensor notify ( <ptr> sd <dot> <noptr> notification <dot> <ptr> arg )
<cls> <noptr> dib p get internal freq ( <ptr> state )
<cls> <noptr> imx write table ( <ptr> imx <dot> <noptr> table )
<cls> <noptr> m xls fic ack ( <ptr> state )
<cls> <noptr> sp mfc run init dec ( <ptr> ctx )
<cls> <noptr> iv tv api func ( <ptr> priv <dot> <noptr> cmd <dot> <noptr> in <dot> <noptr> out <dot> <noptr> data )
<cls> <noptr> stv ter sleep ( <ptr> fe )
<cls> <noptr> saa start preview ( <ptr> f h )
<cls> <noptr> po set auto exposure ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> ov set virtual channel ( <ptr> sensor )
<cls> <noptr> is plink entity ( <ptr> isp <dot> <ptr> entity <dot> <noptr> interface )
<cls> <noptr> c x irq remove ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> vp uip i send ( <ptr> pdev <dot> <noptr> id <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> c xdr get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> ce u soft reset ( <ptr> ce udev )
<cls> <noptr> igu an air sett x carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> saa vb i register ( <ptr> port )
<cls> <noptr> stv x set ref clock ( <ptr> fe <dot> <noptr> ref clock )
<cls> <noptr> c x streams register ( <ptr> c x )
<cls> <noptr> tw get video status ( <ptr> solo dev <dot> <noptr> ch )
<cls> <noptr> as open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> az power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> c x stop v l encode stream ( <ptr> s <dot> <noptr> g open d )
<cls> <noptr> gsp cas top streaming ( <ptr> v q )
<cls> <noptr> v pu enc ipi handler ( <ptr> data <dot> <noptr> len <dot> <ptr> priv )
<cls> <noptr> stv set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <ptr> adv x csi get pad format ( <ptr> sd <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> bt tv risc dis asm ( <ptr> b tv <dot> <ptr> risc )
<cls> <noptr> v fe enable irq common ( <ptr> v fe )
<cls> <noptr> m cam disable mip i ( <ptr> m cam )
<cls> <noptr> ddb input stop ( <ptr> input )
<cls> <noptr> ctrl isdirty crop t ( <ptr> cptr )
<cls> <noptr> ov regr m w ( <ptr> client <dot> <noptr> reg <dot> <noptr> set <dot> <noptr> unset )
<cls> <noptr> irr x probe ( <ptr> dev )
<cls> <noptr> d m set line ( <ptr> dev <dot> <noptr> line <dot> <noptr> state )
<cls> <noptr> v l flash close ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> vb icap stop streaming ( <ptr> v q )
<cls> <noptr> vpx fe set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <ptr> too v dev ( <ptr> sd )
<cls> <noptr> r vin irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> adv sdp log status ( <ptr> sd )
<cls> <noptr> c xdr read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> v fe set cam if cfg ( <ptr> v fe <dot> <ptr> line )
<cls> <noptr> cxx neq ( <ptr> ctrl )
<cls> <noptr> csi phy get bpp ( <ptr> formats <dot> <noptr> n formats <dot> <noptr> code )
<cls> <noptr> dcm is input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> info frame read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> v pfe detach irq ( <ptr> v pfe )
<cls> <noptr> build bit power mask table ( <ptr> p dec )
<cls> <noptr> e tek stream off ( <ptr> sensor )
<cls> <noptr> t dax get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> ov stream off ( <ptr> sd )
<cls> <noptr> hor usa init ( <ptr> fe )
<cls> <noptr> v pes selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> opera probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> skb af try c is format ( <ptr> m f )
<cls> <noptr> cobalt s fmt vid out ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> str c open ( <ptr> r dev )
<cls> <noptr> video buf d main it user locked ( <ptr> dma <dot> <noptr> direction <dot> <noptr> data <dot> <noptr> size )
<cls> <noptr> tvp x query current std ( <ptr> sd )
<cls> <noptr> c cdc set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> mtp power off ( <ptr> mtp )
<cls> <noptr> ov set exposure ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> as x cmd turn off ( <ptr> adap )
<cls> <noptr> any see c is lot reset ( <ptr> c i <dot> <noptr> slot )
<cls> <noptr> net up uni dvb buf queue ( <ptr> vb )
<cls> <noptr> c iner gy t streaming ctrl ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> ak x g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> uvc query buffer ( <ptr> queue <dot> <ptr> buf )
<cls> <noptr> h vah w dump regs ( <ptr> h va <dot> <ptr> s )
<cls> <noptr> m chip take picture ( )
<cls> <noptr> t mic reset ( <ptr> dev <dot> <noptr> t sleep )
<cls> <noptr> pvr io read start ( <ptr> cp )
<cls> <noptr> c xxx enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> histo v l enum format ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> solo gpio config ( <ptr> solo dev )
<cls> <noptr> isp stat buf next ( <ptr> stat )
<cls> <noptr> msp sets cart ( <ptr> client <dot> <noptr> in <dot> <noptr> out )
<cls> <noptr> scc am if set defaults ( <ptr> cam if )
<cls> <noptr> stk ic xfer ( <ptr> ic adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> pvr h dw set v l dev ( <ptr> h dw <dot> <ptr> v dev )
<cls> <noptr> clu set table ( <ptr> clu <dot> <ptr> ctrl )
<cls> <noptr> histo set crop ( <ptr> sub dev <dot> <ptr> config <dot> <ptr> sel )
<cls> <noptr> mtk jpeg subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> sms board power ( <ptr> core dev <dot> <noptr> onoff )
<cls> <noptr> bcm hab get response ( <ptr> st <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> cro sec cec suspend ( <ptr> dev )
<cls> <noptr> au v l device register ( <ptr> interface <dot> <ptr> dev )
<cls> <noptr> vp if schedule next buffer ( <ptr> common )
<cls> <noptr> bit reverse mpeg output ( <ptr> demo d )
<cls> <noptr> iv tv irq work handler ( <ptr> work )
<cls> <noptr> v l try ext ctrls ( <ptr> hdl <dot> <ptr> v dev <dot> <ptr> m dev <dot> <ptr> cs )
<cls> <noptr> z i log init ( <ptr> ir )
<cls> <noptr> rtl sdr try fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> m xls f init is port ( <ptr> state <dot> <noptr> sample size )
<cls> <noptr> adv notify noe did ( <ptr> sd )
<cls> <noptr> sun ics i enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> d ibm read status ( <ptr> fe <dot> <ptr> stat )
<cls> <ptr> check num outputs ( )
<cls> <noptr> c x g slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> fmi get sig str ( <ptr> fmi )
<cls> <ptr> saa seq next ( <ptr> s <dot> <ptr> v <dot> <ptr> pos )
<cls> <noptr> c xxx pre card setup ( <ptr> dev )
<cls> <noptr> ics end byte ( <ptr> dev <dot> <noptr> attr <dot> <noptr> data )
<cls> <noptr> usb ma radio resume ( <ptr> int f )
<cls> <noptr> ov set frame interval ( <ptr> sub dev <dot> <ptr> fi )
<cls> <noptr> tws register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> v l print query menu ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> c x message send ( <ptr> state <dot> <ptr> cmd )
<cls> <noptr> uvc request buffers ( <ptr> queue <dot> <ptr> rb )
<cls> <noptr> spc iop cam ( <ptr> en <dot> <noptr> slot <dot> <noptr> acs <dot> <noptr> read <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> cobalt pcie status show ( <ptr> cobalt )
<cls> <noptr> td a getid ( <ptr> fe )
<cls> <ptr> check ics can ( )
<cls> <noptr> net u pic fifo tx ( <ptr> ic )
<cls> <ptr> check v l ( )
<cls> <ptr> check ts loop ( )
<cls> <noptr> pluto dma end ( <ptr> pluto <dot> <noptr> nb packets )
<cls> <noptr> vti bit len ( <ptr> go )
<cls> <noptr> par set list ( <ptr> ptr <dot> <noptr> len <dot> <ptr> mask ptr <dot> <ptr> val ptr <dot> <dptr> names <dot> <noptr> valid bits )
<cls> <noptr> wb cir shutdown ( <ptr> device )
<cls> <noptr> delta ipc open ( <ptr> p ctx <dot> <ptr> name <dot> <ptr> param <dot> <noptr> ipc buf size <dot> <dptr> ipc buf <dot> <dptr> hdl )
<cls> <ptr> check offset ( )
<cls> <noptr> v few m frame based ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> enable )
<cls> <noptr> ov x set sharp ness ( <ptr> ov x <dot> <noptr> value )
<cls> <noptr> iv tv overlay ( <ptr> file <dot> <ptr> f h <dot> <noptr> on )
<cls> <noptr> irr c encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> pvr buffer set none ( <ptr> b p )
<cls> <ptr> x c attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> v dec s fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> x c load fw and init tuner ( <ptr> fe <dot> <noptr> force )
<cls> <noptr> vim c deb get val ( <ptr> bytes <dot> <noptr> nbytes )
<cls> <ptr> check ic debug ( )
<cls> <noptr> max get bandwidth ( <ptr> fe <dot> <ptr> bw )
<cls> <noptr> cio v l try fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> d ibm set adc state ( <ptr> state <dot> <noptr> no )
<cls> <noptr> dib set tune state ( <ptr> fe <dot> <noptr> tune state )
<cls> <noptr> uvc queue buffer ( <ptr> queue <dot> <ptr> m dev <dot> <ptr> buf )
<cls> <noptr> m tread reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tw x stop streaming ( <ptr> v q )
<cls> <noptr> vivid vid caps f buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <ptr> sp mfc init hw ops v ( )
<cls> <noptr> il ter ( <ptr> dvb dmx filter )
<cls> <noptr> sdd bgs register ( <ptr> gsp ca dev <dot> <ptr> reg )
<cls> <noptr> e tek priv mem read ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> tea get aud out mode ( <ptr> radio )
<cls> <noptr> ic write eeprom ( <ptr> adapter <dot> <noptr> adr <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> mtk mdp hw set output addr ( <ptr> ctx <dot> <ptr> addr )
<cls> <noptr> saa function ality ( <ptr> adap )
<cls> <noptr> isc clk disable ( <ptr> hw )
<cls> <noptr> ccp link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> h fi sys init done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> ske cg xs ctrl ( <ptr> ctrl )
<cls> <noptr> noon enable auto white balance ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> ati remote input close ( <ptr> input dev )
<cls> <noptr> x vip graph build one ( <ptr> x dev <dot> <ptr> entity )
<cls> <noptr> tt pci budget deb i write nolock ( <ptr> budget <dot> <noptr> config <dot> <noptr> addr <dot> <noptr> count <dot> <noptr> value <dot> <noptr> no busy loop )
<cls> <noptr> vivid raw vb icap process ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> m m ols set iso ( <ptr> info <dot> <noptr> auto iso )
<cls> <noptr> em xx write regs ( <ptr> dev <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> th ssd v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> adp get ctrl ( <ptr> ctrl )
<cls> <noptr> mtv set power ( <ptr> sub dev <dot> <noptr> on )
<cls> <noptr> si cmd execute ( <ptr> client <dot> <ptr> cmd )
<cls> <noptr> td a set voltage ( <ptr> fe <dot> <noptr> fe sec voltage )
<cls> <noptr> convertto twos ( <noptr> numeric <dot> <noptr> bits len )
<cls> <noptr> rt init ( <ptr> fe )
<cls> <noptr> tt usb ir resume ( <ptr> int f )
<cls> <noptr> cp write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> m tvs power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> mtv calc frame rate ( <ptr> mtv <dot> <ptr> tp f )
<cls> <noptr> m x qt tuner attach ( <ptr> adap )
<cls> <noptr> radio isa match ( <ptr> pdev <dot> <noptr> dev )
<cls> <noptr> cxx get ctrl ( <ptr> params <dot> <ptr> ctrl )
<cls> <noptr> solo pm fill desc ( <ptr> desc <dot> <noptr> wr <dot> <noptr> dma addr <dot> <noptr> ext addr <dot> <noptr> size <dot> <noptr> repeat <dot> <noptr> ext size )
<cls> <noptr> f mst receive ( <ptr> arg <dot> <ptr> skb )
<cls> <ptr> check trace ( )
<cls> <noptr> tw x fps idx ( <noptr> fps <dot> <noptr> max fps )
<cls> <noptr> ske cg x set zoom window ( <ptr> c <dot> <ptr> r )
<cls> <noptr> tv audios ctrl ( <ptr> ctrl )
<cls> <noptr> uvc scan fallback ( <ptr> dev )
<cls> <noptr> usb tv audio stop ( <ptr> chip )
<cls> <noptr> pvr hd wish sm ( <ptr> h dw )
<cls> <noptr> start ts capture ( <ptr> budget )
<cls> <ptr> x c attach ( <ptr> fe <dot> <ptr> cfg )
<cls> <noptr> vivid thread vid cap ( <ptr> data )
<cls> <noptr> c cdc video queue ( <ptr> video <dot> <ptr> buffer )
<cls> <noptr> c x dt nr dmd dvb t mon q am ( <ptr> tn r dmd <dot> <noptr> type <dot> <ptr> q am )
<cls> <noptr> histo buffer queue ( <ptr> vb )
<cls> <noptr> adb s ctrl ( <ptr> ctrl )
<cls> <noptr> j pu generate hdr ( <noptr> quality <dot> <ptr> p )
<cls> <ptr> sun ics i find format ( <ptr> fourcc <dot> <ptr> mbus )
<cls> <noptr> hi write reg list ( <ptr> hi <dot> <ptr> r list )
<cls> <noptr> ctrl cxx isdirty ( <ptr> cptr )
<cls> <noptr> list add locked ( <ptr> new <dot> <ptr> head <dot> <ptr> lock )
<cls> <noptr> e tek probe ( <ptr> client )
<cls> <noptr> ov check hw cfg ( <ptr> dev )
<cls> <noptr> v pfe pcr enable ( <ptr> c cdc <dot> <noptr> flag )
<cls> <noptr> cxa v load fw ( <ptr> c x )
<cls> <noptr> saa g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> max write bits ( <ptr> ctx <dot> <noptr> idx <dot> <noptr> msb <dot> <noptr> lsb <dot> <noptr> new val )
<cls> <noptr> vim m init ( )
<cls> <noptr> m i camera settings ( <ptr> gsp ca dev )
<cls> <noptr> fmi unmute ( <ptr> fmi )
<cls> <noptr> c x d check l post plp ( <ptr> fe )
<cls> <noptr> vps s set sync pol ( <noptr> sync )
<cls> <noptr> ov store c matrix ( <ptr> sd <dot> <noptr> matrix )
<cls> <noptr> dt irqhandler even ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> coda mpeg profile ( <noptr> profileid c )
<cls> <noptr> msi i soc init ( <ptr> dev )
<cls> <noptr> usb vision audio off ( <ptr> usb vision )
<cls> <noptr> dr x j dap write reg ( <ptr> dev addr <dot> <noptr> addr <dot> <noptr> data <dot> <noptr> flags )
<cls> <noptr> tt pci budget irqhandler ( <ptr> dev <dot> <ptr> isr )
<cls> <noptr> mtk jpeg buf queue ( <ptr> vb )
<cls> <noptr> sky star rev attach ( <ptr> fc <dot> <ptr> ic )
<cls> <noptr> tim b radio vid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> lg x get t nog ( <ptr> state <dot> <ptr> t nog )
<cls> <noptr> iv tv alsa init ( )
<cls> <noptr> media device enum entities ( <ptr> m dev <dot> <ptr> arg )
<cls> <ptr> check i soc mode ( )
<cls> <noptr> locked b tres ( <ptr> b tv <dot> <noptr> bit )
<cls> <noptr> smi app probe ( <ptr> client )
<cls> <noptr> ov power on ( <ptr> sensor )
<cls> <noptr> pct ve tuner attach ( <ptr> a )
<cls> <noptr> saa dvb acquire port ( <ptr> port )
<cls> <noptr> stv cab init ( <ptr> fe )
<cls> <ptr> td a get dvb front end ( <ptr> client )
<cls> <noptr> bt tv gpio read ( <ptr> core )
<cls> <noptr> cio queue init ( <ptr> cio <dot> <ptr> q )
<cls> <noptr> emic check for device ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> fim c is setup clocks ( <ptr> is )
<cls> <noptr> r vin m c parse of graph ( <ptr> vin )
<cls> <noptr> mantis event cam plugin ( <ptr> ca )
<cls> <noptr> m xls f set gpio ( <ptr> state <dot> <noptr> gpio <dot> <noptr> val )
<cls> <noptr> saa input irq ( <ptr> dev )
<cls> <noptr> skb af get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> f m r x set volume ( <ptr> f m dev <dot> <noptr> vol to set )
<cls> <noptr> swap bits ( <noptr> v )
<cls> <noptr> c x g frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> vsp uif get crc ( <ptr> uif )
<cls> <noptr> tcg input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> fim cmm try fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sn div tv init ( <ptr> v l dev )
<cls> <noptr> sp mfc handle frame ( <ptr> ctx <dot> <noptr> reason <dot> <noptr> err )
<cls> <noptr> vb ioctl exp buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> tw encoder tables upload ( <ptr> dev )
<cls> <noptr> v l ctrl add handler ( <ptr> hdl <dot> <ptr> add <dot> <ptr> ptr <dot> <noptr> from other dev )
<cls> <noptr> ddb init temp mon ( <ptr> link )
<cls> <noptr> ska a start ( <ptr> sd )
<cls> <noptr> c x d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> b )
<cls> <noptr> fim c cap try fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sh v eug fmt ( <ptr> ve u file <dot> <ptr> f )
<cls> <noptr> cobalt setup pci ( <ptr> cobalt <dot> <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> e did write vga segment ( <ptr> sd )
<cls> <noptr> cec pin thread func ( <ptr> adap )
<cls> <noptr> vim m start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> dib v iter b i state ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> empres ss fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> config package ( <ptr> go <dot> <ptr> code <dot> <noptr> space )
<cls> <noptr> tm set volume ( <ptr> dev <dot> <noptr> vol )
<cls> <noptr> omap isp video resume ( <ptr> video <dot> <noptr> continuous )
<cls> <noptr> stk ic check for device ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> aux ring buffer write ( <ptr> r buf <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> adv g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> c x d spi clear ts buffer ( <ptr> spi )
<cls> <ptr> v l ctrl get menu ( <noptr> id )
<cls> <noptr> ece c front end attach ( <ptr> adap )
<cls> <noptr> m tvs frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> sms dvb send request and wait ( <ptr> client <dot> <ptr> buffer <dot> <noptr> size <dot> <ptr> completion )
<cls> <noptr> smss dio send request ( <ptr> context <dot> <ptr> buffer <dot> <noptr> size )
<cls> <noptr> wb cir carrier report ( <ptr> data )
<cls> <noptr> adv reset ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> smi app set compose ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <ptr> check default mode ( )
<cls> <noptr> iv tvs audio mode ( <ptr> c x hdl <dot> <noptr> val )
<cls> <noptr> gpp sk fe set front end ( <ptr> fe )
<cls> <noptr> hi get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <ptr> check irq chk int v ( )
<cls> <noptr> px acf ops camera open ( <ptr> filp )
<cls> <noptr> pwc iso chandler ( <ptr> urb )
<cls> <noptr> msp write dem ( <ptr> client <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> dcm i get sensor bounds ( <ptr> dcm i <dot> <ptr> r )
<cls> <noptr> stv set d vbs track car loop ( <ptr> int p <dot> <noptr> demo d <dot> <noptr> s rate )
<cls> <noptr> cxx xic recv bytes with saddr ( <ptr> ic adap <dot> <ptr> msg <dot> <ptr> msg )
<cls> <noptr> flex cops ram set chip ( <ptr> fc <dot> <noptr> type )
<cls> <noptr> adv g d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> set backlight ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> f mis ctrl ( <ptr> ctrl )
<cls> <noptr> ds read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ov mode init regs ( <ptr> sd )
<cls> <noptr> budget av irq ( <ptr> dev <dot> <ptr> isr )
<cls> <noptr> dr x d get tune settings ( <ptr> fe <dot> <ptr> sets )
<cls> <noptr> v fe is rw m done ( <ptr> v fe <dot> <noptr> wm )
<cls> <noptr> budget av send fw cmd ( <ptr> budget <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> c x usb medi on copy field ( <ptr> dvb dev <dot> <ptr> aux buf <dot> <ptr> bt <dot> <noptr> first field <dot> <noptr> max lines <dot> <noptr> max lines m pls )
<cls> <noptr> job ready ( <ptr> priv )
<cls> <noptr> pvr h dw encoder runtime out ( <ptr> t )
<cls> <noptr> lg x get rs code mode ( <ptr> state <dot> <ptr> rs code pri <dot> <ptr> rs code sec )
<cls> <noptr> simple set tv freq ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> stv get demo d lock ( <ptr> int p <dot> <noptr> demo d <dot> <noptr> timeout )
<cls> <noptr> c xs fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> vim c get pix format ( <ptr> pad <dot> <ptr> fmt )
<cls> <noptr> scm o ifg frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> c xxx read ic master ( <ptr> dev <dot> <noptr> dev addr <dot> <noptr> saddr <dot> <noptr> s addrlen <dot> <ptr> data <dot> <noptr> data len <dot> <noptr> master )
<cls> <noptr> saa api get video mux ( <ptr> port )
<cls> <noptr> irr x on ( <ptr> irr x )
<cls> <noptr> d v bus bfe wakeup ( <ptr> fe )
<cls> <noptr> std validate compound ( <ptr> ctrl <dot> <noptr> idx <dot> <noptr> ptr )
<cls> <noptr> su power ctrl ( <ptr> d <dot> <noptr> i )
<cls> <noptr> sp mfc get inst nov ( <ptr> dev )
<cls> <noptr> mantis event cam unplug ( <ptr> ca )
<cls> <noptr> ovf x pkts can ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> i crd ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> dcm i process jpeg ( <ptr> dcm i )
<cls> <noptr> em xx audio fini ( <ptr> dev )
<cls> <noptr> c x g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> get signal to noise ( <ptr> state <dot> <ptr> p signal to noise )
<cls> <noptr> cluster changed ( <ptr> master )
<cls> <noptr> write io ( <ptr> c i <dot> <noptr> address <dot> <noptr> val )
<cls> <noptr> adv write ( <ptr> state <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> m lv fill fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> fim c lite query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> ttc i msg locked ( <ptr> ca <dot> <noptr> cmd <dot> <ptr> data <dot> <noptr> write len <dot> <noptr> read len )
<cls> <noptr> img ir symbol timing defaults ( <ptr> timing <dot> <ptr> defaults )
<cls> <noptr> m nxt set freq ( <ptr> chip )
<cls> <noptr> stv x get sig params ( <ptr> state )
<cls> <noptr> x vip composite v l init ( <ptr> x dev )
<cls> <noptr> init r cmap aver media dvb t ( )
<cls> <noptr> ov set ctrl ( <ptr> ctrl )
<cls> <noptr> chip thread wake ( <ptr> t )
<cls> <noptr> m xls f adap fe init ( <ptr> fe )
<cls> <noptr> c x dio set reg bits ( <ptr> io <dot> <noptr> tgt <dot> <noptr> sub address <dot> <noptr> data <dot> <noptr> mask )
<cls> <noptr> mantis ic write ( <ptr> mantis <dot> <ptr> msg )
<cls> <noptr> l gdt set agc power ref ( <ptr> state <dot> <ptr> p )
<cls> <noptr> prepare user ptr ( <ptr> vb )
<cls> <noptr> stv ter set front end ( <ptr> fe )
<cls> <noptr> si set front end ( <ptr> fe )
<cls> <noptr> t dax read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <ptr> vs pdl body get ( <ptr> pool )
<cls> <noptr> h va job ready ( <ptr> priv )
<cls> <noptr> copy packages ( <ptr> dest <dot> <ptr> src <dot> <noptr> pkg cnt <dot> <noptr> space )
<cls> <noptr> sa aic status ( <ptr> dev )
<cls> <noptr> usb ma radios ctrl ( <ptr> ctrl )
<cls> <noptr> dr x j dap atomic read write block ( <ptr> dev addr <dot> <noptr> addr <dot> <noptr> data size <dot> <ptr> data <dot> <noptr> read flag )
<cls> <noptr> csl as routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> spx micro controller start ( <ptr> state )
<cls> <ptr> get dec queue ops ( )
<cls> <noptr> x box remote probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> c xs radio ( <ptr> sd )
<cls> <noptr> afc err chk ( <ptr> state )
<cls> <noptr> sa aic addr to reg len ( <ptr> bus <dot> <noptr> addr )
<cls> <noptr> ds set ts param ( <ptr> fe <dot> <noptr> is punct ured )
<cls> <ptr> get ce u fmt from fourcc ( <noptr> fourcc )
<cls> <noptr> p xac vbs top streaming ( <ptr> v q )
<cls> <noptr> venus read queue ( <ptr> h dev <dot> <ptr> queue <dot> <ptr> pkt <dot> <ptr> tx req )
<cls> <noptr> exy nos jpeg seth u f table enable ( <ptr> base <dot> <noptr> value )
<cls> <noptr> dmx section feed start filtering ( <ptr> feed )
<cls> <noptr> adv xx set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> adv x csi register link ( <ptr> tx <dot> <ptr> v l dev <dot> <ptr> src <dot> <noptr> src pad <dot> <noptr> enable )
<cls> <noptr> st probe ( <ptr> sd )
<cls> <noptr> calc planar ( <ptr> v v <dot> <ptr> buf <dot> <ptr> v dma <dot> <ptr> v dma )
<cls> <noptr> cam if hw clear pending irq ( <ptr> vp )
<cls> <noptr> ca get slot caps ( <ptr> state <dot> <ptr> pca caps <dot> <ptr> arg )
<cls> <noptr> ves x get fec ( <ptr> state )
<cls> <noptr> c cdc configure lp f ( <ptr> c cdc )
<cls> <noptr> az identify state ( <ptr> udev <dot> <ptr> props <dot> <dptr> desc <dot> <ptr> cold )
<cls> <noptr> imx update digital gain ( <ptr> imx <dot> <noptr> len <dot> <noptr> val )
<cls> <noptr> ic read ( <ptr> state <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> cec pin error inj parse line ( <ptr> adap <dot> <ptr> line )
<cls> <noptr> skb af hw set auto exposure ( <ptr> state <dot> <noptr> value )
<cls> <noptr> vid cap buf queue ( <ptr> vb )
<cls> <noptr> os d set rec attenuation ( <ptr> sd <dot> <noptr> os dwin <dot> <noptr> enable )
<cls> <noptr> fim c is runtime resume ( <ptr> dev )
<cls> <noptr> v l print audio ( <ptr> arg <dot> <noptr> write only )
<cls> <ptr> m xlt cal crf tune regs ( <ptr> state <dot> <noptr> r f freq <dot> <noptr> bw )
<cls> <noptr> ov video probe ( <ptr> sd )
<cls> <noptr> c x der calc if freq ( <noptr> if hz )
<cls> <noptr> delta g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> adv x reset ( <ptr> state )
<cls> <noptr> vsp video query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> init r cmap behold columbus ( )
<cls> <noptr> pulse received ( <ptr> adap <dot> <ptr> msg )
<cls> <noptr> fim ch w set output addr ( <ptr> dev <dot> <ptr> p addr <dot> <noptr> index )
<cls> <noptr> iv tv firmware versions ( <ptr> it v )
<cls> <noptr> ctrl get crop cap dh ( <ptr> cptr <dot> <ptr> val )
<cls> <noptr> au video set ( <ptr> state )
<cls> <noptr> cobalt irq work handler ( <ptr> work )
<cls> <noptr> ene read reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> m xlr f get r f strength ( <ptr> fe <dot> <ptr> out )
<cls> <noptr> cobalt try fmt vid out ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> v v init ( <ptr> sd )
<cls> <noptr> set q am measurement ( <ptr> state <dot> <noptr> modulation <dot> <noptr> symbol rate )
<cls> <noptr> init r cmap msi digi vox iii ( )
<cls> <noptr> pvr io read set sync key ( <ptr> cp <dot> <ptr> sync keyptr <dot> <noptr> sync key len )
<cls> <noptr> v fere set ( <ptr> v fe )
<cls> <noptr> c cdc read regs ( )
<cls> <noptr> clip range ( <noptr> val )
<cls> <noptr> r jn set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> tw x try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> stb d vbs config uwp ( <ptr> state )
<cls> <noptr> af get post vit ber ( <ptr> fe <dot> <ptr> post err count <dot> <ptr> post c w count <dot> <ptr> abort count )
<cls> <noptr> v pu cfg write l ( <ptr> v pu <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> match dev name ( <ptr> sd <dot> <ptr> asd )
<cls> <noptr> ir nec encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> scale clocks v ( <ptr> inst )
<cls> <noptr> fd tvc a get slot info ( <ptr> fdt v <dot> <ptr> arg )
<cls> <noptr> six radio probe ( <ptr> pdev )
<cls> <noptr> omap isp stats bl overflow ( <ptr> stat )
<cls> <noptr> r card rif start channel ( <ptr> ch )
<cls> <noptr> hdmi write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> tw video probe ( <ptr> client )
<cls> <noptr> cod as selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> bt tv risc decode ( <noptr> risc )
<cls> <noptr> sit x tune power ( <ptr> s dev <dot> <noptr> power <dot> <noptr> ant cap )
<cls> <noptr> v pfe video buf queue ( <ptr> v q <dot> <ptr> vb )
<cls> <noptr> ov write reg ( <ptr> ov <dot> <noptr> reg <dot> <noptr> len <dot> <noptr> val )
<cls> <noptr> e gs ( <ptr> state )
<cls> <noptr> skb af hw set ccm ( <ptr> state )
<cls> <noptr> dst ca open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> vim c deb init cfg ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> csi irq complex io set ( <ptr> isp <dot> <ptr> csi <dot> <noptr> enable )
<cls> <noptr> r vin group init ( <ptr> group <dot> <ptr> vin )
<cls> <noptr> tw x memcpy buf refill ( <ptr> vc <dot> <noptr> pb )
<cls> <noptr> msm video init format ( <ptr> video )
<cls> <ptr> check repeat filter ( )
<cls> <noptr> px popen ( <ptr> file )
<cls> <noptr> ir mce kbd process mouse data ( <ptr> dev <dot> <noptr> scan code )
<cls> <noptr> v l ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> c x tune ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> bs writes e ( <ptr> s <dot> <noptr> val )
<cls> <noptr> delta vb frame prepare ( <ptr> vb )
<cls> <noptr> imon irr x ( <ptr> urb )
<cls> <ptr> mem cg slab start ( <ptr> m <dot> <ptr> pos )
<cls> <noptr> stv set symbol rate ( <ptr> state <dot> <noptr> s rate )
<cls> <noptr> c x d driver init ( )
<cls> <noptr> m probe sensor ( <ptr> sd )
<cls> <noptr> l k dtm ref count dec zero ( )
<cls> <noptr> uvc queue cancel ( <ptr> queue <dot> <noptr> disconnect )
<cls> <noptr> ks write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> au read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> m cam ctl r configure ( <ptr> cam )
<cls> <noptr> m xls f demo d get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> v pbe get current mode info ( <ptr> v pbe dev <dot> <ptr> mode info )
<cls> <noptr> v l query std ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> bus info show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> c xxx do vb i copy ( <ptr> dev <dot> <ptr> dma q <dot> <ptr> pbuffer <dot> <noptr> bytesto copy )
<cls> <noptr> sp mfc set dec stream buffer v ( <ptr> ctx <dot> <noptr> buf addr <dot> <noptr> start num byte <dot> <noptr> str m size )
<cls> <noptr> fdt v read ( <ptr> fdt v <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> serial irt x ( <ptr> dev <dot> <ptr> tx buf <dot> <noptr> count )
<cls> <noptr> tw start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> tw get v l std ( <noptr> std )
<cls> <noptr> z d demo dr reg ( <ptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> am gxx set power off ( <ptr> data )
<cls> <noptr> iv tvs fmt vb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> iv tv g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> iv tv set wss ( <ptr> it v <dot> <noptr> enabled <dot> <noptr> mode )
<cls> <noptr> skb af cmp rect ( <ptr> r <dot> <ptr> r )
<cls> <noptr> z l set parameters ( <ptr> fe )
<cls> <noptr> dib get wb d offset ( <ptr> fe )
<cls> <noptr> skb afs ctrl ( <ptr> ctrl )
<cls> <noptr> exy nos jpeg interrupts enable ( <ptr> regs )
<cls> <noptr> radio enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> iv tvm sleep timeout ( <noptr> msecs <dot> <noptr> intr )
<cls> <noptr> v l detect gtf ( <noptr> frame height <dot> <noptr> h freq <dot> <noptr> vsync <dot> <noptr> polar ities <dot> <noptr> interlaced <dot> <noptr> aspect <dot> <ptr> fmt )
<cls> <noptr> vivid slice dvb icap fill ( <ptr> dev <dot> <noptr> seq nr )
<cls> <noptr> rtl sdr set tuner ( <ptr> dev )
<cls> <noptr> c x set params ( <ptr> fe )
<cls> <noptr> r vin capture active ( <ptr> vin )
<cls> <noptr> vsp histogram init ( <ptr> vsp <dot> <ptr> histo <dot> <noptr> type <dot> <ptr> name <dot> <ptr> ops <dot> <ptr> formats <dot> <noptr> num formats <dot> <noptr> data size <dot> <noptr> meta format )
<cls> <noptr> m xls f tuner get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> get key k nc ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> g d reset ( <ptr> d )
<cls> <noptr> set mode ( <ptr> c i <dot> <noptr> mode )
<cls> <noptr> c x der read snr i ( <ptr> priv <dot> <ptr> snr )
<cls> <noptr> v pfe async bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> pkt session et b decoder ( <ptr> pkt <dot> <ptr> cookie <dot> <ptr> in frame )
<cls> <noptr> std init ( <ptr> ctrl <dot> <noptr> idx <dot> <noptr> ptr )
<cls> <noptr> j pug fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> dcm i start dma ( <ptr> dcm i <dot> <ptr> buf )
<cls> <noptr> mem cg slab info show ( <ptr> m <dot> <ptr> unused )
<cls> <noptr> m lv g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> t mir int start ( <ptr> rc )
<cls> <noptr> read field reg ( <ptr> vp dma <dot> <noptr> offset <dot> <noptr> mask <dot> <noptr> shift )
<cls> <ptr> check enable ir ( )
<cls> <noptr> dvb ca en thread ( <ptr> data )
<cls> <noptr> po set green balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> wm log status ( <ptr> sd )
<cls> <noptr> nv t disable cir ( <ptr> nv t )
<cls> <noptr> fim cmm resume ( <ptr> fim c )
<cls> <noptr> six start ( <ptr> radio )
<cls> <noptr> tp g set font ( <ptr> f )
<cls> <noptr> it wait ( <ptr> dev )
<cls> <noptr> or set mode ( <ptr> fe )
<cls> <noptr> dib p update pll ( <ptr> fe <dot> <ptr> bw )
<cls> <ptr> check flip image ( )
<cls> <noptr> mtk md pvp u register ( <ptr> pdev )
<cls> <noptr> ov set frame size ( <ptr> ov )
<cls> <noptr> tp gre calc ( <ptr> tp g )
<cls> <noptr> dib xic master xfer gpio ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> qt write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sun ics i platform driver init ( )
<cls> <noptr> put h tbl ( <ptr> p <dot> <ptr> h tbl <dot> <noptr> len )
<cls> <noptr> vivid radio calc sig qual ( <ptr> dev )
<cls> <noptr> control tx modulation enable ( <ptr> c <dot> <noptr> enable )
<cls> <noptr> bt tv sub probe ( <ptr> dev )
<cls> <ptr> check force b and ( )
<cls> <noptr> c xxx register ( <ptr> dev )
<cls> <noptr> tuner probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> vi u open ( <ptr> file )
<cls> <noptr> flex cop set mac filter ( <ptr> fc <dot> <noptr> mac )
<cls> <noptr> g scs ctrl ( <ptr> ctx <dot> <ptr> ctrl )
<cls> <noptr> stm cec probe ( <ptr> pdev )
<cls> <noptr> tw pci driver init ( )
<cls> <noptr> saa vb i stop streaming ( <ptr> port )
<cls> <noptr> ctrl get saturation ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> set default params ( <ptr> ctx )
<cls> <noptr> fc get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> v pu enc encode ( <ptr> v pu <dot> <noptr> bs mode <dot> <ptr> frm buf <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> d dbd main it ( <ptr> io <dot> <noptr> nr <dot> <noptr> out )
<cls> <noptr> ttr c query ( <ptr> d )
<cls> <noptr> pvr query ctrl ( <ptr> file <dot> <ptr> priv <dot> <ptr> vc )
<cls> <noptr> c xdr init t ( <ptr> fe )
<cls> <noptr> smss dio interrupt ( <ptr> func )
<cls> <noptr> stb d vbs algo ( <ptr> state )
<cls> <noptr> ov stop stream ( <ptr> ov )
<cls> <noptr> via cam int enable ( <ptr> cam )
<cls> <noptr> az usb driver init ( )
<cls> <noptr> vim c streamer pipeline init ( <ptr> stream <dot> <ptr> ved )
<cls> <noptr> irl irc poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> mtk r ( <ptr> ir <dot> <noptr> reg )
<cls> <noptr> ov pkts can ( <ptr> gsp ca dev <dot> <ptr> in <dot> <noptr> len )
<cls> <noptr> vid out buf request complete ( <ptr> vb )
<cls> <noptr> vb wait for all buffers ( <ptr> q )
<cls> <noptr> coda mpeg parse headers ( <ptr> ctx <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> v ls ctrl ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> v v seth flip ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> switch antenna to q am ( <ptr> state )
<cls> <noptr> h vah prepare task ( <ptr> p ctx <dot> <ptr> task <dot> <ptr> frame <dot> <ptr> stream )
<cls> <noptr> nv t dump r x buf ( <ptr> nv t )
<cls> <ptr> mcs attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> net upc is lot ts ctl ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> c x der sleeps ( <ptr> fe )
<cls> <noptr> sun i video init ( <ptr> video <dot> <ptr> csi <dot> <ptr> name )
<cls> <noptr> gpio ir recv suspend ( <ptr> dev )
<cls> <noptr> opera power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> v l print fmt desc ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> sa ahs set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> pvr lg dta attach ( <ptr> adap )
<cls> <noptr> stv x vit clk ctl ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> a probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> z r xx start read pipe ( <ptr> cam )
<cls> <noptr> dst type flags print ( <ptr> state )
<cls> <noptr> geo vision mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> x c tuner attach ( <ptr> adap )
<cls> <noptr> port has enct i ( <ptr> port )
<cls> <noptr> get hw reg base ( <ptr> inst )
<cls> <noptr> tvp xs ctrl ( <ptr> ctrl )
<cls> <noptr> vp if log status ( <ptr> file p <dot> <ptr> priv )
<cls> <noptr> v pfe try fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v lg ctrl ( <ptr> hdl <dot> <ptr> control )
<cls> <noptr> me so nao cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> stk clear queue ( <ptr> dev )
<cls> <noptr> hack r f try fmt sdr ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> pvr debug if c print info ( <ptr> h dw <dot> <ptr> buf <dot> <noptr> a cnt )
<cls> <noptr> r j ns ctrl ( <ptr> ctrl )
<cls> <noptr> spl l reset ( <ptr> tn r dmd <dot> <noptr> clock mode )
<cls> <noptr> mantis uart read ( <ptr> mantis )
<cls> <noptr> v l m m stream off ( <ptr> file <dot> <ptr> m mctx <dot> <noptr> type )
<cls> <noptr> stv algo ( <ptr> fe )
<cls> <noptr> med usa enable blue field output ( <ptr> dev <dot> <noptr> channel <dot> <noptr> enable )
<cls> <noptr> si get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> sms dvb read status ( <ptr> fe <dot> <ptr> stat )
<cls> <noptr> r tls d run set tuner ( <ptr> dev )
<cls> <noptr> dib pread snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> adv subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> v fec am if wait for stop ( <ptr> v fe <dot> <ptr> dev )
<cls> <noptr> set tsconfig ( <ptr> priv )
<cls> <noptr> adp set power ( <ptr> flash <dot> <noptr> on )
<cls> <noptr> exy nos jpeg set tbl ( <ptr> regs <dot> <ptr> tbl <dot> <noptr> tab <dot> <noptr> len )
<cls> <noptr> no ons ctrl ( <ptr> ctrl )
<cls> <noptr> isp stat buf clear ( <ptr> stat )
<cls> <noptr> mtv read ( <ptr> sd <dot> <noptr> addr )
<cls> <noptr> adv x csi registered ( <ptr> sd )
<cls> <noptr> fcd vb sleep ( <ptr> fe )
<cls> <noptr> tws stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> msi set usb adc ( <ptr> dev )
<cls> <noptr> au function ality ( <ptr> adap )
<cls> <noptr> nv t enable wake ( <ptr> nv t )
<cls> <ptr> c x get tun eric adapter ( <ptr> fe )
<cls> <noptr> smi app sysfs ident read ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> def to user ( <ptr> c <dot> <ptr> ctrl )
<cls> <noptr> sms core gpio get level ( <ptr> core dev <dot> <noptr> pin num <dot> <ptr> level )
<cls> <noptr> rtl sdr enum fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v pfe probe complete ( <ptr> v pfe )
<cls> <noptr> tegra cec error recovery ( <ptr> cec )
<cls> <noptr> gpio ir recv resume ( <ptr> dev )
<cls> <noptr> a zci slot shutdown ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> venus prepare power collapse ( <ptr> h dev <dot> <noptr> wait )
<cls> <noptr> loop set idle ( <ptr> dev <dot> <noptr> enable )
<cls> <ptr> check no drop ( )
<cls> <noptr> sensor write regs ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> adv smbus read byte data check ( <ptr> client <dot> <noptr> command <dot> <noptr> check )
<cls> <noptr> flite hw set pack ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> ddb input read ( <ptr> input <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> saa hw enable ( <ptr> dev )
<cls> <noptr> sd start ( <ptr> gsp ca dev )
<cls> <noptr> saa buffer deliver ( <ptr> buf )
<cls> <noptr> s pcs iss stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> vivid get d i ( <ptr> rds <dot> <noptr> grp )
<cls> <noptr> m xls f tuner set params ( <ptr> fe )
<cls> <noptr> sa axs radio ( <ptr> sd )
<cls> <noptr> adv xx g d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> fin tek resume ( <ptr> pdev )
<cls> <noptr> tm irq callback ( <ptr> urb )
<cls> <noptr> x c get bandwidth ( <ptr> fe <dot> <ptr> bw )
<cls> <noptr> mtp close ( <ptr> sub dev <dot> <ptr> f h )
<cls> <noptr> j te v limits ( <ptr> sensor )
<cls> <noptr> ov init pre alt ( <ptr> gsp ca dev )
<cls> <noptr> rain setup ( <ptr> rain <dot> <ptr> ser io <dot> <ptr> log addrs <dot> <ptr> pa )
<cls> <noptr> tw driver init ( )
<cls> <noptr> delta mjpeg reads of ( <ptr> p ctx <dot> <ptr> data <dot> <noptr> size <dot> <ptr> header )
<cls> <noptr> bt tv write gpio ( <noptr> card <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> vb i init ( <ptr> dev <dot> <ptr> v v )
<cls> <noptr> gsp ca init ( )
<cls> <noptr> pwc get fps ( <ptr> pdev <dot> <noptr> index <dot> <noptr> size )
<cls> <noptr> coda wakeup capture queue ( <ptr> ctx )
<cls> <noptr> sq ack frame ( <ptr> gsp ca dev )
<cls> <noptr> z r xx resume ( <ptr> int f )
<cls> <noptr> tvp g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> dvb user copy ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg <dot> <ptr> ptr <dot> <noptr> int <dot> <ptr> ptr )
<cls> <noptr> iv tv enum audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <noptr> tw x enum frame intervals ( <ptr> file <dot> <ptr> priv <dot> <ptr> ival )
<cls> <noptr> ov disconnect ( <ptr> sd )
<cls> <noptr> n gene probe ( <ptr> pci dev <dot> <ptr> id )
<cls> <noptr> b tt vic send bytes ( <ptr> b tv <dot> <ptr> msg <dot> <noptr> last )
<cls> <noptr> rgb balance ctrl to reg value ( <noptr> rgb ctrl val )
<cls> <noptr> sp mfc get consumed stream v ( <ptr> dev )
<cls> <noptr> xt pg set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> coda command sync ( <ptr> ctx <dot> <noptr> cmd )
<cls> <noptr> iv tv v l dec poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> m xls f get stream config mercury m h ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <noptr> stm cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> ths set val ( <ptr> sd <dot> <noptr> mode )
<cls> <noptr> sp mfc encode one frame v ( <ptr> ctx )
<cls> <noptr> v f ereg update clear ( <ptr> v fe <dot> <noptr> lineid )
<cls> <noptr> ccd cls c config ( <ptr> c cdc <dot> <ptr> config )
<cls> <noptr> ov write reg ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> hack r fg tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> stb d vbs get data lock ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> handler set err ( <ptr> hdl <dot> <noptr> err )
<cls> <noptr> solo gpio chip direction input ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> fill frame ( <ptr> gsp ca dev <dot> <ptr> urb )
<cls> <noptr> fim c lite try fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> dib p set output mode ( <ptr> fe <dot> <noptr> mode )
<cls> <noptr> h fi session init done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> v feb us reload wm ( <ptr> v fe <dot> <noptr> wm )
<cls> <noptr> sh recv slave reply ( <ptr> fe <dot> <ptr> reply )
<cls> <noptr> uvc ctrl prune entity ( <ptr> dev <dot> <ptr> entity )
<cls> <noptr> venc enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> c xvid ioc g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> tv norms )
<cls> <noptr> delta vb frame stop streaming ( <ptr> q )
<cls> <noptr> c x der get carrier offset t ( <ptr> priv <dot> <noptr> bandwidth <dot> <ptr> offset )
<cls> <noptr> r card rif sdr probe ( <ptr> sdr )
<cls> <noptr> c x msg mpeg output global config ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> media device pci init ( <ptr> m dev <dot> <ptr> pci dev <dot> <ptr> name )
<cls> <noptr> v fe set clock rates ( <ptr> v fe )
<cls> <noptr> av send fw cmd ( <ptr> av <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> as cote write regs ( <ptr> priv <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> cal async complete ( <ptr> notifier )
<cls> <noptr> saa driver init ( )
<cls> <ptr> to state from ctrl ( <ptr> ctrl )
<cls> <noptr> cec pin r x states ( <ptr> pin <dot> <noptr> ts )
<cls> <noptr> mtk mdp m m g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> stv get demo d cold lock ( <ptr> fe <dot> <noptr> demo d timeout )
<cls> <noptr> it disable r x ( <ptr> dev )
<cls> <noptr> rtl read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> iv tv video set io ( <ptr> it v )
<cls> <noptr> t dax read status ( <ptr> fe <dot> <ptr> fe status )
<cls> <noptr> j pu read ( <ptr> j pu <dot> <noptr> reg )
<cls> <noptr> saas fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> init r cmap fusion h dtv mce ( )
<cls> <noptr> dcm i set crop ( <ptr> dcm i )
<cls> <noptr> sms dvb hot plug ( <ptr> core dev <dot> <ptr> device <dot> <noptr> arrival )
<cls> <noptr> vp dma get list mask ( <ptr> vp dma <dot> <noptr> irq num )
<cls> <noptr> b disp driver init ( )
<cls> <noptr> v f ereg set ( <ptr> v fe <dot> <noptr> reg <dot> <noptr> set bits )
<cls> <noptr> tuner g frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> mtk jpeg try fmt m plane ( <ptr> f <dot> <ptr> fmt <dot> <ptr> ctx <dot> <noptr> q type )
<cls> <ptr> check enable b wb ( )
<cls> <noptr> dib set output mode ( <ptr> fe <dot> <noptr> mode )
<cls> <noptr> adv enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> dvb front end check parameters ( <ptr> fe )
<cls> <noptr> v pbe display g fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> pvr hd wcm don air digital path ctrl ( <ptr> h dw <dot> <noptr> onoff )
<cls> <noptr> video end ( <ptr> f h <dot> <ptr> file )
<cls> <noptr> ska driver init ( )
<cls> <noptr> air spy stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> polls lot status x o ( <ptr> ca <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> black bird init ( )
<cls> <noptr> coda try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> write dst ( <ptr> state <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> em xx audio init ( <ptr> dev )
<cls> <noptr> vb i read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> d ibm set bandwidth ( <ptr> state <dot> <noptr> bw )
<cls> <noptr> set vsb ( <ptr> demo d )
<cls> <ptr> check taz ( )
<cls> <noptr> cp write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> em dvb init plex px b cud ( <ptr> dev )
<cls> <noptr> s rpc set params ( <ptr> sd )
<cls> <ptr> m cam find format ( <noptr> pixel format )
<cls> <noptr> reg w ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> v pfe save context ( <ptr> c cdc )
<cls> <noptr> m xlr f sleep ( <ptr> fe )
<cls> <noptr> pvr buffer done ( <ptr> b p )
<cls> <noptr> as x cmd set context ( <ptr> adap <dot> <noptr> tag <dot> <noptr> value )
<cls> <noptr> px a camera try bus param ( <ptr> pc dev <dot> <noptr> bus width )
<cls> <noptr> imx es post power on ( <ptr> sensor )
<cls> <noptr> ic write reg ( <ptr> av <dot> <noptr> id <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> irr x resume ( <ptr> dev )
<cls> <noptr> zol trix gr x sub c hans ( <ptr> isa )
<cls> <noptr> solo ic handle read ( <ptr> solo dev )
<cls> <noptr> configure channels ( <ptr> fe i )
<cls> <noptr> fdp mmdevice run ( <ptr> priv )
<cls> <noptr> atmel isc probe ( <ptr> pdev )
<cls> <noptr> spc a acknowledged command ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> idx <dot> <noptr> val )
<cls> <noptr> vb thread ( <ptr> data )
<cls> <noptr> c xxx dvb register ( )
<cls> <noptr> h fi sys idle done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> pvr v l read ( <ptr> file <dot> <ptr> buff <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> pkt sys ssr cmd ( <ptr> pkt <dot> <noptr> trigger type )
<cls> <ptr> hdp vr get next buffer ( <ptr> dev )
<cls> <noptr> m bas read signal strength ( <ptr> fe )
<cls> <noptr> lg dta set inversion ( <ptr> state <dot> <noptr> inversion )
<cls> <noptr> bt write ( <ptr> encoder <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> c xxx bulk copy ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> c x gpio register ( <ptr> c x <dot> <noptr> hw )
<cls> <noptr> lme name ( <ptr> adap )
<cls> <noptr> ak open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> mmp cam init module ( )
<cls> <noptr> isset i spi so ( <ptr> is <dot> <noptr> cmd <dot> <noptr> val )
<cls> <noptr> pwc gets ctrl ( <ptr> pdev <dot> <noptr> request <dot> <noptr> value <dot> <ptr> data )
<cls> <noptr> z r xx poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> dump cfd ( <ptr> cfd )
<cls> <noptr> m cam ctl r power down ( <ptr> cam )
<cls> <noptr> sh read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> td a set inversion ( <ptr> state <dot> <ptr> fe params )
<cls> <noptr> fin tek c iris r ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> dt enum input ( <ptr> filp <dot> <ptr> p <dot> <ptr> input )
<cls> <noptr> use alternative detection method ( <ptr> dev )
<cls> <noptr> cam ss add clock margin ( <ptr> rate )
<cls> <noptr> dvb front end test event ( <ptr> fe priv <dot> <ptr> events )
<cls> <noptr> l gdt init ( <ptr> fe )
<cls> <noptr> f m drv init ( )
<cls> <noptr> fim c lite runtime resume ( <ptr> dev )
<cls> <noptr> em xx reg len ( <noptr> reg )
<cls> <noptr> c x der retun e active ( <ptr> priv <dot> <ptr> p )
<cls> <noptr> ir raw handler unregister ( <ptr> ir raw handler )
<cls> <noptr> c xdr read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> net up dma interrupt ( <ptr> dma )
<cls> <noptr> is ppm complete ( <ptr> dev )
<cls> <noptr> ds init fe ( <ptr> fe )
<cls> <noptr> c x v api result ( <ptr> c x <dot> <noptr> data <dot> <noptr> cmd <dot> <noptr> args )
<cls> <noptr> pac start frame ( <ptr> gsp ca dev <dot> <noptr> lines <dot> <noptr> samples per line )
<cls> <noptr> c x usb aux buf pay len ( <ptr> aux buf )
<cls> <noptr> video buf init ( <ptr> vb )
<cls> <noptr> coda check firmware ( <ptr> dev )
<cls> <noptr> vivid fb check var ( <ptr> var <dot> <ptr> dev )
<cls> <noptr> upd as routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> px p job ready ( <ptr> priv )
<cls> <noptr> l irc prog query ( <ptr> attr <dot> <ptr> u attr )
<cls> <noptr> get byte ( <ptr> buf )
<cls> <noptr> c x usb nano led ( <ptr> d <dot> <noptr> onoff )
<cls> <ptr> check enc pcm buf size ( )
<cls> <noptr> m tread snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> dcm iframe sizes init ( <ptr> dcm i )
<cls> <noptr> cobalt ic init ( <ptr> cobalt )
<cls> <noptr> vid io cs register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> preview params lock ( <ptr> prev <dot> <noptr> update <dot> <noptr> shadow )
<cls> <noptr> solo fill jpeg ( <ptr> solo enc <dot> <ptr> vb <dot> <ptr> vh )
<cls> <noptr> air spy enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> dvb net setup ( <ptr> dev )
<cls> <noptr> fim c lite reinit ( <ptr> fim c <dot> <noptr> suspend )
<cls> <noptr> nxt reset ( <ptr> state )
<cls> <noptr> a usleep ( <ptr> fe )
<cls> <noptr> q m dbset params ( <ptr> fe )
<cls> <noptr> saa fini dev ( <ptr> pci dev )
<cls> <noptr> ov set gain ( <ptr> reg map <dot> <noptr> value )
<cls> <noptr> img ir timings defaults ( <ptr> timings <dot> <ptr> defaults )
<cls> <noptr> spc i read cam control ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> adb s clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> ene set reg addr ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> qt get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> v dec query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> sh vou g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std )
<cls> <noptr> iv tv set sda old ( <ptr> data <dot> <noptr> state )
<cls> <noptr> mce usb sett x mask ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> uvc ctrl send events ( <ptr> handle <dot> <ptr> x ctrls <dot> <noptr> x ctrls count )
<cls> <noptr> solo enc start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> vbd q buf ( <ptr> q <dot> <ptr> b <dot> <noptr> non blocking )
<cls> <noptr> vb fop poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> max load adc presets ( <ptr> ctx )
<cls> <noptr> vivid sdr caps ctrl ( <ptr> ctrl )
<cls> <ptr> find entity ( <ptr> m dev <dot> <noptr> id )
<cls> <noptr> c x sram channel dump ( <ptr> dev <dot> <ptr> ch )
<cls> <ptr> check dvb shutdown timeout ( )
<cls> <noptr> tm alsa unregister ( )
<cls> <ptr> mtk vcodec get reg addr ( <ptr> data <dot> <noptr> regid x )
<cls> <noptr> pvr h dw check crop cap ( <ptr> h dw )
<cls> <noptr> l uts ctrl ( <ptr> ctrl )
<cls> <noptr> dst get tuner info ( <ptr> state )
<cls> <noptr> m tts ctrl ( <ptr> ctrl )
<cls> <noptr> c x calculate ber window ( <ptr> state <dot> <noptr> rate )
<cls> <noptr> samsung smt set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> power down atv ( <ptr> demo d <dot> <noptr> standard <dot> <noptr> primary )
<cls> <noptr> ctrl isdirty s rate ( <ptr> cptr )
<cls> <noptr> smi app read nvm ( <ptr> sensor <dot> <ptr> nvm <dot> <noptr> nvm size )
<cls> <noptr> cec monitor all cnt dec ( <ptr> adap )
<cls> <noptr> lme usb talk ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> vsp video pipeline frame end ( <ptr> pipe <dot> <noptr> completion )
<cls> <noptr> fdt v stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> v fe init outputs ( <ptr> v fe )
<cls> <noptr> si read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> e iling ( <noptr> value <dot> <noptr> resolution )
<cls> <noptr> af set gpio ( <ptr> state <dot> <noptr> gpio <dot> <noptr> gpio val )
<cls> <noptr> iv tv start ( <ptr> it v )
<cls> <noptr> m cam needs config ( <ptr> cam )
<cls> <noptr> saa x write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> tm start thread ( <ptr> dev )
<cls> <noptr> imo nir change protocol ( <ptr> rc <dot> <ptr> rc proto )
<cls> <noptr> c x dt nr dmd gpio set cfg ( <ptr> tn r dmd <dot> <noptr> id <dot> <noptr> en <dot> <noptr> mode <dot> <noptr> open drain <dot> <noptr> invert )
<cls> <noptr> sd start ov x ( <ptr> gsp ca dev )
<cls> <noptr> fim c lite stop capture ( <ptr> fim c <dot> <noptr> suspend )
<cls> <noptr> v dec check src change ( <ptr> inst )
<cls> <noptr> vp if channel isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> saa irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> csi phy set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pluto read mac ( <ptr> pluto <dot> <ptr> mac )
<cls> <noptr> iv tv start v l decode stream ( <ptr> s <dot> <noptr> gop offset )
<cls> <noptr> tea get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> is rectangle enclosed ( <ptr> a <dot> <ptr> b )
<cls> <noptr> stb d vbs init csm ( <ptr> state <dot> <noptr> pilots <dot> <noptr> mod cod )
<cls> <noptr> msp c set aud mode ( <ptr> client )
<cls> <noptr> snd em xx prepare ( <ptr> sub stream )
<cls> <noptr> ctrl get contrast ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> saa query std ( <ptr> sd <dot> <ptr> std )
<cls> <dptr> e tek reg list first ( <ptr> meta )
<cls> <ptr> check fds r ( )
<cls> <noptr> vs pdu pipeline setup inputs ( <ptr> vsp <dot> <ptr> pipe )
<cls> <noptr> wb cir set bits ( <noptr> addr <dot> <noptr> bits <dot> <noptr> mask )
<cls> <noptr> vivid fb ioctl ( <ptr> info <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> media request object init ( <ptr> obj )
<cls> <noptr> iv tv d made c start ( <ptr> s )
<cls> <noptr> adv xcs is ctrl ( <ptr> ctrl )
<cls> <noptr> mute input ( <ptr> dev )
<cls> <noptr> show wakeup protocols ( <ptr> device <dot> <ptr> m attr <dot> <ptr> buf )
<cls> <noptr> bt tv g selection ( <ptr> file <dot> <ptr> f <dot> <ptr> sel )
<cls> <ptr> ln b p attach ( <ptr> fe <dot> <ptr> ic <dot> <noptr> override set <dot> <noptr> override clear )
<cls> <noptr> video buf q buf ( <ptr> q <dot> <ptr> b )
<cls> <noptr> gsp ca expo auto gain ( <ptr> gsp ca dev <dot> <noptr> avg lum <dot> <noptr> desired avg lum <dot> <noptr> dead zone <dot> <noptr> gain knee <dot> <noptr> exposure knee )
<cls> <noptr> v l write ( <ptr> filp <dot> <ptr> buf <dot> <noptr> sz <dot> <ptr> off )
<cls> <noptr> iv tv yuv frame complete ( <ptr> it v )
<cls> <noptr> stb search ( <ptr> fe )
<cls> <noptr> cec pin r x error inj ( <ptr> pin )
<cls> <noptr> cec pin start timer ( <ptr> pin )
<cls> <noptr> parser init ( <ptr> inst <dot> <ptr> codecs <dot> <ptr> domain )
<cls> <noptr> vsp hgt read ( <ptr> hgt <dot> <noptr> reg )
<cls> <noptr> sdp io write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> pct ve usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> pts top streaming ( <ptr> adap )
<cls> <noptr> l gdt x reset ( <ptr> bt )
<cls> <noptr> mt check lo lock ( <ptr> fe )
<cls> <noptr> iv tv enqueue ( <ptr> s <dot> <ptr> buf <dot> <ptr> q )
<cls> <noptr> gsp ca buffer prepare ( <ptr> vb )
<cls> <noptr> msm v fe get v fe lineid ( <ptr> entity <dot> <ptr> id )
<cls> <noptr> iv tv streams setup ( <ptr> it v )
<cls> <noptr> usb d sbr driver init ( )
<cls> <noptr> cec transmit do nets ( <ptr> adap <dot> <noptr> status <dot> <noptr> arb lost cnt <dot> <noptr> nack cnt <dot> <noptr> low drive cnt <dot> <noptr> error cnt <dot> <noptr> ts )
<cls> <noptr> pvr h dw trigger module log ( <ptr> h dw )
<cls> <noptr> vsp entity init ( <ptr> vsp <dot> <ptr> entity <dot> <ptr> name <dot> <noptr> numpad s <dot> <ptr> ops <dot> <noptr> function )
<cls> <noptr> ycbcr to color ( <ptr> tp g <dot> <noptr> y <dot> <noptr> cb <dot> <noptr> cr <dot> <ptr> r <dot> <ptr> g <dot> <ptr> b )
<cls> <noptr> mtm set auto white balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c x usb my gic ad front end attach ( <ptr> adap )
<cls> <noptr> dib write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> t evi id vbs set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> tt usb stop iso xfer ( <ptr> tt usb )
<cls> <noptr> dw tuner attach ( <ptr> adap )
<cls> <noptr> stv x get bb gain ( <ptr> fe <dot> <ptr> gain )
<cls> <noptr> adv cec write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sleep ( <ptr> fe )
<cls> <noptr> init agc ( <ptr> state <dot> <noptr> is dtv )
<cls> <noptr> c x init in work orders ( <ptr> c x )
<cls> <noptr> media request poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> var intra ( <ptr> input )
<cls> <noptr> dmx section feed stop filtering ( <ptr> feed )
<cls> <noptr> de interlace g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sf w load start ( <ptr> dev )
<cls> <noptr> ir raw encode carrier ( <noptr> protocol )
<cls> <noptr> sa aic msg prepare ( <ptr> m <dot> <noptr> num <dot> <ptr> op )
<cls> <noptr> v l stream on ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> ir xmp decode init ( )
<cls> <noptr> dst getdeviceid ( <ptr> state )
<cls> <noptr> vss register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> isp video d q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> b )
<cls> <noptr> dvb sky gpio ctrl ( <ptr> d <dot> <noptr> g port <dot> <noptr> value )
<cls> <noptr> av fed i seq c reset overload ( <ptr> fe )
<cls> <noptr> dib slave reset ( <ptr> fe )
<cls> <noptr> c x init ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> c x setup page ( <ptr> c x <dot> <noptr> addr )
<cls> <noptr> dst check mba ( <ptr> state )
<cls> <noptr> sec oce crx done ( <ptr> adap <dot> <noptr> status val )
<cls> <noptr> c x input ir close ( <ptr> rc )
<cls> <noptr> dvb dmx sw filter section copy dump ( <ptr> feed <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> stv wait for lock ( <ptr> int p <dot> <noptr> demo d <dot> <noptr> dmd timeout <dot> <noptr> fec timeout )
<cls> <noptr> v l async notifier fw node parse endpoint ( <ptr> dev <dot> <ptr> notifier <dot> <ptr> endpoint <dot> <noptr> asd struct size <dot> <noptr> parse endpoint )
<cls> <noptr> qt set params ( <ptr> fe )
<cls> <noptr> ad power off ( <ptr> coil <dot> <noptr> standby )
<cls> <noptr> init r cmap snap stream fire fly ( )
<cls> <noptr> sms core led state ( <ptr> core <dot> <noptr> led )
<cls> <noptr> afc ex info get ( <ptr> state <dot> <noptr> afc ex freq <dot> <ptr> afc exl <dot> <ptr> afc exh )
<cls> <noptr> pvr msp sub dev update ( <ptr> h dw <dot> <ptr> sd )
<cls> <noptr> mtk mdp ctx state lock clear ( <ptr> ctx <dot> <noptr> state )
<cls> <noptr> uvc ctrl restore values ( <ptr> dev )
<cls> <noptr> ov calc p clk ( <ptr> sensor <dot> <noptr> rate <dot> <ptr> pll pre div <dot> <ptr> pll mult <dot> <ptr> sys div <dot> <ptr> pll r div <dot> <ptr> bit div <dot> <ptr> p clk div )
<cls> <noptr> video buf d main it overlay ( <ptr> dma <dot> <noptr> direction <dot> <noptr> addr <dot> <noptr> nr pages )
<cls> <noptr> radios hw freq seek ( <ptr> file <dot> <ptr> priv <dot> <ptr> a )
<cls> <noptr> m tt mcu read ( <ptr> client <dot> <noptr> command )
<cls> <noptr> m i init settings ( <ptr> gsp ca dev )
<cls> <noptr> stv send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> scm set scene program ( <ptr> state <dot> <noptr> val )
<cls> <noptr> ov read reg ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> vp iss fre ffb ( <ptr> inst <dot> <ptr> fb )
<cls> <noptr> c xdr get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> d tcs start ( <ptr> gsp ca dev )
<cls> <noptr> vim m stop streaming ( <ptr> q )
<cls> <noptr> m xls fwrite reg ( <ptr> state <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> coda bitstream try queue ( <ptr> ctx <dot> <ptr> src buf )
<cls> <noptr> vivid stop generating vid out ( <ptr> dev <dot> <ptr> p streaming )
<cls> <noptr> txn o eom ( <ptr> pin )
<cls> <noptr> vps s dma complete interrupt ( )
<cls> <noptr> fd tvc a ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> tw resume ( <ptr> pci dev )
<cls> <noptr> ov calc sys clk ( <ptr> sensor <dot> <noptr> rate <dot> <ptr> pll pre div <dot> <ptr> pll mult <dot> <ptr> sys div )
<cls> <noptr> iv tv try fmt vb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> sun ics i set window ( <ptr> s dev )
<cls> <noptr> smi app get mbus formats ( <ptr> sensor )
<cls> <noptr> av pes play ( <ptr> dest <dot> <ptr> buf <dot> <noptr> d len )
<cls> <noptr> dtt ufe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> stv set mis ( <ptr> int p <dot> <noptr> demo d <dot> <noptr> mis )
<cls> <noptr> c x der read uc blocks ( <ptr> fe )
<cls> <noptr> adp suspend ( <ptr> dev )
<cls> <noptr> fmt x set af ( <ptr> f m dev <dot> <noptr> af )
<cls> <noptr> max r x mode from freq ( <ptr> ctx <dot> <noptr> freq <dot> <ptr> mode )
<cls> <noptr> vivid s fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> cam if media dev init ( <ptr> cam if )
<cls> <noptr> video register device ( <ptr> v dev <dot> <noptr> type <dot> <noptr> nr <dot> <noptr> warn i fnr in use <dot> <ptr> owner )
<cls> <noptr> stk reg reset ( <ptr> dev )
<cls> <noptr> dt fmt vid cap ( <ptr> filp <dot> <ptr> p <dot> <ptr> f )
<cls> <noptr> tcs d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> adv xx set gain ( <ptr> sd <dot> <noptr> auto gain <dot> <noptr> gain a <dot> <noptr> gain b <dot> <noptr> gain c )
<cls> <noptr> fim c link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> delta enum fmt frame ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> seek firmware ( <ptr> fe <dot> <noptr> type <dot> <ptr> id )
<cls> <noptr> t dax irq rate ( <ptr> state <dot> <ptr> flags )
<cls> <noptr> c xxx card setup ( <ptr> dev )
<cls> <noptr> media request ioctl queue ( <ptr> req )
<cls> <noptr> t wh put slice header ( <dptr> buf <dot> <ptr> space left <dot> <noptr> idr pic id <dot> <noptr> frame gop seqno <dot> <ptr> tail nb bits <dot> <ptr> tail )
<cls> <noptr> usb vision set dram settings ( <ptr> usb vision )
<cls> <noptr> six fops open ( <ptr> file )
<cls> <noptr> msi stop streaming ( <ptr> v q )
<cls> <noptr> mip i dic driver init ( )
<cls> <noptr> sz push full pulse ( <ptr> sz <dot> <noptr> value )
<cls> <noptr> pipeline pm use count ( <ptr> entity <dot> <ptr> graph )
<cls> <noptr> m xls f config spi ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> tuner stu ner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> saa get descriptors ( <ptr> dev )
<cls> <noptr> gl usb driver init ( )
<cls> <noptr> m anti shif sbuf op done wait ( <ptr> ca )
<cls> <noptr> lg x get rs frame mode ( <ptr> state <dot> <ptr> rs frame mode )
<cls> <noptr> tw get ctrl val ( <ptr> solo dev <dot> <noptr> ctrl <dot> <noptr> ch <dot> <ptr> val )
<cls> <noptr> az front end ts bypass ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> hor usa ic debug ( <ptr> priv <dot> <noptr> reg <dot> <noptr> write <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> v preset ( <ptr> inst )
<cls> <noptr> mpeg frame header ( <ptr> go <dot> <ptr> buf <dot> <noptr> modulo <dot> <noptr> pict struct <dot> <noptr> frame )
<cls> <noptr> uvc v l compat ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <ptr> check audio all ( )
<cls> <noptr> sh ve u calc scale ( <ptr> ve u <dot> <noptr> size in <dot> <noptr> size out <dot> <noptr> crop out <dot> <ptr> mant <dot> <ptr> frac <dot> <ptr> rep )
<cls> <noptr> scm o if get frame desc ( <ptr> sd <dot> <noptr> pad <dot> <ptr> fd )
<cls> <noptr> tp g update m v step ( <ptr> tp g )
<cls> <noptr> l gdt soft reset ( <ptr> state )
<cls> <noptr> z l single write ( <ptr> fe <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> preview enable luma enhancement ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> dump au ( <ptr> ctx <dot> <ptr> au )
<cls> <noptr> lme download firmware ( <ptr> d <dot> <ptr> fw )
<cls> <noptr> irq enable tx ( <ptr> sd <dot> <noptr> mask )
<cls> <noptr> scc am if sub dev set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ene sett x mask ( <ptr> r dev <dot> <noptr> tx mask )
<cls> <noptr> k world sbt v d gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> hack r f return all buffers ( <ptr> v q <dot> <noptr> state )
<cls> <noptr> dvb ca en thread state machine ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> pvr context global done ( )
<cls> <noptr> venus runtime suspend ( <ptr> dev )
<cls> <noptr> usb vision read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> solo vlc hex tup ( <ptr> solo dev <dot> <noptr> on )
<cls> <noptr> ths log status ( <ptr> sd )
<cls> <noptr> omap v out probe ( <ptr> pdev )
<cls> <noptr> flite hw set window offset ( <ptr> dev <dot> <ptr> f )
<cls> <noptr> msp suspend ( <ptr> dev )
<cls> <noptr> v lic sub dev addr ( <ptr> sd )
<cls> <noptr> sh set spectral inversion ( <ptr> fe <dot> <noptr> inverted )
<cls> <noptr> pix proc config ( <ptr> ctx )
<cls> <noptr> oven able test pattern ( <ptr> ov <dot> <noptr> pattern )
<cls> <noptr> dvb bt xx init ( )
<cls> <noptr> td a set symbol rate ( <ptr> state <dot> <noptr> sr )
<cls> <noptr> af tuner init ( <ptr> fe )
<cls> <noptr> set clip list ( <ptr> dev <dot> <noptr> reg <dot> <ptr> cl <dot> <noptr> entries <dot> <ptr> name )
<cls> <noptr> v pfe schedule bottom field ( <ptr> v pfe )
<cls> <noptr> fim c isp sub dev get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> iv tv mute ( <ptr> it v )
<cls> <noptr> ctrl clear dirty balance ( <ptr> cptr )
<cls> <noptr> ic read demo d bytes ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> n gene buffer config ( <ptr> dev )
<cls> <noptr> serial ir resume ( <ptr> dev )
<cls> <noptr> td a charge pump source ( <ptr> fe <dot> <noptr> pll <dot> <noptr> force <dot> <noptr> lock ic )
<cls> <noptr> cal schedule next buffer ( <ptr> ctx )
<cls> <noptr> video buf poll stream ( <ptr> file <dot> <ptr> q <dot> <ptr> wait )
<cls> <noptr> c x process options ( <ptr> c x )
<cls> <ptr> v l ctrl get name ( <noptr> id )
<cls> <noptr> sp mfc start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> v l clk enable ( <ptr> clk )
<cls> <noptr> venc set pal ( <ptr> sd )
<cls> <noptr> r car c sip drv init ( )
<cls> <ptr> j pu get q data ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> vid ioc g fmt vid overlay ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> vb i stop streaming ( <ptr> v q )
<cls> <noptr> bt tv vb i fmt reset ( <ptr> f <dot> <noptr> norm )
<cls> <noptr> sd config video ( <ptr> gsp ca dev <dot> <ptr> id )
<cls> <noptr> c x restart queue ( <ptr> dev <dot> <ptr> q )
<cls> <noptr> cam if prepare dma offset ( <ptr> vp )
<cls> <noptr> config sensor ( <ptr> cam <dot> <noptr> reqwidth <dot> <noptr> reqheight )
<cls> <noptr> mpegts start ( <ptr> state )
<cls> <noptr> adp close ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> n gene shutdown ( <ptr> pdev )
<cls> <noptr> g d probe ( <ptr> pdev )
<cls> <noptr> cobalt buf queue ( <ptr> vb )
<cls> <noptr> media request object complete ( <ptr> obj )
<cls> <noptr> m xls reconfigure ( <ptr> fe <dot> <noptr> mod type <dot> <noptr> bandwidth )
<cls> <noptr> set formatting ( <ptr> go )
<cls> <noptr> sh vou query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> x vt c driver init ( )
<cls> <noptr> copy pix ( <ptr> dev <dot> <noptr> win y <dot> <noptr> win x <dot> <ptr> cap <dot> <ptr> os d )
<cls> <ptr> sp mfc init regs v plus ( <ptr> dev )
<cls> <noptr> skb af load set file ( <ptr> state )
<cls> <noptr> tvp link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> l gs gxx auto lock g i ( <ptr> priv <dot> <noptr> g i <dot> <noptr> cpn <dot> <ptr> locked )
<cls> <noptr> mtk mdp m menu m fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ic write bytes ( <ptr> state <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> j te v pre stream on ( <ptr> sensor )
<cls> <noptr> d m get scl ( <ptr> data )
<cls> <noptr> solo ic master xfer ( <ptr> adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> pkt session set property ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> ptype <dot> <ptr> p data )
<cls> <noptr> c x usb medi ong input ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> fill dmx buffer ( <ptr> vb <dot> <ptr> pb )
<cls> <noptr> usb tv g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> cafe ctl r powerup ( <ptr> m cam )
<cls> <noptr> tt usb front end td a attach ( <ptr> adap )
<cls> <noptr> pulse ping eeprom work handler ( <ptr> work )
<cls> <ptr> check pcb debug ( )
<cls> <noptr> disable input ( <ptr> sd )
<cls> <noptr> v op use c ( <ptr> vh )
<cls> <noptr> ccd csb l reset ( )
<cls> <noptr> v l req buf s ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> fim c register mmdevice ( <ptr> fim c <dot> <ptr> v l dev )
<cls> <noptr> max send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> stk vid ioc enum fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt d )
<cls> <noptr> vp fec cdc validate param ( <ptr> c cdc <dot> <ptr> c cdc param )
<cls> <noptr> x c get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> pbs ctrl ( <ptr> ctrl )
<cls> <noptr> omap is pc cdc max rate ( <ptr> c cdc <dot> <ptr> max rate )
<cls> <noptr> log video status ( <ptr> client )
<cls> <noptr> pvr ctrl sym to value ( <ptr> cptr <dot> <ptr> ptr <dot> <noptr> len <dot> <ptr> mask ptr <dot> <ptr> val ptr )
<cls> <noptr> bt irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> go usb read interrupt complete ( <ptr> urb )
<cls> <noptr> set q am ( <ptr> state )
<cls> <noptr> mantis input process ( <ptr> mantis <dot> <noptr> scan code )
<cls> <noptr> pvr h dw setup std ( <ptr> h dw )
<cls> <noptr> snd cards aa pcm ( <ptr> saa <dot> <noptr> device )
<cls> <noptr> mantis cas lot shutdown ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> venus iface msg q read nolock ( <ptr> h dev <dot> <ptr> pkt )
<cls> <ptr> ov find best fit ( <ptr> fmt )
<cls> <noptr> dst set freq ( <ptr> state <dot> <noptr> freq )
<cls> <noptr> c cdc isr buffer ( <ptr> c cdc )
<cls> <noptr> lg x enable fic ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> em xx rc register ( )
<cls> <noptr> enable x mit ( <ptr> f m dev <dot> <noptr> new x mit state )
<cls> <noptr> ont ( <ptr> av <dot> <noptr> window nr <dot> <noptr> font size <dot> <noptr> color fg <dot> <noptr> color bg )
<cls> <noptr> set m clock ( <ptr> state <dot> <noptr> master clock )
<cls> <noptr> mtp set params ( <ptr> mtp )
<cls> <noptr> v pfe get app input index ( <ptr> v pfe <dot> <ptr> app input index )
<cls> <noptr> isc wait clk stable ( <ptr> hw )
<cls> <noptr> iv tv initstruct ( <ptr> it v )
<cls> <ptr> debug fc pop code ( <noptr> opcode <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> vp fec cdc config ycbcr ( <ptr> c cdc )
<cls> <noptr> cobalt alsa init ( <ptr> s )
<cls> <noptr> img ir clk notify ( <ptr> self <dot> <noptr> action <dot> <ptr> data )
<cls> <noptr> exy nos jpeg set q tbl chr ( <ptr> regs <dot> <noptr> quality )
<cls> <noptr> c iner gy tfe read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> saas selection ( <ptr> file <dot> <ptr> f <dot> <ptr> sel )
<cls> <noptr> imx write reg ( <ptr> priv <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> cams sof parse ports ( <ptr> cam ss )
<cls> <noptr> smi ir decode ( <ptr> ir )
<cls> <noptr> mantis front end soft reset ( <ptr> mantis )
<cls> <ptr> check new ic ( )
<cls> <noptr> pvr ctrl value to sym internal ( <ptr> cptr <dot> <noptr> mask <dot> <noptr> val <dot> <ptr> buf <dot> <noptr> max len <dot> <ptr> len )
<cls> <noptr> i sig fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> firmware isalive ( <ptr> state )
<cls> <noptr> nxt x write bytes ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> vivid vb igen wss raw ( <ptr> data <dot> <ptr> buf <dot> <noptr> sampling rate )
<cls> <noptr> sh vou configure geometry ( <ptr> vou dev <dot> <noptr> pix idx <dot> <noptr> wid x <dot> <noptr> h idx )
<cls> <noptr> f m irq handle set freq resp ( <ptr> f m dev )
<cls> <noptr> buffer prepare ( <ptr> q <dot> <ptr> vb <dot> <noptr> field )
<cls> <noptr> m xlt set if freq bits ( <ptr> state <dot> <noptr> if freq <dot> <noptr> invert if )
<cls> <noptr> six radio g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> side select ( <ptr> mux c <dot> <noptr> chan )
<cls> <noptr> r vin try format ( <ptr> vin <dot> <noptr> which <dot> <ptr> pix <dot> <ptr> src rect )
<cls> <noptr> tw x buf prepare ( <ptr> vb )
<cls> <noptr> lcd write ( <ptr> file <dot> <ptr> buf <dot> <noptr> nbytes <dot> <ptr> pos )
<cls> <noptr> v lst k read ( <ptr> fp <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> f pos )
<cls> <noptr> challenge ( <ptr> bytes )
<cls> <noptr> d ibm sleep ( <ptr> demo d )
<cls> <noptr> tw set audio gain ( <ptr> solo dev <dot> <noptr> ch <dot> <noptr> val )
<cls> <noptr> os d set left margin ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> mantis slot status ( <ptr> en <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> v l prio open ( <ptr> global <dot> <ptr> local )
<cls> <noptr> cec notifier set phys addr ( <ptr> n <dot> <noptr> pa )
<cls> <noptr> v fe buf update w mon last ( <ptr> v fe <dot> <ptr> output )
<cls> <noptr> x c tune digital ( <ptr> fe )
<cls> <noptr> dvb dmx sw filter raw ( <ptr> demux <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> mtk mdp hw set in image format ( <ptr> ctx )
<cls> <noptr> z d usb driver init ( )
<cls> <noptr> av cca get time date ( <ptr> fdt v <dot> <ptr> interval )
<cls> <noptr> dr x dic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> c x der read bert ( <ptr> priv <dot> <ptr> bit error <dot> <ptr> bit count )
<cls> <noptr> ad pic driver init ( )
<cls> <noptr> cio sub dev get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> lg set front end ( <ptr> fe )
<cls> <noptr> lg read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> rtl sdr buf queue ( <ptr> vb )
<cls> <noptr> af identify state ( <ptr> d <dot> <dptr> name )
<cls> <noptr> sdr cap stop streaming ( <ptr> v q )
<cls> <noptr> tw x pcm trigger ( <ptr> ss <dot> <noptr> cmd )
<cls> <noptr> mtk jpeg clk on ( <ptr> jpeg )
<cls> <noptr> ov mode init ( <ptr> sensor )
<cls> <noptr> so lov l init ( <ptr> solo dev <dot> <noptr> nr )
<cls> <noptr> digit v mt demo d init ( <ptr> fe )
<cls> <ptr> mmp cam find device ( <ptr> pdev )
<cls> <noptr> c x set nf r ( <ptr> state <dot> <noptr> n <dot> <noptr> f <dot> <noptr> r )
<cls> <noptr> em xx stop streaming ( <ptr> dvb )
<cls> <noptr> solo enc get fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> pvr ctrl has custom symbols ( <ptr> cptr )
<cls> <noptr> omap is pc cdc busy ( <ptr> c cdc )
<cls> <noptr> c xxx gpio set ( <ptr> dev <dot> <ptr> gpio )
<cls> <noptr> hi probe ( <ptr> client )
<cls> <noptr> prof front end attach ( <ptr> d )
<cls> <ptr> c x dev get ( <ptr> pci )
<cls> <noptr> so lov l set ch ( <ptr> solo dev <dot> <noptr> ch )
<cls> <noptr> dib pid filter ( <ptr> fe <dot> <noptr> id <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> ctrl crop w max get ( <ptr> cptr <dot> <ptr> width )
<cls> <noptr> r card rif notify unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> tm unregister extension ( <ptr> ops )
<cls> <noptr> cobalt enable output ( <ptr> s )
<cls> <noptr> ic w ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> mtk jpeg set queue data ( <ptr> ctx <dot> <ptr> param )
<cls> <ptr> saa v bin ext buf ( <ptr> port )
<cls> <noptr> dst get mac ( <ptr> state )
<cls> <noptr> six radios register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> it x init ( <ptr> d )
<cls> <noptr> ov init ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> scm rom boot ( <ptr> state <dot> <noptr> load fw )
<cls> <noptr> gpp sk fe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> c xxx i soc copy ( <ptr> dev <dot> <ptr> urb )
<cls> <ptr> dvb dummy f eq psk attach ( )
<cls> <noptr> px p enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> init dis eq c ( <ptr> state )
<cls> <noptr> uvc status start ( <ptr> dev <dot> <noptr> flags )
<cls> <noptr> c x gen c index ( <ptr> file <dot> <ptr> f h <dot> <ptr> idx )
<cls> <noptr> max set input unlocked ( <ptr> fe <dot> <noptr> in )
<cls> <noptr> get key adapt ec ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> m m ols enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> saa open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> dib reset pll ( <ptr> state )
<cls> <ptr> check reset crop ( )
<cls> <noptr> sp write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> dw xic func ( <ptr> adapter )
<cls> <noptr> stb read regs ( <ptr> state <dot> <noptr> regs )
<cls> <noptr> cobalt enum fmt vid out ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> isset fd config orientation ( <ptr> is <dot> <noptr> val )
<cls> <noptr> stk x ppid filter ctrl ( <ptr> adapter <dot> <noptr> onoff )
<cls> <noptr> any see c i init ( <ptr> d )
<cls> <noptr> any see c i write attribute mem ( <ptr> c i <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> m cam ctl r start ( <ptr> cam )
<cls> <ptr> dib get ic tuner ( <ptr> fe )
<cls> <noptr> nexus cast v tuner set params ( <ptr> fe )
<cls> <noptr> dvb dmx dev ts callback ( <ptr> buffer <dot> <noptr> buffer len <dot> <ptr> buffer <dot> <noptr> buffer len <dot> <ptr> feed <dot> <ptr> buffer flags )
<cls> <noptr> red rat dev suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> iv tvs f buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> fb )
<cls> <noptr> bt tv register video ( <ptr> b tv )
<cls> <noptr> msm c sid register entity ( <ptr> c sid <dot> <ptr> v l dev )
<cls> <noptr> samsung dtos i has et ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> ati remote rc open ( <ptr> r dev )
<cls> <noptr> scm set frame rate ( <ptr> state )
<cls> <ptr> vs pdl list get ( <ptr> dlm )
<cls> <noptr> lp f count tous ( <noptr> count )
<cls> <noptr> spc is lot shutdown ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> tea get freq ( <ptr> radio )
<cls> <noptr> x vip dma buffer queue ( <ptr> vb )
<cls> <noptr> d dbf e attach mci ( <ptr> input <dot> <noptr> type )
<cls> <noptr> sony b tfm px stu ner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> uvc queue stream on ( <ptr> queue <dot> <noptr> type )
<cls> <noptr> pvr dvb feed thread ( <ptr> data )
<cls> <noptr> pvr stream setup ( <ptr> sp <dot> <ptr> dev <dot> <noptr> endpoint <dot> <noptr> tolerance )
<cls> <noptr> f m r x set rds system ( <ptr> f m dev <dot> <noptr> rds mode )
<cls> <noptr> cod adecoder seq init ( <ptr> ctx )
<cls> <noptr> mtp probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> sit x tune measure ( <ptr> s dev <dot> <noptr> frequency <dot> <noptr> ant cap )
<cls> <noptr> configure wh ( <ptr> gsp ca dev )
<cls> <noptr> noise magnitude ( <noptr> x <dot> <noptr> n <dot> <noptr> freq start <dot> <noptr> freq end )
<cls> <noptr> venus session unset buffers ( <ptr> inst <dot> <ptr> bd )
<cls> <noptr> ov set ctrl contrast ( <ptr> sensor <dot> <noptr> value )
<cls> <noptr> fim c check scaler ratio ( <ptr> ctx <dot> <noptr> sw <dot> <noptr> sh <dot> <noptr> dw <dot> <noptr> dh <dot> <noptr> rotation )
<cls> <noptr> mds dis eq c send master cmd ( <ptr> fe <dot> <ptr> dis eq c cmd )
<cls> <noptr> fim c try fmt m plane ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> m tt read ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> setup clipping ( <ptr> dev <dot> <ptr> clips <dot> <noptr> n clips <dot> <noptr> interlace )
<cls> <noptr> dvb dmx close ( <ptr> demux )
<cls> <noptr> nv tc iris r ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> uvc m c register entities ( <ptr> chain )
<cls> <noptr> saa x detect chip ( <ptr> client <dot> <ptr> id <dot> <ptr> name )
<cls> <noptr> mtm setup geometry ( <ptr> mtm <dot> <ptr> rect <dot> <noptr> width <dot> <noptr> height <dot> <noptr> code )
<cls> <noptr> iv tvf b set os d coords ( <ptr> it v <dot> <ptr> os d )
<cls> <noptr> venc ctrl init ( <ptr> inst )
<cls> <noptr> c xxx get vb i line ( <ptr> dev <dot> <ptr> dma q <dot> <noptr> save av <dot> <ptr> pbuffer <dot> <noptr> buffer size )
<cls> <noptr> s reset dsp power ( <ptr> dev )
<cls> <noptr> v len umd v timings cap ( <ptr> t <dot> <ptr> cap <dot> <noptr> fnc <dot> <ptr> fnc handle )
<cls> <noptr> islocked ( <ptr> priv <dot> <ptr> locked )
<cls> <noptr> sn div tv pcm prepare ( <ptr> sub stream )
<cls> <noptr> spc a read info ( <ptr> gsp ca dev )
<cls> <noptr> tt usb ir probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> c x usb medi on register analog ( <ptr> dvb dev )
<cls> <noptr> v l ctrl grab ( <ptr> ctrl <dot> <noptr> grabbed )
<cls> <noptr> dib fw set channel head ( <ptr> state )
<cls> <noptr> stm r x done ( <ptr> cec <dot> <noptr> status )
<cls> <noptr> r ga open ( <ptr> file )
<cls> <noptr> dvb vbd q buf ( <ptr> ctx <dot> <ptr> b )
<cls> <noptr> rain cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> rep write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> ov v flip enable ( <ptr> sensor )
<cls> <noptr> smi app pll try ( <ptr> sensor <dot> <ptr> pll )
<cls> <ptr> lme firmware switch ( <ptr> d <dot> <noptr> cold )
<cls> <noptr> wl f m set mode ( <ptr> radio <dot> <noptr> mode )
<cls> <noptr> sq c read ( <ptr> gsp ca dev <dot> <noptr> command <dot> <noptr> index <dot> <noptr> size )
<cls> <noptr> vivid color space cap ( <ptr> dev )
<cls> <noptr> pulse send and wait once ( <ptr> pulse <dot> <ptr> cmd <dot> <noptr> cmd len <dot> <noptr> response <dot> <noptr> size )
<cls> <noptr> check mode ( <ptr> t <dot> <noptr> mode )
<cls> <noptr> flex cop eeprom request ( <ptr> fc <dot> <noptr> op <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> retries )
<cls> <noptr> mtk jpeg suspend ( <ptr> dev )
<cls> <noptr> vi u vid timeout ( <ptr> t )
<cls> <noptr> ati remote input report ( <ptr> urb )
<cls> <noptr> mtm set blue balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> smi app set crop ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> saa g sliced fmt ( <ptr> sd <dot> <ptr> fmt )
<cls> <noptr> preview config white balance ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> pluto write tsc r ( <ptr> pluto <dot> <noptr> val )
<cls> <noptr> ce ctrl msg ( <ptr> d <dot> <ptr> req )
<cls> <ptr> check enc idx buf size ( )
<cls> <noptr> init r cmap man li ( )
<cls> <noptr> dvb cae nio read condition ( <ptr> ca <dot> <ptr> result <dot> <ptr> slot )
<cls> <noptr> dvb tread snr reg ( <ptr> tn r dmd <dot> <ptr> reg value )
<cls> <noptr> d ibus bic func ( <ptr> adapter )
<cls> <noptr> dtv front end attach ( <ptr> adap )
<cls> <noptr> dmx section feed set ( <ptr> feed <dot> <noptr> pid <dot> <noptr> check crc )
<cls> <noptr> c cdc subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> stb check carrier ( <ptr> state )
<cls> <noptr> enable stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> pwc iso stop ( <ptr> pdev )
<cls> <noptr> m xls f gpio mode switch ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> emma prp buf prepare ( <ptr> vb )
<cls> <noptr> dib set frequency offset ( <ptr> state )
<cls> <ptr> check card ( )
<cls> <noptr> adv x set slave addresses ( <ptr> state )
<cls> <noptr> c x set ts param ( <ptr> fe <dot> <noptr> is punct ured )
<cls> <noptr> is pci slot eq ( <ptr> a dev <dot> <ptr> b dev )
<cls> <noptr> max set r f freq non am bands ( <ptr> ctx <dot> <noptr> freq <dot> <noptr> lo pos )
<cls> <noptr> g scm m start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> stv x table lookup ( <ptr> tab <dot> <noptr> max <dot> <noptr> val )
<cls> <noptr> mtk vcodec init dec pm ( <ptr> mtk dev )
<cls> <noptr> iv tv try fmt slice dvb i out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> calculate output format register ( <ptr> saa <dot> <noptr> palette <dot> <ptr> clip format )
<cls> <noptr> q com venus enc driver init ( )
<cls> <noptr> isp isr ( <noptr> irq <dot> <ptr> isp )
<cls> <noptr> fim c is fw clear irq ( <ptr> is )
<cls> <noptr> uvc start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> isp probe ( <ptr> pdev )
<cls> <noptr> scm fw update from ( <ptr> state )
<cls> <noptr> get video format ( <ptr> av <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> vb core req buf s ( <ptr> q <dot> <noptr> memory <dot> <ptr> count )
<cls> <noptr> ir nec decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> b disp dbg perf begin ( <ptr> b disp )
<cls> <noptr> sp mfc init encode v ( <ptr> ctx )
<cls> <noptr> init r cmap rcd vb sky ( )
<cls> <noptr> sh ve u process ( <ptr> ve u <dot> <ptr> src buf <dot> <ptr> dst buf )
<cls> <noptr> ccp init formats ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> b disp irq timeout ( <ptr> ptr )
<cls> <noptr> rtl volatile reg ( <ptr> dev <dot> <noptr> reg )
<cls> <ptr> m xlt calc init regs ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> tw buf queue ( <ptr> vb )
<cls> <noptr> saa work enc handler helper ( <ptr> port <dot> <noptr> buf nr )
<cls> <noptr> td a get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> r tls drg fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> av set volume ( <ptr> av <dot> <noptr> vol left <dot> <noptr> vol right )
<cls> <noptr> z d ctrl msg ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> pvr sysfs teardown controls ( <ptr> sfp )
<cls> <noptr> six set register ( <ptr> radio <dot> <noptr> reg nr )
<cls> <noptr> mce usb process ir data ( <ptr> ir <dot> <noptr> buf len )
<cls> <noptr> dib p tuner attach ( <ptr> adap )
<cls> <noptr> venc g parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> bt tv q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> b )
<cls> <noptr> ptic write bit ( <ptr> pt <dot> <noptr> addr <dot> <ptr> addr p <dot> <noptr> data )
<cls> <noptr> sun ics i start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> ov x set gain ( <ptr> ov x <dot> <noptr> auto gain )
<cls> <noptr> shadow store ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> avc register remote control ( <ptr> fdt v )
<cls> <noptr> gsc probe ( <ptr> pdev )
<cls> <noptr> vs pdl ext cmd fill header ( <ptr> cmd )
<cls> <noptr> saa bus set ( <ptr> dev <dot> <ptr> msg <dot> <ptr> buf )
<cls> <noptr> tw set scale ( <ptr> dev <dot> <noptr> width <dot> <noptr> height <dot> <noptr> field )
<cls> <ptr> iv tv get buffer ( <ptr> s <dot> <noptr> non block <dot> <ptr> err )
<cls> <noptr> c x der set ts clock mode ( <ptr> priv <dot> <noptr> system )
<cls> <noptr> c xxx init v l ( <ptr> dev <dot> <ptr> udev <dot> <ptr> interface <dot> <noptr> i soc pipe )
<cls> <noptr> pb set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c cdc enum pix ( <ptr> pix <dot> <noptr> i )
<cls> <noptr> vsp pipeline propagate partition ( <ptr> pipe <dot> <ptr> partition <dot> <noptr> index <dot> <ptr> window )
<cls> <noptr> omap isp video init ( <ptr> video <dot> <ptr> name )
<cls> <noptr> dib get offset ( <ptr> state <dot> <ptr> tune state )
<cls> <noptr> uvc queue poll ( <ptr> queue <dot> <ptr> file <dot> <ptr> wait )
<cls> <noptr> at b m write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> wl f m vid io cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> pvr encoder start ( <ptr> h dw )
<cls> <noptr> init r cmap aver media ( )
<cls> <noptr> sms usb set mode ( <ptr> context <dot> <noptr> mode )
<cls> <ptr> check init pause msec ( )
<cls> <noptr> ma radio set freq ( <ptr> radio <dot> <noptr> freq )
<cls> <noptr> flex copi c read ( <ptr> ic <dot> <noptr> r <dot> <ptr> buf )
<cls> <noptr> t wh gen pps r bsp ( <ptr> buf <dot> <noptr> size <dot> <noptr> q p )
<cls> <ptr> isp stat buf find oldest ( <ptr> stat )
<cls> <noptr> dib set usb xfer len ( <ptr> d <dot> <noptr> n bts packets )
<cls> <noptr> vivid copy buffer ( <ptr> dev <dot> <noptr> p <dot> <ptr> vcap buf <dot> <ptr> vid cap buf )
<cls> <noptr> tm start stream ( <ptr> dev )
<cls> <noptr> fetch idx data ( <ptr> gsp ca dev <dot> <ptr> tbl <dot> <noptr> len )
<cls> <noptr> go usb stream stop ( <ptr> go )
<cls> <noptr> vp if start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> d vic o bluebird x c callback ( <ptr> ptr <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <ptr> check bt tv verbose ( )
<cls> <noptr> dw vcm suspend ( <ptr> dev )
<cls> <noptr> hut down ( <ptr> state <dot> <noptr> shutdown )
<cls> <noptr> resizer max in width ( <ptr> res )
<cls> <noptr> solo gpio mode ( <ptr> solo dev <dot> <noptr> port mask <dot> <noptr> mode )
<cls> <noptr> preview setup hw ( <ptr> prev <dot> <noptr> update <dot> <noptr> active )
<cls> <noptr> saa api set audio volume ( <ptr> port <dot> <noptr> level )
<cls> <noptr> c cdc config v dfc ( <ptr> dfc )
<cls> <noptr> uvc init ( )
<cls> <ptr> cec notifier conn register ( <ptr> hdmi dev <dot> <ptr> conn name <dot> <ptr> conn info )
<cls> <noptr> d m set dma addr ( <ptr> dev )
<cls> <noptr> mtk chk data reg ( <ptr> ir <dot> <noptr> i )
<cls> <noptr> debug cmd show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> omap vid init ( <ptr> v out <dot> <noptr> addr )
<cls> <noptr> sh vou buf queue ( <ptr> vb )
<cls> <noptr> init b tt vic ir ( <ptr> b tv )
<cls> <noptr> m chipset ( <noptr> reg <dot> <noptr> v )
<cls> <noptr> dib gain control ( <ptr> fe )
<cls> <noptr> em xx stop vb i streaming ( <ptr> v q )
<cls> <noptr> h aae wb setup regs ( <ptr> ae wb <dot> <ptr> priv )
<cls> <ptr> coda find codec ( <ptr> dev <dot> <noptr> src fourcc <dot> <noptr> dst fourcc )
<cls> <noptr> ov get skip frames ( <ptr> sd <dot> <ptr> frames )
<cls> <noptr> wl f m vid ioc g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <noptr> venus helper set core usage ( <ptr> inst <dot> <noptr> usage )
<cls> <noptr> set jpeg qual ( <ptr> gsp ca dev )
<cls> <noptr> stop urb transfer ( <ptr> dev )
<cls> <noptr> dr x jda pread reg ( <ptr> dev addr <dot> <noptr> addr <dot> <ptr> data <dot> <noptr> flags )
<cls> <noptr> exy nos jpeg input raw fmt ( <ptr> regs <dot> <noptr> fmt )
<cls> <noptr> saa enable msi ( <ptr> pci dev <dot> <ptr> dev )
<cls> <noptr> c x der read regs ( <ptr> priv <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> omap isp flush ( <ptr> isp )
<cls> <noptr> snd c x pcm prepare ( <ptr> sub stream )
<cls> <noptr> a speed video update ( <ptr> video <dot> <noptr> reg <dot> <noptr> clear <dot> <noptr> bits )
<cls> <ptr> media graph walk next ( <ptr> graph )
<cls> <noptr> v pbe device get ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> j pu buf prepare ( <ptr> vb )
<cls> <noptr> get key is dbt ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> p scan code <dot> <ptr> toggle )
<cls> <noptr> cec config thread func ( <ptr> arg )
<cls> <noptr> m i sensor settings ( <ptr> gsp ca dev )
<cls> <noptr> rep write clr set ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> uvc v l get x u mapping ( <ptr> kp <dot> <ptr> up )
<cls> <noptr> rcs inotify unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> iv tvs etc c ( <ptr> it v <dot> <noptr> mode <dot> <ptr> cc )
<cls> <noptr> lg x get fic version ( <ptr> state <dot> <ptr> fic ver )
<cls> <noptr> init r cmap budget c i old ( )
<cls> <noptr> isp stat queue event ( <ptr> stat <dot> <noptr> err )
<cls> <noptr> dst comm init ( <ptr> state )
<cls> <ptr> too v ( <ptr> sd )
<cls> <noptr> t wh gens psr bsp ( <ptr> buf <dot> <noptr> size <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> d v bring buffer write ( <ptr> r buf <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> dcm i pipelines stream ( <ptr> dcm i <dot> <noptr> state )
<cls> <noptr> ctrl crop tmax get ( <ptr> cptr <dot> <ptr> top )
<cls> <noptr> dvb ca en wait if status ( <ptr> ca <dot> <noptr> slot <dot> <noptr> wait for <dot> <noptr> timeout hz )
<cls> <noptr> stk set alternate ( <ptr> dev )
<cls> <noptr> s board init ( <ptr> dev )
<cls> <noptr> c sit x d phy set wakeup ( <ptr> c sit x )
<cls> <noptr> set red ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> vb q buf ( <ptr> q <dot> <ptr> m dev <dot> <ptr> b )
<cls> <noptr> bt tv rc decode ( <noptr> code )
<cls> <noptr> r card rif primary bond ( <ptr> pdev )
<cls> <noptr> iv tvs fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> em xx vol get mute ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> tfe p tuner attach ( <ptr> adap )
<cls> <noptr> r j nsstream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> sun ics inotify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> rac a ( <noptr> a <dot> <noptr> c )
<cls> <noptr> is i interrupt ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> saa buffer pages ( <noptr> size )
<cls> <noptr> c x get resources ( <ptr> dev )
<cls> <noptr> mtk jpeg query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> ak xs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> poll sensor ( <ptr> gsp ca dev )
<cls> <noptr> probe ( <ptr> gsp ca dev )
<cls> <noptr> cxx c geni atech tuner callback ( <ptr> core <dot> <noptr> command <dot> <noptr> mode )
<cls> <noptr> pvr io read set enabled ( <ptr> cp <dot> <noptr> fl )
<cls> <noptr> v l print event ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> bt tv irq timeout ( <ptr> t )
<cls> <noptr> ir set key code ( <ptr> idev <dot> <ptr> ke <dot> <ptr> old key code )
<cls> <noptr> az usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> cxx s ctrl ( <ptr> ctrl )
<cls> <noptr> saa probe i cir ( <ptr> dev )
<cls> <ptr> check gpio mask ( )
<cls> <noptr> ov set ae target ( <ptr> sensor <dot> <noptr> target )
<cls> <noptr> l gag c fix ( <ptr> state <dot> <noptr> if agc fix <dot> <noptr> r fag c fix )
<cls> <noptr> vb request buffer cnt ( <ptr> req )
<cls> <noptr> tracking optimization ( <ptr> state )
<cls> <noptr> cio bytes per line ( <noptr> width )
<cls> <noptr> r ga runtime suspend ( <ptr> dev )
<cls> <noptr> f m r x set r f depend soft mute ( <ptr> f m dev <dot> <noptr> r f depend mute )
<cls> <noptr> ddb ic cmd ( <ptr> ic <dot> <noptr> adr <dot> <noptr> cmd )
<cls> <noptr> check ext ctrls ( <ptr> c <dot> <noptr> allow priv )
<cls> <noptr> chip cmd ( <ptr> chip <dot> <ptr> name <dot> <ptr> cmd )
<cls> <noptr> send start ( <ptr> gsp ca dev )
<cls> <noptr> c cdc get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> sd mod init ( )
<cls> <noptr> c ill write ( <ptr> c i buf <dot> <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> b and pass ( <ptr> dev <dot> <noptr> if freq <dot> <noptr> spectral invert <dot> <noptr> mode )
<cls> <noptr> m m ols sensor power ( <ptr> info <dot> <noptr> enable )
<cls> <noptr> vs ppm runtime suspend ( <ptr> dev )
<cls> <noptr> pinn acle antenna pwr ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> dib set params ( <ptr> fe )
<cls> <noptr> find over exposure ( <noptr> brightness )
<cls> <noptr> simple dvb set params ( <ptr> fe )
<cls> <noptr> em press register ( )
<cls> <noptr> msm c sid get csi did ( <ptr> entity <dot> <ptr> id )
<cls> <noptr> snd tea x read ( <ptr> tea )
<cls> <noptr> coda finish decode ( <ptr> ctx )
<cls> <noptr> configure geometry ( <ptr> is i )
<cls> <noptr> str c close ( <ptr> r dev )
<cls> <noptr> vsp entity configure frame ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> td adi seq c send master cmd ( <ptr> fe <dot> <ptr> dis eq c cmd )
<cls> <noptr> j lcd ostream ( <ptr> work )
<cls> <noptr> terra tech init ( <ptr> dev )
<cls> <noptr> cobalt g fmt vid out ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> d ibm auto search is irq ( <ptr> demo d )
<cls> <noptr> vim c deb r m ( <ptr> vim c <dot> <ptr> ved )
<cls> <noptr> iv tv yuv init ( <ptr> it v )
<cls> <noptr> msp c thread ( <ptr> data )
<cls> <noptr> h aae wb get buf size ( <ptr> conf )
<cls> <noptr> wait ic result ( <ptr> pt <dot> <ptr> result <dot> <noptr> max wait )
<cls> <noptr> az streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> iv tv try fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> reg w val ( <ptr> gsp ca dev <dot> <noptr> index <dot> <noptr> val )
<cls> <noptr> vid ioc g fmt meta cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> clear work bit irq save ( <ptr> ctx )
<cls> <noptr> fim c pipelines power ( <ptr> p <dot> <noptr> on )
<cls> <noptr> vb i workaround ( <ptr> dev )
<cls> <noptr> j pu cleanup ( <ptr> ctx <dot> <noptr> reset )
<cls> <noptr> fdp configurer pf ( <ptr> ctx <dot> <ptr> job )
<cls> <noptr> hist buf process ( <ptr> hist )
<cls> <noptr> af read eeprom ( <ptr> d <dot> <noptr> address <dot> <ptr> values <dot> <noptr> len )
<cls> <noptr> stv initialize ( <ptr> int p )
<cls> <noptr> d ibm reset pll ( <ptr> state )
<cls> <noptr> dr x d read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> usb ma radio probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> itr m ( <ptr> dev <dot> <noptr> index )
<cls> <noptr> sd set j comp ( <ptr> gsp ca dev <dot> <ptr> j comp )
<cls> <noptr> smi dvb sky sit fe attach ( <ptr> port )
<cls> <noptr> e tek g priv mem ( <ptr> sub dev )
<cls> <noptr> c x bit get sda ( <ptr> data )
<cls> <noptr> flex cop dma control timer irq ( <ptr> fc <dot> <noptr> no <dot> <noptr> onoff )
<cls> <ptr> check white crush upper ( )
<cls> <noptr> ir j vc decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> fim c prepare addr ( <ptr> ctx <dot> <ptr> vb <dot> <ptr> frame <dot> <ptr> p addr )
<cls> <noptr> s probe v l ( <ptr> dev )
<cls> <noptr> pico lot etr amux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> j put ry fmt ( <ptr> ctx <dot> <dptr> fmt info <dot> <ptr> pix <dot> <noptr> type )
<cls> <noptr> freq to clock divider ( <noptr> freq <dot> <noptr> rollover s )
<cls> <noptr> adv xx cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> img ir probe hw caps ( <ptr> priv )
<cls> <noptr> v l overlay ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> read register unlocked ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> stv x get tm g off st ( <ptr> state <dot> <noptr> s rate )
<cls> <noptr> saa download firmware ( <ptr> dev )
<cls> <noptr> omap v out new window ( <ptr> crop <dot> <ptr> win <dot> <ptr> f buf <dot> <ptr> new win )
<cls> <noptr> bt init module ( )
<cls> <noptr> start i q ( <ptr> fe <dot> <noptr> flags <dot> <noptr> roll off <dot> <noptr> tsconfig )
<cls> <noptr> fim ch w set effect ( <ptr> ctx )
<cls> <noptr> sa ago fini ( <ptr> dev )
<cls> <noptr> v l stubs audio ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> iv tv claim stream ( <ptr> id <dot> <noptr> type )
<cls> <noptr> ite is high carrier freq ( <noptr> freq )
<cls> <noptr> finish buffer ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> r card rif get ep properties ( <ptr> sdr <dot> <ptr> fw node )
<cls> <noptr> stk vid ioc req buf s ( <ptr> filp <dot> <ptr> priv <dot> <ptr> rb )
<cls> <noptr> c x bit set scl ( <ptr> data <dot> <noptr> state )
<cls> <noptr> c x req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> rb )
<cls> <noptr> so log std ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <ptr> v put oct x ( <ptr> v pu )
<cls> <noptr> fim c lite resume ( <ptr> dev )
<cls> <noptr> csi phy routing cfg ( <ptr> phy <dot> <noptr> iface <dot> <noptr> ccp stro be )
<cls> <noptr> rt signal ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> lg dta write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> h fi session abort done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> vivid vid cap overlay ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <noptr> me son a oce cga irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> p date ( <ptr> state )
<cls> <noptr> d ibm update l na ( <ptr> state )
<cls> <noptr> vp fec cdc get pixel format ( <ptr> c cdc )
<cls> <noptr> dib x pid filter ctrl ( <ptr> adapter <dot> <noptr> onoff )
<cls> <noptr> l gdt area duc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> get v l format ( <ptr> p <dot> <ptr> p <dot> <ptr> aux buf <dot> <noptr> aux space )
<cls> <noptr> aur c start ( <ptr> rc )
<cls> <noptr> media pipeline stop ( <ptr> entity )
<cls> <noptr> ska a init controls ( <ptr> sd )
<cls> <noptr> adv xx driver init ( )
<cls> <noptr> v f ereg update ( <ptr> v fe <dot> <noptr> lineid )
<cls> <noptr> c xxx send vendor cmd ( <ptr> dev <dot> <ptr> ven req )
<cls> <noptr> iv tv stop capture ( <ptr> id <dot> <noptr> g open d )
<cls> <noptr> video mbus top i xmp ( <ptr> mbus <dot> <ptr> pix <dot> <ptr> f <dot> <noptr> alignment )
<cls> <noptr> amg xxx fer ( <ptr> data <dot> <ptr> buf )
<cls> <noptr> tt usb dec stop ts feed ( <ptr> dvb dmx feed )
<cls> <ptr> rtl get dvb front end ( <ptr> client )
<cls> <noptr> imx update pad format ( <ptr> imx <dot> <ptr> mode <dot> <ptr> fmt )
<cls> <noptr> dst write tuna ( <ptr> fe )
<cls> <noptr> m chip subsample ( )
<cls> <noptr> sony b tfm px probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> saa video fini ( <ptr> dev )
<cls> <noptr> vb core stream off ( <ptr> q <dot> <noptr> type )
<cls> <noptr> meta out start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> cxa v decode vb i line ( <ptr> sd <dot> <ptr> vb i )
<cls> <noptr> imx get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> em press g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ov set ctrl exposure ( <ptr> sensor <dot> <noptr> auto exposure )
<cls> <noptr> it id ler x ( <ptr> dev )
<cls> <noptr> cec received msg ts ( <ptr> adap <dot> <ptr> msg <dot> <noptr> ts )
<cls> <noptr> aur c register ( <ptr> dev )
<cls> <noptr> coda command async ( <ptr> ctx <dot> <noptr> cmd )
<cls> <noptr> m x b probe ( <ptr> dev )
<cls> <noptr> si probe ( <ptr> client )
<cls> <ptr> l gdt attach ( <ptr> config <dot> <ptr> ic adap )
<cls> <noptr> dvb cae nio read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> v l m m try run ( <ptr> m m dev )
<cls> <noptr> sp jpeg set hdc tbl ( <ptr> regs )
<cls> <noptr> saa x write platform data ( <ptr> state <dot> <ptr> data )
<cls> <noptr> sun ics i buffer prepare ( <ptr> vb )
<cls> <noptr> rtl sdr query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> reg w ( <ptr> gsp ca dev <dot> <noptr> value <dot> <noptr> index )
<cls> <noptr> uvc m c init entity ( <ptr> chain <dot> <ptr> entity )
<cls> <noptr> is preset ( <ptr> isp )
<cls> <noptr> vid ioc g register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> saa encoder initialize ( <ptr> port )
<cls> <noptr> fan speed show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> mantis dvb stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> spread status ( <ptr> fe <dot> <ptr> fe status )
<cls> <noptr> default polling get key ( <ptr> ir <dot> <ptr> poll result )
<cls> <noptr> z l calc nominal rate ( <ptr> fe <dot> <noptr> bandwidth <dot> <ptr> nominal rate )
<cls> <noptr> ir raw event thread ( <ptr> data )
<cls> <noptr> c x init memory ( <ptr> c x )
<cls> <noptr> f m irq call ( <ptr> f m dev )
<cls> <noptr> saa g fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> m xt dat u ner attach ( <ptr> adap )
<cls> <noptr> video ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> solo isr ( <noptr> irq <dot> <ptr> data )
<cls> <ptr> check dec yuv buffers ( )
<cls> <noptr> enc post frame start ( <ptr> ctx )
<cls> <noptr> me so nir irq ( <noptr> irq no <dot> <ptr> devid )
<cls> <ptr> saa enc next buf ( <ptr> port )
<cls> <noptr> dvb dmx dev filter start ( <ptr> filter )
<cls> <noptr> stv get tune settings ( <ptr> fe <dot> <ptr> fet une settings )
<cls> <noptr> imx s frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> solo capture config ( <ptr> solo dev )
<cls> <noptr> h v adb g summary ( <ptr> ctx )
<cls> <noptr> ov parsed t ( <ptr> np )
<cls> <noptr> simple std setup ( <ptr> fe <dot> <ptr> params <dot> <ptr> config <dot> <ptr> cb )
<cls> <ptr> check latency ( )
<cls> <noptr> spc sis resume ( <ptr> dev )
<cls> <noptr> ves x get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> dvb dmx connect front end ( <ptr> demux <dot> <ptr> front end )
<cls> <noptr> dst set bandwidth ( <ptr> state <dot> <noptr> bandwidth )
<cls> <noptr> v pic probe ( <ptr> dev )
<cls> <noptr> c x get algo ( <ptr> fe )
<cls> <noptr> tuner attach td a ( <ptr> input <dot> <noptr> port type )
<cls> <noptr> sms core set device mode ( <ptr> core dev <dot> <noptr> mode )
<cls> <ptr> simple tuner params ( <ptr> fe <dot> <noptr> desired type )
<cls> <ptr> check os d depth ( )
<cls> <ptr> c x find hw ( <ptr> dev <dot> <noptr> hw )
<cls> <noptr> cam if hw dump regs ( <ptr> cam if <dot> <ptr> label )
<cls> <ptr> check disable tiling ( )
<cls> <noptr> imx update pad format ( <ptr> mode <dot> <ptr> fmt )
<cls> <noptr> micro tune mtd tf request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> d ibm c read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> saa api enum sub devs ( <ptr> dev )
<cls> <noptr> lg x set ensemble ( <ptr> state <dot> <noptr> id )
<cls> <noptr> std id v timings ( <ptr> sd <dot> <ptr> std i <dot> <ptr> timings )
<cls> <noptr> os d set layer config ( <ptr> sd <dot> <noptr> layer <dot> <ptr> l config )
<cls> <noptr> fim cmd sysfs show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> init r cmap aver media ad ( )
<cls> <noptr> m xls get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <ptr> check show ic ( )
<cls> <noptr> uvc ioctl s ctrl ( <ptr> file <dot> <ptr> f h <dot> <ptr> ctrl )
<cls> <noptr> tts front end attach ( <ptr> adap )
<cls> <noptr> fim c is suspend ( <ptr> dev )
<cls> <noptr> tv audio carr reg ( <noptr> carrier )
<cls> <noptr> delta register device ( <ptr> delta )
<cls> <noptr> au enable modulation ( <ptr> fe <dot> <noptr> m )
<cls> <ptr> check max rds errors ( )
<cls> <noptr> c x dt nr dmd dvb t mon code rate ( <ptr> tn r dmd <dot> <noptr> type <dot> <ptr> code rate )
<cls> <noptr> preview init formats ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> ite suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <noptr> dcm i suspend ( <ptr> dev )
<cls> <noptr> uvc video decode data ( <ptr> uv curb <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> cafe pci probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> c x g fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> wbc irt or c cells ( <noptr> val )
<cls> <noptr> c i of bpt entry init buf ( <ptr> cio <dot> <ptr> b <dot> <noptr> entry )
<cls> <noptr> omap v out setup video buf s ( <ptr> pdev <dot> <noptr> vid num )
<cls> <noptr> mcc ic notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> dib load an afe coefs ( <ptr> state <dot> <ptr> an afe )
<cls> <noptr> saa irq video signal change ( <ptr> dev )
<cls> <noptr> c x audio init dev ( <ptr> pci <dot> <ptr> pci id )
<cls> <noptr> gpp sk fe read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> solo enum ext input ( <ptr> solo dev <dot> <ptr> input )
<cls> <noptr> dmv pss set pg frame size ( <noptr> frame size )
<cls> <noptr> set dvb t standard ( <ptr> state <dot> <noptr> o mode )
<cls> <noptr> v pfe g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> index )
<cls> <noptr> adv x xs ctrl ( <ptr> ctrl )
<cls> <noptr> c xdr get tune settings c ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> t dax get r x sub c hans ( <ptr> chip )
<cls> <noptr> isp video set param ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> fim c isp video device register ( <ptr> isp <dot> <ptr> v l dev <dot> <noptr> type )
<cls> <noptr> c x der tuner set ( <ptr> fe )
<cls> <noptr> flex cops ram init ( <ptr> fc )
<cls> <noptr> coda try encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> ec )
<cls> <noptr> csi phy config ( <ptr> ctx )
<cls> <noptr> c cdc config ( <ptr> c cdc <dot> <ptr> c cdc struct )
<cls> <noptr> gpp sk info ( <ptr> d )
<cls> <noptr> uvc resume ( <ptr> int f <dot> <noptr> reset )
<cls> <noptr> sp cec get status ( <ptr> cec )
<cls> <noptr> set v th ( <ptr> state )
<cls> <noptr> dvb usb vic init ( <ptr> d )
<cls> <noptr> session process buf ( <ptr> inst <dot> <ptr> v buf )
<cls> <noptr> wait reg mask ( <ptr> priv <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val <dot> <noptr> delay <dot> <noptr> tries )
<cls> <ptr> check force m px mode ( )
<cls> <noptr> fim c ish w set tune ( <ptr> is )
<cls> <noptr> vp dma dump regs ( <ptr> vp dma )
<cls> <noptr> isp video get graph data ( <ptr> video <dot> <ptr> pipe )
<cls> <noptr> v l stub exp buf ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> b tt vic xfer ( <ptr> ic adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> uvc ctrl init device ( <ptr> dev )
<cls> <noptr> ov x probe ( <ptr> client )
<cls> <noptr> dib wb d calibration ( <ptr> state <dot> <ptr> tune state )
<cls> <noptr> v l async notifier parse fw node sensor common ( <ptr> dev <dot> <ptr> notifier )
<cls> <noptr> saa h set reg err ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val <dot> <ptr> err )
<cls> <noptr> aff c tuner callback ( <ptr> d <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> mn init ( <ptr> fe )
<cls> <noptr> v fe enable ( <ptr> line )
<cls> <noptr> check mac tt ( <ptr> buf )
<cls> <noptr> adv x xs detect tx v ctrl ( <ptr> sd )
<cls> <noptr> c x irt x shutdown ( <ptr> sd )
<cls> <noptr> t dax set page ( <ptr> sd <dot> <noptr> page )
<cls> <noptr> upd write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> g scm m resume ( <ptr> gsc )
<cls> <noptr> iv tv g fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> hack r fur b complete out ( <ptr> urb )
<cls> <noptr> affe read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> get exposure ( <ptr> gsp ca dev )
<cls> <noptr> c x tuner callback ( <ptr> priv <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> delta ipc probe ( <ptr> r pmsg device )
<cls> <noptr> dib ic read ( <ptr> ic <dot> <noptr> reg )
<cls> <noptr> c x der read status c ( <ptr> priv <dot> <ptr> ts lock )
<cls> <noptr> venus helper get out fmt s ( <ptr> inst <dot> <noptr> v l fmt <dot> <ptr> out fmt <dot> <ptr> out fmt <dot> <noptr> ub wc )
<cls> <noptr> m m ols get frame desc ( <ptr> sd <dot> <noptr> pad <dot> <ptr> fd )
<cls> <noptr> sp jpeg g fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v l prio close ( <ptr> global <dot> <noptr> local )
<cls> <noptr> i ara ( <ptr> pdev <dot> <noptr> index <dot> <noptr> size )
<cls> <noptr> dst probe ( <ptr> state )
<cls> <noptr> fim c capture sub dev registered ( <ptr> sd )
<cls> <noptr> cable star attach ( <ptr> fc <dot> <ptr> ic )
<cls> <noptr> smi app get skip frames ( <ptr> sub dev <dot> <ptr> frames )
<cls> <noptr> td a read status ( <ptr> fe <dot> <ptr> fe status )
<cls> <ptr> dib attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> reset ctrl reset ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> saa x set l cr ( <ptr> sd <dot> <ptr> fmt )
<cls> <noptr> imx set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> a lette ( <ptr> av <dot> <ptr> colors <dot> <noptr> first <dot> <noptr> last )
<cls> <noptr> td a write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> uvc v l open ( <ptr> file )
<cls> <noptr> t dax disable tun eric ( <ptr> state )
<cls> <noptr> fdt v read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> vps s init ( )
<cls> <noptr> d ibm b set front end and tuner ( <ptr> fe )
<cls> <noptr> lg dta never lock poll ( <ptr> state )
<cls> <noptr> tuner status ( <ptr> fe )
<cls> <noptr> fim c cap enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> six radio read rds b lck cnt blob ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> dvb nett x ( <ptr> skb <dot> <ptr> dev )
<cls> <noptr> stv ter duration ( <noptr> mode <dot> <noptr> tempo <dot> <noptr> tempo <dot> <noptr> tempo )
<cls> <noptr> ts play ( <ptr> av <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> non block <dot> <noptr> type )
<cls> <noptr> rain cec adap log addr ( <ptr> adap <dot> <noptr> log addr )
<cls> <noptr> tx last bit ( <ptr> pin )
<cls> <noptr> dvb ca en link init ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> vid ioc g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> l gdt asleep ( <ptr> state )
<cls> <noptr> e pu cmd irq ( <ptr> c x <dot> <ptr> order )
<cls> <noptr> set is i ( <ptr> state <dot> <noptr> is i )
<cls> <noptr> um tmt front end attach ( <ptr> adap )
<cls> <noptr> saa set input type ( <ptr> sd <dot> <noptr> input )
<cls> <noptr> r vin group notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <ptr> ov find mode ( <ptr> sensor <dot> <noptr> fr <dot> <noptr> width <dot> <noptr> height <dot> <noptr> nearest )
<cls> <noptr> mtk vcodec enc clock on ( <ptr> pm )
<cls> <noptr> as get status ( <ptr> priv <dot> <ptr> tstate )
<cls> <noptr> command set yuv tres h ( <ptr> gsp ca dev )
<cls> <noptr> kickstart ( <ptr> ioc <dot> <noptr> force <dot> <noptr> sleep flag )
<cls> <noptr> coda req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> rb )
<cls> <noptr> red rat wide b and receiver ( <ptr> rc dev <dot> <noptr> enable )
<cls> <noptr> writeto ( <ptr> state <dot> <ptr> hw buffer <dot> <noptr> length <dot> <noptr> reply )
<cls> <noptr> med usa initialize nts c ( <ptr> dev )
<cls> <noptr> dib p set dds ( <ptr> state <dot> <noptr> offset khz )
<cls> <noptr> clus ctrl ( <ptr> ctrl )
<cls> <noptr> ov open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> video buf vm fault ( <ptr> vm f )
<cls> <noptr> comp ( <noptr> x <dot> <noptr> width )
<cls> <noptr> ov set params ( <ptr> client <dot> <ptr> win <dot> <noptr> code )
<cls> <noptr> venc g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> dib x c tuner callback ( <ptr> priv <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> tt usb init rc ( <ptr> dec )
<cls> <noptr> vi u suspend ( <ptr> op <dot> <noptr> state )
<cls> <noptr> scm o if enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> read packet ( <ptr> udev <dot> <noptr> request <dot> <ptr> registers <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> m m ols capture info ( <ptr> info )
<cls> <noptr> bt tv gpio bits ( <ptr> core <dot> <noptr> mask <dot> <noptr> bits )
<cls> <noptr> iv tv unmute ( <ptr> it v )
<cls> <noptr> bt tv set dma ( <ptr> b tv <dot> <noptr> override )
<cls> <noptr> cfg dev x tal ( <ptr> state <dot> <noptr> freq <dot> <noptr> cap <dot> <noptr> enable )
<cls> <noptr> imx set exposure ( <ptr> priv <dot> <noptr> val )
<cls> <noptr> dib pre start agc ( <ptr> state )
<cls> <noptr> wl f m fops poll ( <ptr> file <dot> <ptr> pts )
<cls> <noptr> stv cab read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> try read address ( <ptr> ic adap <dot> <noptr> addr <dot> <noptr> retries )
<cls> <noptr> freq err chk ( <ptr> state <dot> <noptr> ftp <dot> <noptr> s mrt <dot> <noptr> unit )
<cls> <noptr> spc is lot reset ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> v l flash g volatile ctrl ( <ptr> c )
<cls> <noptr> c x load fw ( <ptr> client )
<cls> <noptr> hi set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> six vid ioc g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <noptr> sir timeout ( <ptr> unused )
<cls> <noptr> vi codec buf request complete ( <ptr> vb )
<cls> <noptr> v fe get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> m lv query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> dvb net ule check crc ( <ptr> h <dot> <noptr> iov <dot> <noptr> ule crc <dot> <noptr> expected crc )
<cls> <noptr> x c tune channel ( <ptr> priv <dot> <noptr> freq hz )
<cls> <noptr> pkt sys debug config ( <ptr> pkt <dot> <noptr> mode <dot> <noptr> config )
<cls> <noptr> float tou mul ( <ptr> client <dot> <noptr> ph loat )
<cls> <noptr> em xx dvb register ( )
<cls> <noptr> pad operands ( <ptr> c <dot> <noptr> from )
<cls> <noptr> ad close ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> nova td read status override ( <ptr> fe <dot> <ptr> stat )
<cls> <noptr> sa atv audio set input ( <ptr> dev <dot> <ptr> in )
<cls> <noptr> g d set src size ( <ptr> d <dot> <ptr> f )
<cls> <noptr> vivid thread vid out ( <ptr> data )
<cls> <noptr> set aud clk freq ( <ptr> client <dot> <noptr> freq )
<cls> <noptr> adv select page ( <ptr> state <dot> <noptr> page )
<cls> <noptr> stv set q am ( <ptr> state <dot> <noptr> modulation )
<cls> <noptr> stv x get lock ( <ptr> state <dot> <noptr> timeout dmd <dot> <noptr> timeout fec )
<cls> <noptr> vid ioc enum fmt sdr cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> vim c sen r m ( <ptr> vim c <dot> <ptr> ved )
<cls> <noptr> media device enum links ( <ptr> m dev <dot> <ptr> arg )
<cls> <noptr> dvb demux poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> b disp m m resume ( <ptr> b disp )
<cls> <noptr> h vah encode ( <ptr> p ctx <dot> <ptr> frame <dot> <ptr> stream )
<cls> <noptr> me so nao cec probe ( <ptr> pdev )
<cls> <noptr> put v l format ( <ptr> p <dot> <ptr> p )
<cls> <noptr> stb carr width ( <ptr> state )
<cls> <noptr> configure ( <ptr> gsp ca dev )
<cls> <noptr> sa aic eeprom md gate ( <ptr> dev )
<cls> <noptr> setup decoder defaults ( <ptr> state <dot> <noptr> iss video )
<cls> <noptr> em x xic read block ( <ptr> dev <dot> <noptr> bus <dot> <noptr> addr <dot> <noptr> addr w <dot> <noptr> len <dot> <ptr> data )
<cls> <noptr> m m ols wait interrupt ( <ptr> sd <dot> <noptr> irq mask <dot> <noptr> timeout )
<cls> <noptr> m tt set aframe size ( <ptr> client <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> solo enc off ( <ptr> solo enc )
<cls> <noptr> lg tuner pwr save ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> ov x set frame rate ( <ptr> priv <dot> <noptr> fps <dot> <ptr> c fmt <dot> <ptr> win )
<cls> <noptr> l gs gxx set mpeg mode ( <ptr> priv <dot> <noptr> serial <dot> <noptr> clk pol <dot> <noptr> clk gated )
<cls> <noptr> r vin open ( <ptr> file )
<cls> <noptr> vid ioc enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> omap isp ccp init ( <ptr> isp )
<cls> <noptr> write packet ( <ptr> udev <dot> <noptr> request <dot> <ptr> registers <dot> <noptr> start <dot> <noptr> size )
<cls> <noptr> saa set position ( <ptr> dev <dot> <noptr> wx <dot> <noptr> wy <dot> <noptr> wheight <dot> <noptr> field <dot> <noptr> pixel format )
<cls> <noptr> stv set v iter bit rac q ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> c x get resources ( <ptr> core <dot> <ptr> pci )
<cls> <noptr> mt set tv freq ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> tvp xreg dump ( <ptr> sd )
<cls> <noptr> f m irqhandler ds finish ( <ptr> f m dev )
<cls> <noptr> t efg tuner ( <ptr> sd <dot> <ptr> v )
<cls> <noptr> set audio mode ( <ptr> sd <dot> <noptr> audio mode )
<cls> <noptr> c x set vip mode ( <ptr> dev <dot> <ptr> ch )
<cls> <noptr> scm isp init ( <ptr> state )
<cls> <noptr> ic read regs ( <ptr> adapter <dot> <noptr> adr <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> adv set std ( <ptr> state <dot> <noptr> std )
<cls> <noptr> x c get reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> gos input ( <ptr> go )
<cls> <noptr> t dax get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> gsp case t alt ( <ptr> gsp ca dev )
<cls> <noptr> c x dt nr dmd dvb t mon sampling offset ( <ptr> tn r dmd <dot> <ptr> ppm )
<cls> <noptr> venus resume ( <ptr> core )
<cls> <noptr> c x set tv norm ( <ptr> dev <dot> <noptr> norm )
<cls> <noptr> skb af power on ( <ptr> state )
<cls> <noptr> scc am if runtime resume ( <ptr> dev )
<cls> <noptr> c xxx write ic master ( <ptr> dev <dot> <noptr> dev addr <dot> <noptr> saddr <dot> <noptr> s addrlen <dot> <noptr> data <dot> <noptr> data len <dot> <noptr> master )
<cls> <noptr> nv t disable logical dev ( <ptr> nv t <dot> <noptr> l dev )
<cls> <noptr> gpio mux s std ( <ptr> sd <dot> <noptr> norm )
<cls> <noptr> pt disable ram ( <ptr> pt )
<cls> <noptr> sa await for deb i done busy loop ( <ptr> dev <dot> <noptr> us <dot> <noptr> us )
<cls> <noptr> tcp robe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> tuner attach td a ( <ptr> input )
<cls> <noptr> mtk jpeg dec set dma group ( <ptr> base <dot> <noptr> mcu group <dot> <noptr> group num <dot> <noptr> last mcu )
<cls> <noptr> v l m m cancel job ( <ptr> m mctx )
<cls> <noptr> dr xxx j read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> h va job abort ( <ptr> priv )
<cls> <noptr> tt usb dec fed vb tread status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dvb audio ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <noptr> get key pinn acle grey ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> uds configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> pvr ctrl get type ( <ptr> cptr )
<cls> <noptr> cal p drv init ( )
<cls> <noptr> igu an air close ( <ptr> r dev )
<cls> <noptr> uvc video resume ( <ptr> stream <dot> <noptr> reset )
<cls> <noptr> nv thandler x fifo over run ( <ptr> nv t )
<cls> <noptr> ener x disable ( <ptr> dev )
<cls> <noptr> r vin parallel parse v l ( <ptr> dev <dot> <ptr> ve p <dot> <ptr> asd )
<cls> <noptr> sun ics i link entity ( <ptr> csi <dot> <ptr> entity <dot> <ptr> fw node )
<cls> <noptr> ov mode set ( <ptr> sensor )
<cls> <noptr> c cdc disable ( <ptr> c cdc )
<cls> <noptr> read reg ( <ptr> c i <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tw x pcm hw params ( <ptr> ss <dot> <ptr> hw params )
<cls> <noptr> tp g calculate square border ( <ptr> tp g )
<cls> <noptr> init r cmap t hybrid ( )
<cls> <noptr> put stop ( <ptr> c buf )
<cls> <noptr> six ic suspend ( <ptr> dev )
<cls> <noptr> dib p get front end ( <ptr> fe <dot> <ptr> fep )
<cls> <noptr> tt pci eeprom parse mac ( <ptr> adapter <dot> <ptr> proposed mac )
<cls> <noptr> cxt sport reg dump ( <ptr> port )
<cls> <noptr> iv tv enum fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> usb tv image chunk ( <ptr> usb tv <dot> <ptr> chunk )
<cls> <noptr> c x resume common ( <ptr> pci dev )
<cls> <noptr> vid ioc g slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> meta out buf prepare ( <ptr> vb )
<cls> <noptr> c sla driver init ( )
<cls> <noptr> vb plane dma buf put ( <ptr> vb <dot> <ptr> p )
<cls> <noptr> z r x xvid ioc enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> solo enc v lis r ( <ptr> solo dev )
<cls> <noptr> m xl x sf top master ctrl ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> v l ctrl request bind ( <ptr> req <dot> <ptr> hdl <dot> <ptr> from )
<cls> <noptr> sp jpeg set hdc tbl g ( <ptr> regs )
<cls> <noptr> ati remote input init ( <ptr> ati remote )
<cls> <noptr> simple set r f input ( <ptr> fe <dot> <ptr> config <dot> <ptr> cb <dot> <noptr> r f )
<cls> <noptr> section length ( <ptr> buf )
<cls> <noptr> noon set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pwc construct ( <ptr> pdev )
<cls> <noptr> c x usb medio ncs lines mpl ( <ptr> bt <dot> <noptr> max line samples <dot> <noptr> val )
<cls> <ptr> check buggy s fn workaround ( )
<cls> <noptr> adv x hdmi enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> j pus fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sh enable modulation ( <ptr> fe <dot> <noptr> m )
<cls> <noptr> as cote read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> c x d spi driver init ( )
<cls> <noptr> pvr ctrl range check ( <ptr> cptr <dot> <noptr> val )
<cls> <ptr> tos kaa ( <ptr> sd )
<cls> <noptr> tt pci budget init ( <ptr> budget <dot> <ptr> dev <dot> <ptr> info <dot> <ptr> owner <dot> <ptr> adapter nums )
<cls> <noptr> upd log status ( <ptr> sd )
<cls> <noptr> wait form c i complete ( <ptr> dev )
<cls> <noptr> sh get fec ( <ptr> state )
<cls> <noptr> gpp sk fere load ( <ptr> priv )
<cls> <noptr> sa axs routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <ptr> check update fw ( )
<cls> <noptr> a var m sync ( <ptr> av )
<cls> <noptr> vld v timings aspect ratio ( <ptr> t )
<cls> <noptr> ctrl crop h max get ( <ptr> cptr <dot> <ptr> height )
<cls> <noptr> cec feature abort ( <ptr> adap <dot> <ptr> msg )
<cls> <noptr> v pbe probe ( <ptr> pdev )
<cls> <noptr> sa ahs try ctrl ( <ptr> ctrl )
<cls> <ptr> uvc find control ( <ptr> chain <dot> <noptr> v lid <dot> <dptr> mapping )
<cls> <noptr> rcs is stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> z l read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> scc b write ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> m xls flg ep front end attach ( <ptr> adap <dot> <noptr> f eid )
<cls> <noptr> v l print enum input ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> global init ( <ptr> sd <dot> <noptr> first time )
<cls> <ptr> stv attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> vid ioc g fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> mtk vcodec set curr ctx ( <ptr> dev <dot> <ptr> ctx )
<cls> <noptr> saa irq v bid one ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> calc parity ( <noptr> val )
<cls> <noptr> td ase tag c ( <ptr> fe )
<cls> <noptr> sp mfc get img height v ( <ptr> dev )
<cls> <noptr> r tracks frequency ( <ptr> isa <dot> <noptr> freq )
<cls> <noptr> bt stop ( <ptr> bt )
<cls> <noptr> tc set if agc ( <ptr> fe <dot> <noptr> on )
<cls> <noptr> reg w seq ( <ptr> gsp ca dev <dot> <ptr> seq <dot> <noptr> len )
<cls> <ptr> tt usb dec fed v bt attach ( <ptr> config )
<cls> <noptr> br ctrl to package ( <ptr> go <dot> <ptr> code <dot> <noptr> space <dot> <ptr> frame len )
<cls> <noptr> pvr query menu ( <ptr> file <dot> <ptr> priv <dot> <ptr> vm )
<cls> <noptr> v l ctrl auto cluster ( <noptr> n controls <dot> <dptr> controls <dot> <noptr> manual val <dot> <noptr> set volatile )
<cls> <noptr> resizer adjust bandwidth ( <ptr> res )
<cls> <noptr> twin dir write b ( <ptr> dev <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> mt send master cmd ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> rl c ( <ptr> in <dot> <ptr> output <dot> <noptr> block type )
<cls> <ptr> vim c get source entity ( <ptr> ent )
<cls> <noptr> cal calc format size ( <ptr> ctx <dot> <ptr> fmt <dot> <ptr> f )
<cls> <noptr> is if set image window ( <ptr> win )
<cls> <noptr> dump dtd ( <ptr> dtd )
<cls> <noptr> c x dt nr dmd dvb t mon l post ( <ptr> tn r dmd <dot> <ptr> l post )
<cls> <ptr> ipc decode param str ( <ptr> p <dot> <ptr> str <dot> <noptr> len )
<cls> <noptr> bt tv risc hook ( <ptr> b tv <dot> <noptr> slot <dot> <ptr> risc <dot> <noptr> irq flags )
<cls> <noptr> n gene command mutex ( <ptr> dev <dot> <ptr> com )
<cls> <noptr> m eye suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <ptr> c x d attach ( <ptr> fe <dot> <ptr> cfg )
<cls> <noptr> vss ctrl ( <ptr> ctrl )
<cls> <noptr> emic send bytes ( <ptr> dev <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> hdp vr transfer ( <ptr> ic adapter <dot> <ptr> msgs <dot> <noptr> num )
<cls> <ptr> check pid ( )
<cls> <noptr> adv command ram test ( <ptr> sd )
<cls> <noptr> cio parse firmware ( <ptr> cio )
<cls> <noptr> nv t probe ( <ptr> pdev <dot> <ptr> devid )
<cls> <noptr> sdg volatile ctrl ( <ptr> ctrl )
<cls> <noptr> snd cards aa capture trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> csg register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> sa at dax callback ( <ptr> dev <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> stv xx write sensor words ( <ptr> sd <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> var inter ( <ptr> old <dot> <ptr> new )
<cls> <noptr> g scm m buf queue ( <ptr> vb )
<cls> <noptr> c xic register ( <ptr> bus )
<cls> <noptr> t dax hdmi info reset ( <ptr> sd <dot> <noptr> info rst <dot> <noptr> reset sus )
<cls> <noptr> v l stub ge did ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> am gxx set power ( <ptr> data <dot> <noptr> on )
<cls> <noptr> switch antenna to dvb t ( <ptr> state )
<cls> <noptr> mtk mdp m m try fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> m xls f enable usb output ( <ptr> state )
<cls> <noptr> x vip dma try format ( <ptr> dma <dot> <ptr> pix <dot> <dptr> fmt info )
<cls> <noptr> v l stub enum d v timings ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> tt usb dec process urb frame ( <ptr> dec <dot> <ptr> b <dot> <noptr> length )
<cls> <noptr> m bas get post ber ( <ptr> fe <dot> <noptr> layer <dot> <ptr> error <dot> <ptr> count )
<cls> <noptr> power down device ( <ptr> state )
<cls> <noptr> c x usb medi ons tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> tuner )
<cls> <noptr> c xxx afe set mode ( <ptr> dev <dot> <noptr> mode )
<cls> <noptr> sh read reg ( <ptr> state <dot> <noptr> addr <dot> <noptr> reg )
<cls> <noptr> m xls f tuner write reg ( <ptr> state <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> tt usb dec audio pest scb ( <ptr> priv <dot> <ptr> data )
<cls> <noptr> pt unlock ( <ptr> pt )
<cls> <noptr> pwm ir driver init ( )
<cls> <noptr> iv tv send byte ( <ptr> it v <dot> <noptr> byte )
<cls> <noptr> v pfe set input ( <ptr> v pfe <dot> <noptr> index )
<cls> <noptr> de interlace s fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> bcm read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> em xx get key em hau p ( <ptr> ic dev <dot> <ptr> protocol <dot> <ptr> scan code )
<cls> <noptr> buffer copy ( <ptr> dev <dot> <ptr> data <dot> <noptr> len <dot> <ptr> urb <dot> <ptr> dma q )
<cls> <noptr> smi app power off ( <ptr> dev )
<cls> <noptr> dvb front ends w zigzag update delay ( <ptr> fe priv <dot> <noptr> locked )
<cls> <noptr> vid io cs fmt slice dvb i out ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> d ibm read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> red rat len tous ( <noptr> length )
<cls> <noptr> b disp suspend ( <ptr> dev )
<cls> <ptr> check tuner type ( )
<cls> <noptr> six fops poll ( <ptr> file <dot> <ptr> pts )
<cls> <noptr> a set voltage ( <ptr> fe <dot> <noptr> fe sec voltage )
<cls> <noptr> get csi output format ( <ptr> s dev <dot> <noptr> pix format <dot> <noptr> field )
<cls> <noptr> smi app start streaming ( <ptr> sensor )
<cls> <noptr> b disp register device ( <ptr> b disp )
<cls> <noptr> v do a irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> m xls fic nack ( <ptr> state )
<cls> <noptr> d ibm c write word ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> n gene port has c x d ( <ptr> ic <dot> <ptr> type )
<cls> <noptr> tt usb dec fed vbs set front end ( <ptr> fe )
<cls> <noptr> skb af find pix fmt ( <ptr> m f )
<cls> <noptr> a speed video enum d v timings ( <ptr> file <dot> <ptr> f h <dot> <ptr> timings )
<cls> <noptr> ir raw handler register ( <ptr> ir raw handler )
<cls> <noptr> x c resume ( <ptr> fe )
<cls> <noptr> save frame ( <ptr> dev <dot> <ptr> pipe info )
<cls> <noptr> dib ppl l clk cfg ( <ptr> state )
<cls> <noptr> b disp open ( <ptr> file )
<cls> <noptr> as dvb register ( <ptr> as dev )
<cls> <noptr> c x buffer finish ( <ptr> vb )
<cls> <noptr> gsc try selection ( <ptr> ctx <dot> <ptr> s )
<cls> <noptr> c x get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> last nodes show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> philip stu init ( <ptr> fe )
<cls> <noptr> pvr h dw commit setup ( <ptr> h dw )
<cls> <noptr> v pfe enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> inp )
<cls> <noptr> set frame format ( <ptr> frame <dot> <ptr> fmt <dot> <ptr> pix m )
<cls> <noptr> tt usb dec start iso xfer ( <ptr> dec )
<cls> <noptr> adv check monitor present status ( <ptr> sd )
<cls> <ptr> vbd mas g get user ptr ( <ptr> dev <dot> <noptr> v addr <dot> <noptr> size <dot> <noptr> dma dir )
<cls> <noptr> get firmware ( <ptr> av )
<cls> <noptr> pulse cec adap log addr ( <ptr> adap <dot> <noptr> log addr )
<cls> <noptr> get v l ext controls ( <ptr> file <dot> <ptr> p <dot> <ptr> p <dot> <ptr> aux buf <dot> <noptr> aux space )
<cls> <noptr> c xvid ioc g output ( <ptr> file <dot> <ptr> priv <dot> <ptr> o )
<cls> <noptr> req to user ( <ptr> c <dot> <ptr> ref )
<cls> <noptr> bcm check firmware version ( <ptr> st )
<cls> <noptr> pt start feed ( <ptr> feed )
<cls> <noptr> vp if calculate offsets ( <ptr> ch )
<cls> <noptr> j te v post power on ( <ptr> sensor )
<cls> <noptr> vivid g fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> rec to linear ( <noptr> v )
<cls> <noptr> dib x tuner attach ( <ptr> adap )
<cls> <noptr> scratch len ( <ptr> usb vision )
<cls> <noptr> rv ins d v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> l gs g init data ( <ptr> priv )
<cls> <noptr> pvr stream get buffer count ( <ptr> sp )
<cls> <noptr> f m r x set freq ( <ptr> f m dev <dot> <noptr> freq )
<cls> <noptr> vsp entity init cfg ( <ptr> sub dev <dot> <ptr> cfg )
<cls> <noptr> c x set tv norm ( <ptr> core <dot> <noptr> norm )
<cls> <noptr> dvb sky usb read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ts init ( <ptr> fe )
<cls> <noptr> d vbs nbc h ( <noptr> mod cod <dot> <noptr> fec type )
<cls> <noptr> c xxx register analog devices ( <ptr> dev )
<cls> <noptr> fim c ish w set int grg d ( <ptr> is )
<cls> <ptr> uvc stream byid ( <ptr> dev <dot> <noptr> id )
<cls> <ptr> check fake signal str ( )
<cls> <noptr> scm af run ( <ptr> state <dot> <noptr> on )
<cls> <noptr> c x usb dvi cox c tuner attach ( <ptr> adap )
<cls> <noptr> jpeg set qual ( <ptr> jpeg hdr <dot> <noptr> quality )
<cls> <noptr> preview isr buffer ( <ptr> prev )
<cls> <noptr> my dvb d m xts card init ( <ptr> dvb demux <dot> <ptr> id <dot> <ptr> ptr <dot> <ptr> ptr <dot> <ptr> priv )
<cls> <noptr> vpx streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> get v l buffer ( <ptr> p <dot> <ptr> p <dot> <ptr> aux buf <dot> <noptr> aux space )
<cls> <noptr> m rst set demo d m clk ( <ptr> fe )
<cls> <ptr> px am bus x late by fourcc ( <ptr> user formats <dot> <noptr> fourcc )
<cls> <noptr> tt pci budget set video port ( <ptr> dev <dot> <noptr> video port )
<cls> <noptr> adv xx g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> usb iso curb init ( <ptr> stream )
<cls> <noptr> ov x open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> m xl x sf tuner get lock status ( <ptr> state <dot> <ptr> r f synth lock <dot> <ptr> ref synth lock )
<cls> <noptr> dst get vendor ( <ptr> state )
<cls> <noptr> ske cg x set input window ( <ptr> c <dot> <ptr> r )
<cls> <noptr> stv set m clk ( <ptr> int p <dot> <noptr> m clk )
<cls> <noptr> ir spi set duty cycle ( <ptr> dev <dot> <noptr> duty cycle )
<cls> <noptr> get d pb size ( <ptr> inst <dot> <ptr> d pbs z )
<cls> <noptr> tw power ( <ptr> client <dot> <noptr> enable )
<cls> <noptr> v pfe q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> tv pgm bus config ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> solo enc buf queue ( <ptr> vb )
<cls> <noptr> sig frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> get v l frame buffer ( <ptr> p <dot> <ptr> p )
<cls> <noptr> em xx set audio source ( <ptr> dev )
<cls> <noptr> stv x write regs ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> z r xx read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> uvc buffer finish ( <ptr> vb )
<cls> <noptr> sa axs clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> pvr h dw state sched ( <ptr> h dw )
<cls> <noptr> iv tv firmware restart ( <ptr> it v )
<cls> <noptr> vou adjust input ( <ptr> geo <dot> <noptr> std )
<cls> <noptr> coda buf prepare ( <ptr> vb )
<cls> <noptr> x vip dma start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> adv x hdmi s ctrl ( <ptr> ctrl )
<cls> <noptr> c x irq add enable ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> az set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> vim c stream ers stream ( <ptr> stream <dot> <ptr> ved <dot> <noptr> enable )
<cls> <noptr> is ifconfig gain offset ( )
<cls> <ptr> get v l dev ( <ptr> file )
<cls> <noptr> iv tvf b check var ( <ptr> var <dot> <ptr> info )
<cls> <noptr> sh set power state ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> m m ols set white balance ( <ptr> info <dot> <noptr> val )
<cls> <noptr> adb dbg dumped id ( <noptr> lvl <dot> <noptr> debug <dot> <ptr> sd <dot> <noptr> segment <dot> <ptr> buf )
<cls> <noptr> hdp vr usb driver init ( )
<cls> <noptr> fin tek get r xir data ( <ptr> fin tek <dot> <noptr> r x irq s )
<cls> <noptr> sg ( <ptr> budget <dot> <noptr> len <dot> <ptr> msg <dot> <noptr> burst )
<cls> <noptr> vsp entity link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> ska init ( <ptr> sd )
<cls> <noptr> sec oce c resume ( <ptr> dev )
<cls> <noptr> dcm i set default fmt ( <ptr> dcm i )
<cls> <noptr> ce u probe ( <ptr> pdev )
<cls> <noptr> c ech pd gpio irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> vivid user vids ctrl ( <ptr> ctrl )
<cls> <noptr> vp dma add cfd block ( <ptr> list <dot> <noptr> client <dot> <ptr> blk <dot> <noptr> dest offset )
<cls> <noptr> any see tuner attach ( <ptr> adap )
<cls> <noptr> max set freq and mode ( <ptr> ctx <dot> <noptr> freq )
<cls> <noptr> rcv val ( <ptr> gsp ca dev <dot> <noptr> ads )
<cls> <noptr> preview enable h med ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> af read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> bt tv try fmt vb icap ( <ptr> file <dot> <ptr> f <dot> <ptr> frt )
<cls> <noptr> vp if enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> ovh ires configure ( <ptr> sd )
<cls> <ptr> noon try fmt ( <ptr> sd <dot> <ptr> m f )
<cls> <noptr> preview enable gamma corr n ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> vs pdl list fill header ( <ptr> dl <dot> <noptr> is last )
<cls> <noptr> iv tv setup pci ( <ptr> it v <dot> <ptr> pdev <dot> <ptr> pci id )
<cls> <noptr> iv tv copy buf to user ( <ptr> s <dot> <ptr> buf <dot> <ptr> u buf <dot> <noptr> u count )
<cls> <noptr> fmt x set radio text ( <ptr> f m dev <dot> <ptr> rds text <dot> <noptr> rds type )
<cls> <noptr> imx s ctrl ( <ptr> ctrl )
<cls> <noptr> init r cmap e vga ind tube ( )
<cls> <noptr> vp if output to sub dev ( <ptr> vp if cfg <dot> <ptr> chan cfg <dot> <noptr> index )
<cls> <ptr> to gs ( <ptr> sd )
<cls> <noptr> check dev ( <ptr> dev )
<cls> <noptr> v l fill pix fmt ( <ptr> pix fmt <dot> <noptr> pixel format <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> dib small fine tune ( <ptr> state )
<cls> <noptr> venus clk s enable ( <ptr> core )
<cls> <ptr> check disable vb i ( )
<cls> <noptr> l gdt asoft reset ( <ptr> state )
<cls> <noptr> c xxx afe set input mux ( <ptr> dev <dot> <noptr> input mux )
<cls> <noptr> nit ic ( <ptr> gsp ca dev )
<cls> <noptr> ske cg x set output frame fmt ( <ptr> priv )
<cls> <noptr> dvb sky my gic at c attach ( <ptr> adap )
<cls> <noptr> sp set front end parameters ( <ptr> fe )
<cls> <noptr> find and set predefined video timings ( <ptr> sd <dot> <noptr> prim mode <dot> <ptr> pre def vid timings <dot> <ptr> timings )
<cls> <noptr> stk process i soc ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> h vah w execute task ( <ptr> ctx <dot> <noptr> cmd <dot> <ptr> task )
<cls> <noptr> smi port attach ( <ptr> dev <dot> <ptr> port <dot> <noptr> index )
<cls> <noptr> c x usb medi on v buf init ( <ptr> vb )
<cls> <noptr> fmt x set stereo mono ( <ptr> f m dev <dot> <noptr> mode )
<cls> <noptr> em xx set mode ( <ptr> dev <dot> <noptr> set mode )
<cls> <noptr> cal get external info ( <ptr> ctx )
<cls> <noptr> coda query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> dib set boost ( <ptr> state <dot> <noptr> onoff )
<cls> <noptr> smi start feed ( <ptr> dvb dmx feed )
<cls> <noptr> vid ioc decoder cmd ( <ptr> file <dot> <ptr> priv <dot> <ptr> cmd )
<cls> <noptr> vid ioc g fmt vb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> v l ctrl merge ( <ptr> old <dot> <ptr> new )
<cls> <noptr> sp jpeg img adr ( <ptr> regs <dot> <noptr> addr )
<cls> <noptr> dvb front end re initialise ( <ptr> fe )
<cls> <noptr> aus top transport ( <ptr> dev <dot> <noptr> full stop )
<cls> <noptr> c x queue flush ( <ptr> s <dot> <ptr> q src <dot> <ptr> q dst )
<cls> <noptr> pci driver init ( )
<cls> <noptr> fdt v lock ( <ptr> fdt v <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> hi x h dir suspend ( <ptr> dev )
<cls> <noptr> serial ir init module ( )
<cls> <noptr> ccp reset ( <ptr> ccp )
<cls> <noptr> print irq status ( <ptr> dev <dot> <noptr> loop <dot> <noptr> report <dot> <noptr> status )
<cls> <noptr> em xx v l resume ( <ptr> dev )
<cls> <noptr> os d read ( <ptr> sd <dot> <noptr> offset )
<cls> <noptr> dvb usb download firmware ( <ptr> udev <dot> <ptr> props )
<cls> <noptr> stk prepares io buffers ( <ptr> dev <dot> <noptr> ns buf s )
<cls> <noptr> tt usb iso irq ( <ptr> urb )
<cls> <noptr> stv ter filt coeff init ( <ptr> state <dot> <noptr> cells coeffs <dot> <noptr> demo d x tal )
<cls> <noptr> pvr sysfs add control ( <ptr> sfp <dot> <noptr> ctl id )
<cls> <noptr> stk camera write reg ( <ptr> dev <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> v d int isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> pro frc query ( <ptr> d )
<cls> <noptr> sms usb submit urb ( <ptr> dev <dot> <ptr> sur b )
<cls> <noptr> r ga buf start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> v pe return all buffers ( <ptr> ctx <dot> <ptr> q <dot> <noptr> state )
<cls> <noptr> uvc ctrl get flags ( <ptr> dev <dot> <ptr> ctrl <dot> <ptr> info )
<cls> <noptr> hi init controls ( <ptr> hi )
<cls> <noptr> restart flicker ( <ptr> gsp ca dev )
<cls> <ptr> check enc mpg buf size ( )
<cls> <noptr> c x pci quirks ( <ptr> dev )
<cls> <noptr> sii c driver init ( )
<cls> <noptr> adv probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sti ht x done ( <ptr> cec <dot> <noptr> status )
<cls> <noptr> dump ctd ( <ptr> ctd )
<cls> <noptr> iv tv irq enc pio complete ( <ptr> it v )
<cls> <noptr> ov set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> hist set params ( <ptr> hist <dot> <ptr> new conf )
<cls> <noptr> img irr c filter ( <ptr> in <dot> <ptr> out <dot> <noptr> protocols )
<cls> <noptr> dcm i irq callback ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> dd bridge flash read ( <ptr> dev <dot> <noptr> link <dot> <ptr> buf <dot> <noptr> addr <dot> <noptr> len )
<cls> <noptr> fim c capture try selection ( <ptr> ctx <dot> <ptr> r <dot> <noptr> target )
<cls> <noptr> dr x k get tune settings ( <ptr> fe <dot> <ptr> sets )
<cls> <noptr> smi probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> ctrl set contrast ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> enet x set carrier ( <ptr> dev )
<cls> <noptr> c x get scl ( <ptr> data )
<cls> <noptr> mrs send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> l gs gxx read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> tt usb dec get stb state ( <ptr> dec <dot> <ptr> mode <dot> <ptr> model <dot> <ptr> version )
<cls> <noptr> c xxx set agc analog digital mux select ( <ptr> dev <dot> <noptr> analog or digital )
<cls> <noptr> pvr s selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> sel )
<cls> <noptr> ati remote compute accel ( <ptr> ati remote )
<cls> <noptr> ics end bytes ( <ptr> ic bus <dot> <noptr> msg <dot> <noptr> stop )
<cls> <noptr> ov enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> tw g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ener x get sample reg ( <ptr> dev )
<cls> <ptr> check usb timeout ( )
<cls> <noptr> vb fop read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> skb af hw set config ( <ptr> state )
<cls> <noptr> is one or even ( <noptr> a )
<cls> <noptr> m tt set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> em x xic register ( <ptr> dev <dot> <noptr> bus <dot> <noptr> algo type )
<cls> <noptr> lg dta set if ( <ptr> state <dot> <ptr> p )
<cls> <noptr> dib cap trim search ( <ptr> state <dot> <ptr> tune state )
<cls> <noptr> sh v eug fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> csi ctx enable ( <ptr> isp <dot> <ptr> csi <dot> <noptr> ctx num <dot> <noptr> enable )
<cls> <noptr> venus helper m m job abort ( <ptr> priv )
<cls> <noptr> iv tv enum input ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <noptr> sp mfc stop streaming ( <ptr> q )
<cls> <noptr> tw x pcm open ( <ptr> ss )
<cls> <noptr> lut set table ( <ptr> lut <dot> <ptr> ctrl )
<cls> <noptr> iv tv dma stream dec prepare ( <ptr> s <dot> <noptr> offset <dot> <noptr> lock )
<cls> <noptr> as x cmd get demo d stats ( <ptr> adap <dot> <ptr> p demo d stats )
<cls> <noptr> video begin ( <ptr> f h )
<cls> <noptr> dib get symbol duration ( <ptr> state )
<cls> <noptr> vid ioc g fmt vb i out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sms dvb print is db stats ( <ptr> debug data <dot> <ptr> p )
<cls> <noptr> preview enable noise filter ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> td a setup configur ation ( <ptr> fe <dot> <ptr> cfg )
<cls> <noptr> saa hic transfer ( <ptr> client <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> am gxx hw m oninit ( <ptr> data )
<cls> <noptr> st init controls ( <ptr> sd )
<cls> <noptr> sp mfc wait for done ctx ( <ptr> ctx <dot> <noptr> command <dot> <noptr> interrupt )
<cls> <noptr> sp jpeg timer stat ( <ptr> regs )
<cls> <noptr> uvc ctrl commit ( <ptr> handle <dot> <noptr> rollback <dot> <ptr> x ctrls <dot> <noptr> x ctrls count )
<cls> <noptr> adv x afe init controls ( <ptr> afe )
<cls> <noptr> cxa v clk ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> vid io cvd ecs fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> shark resume leds ( <ptr> shark )
<cls> <noptr> v fe disable ( <ptr> line )
<cls> <noptr> set mirror ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> coda encoder req buf s ( <ptr> ctx <dot> <ptr> rb )
<cls> <noptr> c x serialized open ( <ptr> s <dot> <ptr> filp )
<cls> <dptr> cxx get menu ( <noptr> id )
<cls> <noptr> dvb net open ( <ptr> dev )
<cls> <noptr> test write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> vivid radio r x g tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> set input ( <ptr> fe <dot> <noptr> input )
<cls> <noptr> ov x led control ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> mca msg restart ( <ptr> cam )
<cls> <ptr> vb to via buffer ( <ptr> vb )
<cls> <noptr> sh vou reg b set ( <ptr> vou dev <dot> <noptr> reg <dot> <noptr> value <dot> <noptr> mask )
<cls> <noptr> c x start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> dtt upid filter ( <ptr> adap <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> fim cmd modify pipeline ( <ptr> entity <dot> <noptr> enable )
<cls> <noptr> set rds data mode ( <ptr> f m dev <dot> <noptr> mode )
<cls> <noptr> msp write reg ( <ptr> av <dot> <noptr> dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> load ap ufw direct ( <ptr> fn <dot> <ptr> dst <dot> <ptr> c x <dot> <ptr> entry addr )
<cls> <noptr> au enable source ( <ptr> entity <dot> <ptr> pipe )
<cls> <noptr> spx read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> v l async notifier call unbind ( <ptr> n <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> usb urb submit v ( <ptr> stream <dot> <ptr> props )
<cls> <noptr> iv tv g audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <ptr> get v l fw node bus conv by fw node bus ( <noptr> type )
<cls> <noptr> cxa vs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> ir mce kbd encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> ctrl channel prog get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> uvc input report key ( <ptr> dev <dot> <noptr> code <dot> <noptr> value )
<cls> <noptr> snd c x init ( <ptr> v l dev )
<cls> <noptr> m tt camera probe ( <ptr> client )
<cls> <noptr> sp probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> std callback ( <ptr> dev <dot> <ptr> std )
<cls> <noptr> td a crf tracking filters correction ( <ptr> fe <dot> <noptr> freq )
<cls> <noptr> scc am if poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> gpio mux log status ( <ptr> sd )
<cls> <noptr> rtl xx uic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> img ir set normal filter ( <ptr> dev <dot> <ptr> sc filter )
<cls> <noptr> c x set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> px p try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> m i pid set power off ( <ptr> bridge )
<cls> <ptr> v l ctrl get int menu ( <noptr> id <dot> <ptr> len )
<cls> <noptr> a speed video init regs ( <ptr> video )
<cls> <noptr> vivid fb blank ( <noptr> blank mode <dot> <ptr> info )
<cls> <noptr> ene driver init ( )
<cls> <noptr> iv tv queue move buf ( <ptr> s <dot> <ptr> from <dot> <ptr> to <dot> <noptr> clear )
<cls> <ptr> fc attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <ptr> check hw timestamp s ( )
<cls> <noptr> fim c set color effect ( <ptr> ctx <dot> <noptr> color f x )
<cls> <noptr> mce usb get emulator version ( <ptr> ir )
<cls> <noptr> sh vou enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> tc set hdmi info frame mode ( <ptr> sd )
<cls> <noptr> coda para buf write ( <ptr> ctx <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> vid io cse did ( <ptr> file <dot> <ptr> f h <dot> <ptr> e did )
<cls> <noptr> m xls f hw set gpio ( <ptr> state <dot> <noptr> gpio <dot> <noptr> val )
<cls> <noptr> c xxx register extension ( <ptr> ops )
<cls> <noptr> g scm m poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> meta cap stop streaming ( <ptr> v q )
<cls> <noptr> check frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> flite hw set source format ( <ptr> dev <dot> <ptr> f )
<cls> <noptr> view cast eeprom ( <ptr> dev <dot> <ptr> eeprom data )
<cls> <noptr> adv driver init ( )
<cls> <noptr> c pread ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> mtk jpeg try fmt vid out m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> em xx stop feed ( <ptr> feed )
<cls> <noptr> dvb dmx sw filter section new ( <ptr> feed )
<cls> <noptr> bt tv buffer risc ( <ptr> b tv <dot> <ptr> buf )
<cls> <noptr> sp mfc handle error ( <ptr> dev <dot> <ptr> ctx <dot> <noptr> reason <dot> <noptr> err )
<cls> <noptr> bts ctrl ( <ptr> ctrl )
<cls> <noptr> apply tps ( <ptr> state )
<cls> <ptr> fim c is sensor get drv data ( <ptr> node )
<cls> <noptr> os d disable vid rgb ( <ptr> sd )
<cls> <noptr> solo jpeg config ( <ptr> solo dev )
<cls> <noptr> c x get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> via cam query cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> load requested v pu ( <ptr> v pu <dot> <noptr> fw type )
<cls> <noptr> v l hdmi r x color ime try ( <ptr> avi <dot> <ptr> hdmi <dot> <noptr> height )
<cls> <noptr> tv audio g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> a kvc m suspend ( <ptr> dev )
<cls> <noptr> m tts fmt ( <ptr> sd <dot> <ptr> m f )
<cls> <noptr> c x claim stream ( <ptr> id <dot> <noptr> type )
<cls> <noptr> s board shutdown ( <ptr> dev )
<cls> <noptr> f m r x set af switch ( <ptr> f m dev <dot> <noptr> af mode )
<cls> <noptr> saa vb i configure ( <ptr> port )
<cls> <noptr> dtstart streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> l gdt set filter extension ( <ptr> state <dot> <ptr> p )
<cls> <noptr> m tt reg mask set ( <ptr> client <dot> <noptr> command <dot> <noptr> mask <dot> <noptr> set )
<cls> <noptr> cio sub dev enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> v dac cfg write ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> tw x video irq ( <ptr> dev <dot> <noptr> requests <dot> <noptr> pb status <dot> <noptr> fifo status <dot> <ptr> reset ch )
<cls> <noptr> mantis ev mgr init ( <ptr> ca )
<cls> <noptr> c sir x driver init ( )
<cls> <noptr> vi u setup preview ( <ptr> dev <dot> <ptr> f h )
<cls> <noptr> dib x initi c master ( <ptr> mst <dot> <noptr> device rev <dot> <ptr> ic adap <dot> <noptr> ic addr )
<cls> <ptr> pvr hd wget desc ( <ptr> h dw )
<cls> <noptr> coda format normalize yuv ( <noptr> fourcc )
<cls> <noptr> coda try fmt v do a ( <ptr> ctx <dot> <ptr> f <dot> <ptr> use v do a )
<cls> <noptr> td a send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> c x get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> preview link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> tw x audio init ( <ptr> dev )
<cls> <noptr> vp dma add abort channel ctd ( <ptr> list <dot> <noptr> chan num )
<cls> <noptr> lut configure frame ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> tw set tv norm hw ( <ptr> dev )
<cls> <noptr> sa axs video routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> c x pci driver init ( )
<cls> <noptr> zol trix s frequency ( <ptr> isa <dot> <noptr> freq )
<cls> <noptr> ov g frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> nv t set io addr ( <ptr> nv t <dot> <ptr> io addr )
<cls> <noptr> go reset encoder ( <ptr> go )
<cls> <noptr> adv xx inv register ( <ptr> sd )
<cls> <noptr> micro tune get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> c cdc set buf type ( <noptr> buf type )
<cls> <noptr> v fe set power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> r vin set alpha ( <ptr> vin <dot> <noptr> alpha )
<cls> <noptr> mtm set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> g sch w set output buf masking ( <ptr> dev <dot> <noptr> shift <dot> <noptr> enable )
<cls> <noptr> it x tuner attach ( <ptr> adap )
<cls> <noptr> v sph go read ( <ptr> h go <dot> <noptr> reg )
<cls> <noptr> fri io init ( <ptr> d )
<cls> <noptr> v fe buf update w mon next ( <ptr> v fe <dot> <ptr> output )
<cls> <noptr> wm write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> pvr ctrl set value ( <ptr> cptr <dot> <noptr> val )
<cls> <noptr> vb i stop ( <ptr> f h <dot> <ptr> file )
<cls> <noptr> c x d post bit err t ( <ptr> tn r dmd <dot> <ptr> post bit err <dot> <ptr> post bit count )
<cls> <noptr> v ls selection ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> win dvr audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> shark read val ( <ptr> tea )
<cls> <noptr> pvr h dw set input ( <ptr> h dw <dot> <noptr> v )
<cls> <noptr> em xx set alternate ( <ptr> dev )
<cls> <noptr> mantis ic xfer ( <ptr> adapter <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> m m ops v dec device run ( <ptr> priv )
<cls> <noptr> video mux async register ( <ptr> v mux <dot> <noptr> num input pads )
<cls> <noptr> sh get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> pt ln b ctrl ( <ptr> pt <dot> <noptr> on )
<cls> <noptr> cec data completed ( <ptr> data )
<cls> <noptr> iv tvf b init card ( <ptr> it v )
<cls> <noptr> as cote get tv system ( <ptr> fe )
<cls> <noptr> resizer enable one shot ( <ptr> res )
<cls> <noptr> c x irr x shutdown ( <ptr> sd )
<cls> <noptr> bt tv field count ( <ptr> b tv )
<cls> <noptr> l gs gxx set mode auto ( <ptr> priv )
<cls> <noptr> d ibm pid filter ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> t vps stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> tw video init ( <ptr> dev <dot> <ptr> video nr )
<cls> <noptr> m eye probe ( <ptr> pci dev <dot> <ptr> ent )
<cls> <noptr> ec streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> dvb front end get ( <ptr> fe )
<cls> <noptr> hgt hue areas try ctrl ( <ptr> ctrl )
<cls> <noptr> csi phy get lane mask ( <ptr> lane cfg )
<cls> <noptr> cam ss register entities ( <ptr> cam ss )
<cls> <noptr> stv front end algo ( <ptr> fe )
<cls> <noptr> g d set dst size ( <ptr> d <dot> <ptr> f )
<cls> <noptr> dib p tuner xfer ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> pwc g fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> vivid get pixel aspect ( <ptr> dev )
<cls> <noptr> ad set ctrl ( <ptr> ctrl )
<cls> <ptr> find ref lock ( <ptr> hdl <dot> <noptr> id )
<cls> <ptr> tos rpc ( <ptr> sd )
<cls> <noptr> sms ir init ( <ptr> core dev )
<cls> <noptr> hi update digital gain ( <ptr> hi <dot> <noptr> d gain )
<cls> <noptr> v dec event notify ( <ptr> inst <dot> <noptr> event <dot> <ptr> data )
<cls> <noptr> saa buffer finish ( <ptr> dev <dot> <ptr> q <dot> <noptr> state )
<cls> <noptr> c cdc get pixel format ( )
<cls> <noptr> video mux parse endpoint ( <ptr> dev <dot> <ptr> ve p <dot> <ptr> asd )
<cls> <noptr> ov sensor get register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> ic wait read ack ( <ptr> ic adap )
<cls> <noptr> m basic write reg data ( <ptr> state <dot> <noptr> ic addr <dot> <ptr> rd <dot> <noptr> size )
<cls> <noptr> j l c stream start c i flg ( <ptr> gsp ca dev )
<cls> <noptr> rtl u front end attach ( <ptr> adap )
<cls> <noptr> ov set stream d vp ( <ptr> sensor <dot> <noptr> on )
<cls> <noptr> mtk jpeg g selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> s )
<cls> <noptr> c x risc data buffer audio ( <ptr> pci <dot> <ptr> risc <dot> <ptr> sg list <dot> <noptr> bpl <dot> <noptr> lines <dot> <noptr> lp i )
<cls> <noptr> t dax get fe ( <ptr> fe <dot> <ptr> fe params )
<cls> <noptr> vivid radio r x read ( <ptr> file <dot> <ptr> buf <dot> <noptr> size <dot> <ptr> offset )
<cls> <noptr> vs get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> init r cmap aver media card bus ( )
<cls> <noptr> d wic check ( <ptr> client )
<cls> <noptr> dvb audio open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> write mailbox ( <ptr> m box <dot> <noptr> cmd <dot> <noptr> args <dot> <noptr> data )
<cls> <noptr> os denable layer ( <ptr> sd <dot> <noptr> layer )
<cls> <noptr> sp mfc run dec last frames ( <ptr> ctx )
<cls> <noptr> isp pipeline is last ( <ptr> me )
<cls> <noptr> solo eeprom reg read ( <ptr> solo dev )
<cls> <noptr> om api sph aae wb init ( <ptr> isp )
<cls> <noptr> sms end ian handle tx message ( <ptr> buffer )
<cls> <noptr> igu an air open ( <ptr> r dev )
<cls> <noptr> t ct get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> vim c cap enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> resizer set inaddr ( <ptr> res <dot> <noptr> addr )
<cls> <noptr> td a calc rfb and ( <ptr> fe <dot> <ptr> freq )
<cls> <noptr> sa atv audio do scan ( <ptr> dev )
<cls> <noptr> stv xx write sensor finish ( <ptr> sd )
<cls> <noptr> ska get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> typhoon s mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> fim ch wget target flip ( <ptr> ctx )
<cls> <ptr> check card type ( )
<cls> <noptr> isc interrupt ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> flex copi c request ( <ptr> ic <dot> <noptr> op <dot> <noptr> chip addr <dot> <noptr> start addr <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> dvb front end handle compat ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> uvc get video ctrl ( <ptr> stream <dot> <ptr> ctrl <dot> <noptr> probe <dot> <noptr> query )
<cls> <noptr> cpi ag selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> d ibm c set config ( <ptr> fe <dot> <ptr> cfg )
<cls> <noptr> s rpc set flip ( <ptr> sd )
<cls> <noptr> set ac input ( <ptr> dev )
<cls> <noptr> tp g calc text base p ( <ptr> tp g <dot> <ptr> base p <dot> <noptr> p <dot> <ptr> v buf )
<cls> <noptr> cod am m buf done ( <ptr> ctx <dot> <ptr> buf <dot> <noptr> state )
<cls> <noptr> stv read regs ( <ptr> state <dot> <noptr> reg <dot> <ptr> b <dot> <noptr> len )
<cls> <noptr> dr xxx j set power state ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> tm flash led ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> b disp hw get inc ( <noptr> from <dot> <noptr> to <dot> <ptr> inc )
<cls> <noptr> start fw load ( <ptr> client )
<cls> <noptr> dib read wb d offset ( <ptr> state <dot> <noptr> gain )
<cls> <noptr> dib read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> adv xx set e did ( <ptr> sd <dot> <ptr> e did )
<cls> <ptr> mfc get menu ( <noptr> id )
<cls> <noptr> is ifconfig dfc ( <ptr> v dfc )
<cls> <noptr> d m get sda ( <ptr> data )
<cls> <noptr> td awr reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> m tt autofocus setting ( <ptr> client )
<cls> <noptr> tfe pvr tuner attach ( <ptr> adap )
<cls> <noptr> m xls set params ( <ptr> fe )
<cls> <noptr> g sch w set pre scaler ( <ptr> ctx )
<cls> <noptr> gpio mux s radio ( <ptr> sd )
<cls> <noptr> r card rif write ( <ptr> ch <dot> <noptr> offset <dot> <noptr> data )
<cls> <noptr> ov get binning ( <ptr> sensor )
<cls> <noptr> avc tuner dsd dvb t ( <ptr> fdt v <dot> <ptr> p )
<cls> <noptr> td a set tone ( <ptr> state <dot> <noptr> tone )
<cls> <noptr> c xxx close extension ( <ptr> dev )
<cls> <noptr> ccd csb l wait idle ( <ptr> c cdc <dot> <noptr> max wait )
<cls> <noptr> aur c suspend ( <ptr> dev )
<cls> <noptr> vid out stop streaming ( <ptr> v q )
<cls> <noptr> adb set manual pll gear ( <ptr> sd <dot> <noptr> pixel clock )
<cls> <noptr> dvb dummy fe read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> d wic driver init ( )
<cls> <noptr> uvc ioctl s input ( <ptr> file <dot> <ptr> f h <dot> <noptr> input )
<cls> <noptr> stv ter agc iir lock detect set ( <ptr> state )
<cls> <noptr> cobalt s register ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> reg )
<cls> <noptr> dag c m val get ( <ptr> state )
<cls> <noptr> solo ic read byte ( <ptr> solo dev <dot> <noptr> id <dot> <noptr> addr <dot> <noptr> off )
<cls> <noptr> uvc v l try format ( <ptr> stream <dot> <ptr> fmt <dot> <ptr> probe <dot> <dptr> uvc format <dot> <dptr> uvc frame )
<cls> <noptr> aus top vb i streaming ( <ptr> v q )
<cls> <noptr> ce u hw config ( <ptr> ce udev )
<cls> <ptr> v l format info ( <noptr> format )
<cls> <noptr> dib usb thom son tuner attach ( <ptr> adap )
<cls> <noptr> xt pg enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> adv cec adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <ptr> dma mode name ( <noptr> mode )
<cls> <noptr> ov set led ( <ptr> gsp ca dev <dot> <noptr> status )
<cls> <noptr> adv x csi init controls ( <ptr> tx )
<cls> <noptr> c x dvb probe ( <ptr> drv )
<cls> <noptr> v dec h get fb ( <ptr> inst <dot> <ptr> list <dot> <noptr> disp list <dot> <dptr> out fb )
<cls> <noptr> vsp pipeline init ( <ptr> pipe )
<cls> <noptr> tx short start ( <ptr> pin )
<cls> <noptr> lcd stop ( <ptr> gsp ca dev )
<cls> <noptr> iv tv yuv window setup ( <ptr> it v <dot> <ptr> f )
<cls> <noptr> img irr c scan code ( <noptr> len <dot> <noptr> raw <dot> <noptr> enabled protocols <dot> <ptr> request )
<cls> <noptr> init r cmap pct vse dna ( )
<cls> <noptr> chip write ( <ptr> chip <dot> <noptr> sub addr <dot> <noptr> val )
<cls> <noptr> skb afs stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> arc query ( <ptr> d )
<cls> <ptr> check dma buf num ( )
<cls> <noptr> init r cmap at it v wonder hd ( )
<cls> <noptr> vivid fbs ctrl ( <ptr> ctrl )
<cls> <noptr> td a crf cal init ( <ptr> fe )
<cls> <noptr> snd usb tv hw params ( <ptr> sub stream <dot> <ptr> hw params )
<cls> <noptr> d ibm b pid parse ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> tvp set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> t dax set std ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> v l m m ioctl stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> cxf ini common ( <ptr> dev )
<cls> <noptr> tfe pvr front end attach ( <ptr> adap )
<cls> <noptr> tw x irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> mtk mdp hw set in size ( <ptr> ctx )
<cls> <ptr> check periods measure carrier ( )
<cls> <noptr> omap isp stat pcr busy ( <ptr> stat )
<cls> <noptr> flex cop master xfer ( <ptr> ic adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <ptr> vpx fe attach ( <ptr> d )
<cls> <noptr> c x dt nr dmd mon internal cpu status ( <ptr> tn r dmd <dot> <ptr> status )
<cls> <noptr> af read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> af read config ( <ptr> d )
<cls> <noptr> get key hau p common ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> p toggle <dot> <noptr> size )
<cls> <ptr> v bdc attach dma buf ( <ptr> dev <dot> <ptr> d buf <dot> <noptr> size <dot> <noptr> dma dir )
<cls> <noptr> mtm start ( <ptr> sd )
<cls> <noptr> px a camera resume ( <ptr> dev )
<cls> <noptr> d m read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> get resolution ( <ptr> go <dot> <ptr> width <dot> <ptr> height )
<cls> <noptr> configure sensor output ( <ptr> gsp ca dev <dot> <noptr> mode )
<cls> <noptr> sh ve u buf queue ( <ptr> vb )
<cls> <noptr> mtm setup pll ( <ptr> sensor )
<cls> <noptr> em xx usb resume ( <ptr> int f )
<cls> <noptr> six set report ( <ptr> radio <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> ene irq status ( <ptr> dev )
<cls> <noptr> dib usb driver init ( )
<cls> <noptr> isc wb update ( <ptr> ctrls )
<cls> <noptr> sa aic xfer ( <ptr> ic adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> count tol pf count ( <noptr> d )
<cls> <noptr> v l log status ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> spin it ( <ptr> fe )
<cls> <noptr> t dax write ( <ptr> state <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> hi write reg ( <ptr> hi <dot> <noptr> reg <dot> <noptr> len <dot> <noptr> val )
<cls> <noptr> flex cop usb get mac addr ( <ptr> fc <dot> <noptr> extended )
<cls> <noptr> handle enc encode msg ( <ptr> v pu <dot> <ptr> data )
<cls> <noptr> vb get done vb ( <ptr> q <dot> <dptr> vb <dot> <ptr> pb <dot> <noptr> non blocking )
<cls> <noptr> c x unmute ( <ptr> c x )
<cls> <noptr> v pfe buffer queue ( <ptr> vb )
<cls> <noptr> vid ioc g fmt ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> stv init internal ( <ptr> fe <dot> <ptr> p init )
<cls> <noptr> snd tm card trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> msi enum freq bands ( <ptr> sd <dot> <ptr> b and )
<cls> <noptr> sdr am size show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> v l ctrl request complete ( <ptr> req <dot> <ptr> main hdl )
<cls> <noptr> is ifconfig b clamp ( <ptr> bc )
<cls> <noptr> stv ddb setup ter ( <ptr> state )
<cls> <noptr> rtl xx ur d reg ( <ptr> d <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> c x cmd execute nolock ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> c x d spi probe ( <ptr> spi )
<cls> <noptr> flex cop d m are map ( <ptr> fc <dot> <noptr> dma idx <dot> <noptr> onoff )
<cls> <noptr> lut enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> is header valid ( <ptr> phdr )
<cls> <noptr> m bas reset front end cache ( <ptr> fe )
<cls> <noptr> img ir decoder preprocess ( <ptr> decoder )
<cls> <noptr> imx probe ( <ptr> client )
<cls> <noptr> cam if cfg video path ( <ptr> vp )
<cls> <noptr> omap isp stat config ( <ptr> stat <dot> <ptr> new conf )
<cls> <noptr> cs log status ( <ptr> sd )
<cls> <noptr> c x process eeprom ( <ptr> c x )
<cls> <noptr> r pf partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> partition <dot> <noptr> partition idx <dot> <ptr> window )
<cls> <noptr> ov set v flip ( <ptr> ov <dot> <noptr> value )
<cls> <noptr> cod as ctrl ( <ptr> ctrl )
<cls> <noptr> tw input deadline update ( <ptr> input )
<cls> <noptr> afr d regs ( <ptr> d <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> isp sub dev set default format ( <ptr> isp )
<cls> <noptr> disclaim video lines ( <ptr> b tv )
<cls> <noptr> omap isp stat unsubscribe event ( <ptr> sub dev <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> translate ( <ptr> c buf <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> cec pin read ( <ptr> pin )
<cls> <noptr> c x mdl update buf s for cpu ( <ptr> s <dot> <ptr> mdl )
<cls> <noptr> dtt ufe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> usb cypress load firmware ( <ptr> udev <dot> <ptr> fw <dot> <noptr> type )
<cls> <noptr> write attribute mem ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> frequency ( <ptr> priv <dot> <noptr> freq khz )
<cls> <noptr> j put ry fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> gc ( <ptr> state <dot> <ptr> cfg )
<cls> <noptr> isp video check format ( <ptr> video <dot> <ptr> v f h )
<cls> <noptr> c x suspend common ( <ptr> pci dev <dot> <noptr> state )
<cls> <noptr> iv tv subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> read dst ( <ptr> state <dot> <ptr> ret <dot> <noptr> len )
<cls> <ptr> check btc xdebug ( )
<cls> <noptr> send set imon clock ( <ptr> i ctx <dot> <noptr> year <dot> <noptr> month <dot> <noptr> day <dot> <noptr> dow <dot> <noptr> hour <dot> <noptr> minute <dot> <noptr> second )
<cls> <noptr> ver ve read byte ( <ptr> dev <dot> <noptr> saddr <dot> <ptr> data )
<cls> <noptr> m sig tuner ( <ptr> sd <dot> <ptr> v )
<cls> <noptr> vs probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> opera pid filter control ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> v ls input ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> fim cmd register platform entity ( <ptr> f md <dot> <ptr> pdev <dot> <noptr> plat entity )
<cls> <noptr> pvr sub dev update ( <ptr> h dw )
<cls> <noptr> lg x read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> fim c is register ic driver ( )
<cls> <noptr> c x aud irq ( <ptr> chip )
<cls> <noptr> v fere set output maps ( <ptr> v fe )
<cls> <ptr> uvc queue next buffer ( <ptr> queue <dot> <ptr> buf )
<cls> <noptr> ov set power ( <ptr> sensor <dot> <noptr> on )
<cls> <ptr> ves x attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> dvb dmx sw filter payload ( <ptr> feed <dot> <ptr> buf )
<cls> <noptr> tuner fixup std ( <ptr> t <dot> <noptr> std )
<cls> <noptr> c x set fec ( <ptr> state <dot> <noptr> fec )
<cls> <noptr> rotation thread function ( <ptr> data )
<cls> <noptr> flex cop eeprom check mac addr ( <ptr> fc <dot> <noptr> extended )
<cls> <noptr> vb ioctl query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> vim c cap get format ( <ptr> ved <dot> <ptr> fmt )
<cls> <noptr> dtt u power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> vivid user gens ctrl ( <ptr> ctrl )
<cls> <noptr> ov stream on ( <ptr> sd )
<cls> <noptr> tc set ref clk ( <ptr> sd )
<cls> <noptr> m chip cont read frame ( <noptr> v <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> r j ng register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> c xvid ioc soutput ( <ptr> file <dot> <ptr> priv <dot> <noptr> o )
<cls> <noptr> clip list cmp ( <ptr> a <dot> <ptr> b )
<cls> <noptr> cobalt start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> img ir sony filter ( <ptr> in <dot> <ptr> out <dot> <noptr> protocols )
<cls> <noptr> sht un eric tuner xfer ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> usb vision ctrl urb complete ( <ptr> urb )
<cls> <noptr> v l stubs aud out ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> bt tv stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> px pv l pix fmt is yuv ( <noptr> v l pix fmt )
<cls> <noptr> max poll csm ready ( <ptr> ctx )
<cls> <noptr> iv tv service vb i ( <noptr> type )
<cls> <noptr> stm cec adap log addr ( <ptr> adap <dot> <noptr> logical addr )
<cls> <noptr> v pfe start c cdc capture ( <ptr> v pfe dev )
<cls> <noptr> tm get std res ( <ptr> dev )
<cls> <noptr> r gas ctrl ( <ptr> ctrl )
<cls> <noptr> ec write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> csi ctx config ( <ptr> isp <dot> <ptr> csi <dot> <ptr> ctx )
<cls> <ptr> dib get slave front end ( <ptr> fe <dot> <noptr> slave index )
<cls> <noptr> cpi are q buf s ( <ptr> file <dot> <ptr> f h <dot> <ptr> req )
<cls> <noptr> set frame rate ( <ptr> gsp ca dev )
<cls> <noptr> sun ics i sub dev enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> mbus )
<cls> <noptr> flex cop dis eq c send bit ( <ptr> fe <dot> <noptr> data )
<cls> <noptr> alp std hd request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> sp mfc get int reason v ( <ptr> dev )
<cls> <noptr> exy nos jpeg dec stream size ( <ptr> regs <dot> <noptr> size )
<cls> <noptr> spc sis stop stream ( <ptr> state )
<cls> <noptr> pt init dma buf ( <ptr> adap )
<cls> <noptr> tvp enable ( <ptr> sd )
<cls> <noptr> vb discard done ( <ptr> q )
<cls> <noptr> load c sect p fef w ( <ptr> fe i )
<cls> <noptr> m chip continuous start ( )
<cls> <noptr> me son a oce cga adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> saa encoder register ( <ptr> port )
<cls> <noptr> px a camera packing supported ( <ptr> fmt )
<cls> <noptr> f mst reg com pcb ( <ptr> arg <dot> <noptr> data )
<cls> <noptr> pvr h dw gpio chg dir ( <ptr> h dw <dot> <noptr> msk <dot> <noptr> val )
<cls> <noptr> coda encode header ( <ptr> ctx <dot> <ptr> buf <dot> <noptr> header code <dot> <ptr> header <dot> <ptr> size )
<cls> <ptr> check boot from rom ( )
<cls> <ptr> td a attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> c x der read agc gain i ( <ptr> priv <dot> <noptr> del sys )
<cls> <noptr> adv notify monitor detect ( <ptr> sd )
<cls> <noptr> c xic read reg ( <ptr> state <dot> <noptr> ic addr <dot> <noptr> reg )
<cls> <noptr> try set ext ctrls ( <ptr> f h <dot> <ptr> hdl <dot> <ptr> v dev <dot> <ptr> m dev <dot> <ptr> cs <dot> <noptr> set )
<cls> <noptr> a speed video query d v timings ( <ptr> file <dot> <ptr> f h <dot> <ptr> timings )
<cls> <noptr> vpx fe set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> vid ioc q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> c x reset ir gpio ( <ptr> data )
<cls> <noptr> mba search ( <ptr> fe )
<cls> <noptr> adb have hot plug ( <ptr> sd )
<cls> <noptr> stk has audio ( <ptr> dev )
<cls> <noptr> sp jpeg device run ( <ptr> priv )
<cls> <noptr> usb shark suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> ener x enable hw ( <ptr> dev )
<cls> <noptr> estimated stream size ( <noptr> w <dot> <noptr> h )
<cls> <noptr> regr w ( <ptr> gsp ca dev <dot> <noptr> b request type <dot> <noptr> b request <dot> <noptr> w value <dot> <noptr> w index <dot> <noptr> w length )
<cls> <noptr> set blue ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> nv t set cir iren ( <ptr> nv t )
<cls> <noptr> media device ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> sp mfc open mfc inst ( <ptr> dev <dot> <ptr> ctx )
<cls> <ptr> check forced manual ( )
<cls> <ptr> fim c get format ( <noptr> index )
<cls> <noptr> d ibm c tune ( <ptr> demo d )
<cls> <noptr> cs write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> nxt dump status ( <ptr> state )
<cls> <noptr> lme msg ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> saa api configured if ( <ptr> port <dot> <noptr> std )
<cls> <noptr> v pu wdt reset func ( <ptr> ws )
<cls> <noptr> c x cancel in work orders ( <ptr> c x )
<cls> <noptr> loop sett x mask ( <ptr> dev <dot> <noptr> mask )
<cls> <ptr> px am bus find fmt desc ( <noptr> code <dot> <ptr> lookup <dot> <noptr> n )
<cls> <noptr> ovs ine ( <noptr> theta )
<cls> <noptr> stk vb setup ( <ptr> dev )
<cls> <noptr> init r cmap fly video ( )
<cls> <noptr> irq handle msg ( <ptr> dev <dot> <noptr> s )
<cls> <noptr> log audio status ( <ptr> client )
<cls> <noptr> c xxx video dev init ( <ptr> dev <dot> <ptr> usb dev <dot> <ptr> v fd <dot> <ptr> template <dot> <ptr> type )
<cls> <noptr> venus cpu idle and pc ready ( <ptr> h dev )
<cls> <noptr> move window rel ( <ptr> av <dot> <noptr> window nr <dot> <noptr> x <dot> <noptr> y )
<cls> <noptr> ptic function ality ( <ptr> adap )
<cls> <noptr> init r cmap twin hand tvc abc i ( )
<cls> <noptr> b disp enum fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ava v start play ( <ptr> av <dot> <noptr> av )
<cls> <noptr> vp fec cdc close ( <ptr> c cdc <dot> <ptr> dev )
<cls> <noptr> v pbe set mode ( <ptr> v pbe dev <dot> <ptr> mode info )
<cls> <noptr> c xxx reset out ( <ptr> dev )
<cls> <noptr> l m led get ctrl ( <ptr> ctrl )
<cls> <noptr> x c get build version ( <ptr> priv <dot> <ptr> build rev )
<cls> <noptr> td a init if ( <ptr> fe )
<cls> <noptr> zol trix init ( )
<cls> <noptr> af pid filter ( <ptr> fe <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> sp jpeg set q tbl lum ( <ptr> regs <dot> <noptr> quality )
<cls> <noptr> get real ic port ( <ptr> dev <dot> <noptr> bus nr )
<cls> <noptr> dvb cae nio open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> sa await for deb i done sleep ( <ptr> dev <dot> <noptr> us <dot> <noptr> us )
<cls> <noptr> g scs ctrl ( <ptr> ctrl )
<cls> <noptr> tws std ( <ptr> file <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> snd saa volume info ( <ptr> k control <dot> <ptr> u info )
<cls> <noptr> digit v tuner attach ( <ptr> adap )
<cls> <noptr> saa g frequency ( <ptr> port <dot> <ptr> f )
<cls> <noptr> usb vision set input ( <ptr> usb vision )
<cls> <noptr> vb i buffer queue ( <ptr> q <dot> <ptr> vb )
<cls> <noptr> dib get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> c x usb nano front end attach ( <ptr> adap )
<cls> <noptr> si write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> c x check driver ( <ptr> drv )
<cls> <noptr> it enable r x ( <ptr> dev )
<cls> <noptr> flex cop usb stream control ( <ptr> fc <dot> <noptr> onoff )
<cls> <noptr> camera r x phy enable ( <ptr> ctx )
<cls> <noptr> m bas reset counters ( <ptr> fe )
<cls> <noptr> mtv power on ( <ptr> sd )
<cls> <noptr> sensor read ( <ptr> gsp ca dev <dot> <noptr> addr )
<cls> <noptr> is px clk un prepare ( <ptr> hw )
<cls> <ptr> video buf to dma ( <ptr> buf )
<cls> <noptr> c x set tps ( <ptr> fe )
<cls> <noptr> fim c lite clk get ( <ptr> fim c )
<cls> <noptr> fim c is irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> fim c pipeline open ( <ptr> ep <dot> <ptr> me <dot> <noptr> prepare )
<cls> <noptr> techni sat usb green led control ( <ptr> work )
<cls> <noptr> stb d vbs get fec status ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> set default user mode ( <ptr> cam )
<cls> <noptr> em dvb init pct ve ( <ptr> dev )
<cls> <noptr> dtt ufe sleep ( <ptr> fe )
<cls> <noptr> d m gpio set ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> dr x k read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> m xls f demo d read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> tvp x configure ( <ptr> sd <dot> <ptr> decoder )
<cls> <noptr> h fi session rel buf done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> bt tv overlay ( <ptr> file <dot> <ptr> f <dot> <noptr> on )
<cls> <noptr> vim csc arm ( <ptr> vim c <dot> <ptr> ved )
<cls> <noptr> img irs any os can code ( <noptr> len <dot> <noptr> raw <dot> <noptr> enabled protocols <dot> <ptr> request )
<cls> <noptr> r vin parallel sub device attach ( <ptr> vin <dot> <ptr> sub dev )
<cls> <noptr> charge pump source ( <ptr> fe <dot> <noptr> force )
<cls> <noptr> affe select bw ( <ptr> d <dot> <noptr> bw )
<cls> <noptr> is i set default fmt ( <ptr> is i )
<cls> <noptr> uvc ctrl status event ( <ptr> urb <dot> <ptr> chain <dot> <ptr> ctrl <dot> <ptr> data )
<cls> <noptr> pluto enable irq s ( <ptr> pluto )
<cls> <noptr> a driver init ( )
<cls> <noptr> cad ets ctrl ( <ptr> ctrl )
<cls> <noptr> m bas read signal strength from cache ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> a uic func ( <ptr> adapter )
<cls> <noptr> dvb dmx dev buffer write ( <ptr> buf <dot> <ptr> src <dot> <noptr> len )
<cls> <noptr> histo v l query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> max i radio driver init ( )
<cls> <noptr> l gs g set adc vpp ( <ptr> priv <dot> <noptr> sel )
<cls> <noptr> ctrl uio write ( <ptr> demo d <dot> <ptr> uio data )
<cls> <noptr> scm set frame interval ( <ptr> state <dot> <ptr> fi )
<cls> <noptr> philips europa tuner init ( <ptr> fe )
<cls> <noptr> adp stro be ( <ptr> flash <dot> <noptr> enable )
<cls> <noptr> msi convert stream ( <ptr> dev <dot> <ptr> dst <dot> <ptr> src <dot> <noptr> src len )
<cls> <noptr> r ga get scaling ( <noptr> src <dot> <noptr> dst )
<cls> <noptr> adv irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> flex cop pci irq check work ( <ptr> work )
<cls> <noptr> af power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> vs pdl ext cmd put ( <ptr> cmd )
<cls> <noptr> dib wb d target ( <ptr> state <dot> <noptr> r f )
<cls> <noptr> v l prepare buf ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> update capture data from header ( <ptr> ctx )
<cls> <noptr> ult ( <ptr> div <dot> <ptr> frac n <dot> <noptr> flo <dot> <noptr> flo step <dot> <noptr> f ref )
<cls> <noptr> lg dta q am lock poll ( <ptr> state )
<cls> <noptr> solo buf queue ( <ptr> vb )
<cls> <noptr> pts etl na ( <ptr> fe )
<cls> <noptr> pvr buffer set ready ( <ptr> b p )
<cls> <noptr> v l async notifier parse f wno deep ( <ptr> dev <dot> <ptr> notifier <dot> <noptr> asd struct size <dot> <noptr> port <dot> <noptr> has port <dot> <noptr> parse endpoint )
<cls> <noptr> c x tun eric tuner xfer ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> iv tv decoder ioctl s ( <ptr> filp <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> dst tone power cmd ( <ptr> state )
<cls> <noptr> b disp stop streaming ( <ptr> q )
<cls> <noptr> ddb irq disable ( <ptr> dev )
<cls> <noptr> saa api clear gpio bit ( <ptr> dev <dot> <noptr> unitid <dot> <noptr> pin )
<cls> <noptr> l gs gxx write ( <ptr> fe <dot> <noptr> buf <dot> <noptr> len )
<cls> <noptr> saa api configure port mpegts ( <ptr> dev <dot> <ptr> port <dot> <ptr> ts fmt )
<cls> <noptr> smi ic get sda ( <ptr> data <dot> <noptr> sw ctl )
<cls> <ptr> to adv ( <ptr> sd )
<cls> <noptr> cir wake dump regs ( <ptr> nv t )
<cls> <noptr> media compat ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> v pe fw cb ( <ptr> pdev )
<cls> <noptr> v l print buf type ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> sh v our e gab write ( <ptr> vou dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> g sch w set main scaler ( <ptr> ctx )
<cls> <noptr> nv t cir reg read ( <ptr> nv t <dot> <noptr> offset )
<cls> <noptr> q m dbset config ( <ptr> fe <dot> <ptr> priv cfg )
<cls> <noptr> stk stop streaming ( <ptr> dev )
<cls> <noptr> af send command ( <ptr> d <dot> <noptr> command <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> saas stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> lif configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> n stol pf count ( <noptr> ns )
<cls> <noptr> tw subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> dib fw read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> fim ch w set camera polarity ( <ptr> fim c <dot> <ptr> cam )
<cls> <noptr> preview config y c range ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> au usb msg ( <ptr> d <dot> <noptr> operation <dot> <noptr> addr <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> sony b tfm px g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> sh vous output ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <ptr> check audio clock override ( )
<cls> <noptr> m tt open ( <ptr> sub dev <dot> <ptr> f h )
<cls> <noptr> c eus input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> shift x ( <noptr> x <dot> <noptr> demo d <dot> <noptr> shift )
<cls> <noptr> me so nao cec clear ( <ptr> ao cec )
<cls> <noptr> stx init regs ( <ptr> stv x )
<cls> <noptr> l read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> it ( <ptr> budget <dot> <noptr> data )
<cls> <ptr> sh ve u get v fmt ( <ptr> ve u <dot> <noptr> type )
<cls> <noptr> spx setup front end parameters ( <ptr> fe )
<cls> <ptr> pvr stream get idle buffer ( <ptr> sp )
<cls> <noptr> dvb pll probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> stk x pvr front end attach ( <ptr> adap )
<cls> <noptr> isset fd control ( <ptr> is <dot> <noptr> val )
<cls> <noptr> v l query ctrl ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> cio pci driver init ( )
<cls> <noptr> flex cop hw filter init ( <ptr> fc )
<cls> <noptr> xt pgs stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> stv ter snr read reg ( <ptr> fe )
<cls> <noptr> adv smbus write byte data ( <ptr> client <dot> <noptr> command <dot> <noptr> value )
<cls> <noptr> tcg d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> t pgs fourcc ( <ptr> tp g <dot> <noptr> fourcc )
<cls> <noptr> b snr show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> px a camera wakeup ( <ptr> pc dev <dot> <ptr> buf <dot> <noptr> state )
<cls> <noptr> vivid received ( <ptr> adap <dot> <ptr> msg )
<cls> <noptr> techni sat usb cal clr c ( <ptr> b <dot> <noptr> length )
<cls> <noptr> tc driver init ( )
<cls> <noptr> cit send x ( <ptr> gsp ca dev <dot> <noptr> x )
<cls> <ptr> to fdp buffer ( <ptr> vb )
<cls> <noptr> ske cg x gpio set value ( <ptr> priv <dot> <noptr> id <dot> <noptr> val )
<cls> <noptr> sms set gpio ( <ptr> core dev <dot> <noptr> pin <dot> <noptr> enable )
<cls> <noptr> stop ts capture ( <ptr> budget )
<cls> <noptr> c x dt nr dmd dvb t mon in b and bts rate ( <ptr> tn r dmd <dot> <noptr> type <dot> <ptr> ts rate bps )
<cls> <noptr> c xs raw fmt ( <ptr> sd <dot> <ptr> fmt )
<cls> <noptr> stb set params ( <ptr> fe )
<cls> <noptr> reg page map set ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> m m ols set color effect ( <ptr> info <dot> <noptr> val )
<cls> <noptr> sp cec runtime resume ( <ptr> dev )
<cls> <noptr> s get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> dib wb d offset calibration ( <ptr> state )
<cls> <noptr> fdp enum fmt ( <ptr> f <dot> <noptr> type )
<cls> <noptr> pvr v l internal check ( <ptr> chp )
<cls> <noptr> ic is idle ( <noptr> status )
<cls> <noptr> smi app change cci addr ( <ptr> sensor )
<cls> <noptr> ic write ( <ptr> adap <dot> <noptr> adr <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> solo stop thread ( <ptr> solo dev )
<cls> <noptr> mtm enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> vp bit set sda ( <ptr> data <dot> <noptr> state )
<cls> <noptr> v l print tuner ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> m clk disable ( <ptr> hw )
<cls> <noptr> arrange ( <ptr> ptr <dot> <noptr> elem size <dot> <noptr> elems <dot> <noptr> start )
<cls> <noptr> stk setups io buf ( <ptr> dev <dot> <noptr> index )
<cls> <noptr> iv tv set scl old ( <ptr> data <dot> <noptr> state )
<cls> <noptr> dib pag c startup ( <ptr> fe )
<cls> <noptr> it enable tx interrupt ( <ptr> dev )
<cls> <noptr> r card rif notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> mn sleep ( <ptr> fe )
<cls> <noptr> r tim r cal lib rate ( <ptr> priv )
<cls> <noptr> c x usb medi on try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> store val custom ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> m xls f get r f strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> vp if channel get fid ( <noptr> channelid )
<cls> <noptr> dvb usb init ( <ptr> d <dot> <ptr> adapter nums )
<cls> <noptr> h aae wb set params ( <ptr> ae wb <dot> <ptr> new conf )
<cls> <noptr> dml me set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> c x read snr pct ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> c xir irq ( <ptr> core )
<cls> <noptr> ov set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> t mir config ( <ptr> ir )
<cls> <noptr> tx add bytes ( <ptr> pin )
<cls> <noptr> pt init all m xlr f ( <ptr> pt )
<cls> <ptr> check buf size ( )
<cls> <noptr> flex cop toggle full ts streaming ( <ptr> fc <dot> <noptr> onoff )
<cls> <noptr> uvc video decode is ight ( <ptr> uv curb <dot> <ptr> buf <dot> <ptr> meta buf )
<cls> <noptr> clk div even ( <noptr> a )
<cls> <noptr> cams spm domain on ( <ptr> cam ss <dot> <noptr> id )
<cls> <ptr> omap isp video format info ( <noptr> code )
<cls> <noptr> uvc meta v l try format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> m m ols set stabili zation ( <ptr> info <dot> <noptr> val )
<cls> <noptr> dev debug store ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> isset frame size ( <ptr> is <dot> <ptr> m f )
<cls> <noptr> v pbe displays d v timings ( <ptr> file <dot> <ptr> priv <dot> <ptr> timings )
<cls> <noptr> c i or x timing ( <noptr> a <dot> <noptr> b <dot> <noptr> freq <dot> <noptr> def )
<cls> <noptr> vb i out buf queue ( <ptr> vb )
<cls> <noptr> c sid set power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> adv s register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> vp if set mode info ( <ptr> config <dot> <noptr> channelid <dot> <noptr> config channelid )
<cls> <noptr> adv x powerup tx ( <ptr> tx )
<cls> <noptr> m xls f demo d program regs ( <ptr> state <dot> <ptr> ctrl reg info )
<cls> <noptr> ov read reg ( <ptr> sensor <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> dib p sleep ( <ptr> demo d )
<cls> <noptr> ov post unset alt ( <ptr> gsp ca dev )
<cls> <noptr> b tt vic wait done ( <ptr> b tv )
<cls> <ptr> vb dvb get front end ( <ptr> f <dot> <noptr> id )
<cls> <noptr> m xls f demo d write reg ( <ptr> state <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> pwc driver init ( )
<cls> <noptr> tvp get pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c xxx config ic ( <ptr> dev )
<cls> <noptr> em xx v l open ( <ptr> filp )
<cls> <noptr> venc verify conf ( <ptr> inst )
<cls> <noptr> dump mb ( <ptr> c x <dot> <ptr> mb <dot> <ptr> name )
<cls> <noptr> usb tv audio suspend ( <ptr> usb tv )
<cls> <noptr> cec data cancel ( <ptr> data <dot> <noptr> tx status )
<cls> <ptr> vb v l to csi buffer ( <ptr> p )
<cls> <noptr> verify window lock ( <ptr> f h <dot> <ptr> win <dot> <noptr> adjust size <dot> <noptr> adjust crop )
<cls> <noptr> display open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> snd solo pcm copy kernel ( <ptr> ss <dot> <noptr> channel <dot> <noptr> pos <dot> <ptr> dst <dot> <noptr> count )
<cls> <noptr> v fe find code ( <ptr> code <dot> <noptr> ncode <dot> <noptr> index <dot> <noptr> req code )
<cls> <noptr> c xs clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> c x dt nr dmd set r f lvl cmp stn ( <ptr> tn r dmd <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> ov probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> h encode filler ( <ptr> inst <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> c x set fec ( <ptr> state <dot> <noptr> del sys <dot> <noptr> mod <dot> <noptr> fec )
<cls> <noptr> imx get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> cobalt sub devs hs main it ( <ptr> cobalt )
<cls> <noptr> msm video register ( <ptr> video <dot> <ptr> v l dev <dot> <ptr> name <dot> <noptr> is pix )
<cls> <noptr> c x d eric debug ( <ptr> priv <dot> <noptr> addr <dot> <noptr> reg <dot> <noptr> write <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> set hue ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> ete kic buffered write regs ( <ptr> client <dot> <ptr> w next <dot> <noptr> cnt )
<cls> <noptr> m x set filter ( <ptr> d <dot> <noptr> type <dot> <noptr> idx <dot> <noptr> pid )
<cls> <noptr> saa init one ( <ptr> pci <dot> <ptr> ent )
<cls> <noptr> nv te f m disable ( <ptr> nv t )
<cls> <ptr> check webcam ( )
<cls> <noptr> dib p set gpio ( <ptr> demo d <dot> <noptr> num <dot> <noptr> dir <dot> <noptr> val )
<cls> <noptr> d ibm wakeup ( <ptr> demo d )
<cls> <ptr> pvr stream get ready buffer ( <ptr> sp )
<cls> <noptr> msis frequency ( <ptr> sd <dot> <ptr> f )
<cls> <noptr> lg x get nog ( <ptr> state <dot> <ptr> nog )
<cls> <noptr> sms dvb debug f sun register ( )
<cls> <noptr> ks probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> af read tuner registers ( <ptr> d <dot> <noptr> reg <dot> <noptr> addr <dot> <ptr> values <dot> <noptr> len )
<cls> <noptr> venus session set property ( <ptr> inst <dot> <noptr> ptype <dot> <ptr> p data )
<cls> <noptr> pkt session set property x ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> ptype <dot> <ptr> p data )
<cls> <ptr> adv dummy client ( <ptr> sd <dot> <ptr> desc <dot> <noptr> addr <dot> <noptr> io reg )
<cls> <noptr> m tt set pll dividers ( <ptr> client <dot> <noptr> m <dot> <noptr> n <dot> <noptr> p <dot> <noptr> p <dot> <noptr> p <dot> <noptr> p <dot> <noptr> p <dot> <noptr> p <dot> <noptr> p )
<cls> <noptr> solo sysfs init ( <ptr> solo dev )
<cls> <noptr> solo set input ( <ptr> file <dot> <ptr> priv <dot> <noptr> index )
<cls> <noptr> cam clk prepare ( <ptr> hw )
<cls> <ptr> check ignore err ( )
<cls> <ptr> check pid dbg ( )
<cls> <noptr> g scm m job abort ( <ptr> priv )
<cls> <noptr> call d v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> h vah wits interrupt ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> iv tvf b ioctl ( <ptr> info <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> v pfe reg write ( <ptr> c cdc <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> flite hw set camera port ( <ptr> dev <dot> <noptr> id )
<cls> <noptr> resizer try crop ( <ptr> sink <dot> <ptr> source <dot> <ptr> crop )
<cls> <noptr> probe ( <ptr> chan )
<cls> <noptr> cxx handler init ( <ptr> c x hdl <dot> <noptr> nrof controls hint )
<cls> <noptr> omap isp driver init ( )
<cls> <noptr> max set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> ctrl v res max get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> usb vision begin streaming ( <ptr> usb vision )
<cls> <noptr> d winit controls ( <ptr> dev vcm )
<cls> <noptr> sun ics if w node parse ( <ptr> dev <dot> <ptr> ve p <dot> <ptr> asd )
<cls> <noptr> ir key poll ( <ptr> ir )
<cls> <noptr> is i query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> m cam fmt is planar ( <noptr> p fmt )
<cls> <noptr> as x rsp parse ( <ptr> p rsp <dot> <noptr> procid )
<cls> <noptr> checksum ( <ptr> p <dot> <noptr> len )
<cls> <noptr> calculate hps source and sync ( <ptr> dev <dot> <noptr> source <dot> <noptr> sync <dot> <ptr> hps ctrl )
<cls> <noptr> ov set ctrl light freq ( <ptr> sensor <dot> <noptr> value )
<cls> <noptr> stv swal go ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> tt usb del channel ( <ptr> tt usb <dot> <noptr> channelid )
<cls> <noptr> r vin mcs fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> set effect ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> pvr dual fe attach ( <ptr> adap )
<cls> <noptr> ad probe ( <ptr> client <dot> <ptr> devid )
<cls> <noptr> e tek resume ( <ptr> dev )
<cls> <noptr> video buf vm open ( <ptr> vma )
<cls> <noptr> mce usb flash led ( <ptr> ir )
<cls> <noptr> m eye vm close ( <ptr> vma )
<cls> <noptr> saa buffer next ( <ptr> dev <dot> <ptr> q <dot> <noptr> vb i )
<cls> <noptr> media interface init ( <ptr> m dev <dot> <ptr> int f <dot> <noptr> g obj type <dot> <noptr> int f type <dot> <noptr> flags )
<cls> <noptr> any see front end ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> sa ago irq ts done ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> ap ( <noptr> map <dot> <noptr> frequency <dot> <ptr> prf b and )
<cls> <noptr> tuner g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> l irc mode isvalid access ( <noptr> off <dot> <noptr> size <dot> <noptr> type <dot> <ptr> prog <dot> <ptr> info )
<cls> <noptr> init r cmap k world pc u ( )
<cls> <noptr> prom ( <ptr> gsp ca dev )
<cls> <noptr> saa api set user control ( <ptr> port <dot> <noptr> ctl )
<cls> <noptr> ctrl channel get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> m c wait ready ( <ptr> dev )
<cls> <noptr> isp save context ( <ptr> isp <dot> <ptr> reg list )
<cls> <noptr> sh write reg ( <ptr> state <dot> <noptr> addr <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> v dec start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> c i int fwrite cam control ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> c cdc restore context ( )
<cls> <noptr> ha upp auge hvr c init ( <ptr> dev )
<cls> <noptr> ov set auto gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> vp fec cdc get image window ( <ptr> c cdc <dot> <ptr> win )
<cls> <noptr> stb set frequency ( <ptr> fe <dot> <noptr> frequency )
<cls> <noptr> zero ( <ptr> isa )
<cls> <noptr> ir rxtx ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> count )
<cls> <noptr> c i int f slot reset ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> fim c cap enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> flite hw get interrupt source ( <ptr> dev )
<cls> <noptr> ttc i polls lot status ( <ptr> ca <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> isp parse of csi endpoint ( <ptr> dev <dot> <ptr> ve p <dot> <ptr> bus cfg )
<cls> <noptr> smi app read frame fmt ( <ptr> sensor )
<cls> <noptr> t dax get d v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> venus session ftb ( <ptr> inst <dot> <ptr> out frame )
<cls> <noptr> histo stop streaming ( <ptr> v q )
<cls> <noptr> mtp read ( <ptr> client <dot> <noptr> reg )
<cls> <noptr> l gs gl read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> usb vision init webcam ( <ptr> usb vision )
<cls> <noptr> coda ctrls setup ( <ptr> ctx )
<cls> <noptr> f mrt eax set pins ( <ptr> tea <dot> <noptr> pins )
<cls> <noptr> update read mode ( <ptr> sensor <dot> <noptr> v flip <dot> <noptr> h flip )
<cls> <noptr> b disp hw get and clear irq ( <ptr> b disp )
<cls> <noptr> ati remote irq in ( <ptr> urb )
<cls> <noptr> mtm get global gain ( <ptr> mtm )
<cls> <noptr> v fe halt request ( <ptr> v fe )
<cls> <noptr> z d demo d probe ( <ptr> pdev )
<cls> <noptr> user to ptr ( <ptr> c <dot> <ptr> ctrl <dot> <noptr> ptr )
<cls> <noptr> isc update awb ctrls ( <ptr> isc )
<cls> <noptr> buffer init ( <ptr> vb )
<cls> <noptr> adv inv register ( <ptr> sd )
<cls> <noptr> solo gpio chip get ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> bt write ( <ptr> decoder <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> c x get sda ( <ptr> data )
<cls> <noptr> px p stop streaming ( <ptr> q )
<cls> <noptr> upd s routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> c x start audio dma ( <ptr> chip )
<cls> <noptr> isp enable clocks ( <ptr> isp )
<cls> <noptr> au start transport ( <ptr> dev )
<cls> <noptr> sd get j comp ( <ptr> gsp ca dev <dot> <ptr> j comp )
<cls> <noptr> sd set stream parm ( <ptr> gsp ca dev <dot> <ptr> parm )
<cls> <noptr> m sps std ( <ptr> sd <dot> <noptr> id )
<cls> <noptr> tcs ctrl audio present ( <ptr> sd )
<cls> <noptr> bt tv resume ( <ptr> pci dev )
<cls> <noptr> z l write ( <ptr> state <dot> <noptr> reg <dot> <ptr> src <dot> <noptr> count )
<cls> <noptr> vsp video frame end ( <ptr> pipe <dot> <ptr> r wpf )
<cls> <noptr> cec validate phys addr ( <noptr> phys addr )
<cls> <noptr> saa api set encoder ( <ptr> port )
<cls> <noptr> om m and ( <ptr> state <dot> <noptr> sub cmd <dot> <noptr> param <dot> <noptr> param )
<cls> <noptr> em xx read reg ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> ovs power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> sa atv audio close ( <ptr> dev )
<cls> <noptr> tvp init ( <ptr> c )
<cls> <noptr> em xx dvb urb data copy ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> pt reset pci ( <ptr> pt )
<cls> <noptr> adb wr and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> clr mask <dot> <noptr> val mask )
<cls> <noptr> v l fw node parse link ( <ptr> fw node <dot> <ptr> link )
<cls> <noptr> preview print status ( <ptr> prev )
<cls> <noptr> alter aci stop feed ( <ptr> feed <dot> <noptr> num )
<cls> <noptr> fim c ish w update param global shot mode ( <ptr> is )
<cls> <noptr> ttc is lot ts enable ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> c xdr get front end t ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> g vs write ( <ptr> b tv <dot> <noptr> x addr <dot> <noptr> y addr <dot> <noptr> data )
<cls> <noptr> imx set register array ( <ptr> imx <dot> <ptr> settings <dot> <noptr> num settings )
<cls> <noptr> sp jpeg buf queue ( <ptr> vb )
<cls> <noptr> tc hdmi audio int handler ( <ptr> sd <dot> <ptr> handled )
<cls> <noptr> v ls ctrl ( <ptr> f h <dot> <ptr> hdl <dot> <ptr> control )
<cls> <ptr> check tune timeout ( )
<cls> <ptr> check node types ( )
<cls> <noptr> c x set front end hook ( <ptr> port <dot> <ptr> fe )
<cls> <noptr> v l async notifier register ( <ptr> v l dev <dot> <ptr> notifier )
<cls> <noptr> c x usb bluebird power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> ica v read ( <ptr> ic <dot> <noptr> reg )
<cls> <noptr> q mdc set params ( <ptr> fe )
<cls> <noptr> avc tuner set pids ( <ptr> fdt v <dot> <noptr> pid c <dot> <noptr> pid )
<cls> <noptr> afa f sleep ( <ptr> fe )
<cls> <noptr> dib pic func ( <ptr> adapter )
<cls> <noptr> adv get input type ( <noptr> input )
<cls> <noptr> c xxx set audio decoder input ( <ptr> dev <dot> <noptr> audio input )
<cls> <noptr> c xir g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> dvb generic open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> vivid sdr cap process ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> c x load fw ( <ptr> sd )
<cls> <noptr> t dax core init ( <ptr> sd )
<cls> <noptr> td a toggle output ( <ptr> fe <dot> <noptr> standby )
<cls> <noptr> adv read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> ene set reg mask ( <ptr> dev <dot> <noptr> reg <dot> <noptr> mask )
<cls> <noptr> dvb filter pest scb ( <ptr> priv <dot> <ptr> data )
<cls> <noptr> px a camera setup cic r ( <ptr> pc dev <dot> <noptr> flags <dot> <noptr> pix fmt )
<cls> <noptr> vivid radio poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> mtk mdp m m open ( <ptr> file )
<cls> <noptr> omap is pcs i phy acquire ( <ptr> phy <dot> <ptr> entity )
<cls> <noptr> d m gpio enable ( <ptr> dev <dot> <noptr> mask <dot> <noptr> as output )
<cls> <noptr> imx set pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <ptr> check dvb demux ts check ( )
<cls> <noptr> x vip dma buffer prepare ( <ptr> vb )
<cls> <noptr> em xx tuner callback ( <ptr> ptr <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> six radio fops poll ( <ptr> file <dot> <ptr> pts )
<cls> <noptr> t daa get r x sub c hans ( <ptr> chip )
<cls> <noptr> cod as fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> cobalt sub devs init ( <ptr> cobalt )
<cls> <noptr> t mic eeprom ( <ptr> dev )
<cls> <noptr> pt start streaming ( <ptr> adap )
<cls> <noptr> iv tv load and init modules ( <ptr> it v )
<cls> <noptr> cio vb start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> pwc dec init ( <ptr> pdev <dot> <ptr> cmd )
<cls> <noptr> sms usb load firmware ( <ptr> udev <dot> <noptr> id <dot> <noptr> boardid )
<cls> <noptr> v l ctrl poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> a fwrite of d m registers ( <ptr> d <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> len )
<cls> <ptr> check print histogram ( )
<cls> <noptr> vp dma add sync on channel ctd ( <ptr> list <dot> <noptr> chan )
<cls> <noptr> iv tv log status ( <ptr> file <dot> <ptr> f h )
<cls> <noptr> m xlt soft reset ( <ptr> state )
<cls> <noptr> saa api get encoder ( <ptr> port )
<cls> <noptr> mantis ic init ( <ptr> mantis )
<cls> <noptr> cio vb buf init ( <ptr> vb )
<cls> <noptr> sms dvb update tx params ( <ptr> client <dot> <ptr> p )
<cls> <noptr> sq do stream ( <ptr> work )
<cls> <noptr> scc am if get scaler config ( <ptr> vp <dot> <ptr> scaler )
<cls> <noptr> erase off ( <ptr> solo dev )
<cls> <noptr> dcm i dma callback ( <ptr> param )
<cls> <noptr> lg dta read reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> v l print selection ( <ptr> arg <dot> <noptr> write only )
<cls> <ptr> check reg debug ( )
<cls> <noptr> adv xx fill optional d v timings fields ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> mce usb defer kevent ( <ptr> ir <dot> <noptr> kevent )
<cls> <noptr> six radio driver init ( )
<cls> <noptr> get plane info ( <ptr> frm <dot> <noptr> addr <dot> <ptr> index <dot> <ptr> ret addr )
<cls> <noptr> ene enable wake ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> adv x hdmi d v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> uvc video stats dump ( <ptr> stream <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> pvr ctl read complete ( <ptr> urb )
<cls> <noptr> radio read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> reg wb ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <noptr> byte )
<cls> <noptr> u mt driver init ( )
<cls> <noptr> fetch valid x ( <ptr> gsp ca dev <dot> <ptr> tbl <dot> <noptr> len )
<cls> <noptr> v l async notifier parse fw node endpoints ( <ptr> dev <dot> <ptr> notifier <dot> <noptr> asd struct size <dot> <noptr> parse endpoint )
<cls> <noptr> oval ter regs ( <noptr> code <dot> <ptr> alt )
<cls> <noptr> ov get exposure ( <ptr> sensor )
<cls> <noptr> vb perform file io ( <ptr> q <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos <dot> <noptr> non block <dot> <noptr> read )
<cls> <ptr> check minimum pause ( )
<cls> <noptr> vivid videog tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <ptr> check msi ( )
<cls> <noptr> ovs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> v few m set ping addr ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> addr )
<cls> <noptr> m spir interrupt ( <noptr> data )
<cls> <noptr> v lic sub dev set name ( <ptr> sd <dot> <ptr> client <dot> <ptr> dev name <dot> <ptr> postfix )
<cls> <noptr> solo enc s std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std )
<cls> <ptr> dib p attach ( <ptr> ops )
<cls> <ptr> mtm find data fmt ( <ptr> mtm <dot> <noptr> code )
<cls> <noptr> mt set voltage ( <ptr> fe <dot> <noptr> v )
<cls> <noptr> ov x set default gamma curve ( <ptr> ov x )
<cls> <noptr> mtv get selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> ptic xfer ( <ptr> adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> vps m px log status ( <ptr> sd )
<cls> <noptr> m tread reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> tea freq to v l freq ( <ptr> tea <dot> <noptr> freq )
<cls> <noptr> saa g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> ad set power ( <ptr> sub dev <dot> <noptr> on )
<cls> <noptr> a speed video set ctrl ( <ptr> ctrl )
<cls> <noptr> temp show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> str c driver init ( )
<cls> <noptr> stream zap suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> jp use th tbl ( <ptr> j pu )
<cls> <noptr> x vip graph parse one ( <ptr> x dev <dot> <ptr> fw node )
<cls> <noptr> skb af power off ( <ptr> state )
<cls> <noptr> ov check chip id ( <ptr> sensor )
<cls> <noptr> keep on fetching valid x ( <ptr> gsp ca dev <dot> <ptr> tbl <dot> <noptr> len <dot> <noptr> n )
<cls> <noptr> r tim r prepare ( <ptr> priv )
<cls> <noptr> ter rate cg signal ( <ptr> isa )
<cls> <noptr> gl front end attach ( <ptr> adap )
<cls> <noptr> vp dma add cfd adb ( <ptr> list <dot> <noptr> client <dot> <ptr> adb )
<cls> <noptr> vo pjpeg offset ( <ptr> vh )
<cls> <noptr> delta query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> histo set compose ( <ptr> sub dev <dot> <ptr> config <dot> <ptr> sel )
<cls> <noptr> ce u irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> v pfe start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> uvc has privileges ( <ptr> handle )
<cls> <noptr> c x dt nr dmd dvb t mon packet error number ( <ptr> tn r dmd <dot> <ptr> pen )
<cls> <noptr> mtv addr space select ( <ptr> c <dot> <noptr> addr space )
<cls> <noptr> ctrl sig quality ( <ptr> demo d <dot> <noptr> lock status )
<cls> <noptr> c pia set format ( <ptr> cam )
<cls> <noptr> m driver init ( )
<cls> <noptr> digit val pst ded reset ( <ptr> bt )
<cls> <noptr> d wear d aic transfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> read byte ( <ptr> stream )
<cls> <noptr> x c get analog snr ( <ptr> priv <dot> <ptr> snr )
<cls> <noptr> mantis ca read attr mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> m m ols start capture ( <ptr> info )
<cls> <noptr> cpi ag jpeg comp ( <ptr> file <dot> <ptr> f h <dot> <ptr> parms )
<cls> <noptr> v fe buf add pending ( <ptr> output <dot> <ptr> buffer )
<cls> <noptr> mcc ic register ( <ptr> cam )
<cls> <noptr> au read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> ctrl channel prog set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> buffer activate ( <ptr> dev <dot> <ptr> buf <dot> <ptr> next )
<cls> <noptr> chip read ( <ptr> chip <dot> <noptr> sub addr )
<cls> <noptr> v l stub decoder cmd ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> s rst ( <ptr> state )
<cls> <noptr> v l clk lock driver ( <ptr> clk )
<cls> <noptr> bt tv risc overlay ( <ptr> b tv <dot> <ptr> risc <dot> <ptr> fmt <dot> <ptr> ov <dot> <noptr> skip even <dot> <noptr> skip odd )
<cls> <noptr> me so nao cec set log addr ( <ptr> adap <dot> <noptr> logical addr )
<cls> <noptr> v few m set frame drop pattern ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> pattern )
<cls> <noptr> sp mfc reset ( <ptr> dev )
<cls> <noptr> wakeup data show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> c x dvi cox c callback ( <ptr> core <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> px pg fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> skb af initialize data ( <ptr> state )
<cls> <noptr> skb af hw set color f x ( <ptr> state <dot> <noptr> val )
<cls> <ptr> stv ddb attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> find earliest filled buffer ( <ptr> cam )
<cls> <noptr> r jn commit ( <ptr> client )
<cls> <noptr> gss register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> pwc g parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> parm )
<cls> <noptr> hdp vr probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> v pe irq ( <noptr> cookie )
<cls> <noptr> coda set gdi regs ( <ptr> ctx )
<cls> <ptr> check force sensor ( )
<cls> <noptr> stv ddb read uc blocks ( <ptr> fe )
<cls> <noptr> b disp hw build node ( <ptr> ctx <dot> <ptr> cfg <dot> <ptr> node <dot> <noptr> t plan <dot> <noptr> src xoffset )
<cls> <noptr> mtk vcodec enc set default params ( <ptr> ctx )
<cls> <noptr> ska aic write ( <ptr> client <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> siri r probe ( <ptr> dev )
<cls> <noptr> c x api cmd ( <ptr> dev <dot> <noptr> command <dot> <noptr> input cnt <dot> <noptr> output cnt )
<cls> <noptr> c x enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> m xlt get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> c x der sleep t cto shutdown ( <ptr> priv )
<cls> <noptr> smi app update mbus formats ( <ptr> sensor )
<cls> <noptr> cobalt r x bytes ( <ptr> regs <dot> <ptr> adap <dot> <noptr> start <dot> <noptr> stop <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> g sch w set rotation ( <ptr> ctx )
<cls> <noptr> m cam ctl r irq disable ( <ptr> cam )
<cls> <noptr> get version information ( <ptr> gsp ca dev )
<cls> <noptr> v l dbg g chip info ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> venus helper getop b size ( <ptr> inst )
<cls> <noptr> saas std ( <ptr> port <dot> <noptr> id )
<cls> <noptr> adb have r x sense ( <ptr> sd )
<cls> <noptr> isc pipeline init ( <ptr> isc )
<cls> <ptr> check enc yuv buf size ( )
<cls> <ptr> vim c deb pix map by code ( <noptr> code )
<cls> <noptr> set lum ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> ati remote input open ( <ptr> input dev )
<cls> <noptr> em xx write reg bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> bit mask )
<cls> <noptr> az identify state ( <ptr> d <dot> <dptr> name )
<cls> <noptr> usb find address ( <ptr> ic adap <dot> <ptr> msg <dot> <noptr> retries <dot> <ptr> add )
<cls> <noptr> d dbl nb init f mode ( <ptr> dev <dot> <ptr> link <dot> <noptr> f m )
<cls> <noptr> sp mfc get m v count v ( <ptr> dev )
<cls> <noptr> rcs i probe ( <ptr> pdev )
<cls> <noptr> rep write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> saa x g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> td a read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> csi phy stream on ( <ptr> csi phy )
<cls> <noptr> mtm set gain ( <ptr> sensor <dot> <noptr> val )
<cls> <noptr> tt usb dec init dvb ( <ptr> dec )
<cls> <ptr> get link speed ( <noptr> stat )
<cls> <noptr> stv cab set der otf req ( <ptr> state <dot> <noptr> adc hz <dot> <noptr> der oth z )
<cls> <noptr> pvr h dw set streaming ( <ptr> h dw <dot> <noptr> enable flag )
<cls> <noptr> p set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> lme get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <noptr> venus core deinit ( <ptr> core )
<cls> <noptr> td a firmware upload ( <ptr> fe )
<cls> <noptr> v spl if write ( <ptr> lif <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> c x usb medi on query std ( <ptr> file <dot> <ptr> f h <dot> <ptr> norm )
<cls> <noptr> isc start dma ( <ptr> isc )
<cls> <noptr> em xx usb driver init ( )
<cls> <noptr> m cam read setup ( <ptr> cam )
<cls> <noptr> r ga buf return buffers ( <ptr> q <dot> <noptr> state )
<cls> <noptr> x vip enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> set ov sensor window ( <ptr> sd )
<cls> <noptr> m m ols open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> v l printed id ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> v l stubs e did ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> ska a presets data init ( <ptr> ska a )
<cls> <noptr> sms dvb send statistics request ( <ptr> client )
<cls> <noptr> pvr hd wget state ( <ptr> h dw )
<cls> <noptr> iv tv parse std ( <ptr> it v )
<cls> <noptr> isp suspend modules ( <ptr> isp )
<cls> <noptr> configure reg maps ( <ptr> state )
<cls> <noptr> tua get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> smi app pll update ( <ptr> sensor )
<cls> <noptr> dvb dvr poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> sd set gain ( <ptr> gsp ca dev )
<cls> <noptr> c xvid ioc try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> s rpc bulk write reg ( <ptr> sd <dot> <ptr> msg )
<cls> <noptr> ovs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> sun ics i try fmt ( <ptr> csi <dot> <ptr> pix )
<cls> <noptr> vi codec init ( )
<cls> <noptr> v pbe display g d v timings ( <ptr> file <dot> <ptr> priv <dot> <ptr> d v timings )
<cls> <noptr> scratch reset ( <ptr> usb vision )
<cls> <noptr> go load encoder ( <ptr> go )
<cls> <noptr> mrs front end attach ( <ptr> adap )
<cls> <ptr> check old quat tro ( )
<cls> <noptr> isp stat buf sync magic for cpu ( <ptr> stat <dot> <ptr> buf <dot> <noptr> buf size <dot> <noptr> dir )
<cls> <noptr> c xxx unmute audio ( <ptr> dev )
<cls> <noptr> vpx query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> or get tune settings ( <ptr> fe <dot> <ptr> fet une settings )
<cls> <noptr> match ic ( <ptr> sd <dot> <ptr> asd )
<cls> <noptr> c x irq disable all ( <ptr> dev )
<cls> <noptr> v l sub dev link validate default ( <ptr> sd <dot> <ptr> link <dot> <ptr> source fmt <dot> <ptr> sink fmt )
<cls> <noptr> dc mig input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> c pia usb stream start ( <ptr> cam <dot> <noptr> alternate )
<cls> <noptr> solo pmd mat ( <ptr> solo dev <dot> <noptr> wr <dot> <noptr> dma addr <dot> <noptr> ext addr <dot> <noptr> size <dot> <noptr> repeat <dot> <noptr> ext size )
<cls> <noptr> vbd mas g num users ( <ptr> buf priv )
<cls> <noptr> ce u vb prepare ( <ptr> vb )
<cls> <noptr> c x set tps ( <ptr> state <dot> <ptr> p )
<cls> <noptr> vpx fe send dis eq c msg ( <ptr> fe <dot> <ptr> m )
<cls> <noptr> os d set os d clut ( <ptr> sd <dot> <noptr> os dwin <dot> <noptr> clut )
<cls> <noptr> pkt session get property xx ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> ptype )
<cls> <noptr> px am bus config compatible ( <ptr> cfg <dot> <noptr> flags )
<cls> <noptr> do video ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> v pbe set os d display params ( <ptr> disp dev <dot> <ptr> layer )
<cls> <noptr> tt usb dec fed vbs set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> six radio g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <noptr> tea probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> buffer sin use ( <ptr> q )
<cls> <noptr> v dec if deinit ( <ptr> ctx )
<cls> <noptr> uvc v l put x u mapping ( <ptr> kp <dot> <ptr> up )
<cls> <noptr> d ibm c set output mode ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> v oph size ( <ptr> vh )
<cls> <noptr> init r cmap power color real angel ( )
<cls> <noptr> fin tek enable wake ( <ptr> fin tek )
<cls> <noptr> fmt x set region ( <ptr> f m dev <dot> <noptr> region )
<cls> <noptr> audio trigger ( <ptr> work )
<cls> <noptr> pkt session parse seq header ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> seq hdr <dot> <noptr> seq hdr len )
<cls> <noptr> d m stop feed ( <ptr> f )
<cls> <noptr> sp mfc run init dec buffers ( <ptr> ctx )
<cls> <noptr> c x usb medi ons frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> freq )
<cls> <noptr> exy nos jpeg offset ( <ptr> regs <dot> <noptr> xoffset <dot> <noptr> yoffset )
<cls> <noptr> si read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> ov try fmt internal ( <ptr> sd <dot> <ptr> fmt <dot> <noptr> fr <dot> <dptr> new mode )
<cls> <noptr> pcie bus link get lanes ( <ptr> cobalt )
<cls> <noptr> dvb get property ( <ptr> fe <dot> <ptr> file <dot> <ptr> t vps )
<cls> <noptr> vpx s stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> or init ( <ptr> fe )
<cls> <ptr> check no power off ( )
<cls> <noptr> stv cab set front end ( <ptr> fe )
<cls> <noptr> saa try get set fmt vb icap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> r card r ifs tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> vt )
<cls> <ptr> check no imr cal ( )
<cls> <noptr> v l radio minor number show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> b disp irq thread ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> delta probe ( <ptr> pdev )
<cls> <noptr> p xac vid io cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> ska a configure gpio s ( <ptr> ska a <dot> <ptr> p data )
<cls> <noptr> play iframe ( <ptr> av <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> non block )
<cls> <noptr> flex c opus bic request ( <ptr> ic <dot> <noptr> op <dot> <noptr> chip addr <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> solo subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> pvr v l dev init ( <ptr> dip <dot> <ptr> vp <dot> <noptr> v l type )
<cls> <noptr> stv get symbol rate ( <ptr> state )
<cls> <noptr> stv x write regs ( <ptr> stv x <dot> <noptr> start <dot> <noptr> data <dot> <noptr> len )
<cls> <noptr> snd c xxx capture trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> gsc runtime suspend ( <ptr> dev )
<cls> <noptr> v pen c compose one frame ( <ptr> inst <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> to v l codec type ( <noptr> codec )
<cls> <noptr> me son a oce cga dual div clk re calc rate ( <ptr> hw <dot> <noptr> parent rate )
<cls> <noptr> bcm clear reset ( <ptr> st )
<cls> <noptr> wait c i ready ( <ptr> c i )
<cls> <noptr> dib jump ram ( <ptr> udev <dot> <noptr> address )
<cls> <noptr> av fe set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> hdmi write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> imx set frame interval ( <ptr> priv <dot> <noptr> frame interval )
<cls> <noptr> g sch w set in image format ( <ptr> ctx )
<cls> <noptr> mcs get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> v pfe calculate offsets ( <ptr> v pfe )
<cls> <noptr> tx custom start ( <ptr> pin )
<cls> <noptr> is if get image window ( <ptr> win )
<cls> <noptr> hist enable ( <ptr> hist <dot> <noptr> enable )
<cls> <noptr> m tt set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> q am reset q am ( <ptr> state )
<cls> <noptr> smi app registered ( <ptr> sub dev )
<cls> <noptr> c x query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> flex cop pid group filter ( <ptr> fc <dot> <noptr> pid <dot> <noptr> mask )
<cls> <noptr> c x firmware init ( <ptr> c x )
<cls> <noptr> is presume modules ( <ptr> isp )
<cls> <noptr> at b m reg latch lock ( <ptr> priv <dot> <noptr> lock )
<cls> <noptr> can ( <ptr> state <dot> <noptr> rfb and <dot> <noptr> r fin <dot> <ptr> prf out <dot> <ptr> pb cal )
<cls> <ptr> omap isp video buffer next ( <ptr> video )
<cls> <noptr> ves read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> red rat led complete ( <ptr> urb )
<cls> <noptr> ov get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> v l print standard ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> clear operands ( <ptr> c <dot> <noptr> from <dot> <noptr> to )
<cls> <noptr> pos ctrl ( <ptr> ctrl )
<cls> <noptr> saa h set reg ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> sp cec probe ( <ptr> pdev )
<cls> <noptr> ska a set auto exposure ( <ptr> ska a <dot> <noptr> value )
<cls> <noptr> assen dep ( <ptr> bus adap <dot> <ptr> send buf <dot> <noptr> send buf len <dot> <noptr> swap )
<cls> <noptr> x vip graph parse ( <ptr> x dev )
<cls> <noptr> as submit urb stream ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> vivid try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> init r cmap encore en ltv f m ( )
<cls> <noptr> a speed video calc compressed size ( <ptr> video <dot> <noptr> frame size )
<cls> <noptr> dcm i query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> c i int f slot shutdown ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> ctrl set mute ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> cec pin adap monitor all enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> s pcs isset fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> td a set fec ( <ptr> state <dot> <ptr> fe params )
<cls> <noptr> imx write regs ( <ptr> imx <dot> <ptr> regs <dot> <noptr> len )
<cls> <noptr> saa x decode wss ( <ptr> p )
<cls> <noptr> skb af hw find min f iv ( <ptr> state )
<cls> <ptr> adv get p data ( <ptr> client )
<cls> <noptr> c x riscv b i buffer ( <ptr> pci <dot> <ptr> risc <dot> <ptr> sg list <dot> <noptr> top offset <dot> <noptr> bottom offset <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines )
<cls> <noptr> tc hdmi sys int handler ( <ptr> sd <dot> <ptr> handled )
<cls> <noptr> vivid cec pin adap events ( <ptr> adap <dot> <noptr> ts <dot> <ptr> msg <dot> <noptr> n acked )
<cls> <noptr> set read mode ( <ptr> sd )
<cls> <noptr> fim c pipeline close ( <ptr> ep )
<cls> <noptr> c x mute ( <ptr> c x )
<cls> <noptr> m i pid set power on ( <ptr> bridge )
<cls> <noptr> lg dta calculate snr x ( <ptr> state )
<cls> <noptr> load fw ( <ptr> state <dot> <ptr> cfg )
<cls> <noptr> img ir timing preprocess ( <ptr> range <dot> <noptr> unit )
<cls> <noptr> ov read smbus ( <ptr> sd <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> br x enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> lookup cb ( <noptr> frequency )
<cls> <noptr> uvc parse standard control ( <ptr> dev <dot> <ptr> buffer <dot> <noptr> buf len )
<cls> <noptr> iv tv u dma get page info ( <ptr> dma page <dot> <noptr> first <dot> <noptr> size )
<cls> <noptr> init r cmap win fast usb i i deluxe ( )
<cls> <noptr> dcm i open ( <ptr> file )
<cls> <noptr> sp mfc suspend ( <ptr> dev )
<cls> <noptr> atmel is i runtime resume ( <ptr> dev )
<cls> <noptr> uvc video encode header ( <ptr> stream <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> put v l input ( <ptr> p <dot> <ptr> p )
<cls> <noptr> solo motion toggle ( <ptr> solo enc <dot> <noptr> on )
<cls> <noptr> m rst get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> go function ality ( <ptr> adapter )
<cls> <noptr> uvc set video ctrl ( <ptr> stream <dot> <ptr> ctrl <dot> <noptr> probe )
<cls> <noptr> event task let ( <noptr> data )
<cls> <noptr> coda start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> adv std to v l ( <noptr> status )
<cls> <noptr> trust s stereo ( <ptr> isa <dot> <noptr> stereo )
<cls> <noptr> alsa device init ( <ptr> dev )
<cls> <noptr> g scm m suspend ( <ptr> gsc )
<cls> <noptr> go buf queue ( <ptr> vb )
<cls> <noptr> venus iface msg q read ( <ptr> h dev <dot> <ptr> pkt )
<cls> <noptr> mce usb dev recv ( <ptr> urb )
<cls> <noptr> v pfe read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> xt pg driver init ( )
<cls> <noptr> vid blk write byte ( <ptr> dev <dot> <noptr> saddr <dot> <noptr> data )
<cls> <noptr> get ctrl ( <ptr> ctrl <dot> <ptr> c )
<cls> <noptr> coda update menu ctrl ( <ptr> ctrl <dot> <noptr> value )
<cls> <noptr> v feb us disconnect wm from rdi ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> id )
<cls> <noptr> ics end bytes ( <ptr> ic adap <dot> <ptr> msg <dot> <noptr> joined r len )
<cls> <noptr> pt probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> v dec vp getparam ( <ptr> h v dec <dot> <noptr> type <dot> <ptr> out )
<cls> <noptr> vid io cvd ecs selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> s )
<cls> <noptr> m rst init ( <ptr> fe )
<cls> <noptr> scm o if set frame desc ( <ptr> sd <dot> <noptr> pad <dot> <ptr> fd )
<cls> <noptr> led brightness to intensity ( <ptr> ctrl <dot> <noptr> brightness )
<cls> <noptr> vb queue error ( <ptr> q )
<cls> <ptr> dst attach ( <ptr> state <dot> <ptr> dvb adapter )
<cls> <noptr> em xx fill audio input ( <ptr> dev <dot> <ptr> s <dot> <ptr> a <dot> <noptr> index )
<cls> <noptr> net up uni dvb dma setup ( <ptr> n dev )
<cls> <noptr> c x set invert ( <ptr> pin ctrl <dot> <ptr> v out ctrl <dot> <noptr> function <dot> <noptr> pin <dot> <noptr> invert )
<cls> <noptr> vb common vm open ( <ptr> vma )
<cls> <noptr> hack rfs ctrl tx ( <ptr> ctrl )
<cls> <noptr> adv xx seth pd ( <ptr> state <dot> <noptr> h pd )
<cls> <noptr> saa alsa irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> dib set bb ramp pwm ( <ptr> state <dot> <ptr> cfg )
<cls> <noptr> c x usb medi on register analog video ( <ptr> dvb dev )
<cls> <noptr> ctrl freq max get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> f m irq handle int msk cmd resp ( <ptr> f m dev )
<cls> <noptr> ccp enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> iv tv stop v l decode stream ( <ptr> s <dot> <noptr> flags <dot> <noptr> pts )
<cls> <noptr> m xls f demo d get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> c x usb medi on log status ( <ptr> file <dot> <ptr> f h )
<cls> <noptr> x vip enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> flex cop rcv data ctrl ( <ptr> fc <dot> <noptr> onoff )
<cls> <noptr> sp jpeg proc mode ( <ptr> regs <dot> <noptr> mode )
<cls> <noptr> dvb net ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> v l sub dev link validate get format ( <ptr> pad <dot> <ptr> fmt )
<cls> <noptr> td a write regs ( <ptr> fe <dot> <noptr> idx <dot> <noptr> len )
<cls> <ptr> to decoder ( <ptr> sd )
<cls> <noptr> simple dvb calc regs ( <ptr> fe <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> dtv probe ( <ptr> int f <dot> <ptr> id )
<cls> <ptr> check core debug ( )
<cls> <noptr> iv tvs input ( <ptr> file <dot> <ptr> f h <dot> <noptr> inp )
<cls> <noptr> p wcs fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ths g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> fin tek cr read ( <ptr> fin tek <dot> <noptr> reg )
<cls> <noptr> verify length ( <ptr> vb <dot> <ptr> b )
<cls> <noptr> az download firmware ( <ptr> d <dot> <ptr> fw )
<cls> <noptr> em x xir handle key ( <ptr> ir )
<cls> <noptr> c iner gy tfe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> bs write ( <ptr> s <dot> <noptr> bit )
<cls> <noptr> v vs ctrl ( <ptr> ctrl )
<cls> <noptr> snd tea x enum freq bands ( <ptr> tea <dot> <ptr> b and )
<cls> <noptr> m cam ctl r image ( <ptr> cam )
<cls> <noptr> t sin find offset ( <ptr> buf <dot> <noptr> len )
<cls> <noptr> c x usb medi ons fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> snd usb tv pcm open ( <ptr> sub stream )
<cls> <noptr> c iner gy t front end attach ( <ptr> adap )
<cls> <ptr> check f mode sat ( )
<cls> <noptr> sa ago write interrupt ( <ptr> go <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> mcs get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> av fed i seq c send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> ir timer keyup ( <ptr> t )
<cls> <noptr> mtk mdp mms fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sd start depth ( <ptr> gsp ca dev )
<cls> <noptr> demo d attach stv ( <ptr> input <dot> <noptr> type <dot> <noptr> ts fast )
<cls> <noptr> stv get ber ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> tango ir probe ( <ptr> pdev )
<cls> <noptr> h vag parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> sp )
<cls> <noptr> dvb dmx dev filter set ( <ptr> dmx dev <dot> <ptr> dmx dev filter <dot> <ptr> params )
<cls> <noptr> dcm i pipelines fmt ( <ptr> dcm i <dot> <ptr> pad cfg <dot> <ptr> format )
<cls> <noptr> m rst get r f strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> max set osc ( <ptr> priv <dot> <noptr> osc )
<cls> <noptr> stk read ( <ptr> fp <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> f pos )
<cls> <noptr> tuner attach stv ( <ptr> input <dot> <noptr> type )
<cls> <ptr> tua attach ( <ptr> fe <dot> <noptr> addr <dot> <ptr> ic )
<cls> <noptr> r vin group notify complete ( <ptr> notifier )
<cls> <noptr> c x d init ( <ptr> fe )
<cls> <noptr> stk configure mtm ( <ptr> gsp ca dev )
<cls> <ptr> ctx get frame ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> a fts bus ctrl ( <ptr> fe <dot> <noptr> acquire )
<cls> <noptr> ska a new config sync ( <ptr> client <dot> <noptr> timeout <dot> <noptr> cid )
<cls> <noptr> sti h cec p drv init ( )
<cls> <ptr> uvc event find ctrl ( <ptr> dev <dot> <ptr> status <dot> <dptr> chain )
<cls> <ptr> check ccs out mode ( )
<cls> <noptr> add read queue ( <noptr> flag <dot> <noptr> val )
<cls> <noptr> ir raw event store ( <ptr> dev <dot> <ptr> ev )
<cls> <noptr> s pcs iss power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> solo os d print ( <ptr> solo enc )
<cls> <noptr> r vind v timings cap ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> cap )
<cls> <ptr> header str ( <ptr> header <dot> <ptr> str <dot> <noptr> len )
<cls> <noptr> sp mfc bus reset ( <ptr> dev )
<cls> <noptr> h fi session prop info ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <ptr> check display type ( )
<cls> <noptr> usb keen e driver init ( )
<cls> <noptr> c i of bpt entry init dummy ( <ptr> cio <dot> <noptr> entry )
<cls> <noptr> c sit x d phy init finish ( <ptr> c sit x <dot> <noptr> reg )
<cls> <noptr> t wh put stream header ( <dptr> buf <dot> <ptr> space left <dot> <noptr> q p <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> vps m px s std ( <ptr> sd <dot> <noptr> norm )
<cls> <noptr> set opc r ( <ptr> opc r <dot> <noptr> value <dot> <noptr> mask <dot> <noptr> shift )
<cls> <noptr> px a camera check frame ( <noptr> width <dot> <noptr> height )
<cls> <noptr> v pbe set default mode ( <ptr> v pbe dev )
<cls> <noptr> vb i open ( <ptr> dev <dot> <ptr> file )
<cls> <noptr> uvc video copy data work ( <ptr> work )
<cls> <noptr> f m r x get rssi threshold ( <ptr> f m dev <dot> <ptr> curr rssi lvl )
<cls> <noptr> shi c gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> ad update hw ( <ptr> coil )
<cls> <noptr> ttc i msg ( <ptr> d <dot> <noptr> cmd <dot> <ptr> data <dot> <noptr> write len <dot> <noptr> read len )
<cls> <noptr> me so nao cec write ( <ptr> ao cec <dot> <noptr> address <dot> <noptr> data <dot> <ptr> res )
<cls> <noptr> a speed video resolution work ( <ptr> work )
<cls> <noptr> p xac vid io cs register ( <ptr> file <dot> <ptr> priv <dot> <ptr> reg )
<cls> <noptr> os d modify ( <ptr> sd <dot> <noptr> mask <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> pvr h dw worker poll ( <ptr> work )
<cls> <ptr> cio find format ( <ptr> pixel format <dot> <ptr> mbus code )
<cls> <noptr> d ibm read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> dvb net set multicast list ( <ptr> dev )
<cls> <noptr> tm set vb i ( <ptr> dev )
<cls> <noptr> scm open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> a lib ration ( <ptr> state <dot> <ptr> noise cal )
<cls> <noptr> cam ss probe ( <ptr> pdev )
<cls> <noptr> v v start ( <ptr> sd )
<cls> <noptr> ovf x configure ( <ptr> sd )
<cls> <noptr> ec ctrl msg ( <ptr> d <dot> <ptr> req )
<cls> <noptr> iv tv buf copy from user ( <ptr> s <dot> <ptr> buf <dot> <ptr> src <dot> <noptr> copy bytes )
<cls> <noptr> stv cab fsm status ( <ptr> state )
<cls> <noptr> poin it controls ( <ptr> sd )
<cls> <noptr> tw video input fini ( <ptr> dev )
<cls> <noptr> reg map show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> ts write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> budget register ( <ptr> budget )
<cls> <noptr> ctx open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> bt tv gpio write ( <ptr> core <dot> <noptr> value )
<cls> <noptr> av fe set front end ( <ptr> fe )
<cls> <noptr> i x v write ( <ptr> state <dot> <noptr> buf <dot> <noptr> count )
<cls> <noptr> pvr dvb adapter init ( <ptr> adap )
<cls> <noptr> v f ereg clr ( <ptr> v fe <dot> <noptr> reg <dot> <noptr> clr bits )
<cls> <noptr> sec oce c adap transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> saa api set audio std ( <ptr> port )
<cls> <noptr> mul div ( <noptr> a <dot> <noptr> b <dot> <noptr> c )
<cls> <noptr> go snd capture close ( <ptr> sub stream )
<cls> <noptr> coda slice mode ( <ptr> ctx )
<cls> <noptr> si upload firmware block ( <ptr> state <dot> <ptr> data <dot> <noptr> len <dot> <ptr> p offset <dot> <noptr> block count )
<cls> <noptr> td a dump std map ( <ptr> fe )
<cls> <noptr> uvc video encode bulk ( <ptr> uv curb <dot> <ptr> buf <dot> <ptr> meta buf )
<cls> <noptr> c x query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> vcap )
<cls> <noptr> write data ( <ptr> ca <dot> <noptr> slot <dot> <ptr> e buf <dot> <noptr> e count )
<cls> <noptr> mta ver init ( <ptr> fe )
<cls> <noptr> cpi avl read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> off )
<cls> <noptr> air spy cleanup queued buf s ( <ptr> s )
<cls> <noptr> pct ve ic func ( <ptr> adapter )
<cls> <noptr> match custom ( <ptr> sd <dot> <ptr> asd )
<cls> <noptr> gem tek probe ( <ptr> isa <dot> <noptr> io )
<cls> <noptr> pwm ir probe ( <ptr> pdev )
<cls> <noptr> q mdc sleep ( <ptr> fe )
<cls> <noptr> av set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> vim c probe ( <ptr> pdev )
<cls> <noptr> rt sleep ( <ptr> fe )
<cls> <noptr> ov write array ( <ptr> client <dot> <ptr> regs )
<cls> <noptr> v l flash open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> c cdc apply controls ( <ptr> c cdc )
<cls> <noptr> vivid vb i caps ctrl ( <ptr> ctrl )
<cls> <noptr> solo handler ing ( <ptr> solo dev )
<cls> <noptr> gpio update ( <ptr> c x <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> ccp isr buffer ( <ptr> ccp )
<cls> <noptr> f m r probe ( <ptr> f m r <dot> <ptr> pdev <dot> <noptr> io )
<cls> <noptr> c iner gy tfe init ( <ptr> fe )
<cls> <noptr> bt tv g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vsp video pipeline run ( <ptr> pipe )
<cls> <noptr> avd i seq c send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> h vah get stream size ( <ptr> task )
<cls> <noptr> ske cg xic write ( <ptr> client <dot> <noptr> addr <dot> <noptr> val )
<cls> <ptr> check enc vb i buf s ( )
<cls> <noptr> pvr setup attach ( <ptr> pvr )
<cls> <noptr> get next header ( <ptr> ctx <dot> <dptr> pp <dot> <noptr> sz )
<cls> <noptr> valid pixel format ( <noptr> pixel format )
<cls> <noptr> l gs gl init ( <ptr> fe )
<cls> <noptr> g scm m req buf s ( <ptr> file <dot> <ptr> f h <dot> <ptr> req buf s )
<cls> <noptr> msp set aud mode ( <ptr> client )
<cls> <ptr> fc attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> config )
<cls> <noptr> omap isp ccp isr ( <ptr> ccp )
<cls> <noptr> mantis ca init ( <ptr> mantis )
<cls> <noptr> vp if async bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> video get sub dev format ( <ptr> video <dot> <ptr> format )
<cls> <noptr> skb af hw set stream ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> f m v l vid io cs mod ulator ( <ptr> file <dot> <ptr> priv <dot> <ptr> mod )
<cls> <noptr> r ga cmd set dst addr ( <ptr> ctx <dot> <ptr> mmu pages )
<cls> <noptr> imx get pad format ( <ptr> imx <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pwc spar m ( <ptr> file <dot> <ptr> f h <dot> <ptr> parm )
<cls> <noptr> sh read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> fim c activate capture ( <ptr> ctx )
<cls> <noptr> r vin get active field ( <ptr> vin <dot> <noptr> v nms )
<cls> <noptr> fdt v read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> video dev init ( )
<cls> <noptr> t dax decode fec ( <noptr> td afe c )
<cls> <noptr> ir raw get allowed protocols ( )
<cls> <noptr> stv x stop mod cod ( <ptr> state )
<cls> <noptr> mtk mdp register mmdevice ( <ptr> mdp )
<cls> <noptr> stv ter algo ( <ptr> fe )
<cls> <ptr> delta find decoder ( <ptr> ctx <dot> <noptr> stream format <dot> <noptr> pixel format )
<cls> <noptr> validate vs i array indexes ( <ptr> inst <dot> <ptr> vs i )
<cls> <noptr> ce u enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> f m r init ( )
<cls> <noptr> init r cmap lead tek y g ( )
<cls> <noptr> adb s routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> iv tv default ( <ptr> file <dot> <ptr> f h <dot> <noptr> valid prio <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> job remove src buf ( <ptr> ctx <dot> <noptr> state )
<cls> <noptr> stv get carr freq ( <ptr> int p <dot> <noptr> m clk <dot> <noptr> demo d )
<cls> <noptr> sms core init device ( <ptr> core dev <dot> <noptr> mode )
<cls> <ptr> fim c isp find format ( <ptr> pixel format <dot> <ptr> mbus code <dot> <noptr> index )
<cls> <noptr> c cdc unsubscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> radio sip driver init ( )
<cls> <noptr> sc mic driver init ( )
<cls> <noptr> sir interrupt ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> dvb pll calc regs ( <ptr> fe <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> tm init extension ( <ptr> dev )
<cls> <noptr> sun ics i probe ( <ptr> pdev )
<cls> <noptr> afr regs ( <ptr> client <dot> <noptr> cmd <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len <dot> <noptr> lock )
<cls> <noptr> flex cop reset ( <ptr> fc )
<cls> <noptr> coda h filler nal ( <noptr> size <dot> <ptr> p )
<cls> <noptr> air spy driver init ( )
<cls> <noptr> mtk mdp m menu m fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> pluto stop feed ( <ptr> f )
<cls> <noptr> ves x write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> pvr dvb bus ctrl ( <ptr> fe <dot> <noptr> acquire )
<cls> <noptr> c x irq ts ( <ptr> port <dot> <noptr> status )
<cls> <noptr> fc init ( <ptr> fe )
<cls> <noptr> t dax identify module ( <ptr> state )
<cls> <noptr> c x d probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> cobalt enum d v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> iv tv g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> ska a set power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> snd c x hw params ( <ptr> sub stream <dot> <ptr> hw params )
<cls> <noptr> g scm m open ( <ptr> file )
<cls> <ptr> pwc sensor type tostring ( <noptr> sensor type )
<cls> <noptr> net up read c i status ( <ptr> work )
<cls> <noptr> vim c sens stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> m lvs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> ctrl set input ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> register write ( <ptr> core <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> v pe buf prepare ( <ptr> vb )
<cls> <noptr> vp ifs d v timings ( <ptr> file <dot> <ptr> priv <dot> <ptr> timings )
<cls> <noptr> usb vision empty frame queues ( <ptr> usb vision )
<cls> <noptr> t dax delayed work enable h pd ( <ptr> work )
<cls> <noptr> e did verify header ( <ptr> sd <dot> <noptr> segment )
<cls> <noptr> store wakeup protocols ( <ptr> device <dot> <ptr> m attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> c cdc config sync if ( <ptr> c cdc <dot> <ptr> par cfg <dot> <noptr> data size )
<cls> <noptr> td awr reg mask ( <ptr> dev <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> m clk prepare ( <ptr> hw )
<cls> <noptr> vsp video try format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <ptr> isl attach ( <ptr> fe <dot> <ptr> ic <dot> <noptr> ic addr <dot> <noptr> override set <dot> <noptr> override clear )
<cls> <noptr> go parse video stream ( <ptr> go <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> h va probe ( <ptr> pdev )
<cls> <noptr> rc sip htw write array ( <ptr> priv <dot> <ptr> values )
<cls> <noptr> x tuned v bt demo d setting ( <ptr> tn r dmd <dot> <noptr> bandwidth <dot> <noptr> clk mode )
<cls> <noptr> radio open ( <ptr> file )
<cls> <noptr> user to new ( <ptr> c <dot> <ptr> ctrl )
<cls> <noptr> signal det ( <ptr> state <dot> <noptr> s mrt <dot> <ptr> sig )
<cls> <noptr> stk m front end attach ( <ptr> adap )
<cls> <ptr> check atv input ( )
<cls> <noptr> max read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> p data )
<cls> <noptr> via cam g parm ( <ptr> filp <dot> <ptr> priv <dot> <ptr> parm )
<cls> <noptr> solo start thread ( <ptr> solo dev )
<cls> <noptr> tvp x write regs ( <ptr> sd <dot> <noptr> reg list )
<cls> <noptr> ctrl channel freq set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> fim c is enable clocks ( <ptr> is )
<cls> <noptr> vsp histogram buffer complete ( <ptr> histo <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> vb buffer in use ( <ptr> q <dot> <ptr> vb )
<cls> <ptr> check iv tv yuv mode ( )
<cls> <noptr> ss video routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> bcm do hab cmd ( <ptr> st <dot> <noptr> cmd <dot> <noptr> msgid <dot> <ptr> o buf <dot> <noptr> o len <dot> <ptr> i buf <dot> <noptr> ilen )
<cls> <noptr> stb wait dis eq crx idle ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> ov x set power ( <ptr> ov x <dot> <noptr> on )
<cls> <noptr> event session error ( <ptr> core <dot> <ptr> inst <dot> <ptr> pkt )
<cls> <noptr> mtm set test pattern ( <ptr> mtm <dot> <noptr> val )
<cls> <noptr> init r cmap video mate k ( )
<cls> <noptr> adv cp log status ( <ptr> sd )
<cls> <noptr> isp videog fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ths probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> r vin stop streaming ( <ptr> v q )
<cls> <noptr> m m ols set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> sp mfc poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> wcf icr ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> ctrl set image effect ( <ptr> is <dot> <noptr> value )
<cls> <noptr> solo update mode ( <ptr> solo enc )
<cls> <noptr> sp jpeg clear int ( <ptr> regs )
<cls> <noptr> tm set mute adc ( <ptr> dev <dot> <noptr> mute )
<cls> <noptr> v pfe init ( <ptr> fe )
<cls> <noptr> b disp ctx state lock set ( <noptr> state <dot> <ptr> ctx )
<cls> <noptr> adb e did rd ( <ptr> sd <dot> <noptr> len <dot> <ptr> buf )
<cls> <noptr> tw g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std )
<cls> <noptr> ov v flip disable ( <ptr> sensor )
<cls> <noptr> command set colour params ( <ptr> gsp ca dev )
<cls> <noptr> v l ctrl notify ( <ptr> ctrl <dot> <noptr> notify <dot> <ptr> priv )
<cls> <noptr> d ibm bread signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> dvb demux feed del ( <ptr> feed )
<cls> <noptr> igor plug usb timer ( <ptr> t )
<cls> <noptr> f m irq handle set pi mask resp ( <ptr> f m dev )
<cls> <noptr> skb af gpio assert ( <ptr> state <dot> <noptr> id )
<cls> <noptr> ts driver init ( )
<cls> <noptr> af reg map write ( <ptr> context <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> ov init gpio ( <ptr> client <dot> <ptr> info )
<cls> <noptr> is if set pixel format ( <noptr> pix fmt )
<cls> <noptr> any see c i read cam control ( <ptr> c i <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> tp g log status ( <ptr> tp g )
<cls> <noptr> sa aic msg cleanup ( <ptr> m <dot> <noptr> num <dot> <ptr> op )
<cls> <noptr> sn div tv pcm capture open ( <ptr> sub stream )
<cls> <noptr> adv x sub dev init ( <ptr> sd <dot> <ptr> state <dot> <ptr> ops <dot> <noptr> function <dot> <ptr> ident )
<cls> <ptr> check threshold ( )
<cls> <noptr> stv ter set ts mode ( <ptr> state <dot> <noptr> path ts )
<cls> <noptr> sp jpeg open ( <ptr> file )
<cls> <noptr> uvc ctrl set rel speed ( <ptr> mapping <dot> <noptr> value <dot> <ptr> data )
<cls> <noptr> pcm open ( <ptr> file )
<cls> <noptr> t dax cec write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> c x try encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> enc )
<cls> <noptr> dvb t ctrl set echo threshold ( <ptr> state <dot> <ptr> echo thres )
<cls> <noptr> cxa vs audio routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> omap v out vr fbd mat x callback ( <ptr> data )
<cls> <ptr> checks vhs ( )
<cls> <noptr> sh vous selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> k ss std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> process interlaced mode ( <noptr> fid <dot> <ptr> common )
<cls> <noptr> h vas parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> sp )
<cls> <noptr> fin tek driver init ( )
<cls> <noptr> adv s stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> read eeprom bytes ( <ptr> mantis <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> length )
<cls> <noptr> flite irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> get frame type flag ( <ptr> vb <dot> <noptr> format )
<cls> <noptr> icr ( <ptr> gsp ca dev <dot> <noptr> reg )
<cls> <noptr> rite ( <ptr> b tv <dot> <noptr> addr <dot> <noptr> b <dot> <noptr> b <dot> <noptr> both )
<cls> <noptr> c xs audio mode ( <ptr> c x hdl <dot> <noptr> val )
<cls> <noptr> v len able media source ( <ptr> v dev )
<cls> <noptr> tvp xs frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> t ct set layers ( <ptr> fe )
<cls> <noptr> d wic write ( <ptr> client <dot> <noptr> data )
<cls> <noptr> dr xbs pic write read ( <ptr> w dev addr <dot> <noptr> w count <dot> <ptr> w data <dot> <ptr> r dev addr <dot> <noptr> r count <dot> <ptr> r data )
<cls> <noptr> enc pre seq start ( <ptr> ctx )
<cls> <noptr> isp attach io mmu ( <ptr> isp )
<cls> <ptr> mtk v dec get q data ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> imx get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> skb a fwrite arr seq ( <ptr> state <dot> <noptr> addr <dot> <noptr> count <dot> <ptr> seq )
<cls> <noptr> adv s clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> go usb stream start ( <ptr> go )
<cls> <noptr> bs write ue ( <ptr> s <dot> <noptr> val )
<cls> <noptr> free b tres lock ( <ptr> b tv <dot> <ptr> f h <dot> <noptr> bits )
<cls> <noptr> iv tv vb i setup ( <ptr> it v )
<cls> <noptr> stv stop ts ( <ptr> fe <dot> <noptr> stop ts )
<cls> <noptr> mds probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> stk serial wait ready ( <ptr> gsp ca dev )
<cls> <noptr> mantis dma stop ( <ptr> mantis )
<cls> <noptr> e tek open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> m i pid configure from code ( <ptr> bridge )
<cls> <noptr> ov x configure gpio s ( <ptr> ov x )
<cls> <ptr> check length fuzz ( )
<cls> <noptr> j pure set ( <ptr> j pu )
<cls> <noptr> stv handle error ( <ptr> gsp ca dev <dot> <noptr> ret )
<cls> <noptr> pulse cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> solo ring start ( <ptr> solo dev )
<cls> <noptr> video i cg input ( <ptr> file <dot> <ptr> f h <dot> <ptr> inp )
<cls> <noptr> dib x set param override ( <ptr> fe )
<cls> <noptr> uvc ioctl stream on ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> noon open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> c x alsa load ( <ptr> c x )
<cls> <noptr> vid ioc ven cs fmt out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ad power on ( <ptr> coil <dot> <noptr> restore )
<cls> <noptr> iv tv set speed ( <ptr> it v <dot> <noptr> speed )
<cls> <noptr> ctrl get q am sig quality ( <ptr> demo d )
<cls> <noptr> uvc ioctl q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> isc enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> resizer configure ( <ptr> res )
<cls> <noptr> adv fill optional d v timings fields ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> sub dev open ( <ptr> file )
<cls> <noptr> c x read ( <ptr> s <dot> <ptr> u buf <dot> <noptr> tot count <dot> <noptr> non block )
<cls> <noptr> isp video stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> send bytes ( <ptr> dev <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> clear work bit ( <ptr> ctx )
<cls> <ptr> ds attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> venus read l ( <ptr> h dev <dot> <noptr> reg )
<cls> <noptr> sony log ( <noptr> x )
<cls> <noptr> venus shutdown ( <ptr> core )
<cls> <noptr> adv s power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> m xbs ctrl ( <ptr> ctrl )
<cls> <noptr> flash copyto ( <ptr> map <dot> <noptr> to <dot> <ptr> from <dot> <noptr> len )
<cls> <noptr> c x v l dev notify ( <ptr> sd <dot> <noptr> notification <dot> <ptr> arg )
<cls> <noptr> ov exposure set ( <ptr> sensor <dot> <noptr> auto exp )
<cls> <noptr> f xfer ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> n gene unlink ( <ptr> dev )
<cls> <noptr> mtk vcodec dec ctrls setup ( <ptr> ctx )
<cls> <noptr> az rc query ( <ptr> d )
<cls> <noptr> stv set tuner auto ( <ptr> int p <dot> <noptr> frequency <dot> <noptr> bandwidth <dot> <noptr> demo d )
<cls> <noptr> r gap drv init ( )
<cls> <noptr> ene probe ( <ptr> pnp dev <dot> <ptr> id )
<cls> <noptr> m tms stream ( <ptr> sub dev <dot> <noptr> streaming )
<cls> <noptr> dib set channel status ( <ptr> fe <dot> <ptr> channel status )
<cls> <noptr> as x cmd get context ( <ptr> adap <dot> <noptr> tag <dot> <ptr> p value )
<cls> <noptr> usb vision measure bandwidth ( <ptr> usb vision )
<cls> <noptr> m xls f init port expander ( <ptr> state )
<cls> <ptr> pto sn div tv card ( <dptr> v l dev )
<cls> <noptr> jlj read ( <ptr> gsp ca dev <dot> <ptr> response )
<cls> <noptr> delta decoder stop cmd ( <ptr> ctx <dot> <ptr> f h )
<cls> <noptr> sun i video set fmt ( <ptr> video <dot> <ptr> f )
<cls> <noptr> imx clamp coarse time ( <ptr> priv <dot> <ptr> val <dot> <ptr> frame length )
<cls> <noptr> v l poll ( <ptr> filp <dot> <ptr> poll )
<cls> <noptr> video mux driver init ( )
<cls> <noptr> t dax get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> attach x c ( <noptr> addr <dot> <ptr> dev )
<cls> <noptr> ov power off ( <ptr> sensor )
<cls> <noptr> uvc video decode start ( <ptr> stream <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> mce command out ( <ptr> ir <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> me son a oce cga setup clk ( <ptr> ao cec )
<cls> <noptr> vp set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> x c tuner reset ( <ptr> fe )
<cls> <noptr> get fmt code ( <noptr> code )
<cls> <noptr> saas register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> sa aic poll ( <ptr> s )
<cls> <noptr> adb setup ( <ptr> sd )
<cls> <noptr> uif configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> h fis y spc prepared one ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> vid ioc ven css election ( <ptr> file <dot> <ptr> priv <dot> <ptr> s )
<cls> <noptr> si select ( <ptr> mux c <dot> <noptr> chan )
<cls> <noptr> histo get selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> tbs card init ( <ptr> dev )
<cls> <noptr> sr u set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> sms core registry set mode ( <ptr> dev path <dot> <noptr> mode )
<cls> <noptr> mds init ( <ptr> fe )
<cls> <noptr> stv xs rate srch coarse ( <ptr> state )
<cls> <noptr> adv ddr ram test ( <ptr> sd )
<cls> <noptr> ov dump registers ( <ptr> sd )
<cls> <noptr> c pia send command ( <ptr> cam <dot> <ptr> cmd )
<cls> <noptr> uvc debug fs init ( )
<cls> <noptr> irr x sett x carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> mtm set pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c x d attach ( <ptr> dev )
<cls> <noptr> dib mag c startup ( <ptr> demo d )
<cls> <noptr> smi app get limits ( <ptr> sensor <dot> <ptr> limit <dot> <noptr> n )
<cls> <noptr> au vb i buffer timeout ( <ptr> t )
<cls> <noptr> ctrl get crop cap bt ( <ptr> cptr <dot> <ptr> val )
<cls> <ptr> check ts auto disable ( )
<cls> <noptr> dvb pll set params ( <ptr> fe )
<cls> <noptr> scaleto size ( <ptr> dev <dot> <noptr> h scale <dot> <noptr> v scale <dot> <ptr> width <dot> <ptr> height )
<cls> <noptr> do submit urb ( <ptr> work )
<cls> <noptr> snd cobalt pcm trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> vid ioc g aud out ( <ptr> file <dot> <ptr> f h <dot> <ptr> v out )
<cls> <noptr> solo try fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> dib pread signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> adv sis clock freq ( <ptr> sd <dot> <noptr> freq )
<cls> <noptr> c cdc hsv sis r ( <ptr> c cdc )
<cls> <noptr> d m select c cdc source ( <noptr> src sel )
<cls> <noptr> sp mfc un configure port memory ( <ptr> mfc dev )
<cls> <ptr> uvc query name ( <noptr> query )
<cls> <noptr> img ir suspend timer ( <ptr> t )
<cls> <noptr> bt tvs fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> do ics can ( <ptr> name <dot> <ptr> c )
<cls> <noptr> px a camera driver init ( )
<cls> <noptr> isc try configure pipeline ( <ptr> isc )
<cls> <noptr> usb tv fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> init r cmap kai omy ( )
<cls> <noptr> set bright cont ( <ptr> gsp ca dev )
<cls> <noptr> it d set v co ( <ptr> state <dot> <noptr> freq khz )
<cls> <noptr> v fe isr halt ack ( <ptr> v fe )
<cls> <noptr> at b m read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> p data )
<cls> <noptr> solo enc v l init ( <ptr> solo dev <dot> <noptr> nr )
<cls> <noptr> saa x read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> uvc video start streaming ( <ptr> stream )
<cls> <noptr> v pbe display g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std id )
<cls> <noptr> lg x get tune settings ( <ptr> fe <dot> <ptr> fet une settings )
<cls> <noptr> tt usb ir urb complete ( <ptr> urb )
<cls> <noptr> af deselect ( <ptr> mux c <dot> <noptr> chan )
<cls> <noptr> v l enum input ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> sh ve u queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> tw stop streaming ( <ptr> q )
<cls> <noptr> msp xx g set sources ( <ptr> client )
<cls> <noptr> off ( )
<cls> <noptr> imx s stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> is px clk prepare ( <ptr> hw )
<cls> <noptr> lg x get sgn ( <ptr> state <dot> <ptr> sgn )
<cls> <noptr> fim c device run ( <ptr> priv )
<cls> <noptr> c x d integ check cancellation ( <ptr> tn r dmd )
<cls> <noptr> v fe set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> stk vid ioc q buf ( <ptr> filp <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> c x irt x write ( <ptr> sd <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> num )
<cls> <noptr> ov update bits ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> value )
<cls> <noptr> r jni c driver init ( )
<cls> <noptr> at b m init ( <ptr> fe )
<cls> <noptr> c x set sda ( <ptr> data <dot> <noptr> state )
<cls> <noptr> pvr sysfs teardown debug if c ( <ptr> sfp )
<cls> <noptr> venus clk s disable ( <ptr> core )
<cls> <noptr> vip irq ( <noptr> irq <dot> <ptr> vip )
<cls> <noptr> m m ols init controls ( <ptr> sd )
<cls> <noptr> scratch get header ( <ptr> usb vision <dot> <ptr> header )
<cls> <noptr> sec oce c irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> sa ahs ctrl ( <ptr> ctrl )
<cls> <noptr> vim c deb setrgb mbus fmt rgb x ( <ptr> v deb <dot> <noptr> lin <dot> <noptr> col <dot> <noptr> rgb )
<cls> <noptr> usb am radio driver init ( )
<cls> <ptr> check audio dev ( )
<cls> <noptr> venc enable digital output ( <ptr> sd <dot> <noptr> b enable )
<cls> <noptr> sun ics i setup bus ( <ptr> s dev )
<cls> <noptr> net u pic start xfer ( <ptr> ic )
<cls> <noptr> vld q buf ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> air spy buf queue ( <ptr> vb )
<cls> <noptr> fdt v cas end msg ( <ptr> fdt v <dot> <ptr> arg )
<cls> <noptr> venus helper load scale clocks ( <ptr> inst )
<cls> <noptr> msi query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> vp dma set max size ( <ptr> vp dma <dot> <noptr> reg addr <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> cxx handler setup ( <ptr> c x hdl )
<cls> <noptr> sp mfc set enc ref buffer v ( <ptr> ctx )
<cls> <noptr> pvr h dw cmd decoder reset ( <ptr> h dw )
<cls> <noptr> send cmd ( <ptr> gsp ca dev <dot> <noptr> cmd <dot> <ptr> cmd buf <dot> <noptr> cmd len <dot> <ptr> reply buf <dot> <noptr> reply len )
<cls> <noptr> em xx m tter rate c xs init ( <ptr> fe )
<cls> <noptr> mn x probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> isp video query buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> b )
<cls> <noptr> vi codec buf queue ( <ptr> vb )
<cls> <noptr> h va q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> mtm apply selection ( <ptr> sd )
<cls> <noptr> cxa vs ctrl ( <ptr> ctrl )
<cls> <noptr> med usa set saturation ( <ptr> dev <dot> <noptr> saturation <dot> <noptr> decoder )
<cls> <noptr> saas fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> venus get queue size ( <ptr> h dev <dot> <noptr> index )
<cls> <ptr> check default video input ( )
<cls> <noptr> sh vou schedule next ( <ptr> vou dev <dot> <ptr> v buf )
<cls> <noptr> starts pyc am ( <ptr> gsp ca dev )
<cls> <noptr> vs pdl body write ( <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> ctrl set a ew block ( <ptr> is <dot> <ptr> ctrl )
<cls> <noptr> scm set white balance ( <ptr> state <dot> <noptr> val )
<cls> <noptr> m mol ss power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> v pfe g fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> sms dvb module init ( )
<cls> <noptr> meta out buf queue ( <ptr> vb )
<cls> <noptr> c xxx reset video buffer ( <ptr> dev <dot> <ptr> dma q )
<cls> <noptr> c x usb medi on analog init ( <ptr> dvb dev )
<cls> <noptr> isset isp flash ( <ptr> is <dot> <noptr> cmd <dot> <noptr> red eye )
<cls> <noptr> get default error tolerance ( <ptr> h dw )
<cls> <noptr> img ir timings convert ( <ptr> regs <dot> <ptr> timings <dot> <noptr> tolerance <dot> <noptr> clock hz )
<cls> <noptr> fin tek cir log irq s ( <noptr> status )
<cls> <noptr> net up spi init ( <ptr> n dev )
<cls> <noptr> payload ( <ptr> tsp )
<cls> <noptr> mrs get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> az suspend ( <ptr> int f <dot> <noptr> msg )
<cls> <noptr> radio isa pnp probe ( <ptr> dev <dot> <ptr> devid )
<cls> <noptr> tm audio fini ( <ptr> dev )
<cls> <noptr> c xxx set field ( <noptr> field mask <dot> <noptr> data )
<cls> <noptr> so lov out config cursor ( <ptr> dev )
<cls> <noptr> vp if set video params ( <ptr> vp if params <dot> <noptr> channelid )
<cls> <noptr> queue iso ( <ptr> ctx <dot> <noptr> index )
<cls> <ptr> check vb i debug ( )
<cls> <noptr> usb tv probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> six s ctrl ( <ptr> ctrl )
<cls> <noptr> tfe p front end attach ( <ptr> adap )
<cls> <noptr> vim c register devices ( <ptr> vim c )
<cls> <noptr> c pia try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> ske cg x get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> lg dta init ( <ptr> fe )
<cls> <noptr> show dma capability ( <ptr> cobalt )
<cls> <noptr> dvb sky ic func ( <ptr> adapter )
<cls> <noptr> vb ioctl stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> omap isp pipeline cancel stream ( <ptr> pipe )
<cls> <ptr> c x attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <noptr> si set rds ps name ( <ptr> s dev <dot> <ptr> ps name )
<cls> <ptr> check pid filtering ( )
<cls> <noptr> fim cs ctrl ( <ptr> ctx <dot> <ptr> ctrl )
<cls> <noptr> dib fw component bus xfer ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> init r cmap te vii nec ( )
<cls> <noptr> init r cmap ter rate cci ner gy xs ( )
<cls> <noptr> pinn sat tuner sleep ( <ptr> fe )
<cls> <noptr> jpeg define ( <ptr> jpeg hdr <dot> <noptr> height <dot> <noptr> width )
<cls> <noptr> calc fps ( <ptr> sd <dot> <ptr> numerator <dot> <ptr> denominator )
<cls> <noptr> set all properties ( <ptr> cam )
<cls> <noptr> handle dst tag ( <ptr> state <dot> <ptr> pca message <dot> <ptr> hw buffer <dot> <noptr> length )
<cls> <noptr> v pbe disp check window params ( <ptr> disp dev <dot> <ptr> c )
<cls> <noptr> mtm reset ( <ptr> mtm )
<cls> <noptr> video ice num input ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <noptr> iv tv v l write ( <ptr> filp <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> pos )
<cls> <noptr> dcm i restart capture ( <ptr> dcm i )
<cls> <noptr> img ir disable wake ( <ptr> priv )
<cls> <noptr> g sch w set global alpha ( <ptr> ctx )
<cls> <noptr> mtm init controls ( <ptr> sd )
<cls> <noptr> vb i buf queue ( <ptr> vb )
<cls> <noptr> pvr try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> v f )
<cls> <noptr> tw irq mask apply ( <ptr> dev )
<cls> <noptr> btc x calc skips ( <noptr> line <dot> <noptr> width <dot> <ptr> maxy <dot> <ptr> skips <dot> <ptr> n skips <dot> <ptr> clips <dot> <noptr> n clips )
<cls> <noptr> dib fw pid filter ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> so los ctrl ( <ptr> ctrl )
<cls> <noptr> tc enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> img ir refresh raw ( <ptr> priv <dot> <noptr> irq status )
<cls> <noptr> x box remote irq in ( <ptr> urb )
<cls> <noptr> wb cir set carrier report ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> sh ve u stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> get key hau p ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> radio poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> tegra cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> debug if c isolate word ( <ptr> buf <dot> <noptr> count <dot> <dptr> wstr ptr <dot> <ptr> w len ptr )
<cls> <noptr> dvb net ule should drop ( <ptr> h )
<cls> <ptr> to vp if buffer ( <ptr> vb )
<cls> <noptr> pvr hd wun trip unlocked ( <ptr> h dw )
<cls> <noptr> imon probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> delta recycle ( <ptr> ctx <dot> <ptr> frame )
<cls> <noptr> tm fill buf ( <ptr> core <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> adv wr ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> saa vbs top streaming ( <ptr> v q )
<cls> <noptr> vid io cs ctrl ( <ptr> file <dot> <ptr> priv <dot> <ptr> ctl )
<cls> <noptr> fim c pipeline prepare ( <ptr> p <dot> <ptr> me )
<cls> <noptr> vp if resume ( <ptr> dev )
<cls> <noptr> ska seth v flip ( <ptr> gsp ca dev )
<cls> <noptr> skb af hw set mirror ( <ptr> state )
<cls> <noptr> au read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> e tek get pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> cxx try ctrl ( <ptr> ctrl )
<cls> <noptr> venc inst init ( <ptr> inst )
<cls> <noptr> em x xic check for device ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> setup window lock ( <ptr> f h <dot> <ptr> b tv <dot> <ptr> win <dot> <noptr> fixup )
<cls> <noptr> venus iface dbg q read nolock ( <ptr> h dev <dot> <ptr> pkt )
<cls> <noptr> iv tv yuv filter check ( <ptr> it v )
<cls> <noptr> wait ready gpio bit ( <ptr> core <dot> <noptr> state )
<cls> <noptr> ene setup hw settings ( <ptr> dev )
<cls> <noptr> wb cir probe ( <ptr> device <dot> <ptr> devid )
<cls> <noptr> is digital input ( <ptr> sd )
<cls> <noptr> c x usb medi on v enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> td a set fec ( <ptr> state <dot> <noptr> fec )
<cls> <noptr> uvc video stop streaming ( <ptr> stream )
<cls> <noptr> e tek reg list import ( <ptr> client <dot> <ptr> meta )
<cls> <noptr> dvb vb q buf ( <ptr> ctx <dot> <ptr> b )
<cls> <ptr> c sid get fmt entry ( <ptr> formats <dot> <noptr> n format <dot> <noptr> code )
<cls> <noptr> sz push ( <ptr> sz <dot> <noptr> raw ir )
<cls> <noptr> video buf to dma contig ( <ptr> buf )
<cls> <noptr> lg dta check oper mode ( <ptr> state )
<cls> <noptr> venus helper process initial cap buf s ( <ptr> inst )
<cls> <noptr> ska a gpio set value ( <ptr> priv <dot> <noptr> id <dot> <noptr> val )
<cls> <noptr> m x firmware download ( <ptr> udev <dot> <ptr> fw )
<cls> <noptr> dvb register ( <ptr> stream )
<cls> <noptr> set freq i ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> m xls fic read again ( <ptr> state <dot> <noptr> count <dot> <ptr> r buf )
<cls> <noptr> z d demo d read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dst ca ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> ioctl arg )
<cls> <noptr> vid ioc try fmt slice dvb i out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> ctrl clear dirty tre ble ( <ptr> cptr )
<cls> <noptr> c xic write reg ( <ptr> state <dot> <noptr> ic addr <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> hdc s init controls ( <ptr> sd )
<cls> <noptr> iv tv function ality ( <ptr> adap )
<cls> <noptr> venc query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> snd solo pcm trigger ( <ptr> ss <dot> <noptr> cmd )
<cls> <noptr> venus set registers ( <ptr> h dev )
<cls> <noptr> snd cards aa capture close ( <ptr> sub stream )
<cls> <noptr> uvc queue buffer complete ( <ptr> ref )
<cls> <ptr> front end to pluto ( <ptr> fe )
<cls> <noptr> stb read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> dib preset gpio ( <ptr> st )
<cls> <noptr> tt usb dec init usb ( <ptr> dec )
<cls> <noptr> v l detect cvt ( <noptr> frame height <dot> <noptr> h freq <dot> <noptr> vsync <dot> <noptr> active width <dot> <noptr> polar ities <dot> <noptr> interlaced <dot> <ptr> fmt )
<cls> <noptr> ves x clr bit ( <ptr> state )
<cls> <noptr> uvc video init ( <ptr> stream )
<cls> <noptr> ln b set tone ( <ptr> dev <dot> <noptr> link <dot> <noptr> input <dot> <noptr> tone )
<cls> <ptr> video mux get pad format ( <ptr> sd <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> f mrs ctrl ( <ptr> ctrl )
<cls> <noptr> td a read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> v pe top v pdm are set ( <ptr> dev )
<cls> <noptr> c xvid ioc enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> fin tek close ( <ptr> dev )
<cls> <noptr> pvr v l poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> td a xic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> tc get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> v pe dump regs ( <ptr> dev )
<cls> <ptr> mtk venc find format ( <ptr> f )
<cls> <noptr> l gs gl read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> sp jpeg parse hdr ( <ptr> result <dot> <noptr> buffer <dot> <noptr> size <dot> <ptr> ctx )
<cls> <noptr> as x cmd build ( <ptr> p cmd <dot> <noptr> xid <dot> <noptr> cmd len )
<cls> <noptr> stv x setup divider ( <ptr> stv x )
<cls> <noptr> stv check signal presence ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> go init encoder ( <ptr> go )
<cls> <noptr> dtt u usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> d vbs recover ( <ptr> av )
<cls> <ptr> check analog debug ( )
<cls> <noptr> x box remote driver init ( )
<cls> <noptr> g d buf prepare ( <ptr> vb )
<cls> <noptr> v pbe disp calculate scale factor ( <ptr> disp dev <dot> <ptr> layer <dot> <noptr> expected x size <dot> <noptr> expected y size )
<cls> <noptr> z l calc input freq ( <ptr> fe <dot> <ptr> input freq )
<cls> <noptr> skb af hw set user gain ( <ptr> state <dot> <noptr> gain )
<cls> <noptr> solo ic write byte ( <ptr> solo dev <dot> <noptr> id <dot> <noptr> addr <dot> <noptr> off <dot> <noptr> data )
<cls> <noptr> spc i write cam control ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> pwc g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> smart ant init ( <ptr> demo d )
<cls> <ptr> to dw vcm ( <ptr> ctrl )
<cls> <noptr> v l m m ioctl stateless decoder cmd ( <ptr> file <dot> <ptr> priv <dot> <ptr> dc )
<cls> <noptr> dib xpm u update ( <ptr> ic <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> az front end power on ( <ptr> adap )
<cls> <noptr> c x reset tuner gpio ( <ptr> dev <dot> <noptr> component <dot> <noptr> cmd <dot> <noptr> value )
<cls> <noptr> c x card setup ( <ptr> core )
<cls> <noptr> omap is ps bl disable ( <ptr> isp <dot> <noptr> res )
<cls> <noptr> last nodes raw open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> v fe set module cfg ( <ptr> v fe <dot> <noptr> enable )
<cls> <noptr> vid ioc g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> em xx video register ( )
<cls> <noptr> cxa v std setup ( <ptr> c x )
<cls> <noptr> reg modify ( <noptr> mask <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> td asleep ( <ptr> fe )
<cls> <ptr> check td a ( )
<cls> <ptr> check tone burst ( )
<cls> <noptr> adv e did handler ( <ptr> work )
<cls> <noptr> cio pci probe ( <ptr> pci dev <dot> <ptr> id )
<cls> <noptr> set audio finish ( <ptr> core <dot> <noptr> ctl )
<cls> <noptr> mtv chip probe ( <ptr> mtv )
<cls> <noptr> uvc try frame interval ( <ptr> frame <dot> <noptr> interval )
<cls> <noptr> cec feature refused ( <ptr> adap <dot> <ptr> msg )
<cls> <noptr> vivid vid cap g selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> sel )
<cls> <noptr> mtk jpeg pm suspend ( <ptr> dev )
<cls> <noptr> vp dma add out dtd ( <ptr> list <dot> <noptr> width <dot> <noptr> stride <dot> <ptr> crect <dot> <ptr> fmt <dot> <noptr> dma addr <dot> <noptr> max w <dot> <noptr> max h <dot> <noptr> chan <dot> <noptr> flags )
<cls> <noptr> hex ium init done ( <ptr> dev )
<cls> <noptr> spc are init ( <ptr> gsp ca dev )
<cls> <ptr> check always analog ( )
<cls> <noptr> iv tv enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> six radio read rsq primary blob ( <ptr> file <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> c x video register ( <ptr> dev )
<cls> <noptr> e tek get frame interval ( <ptr> sub dev <dot> <ptr> fi )
<cls> <noptr> hist d mac b ( <ptr> data )
<cls> <noptr> pct ve front end attach ( <ptr> adap )
<cls> <noptr> m xlt init ( <ptr> fe )
<cls> <ptr> tom tt ( <ptr> sd )
<cls> <noptr> l gs gxx read signal strength ( <ptr> fe <dot> <ptr> signal )
<cls> <noptr> main reset ( <ptr> sd )
<cls> <noptr> af usb write tuner registers ( <ptr> d <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> len )
<cls> <noptr> m xls f get gpi state ( <ptr> state <dot> <noptr> pin <dot> <ptr> val )
<cls> <noptr> ites idle ( <ptr> rc dev <dot> <noptr> enable )
<cls> <noptr> vb dvb register front end ( <ptr> adapter <dot> <ptr> dvb )
<cls> <noptr> budget set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> dib p set diversity in ( <ptr> demo d <dot> <noptr> onoff )
<cls> <noptr> g ous bic master xfer ( <ptr> adapter <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> read block ( <ptr> c i <dot> <noptr> adr <dot> <ptr> data <dot> <noptr> n )
<cls> <noptr> avc a init ( <ptr> av )
<cls> <noptr> pluto start feed ( <ptr> f )
<cls> <noptr> r jn set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> gsc enum fmt ( <ptr> f )
<cls> <noptr> is ppm prepare ( <ptr> dev )
<cls> <noptr> sp mfc dec init ( <ptr> ctx )
<cls> <noptr> pvr h dw load sub dev ( <ptr> h dw <dot> <ptr> cd )
<cls> <noptr> noon power ctrl ( <ptr> sd <dot> <noptr> reset <dot> <noptr> sleep )
<cls> <noptr> vp dma set frame start event ( <ptr> vp dma <dot> <noptr> f sevent <dot> <noptr> chan )
<cls> <noptr> r ga cmd set mode ( <ptr> ctx )
<cls> <noptr> v dec verify conf ( <ptr> inst )
<cls> <noptr> c x gpio get ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> usb ds brs ctrl ( <ptr> ctrl )
<cls> <noptr> c x set scale ( <ptr> core <dot> <noptr> width <dot> <noptr> height <dot> <noptr> field )
<cls> <noptr> vs pdl body put ( <ptr> dl b )
<cls> <noptr> mtv hw reset ( <ptr> mtv )
<cls> <noptr> get f winfo ( <ptr> state )
<cls> <noptr> fim c is fw clear irq ( <ptr> is <dot> <noptr> nr )
<cls> <noptr> fin tek select logical dev ( <ptr> fin tek <dot> <noptr> l dev )
<cls> <noptr> em xx initialize mtm ( <ptr> dev )
<cls> <noptr> tvp x enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> dib set dds ( <ptr> state <dot> <noptr> offset khz )
<cls> <noptr> mtk mdp try crop ( <ptr> ctx <dot> <noptr> type <dot> <ptr> r )
<cls> <noptr> v l print hw freq seek ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> ven cs std output ( <ptr> sd <dot> <noptr> norm )
<cls> <noptr> ir set key table ( <ptr> dev <dot> <ptr> from )
<cls> <noptr> s read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> iv tv get service set ( <ptr> fmt )
<cls> <noptr> dib set ctrl lo ( <ptr> fe <dot> <noptr> v co bias trim <dot> <noptr> h f div trim <dot> <noptr> cp current <dot> <noptr> third order filt )
<cls> <ptr> check radio r x nr ( )
<cls> <ptr> check enable hdp vr ( )
<cls> <noptr> iv tv flush queues ( <ptr> s )
<cls> <noptr> v pfe suspend ( <ptr> dev )
<cls> <noptr> v l stub g audio ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> set clk freq ( <ptr> core <dot> <noptr> freq )
<cls> <noptr> sp mfc set enc stream buffer v ( <ptr> ctx <dot> <noptr> addr <dot> <noptr> size )
<cls> <noptr> get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> via sensor powerup ( <ptr> cam )
<cls> <noptr> manage ma type info ( <ptr> state )
<cls> <noptr> adv x hdmi g d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> v pu enc init ( <ptr> v pu )
<cls> <noptr> delta mjpeg ipc open ( <ptr> p ctx )
<cls> <noptr> vga wr probe ( <ptr> gsp ca dev )
<cls> <noptr> snd cards aa capture prepare ( <ptr> sub stream )
<cls> <noptr> radio is ag frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> l gs gxx attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> pvr h dw commit execute ( <ptr> h dw )
<cls> <noptr> m tt set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> show imon clock ( <ptr> d <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> set q am standard ( <ptr> state <dot> <noptr> o mode )
<cls> <noptr> ts read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> td a get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> c x gpio set ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> serial ir close ( <ptr> rc dev )
<cls> <noptr> net up unid vbd main it ( <ptr> n dev <dot> <noptr> num )
<cls> <noptr> az streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> z l write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> set static channel mode ( <ptr> priv )
<cls> <noptr> tt usb dec init task let ( <ptr> dec )
<cls> <noptr> lme streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> td a send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> red rat read packet continue ( <ptr> r r <dot> <noptr> len )
<cls> <noptr> tea set config ( <ptr> fe <dot> <ptr> priv cfg )
<cls> <noptr> smi dvb init ( <ptr> port )
<cls> <ptr> check no overlay ( )
<cls> <noptr> b disp hw color format ( <noptr> pixel format )
<cls> <noptr> hi set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> video mode to dss mode ( <ptr> v out )
<cls> <noptr> init r cmap digit trade ( )
<cls> <noptr> tx long bit ( <ptr> pin )
<cls> <noptr> c xir start ( <ptr> core )
<cls> <noptr> m read bridge ( <ptr> sd <dot> <noptr> address <dot> <ptr> ic data )
<cls> <noptr> c ecs phys addr from e did ( <ptr> adap <dot> <ptr> e did )
<cls> <noptr> tt usb dec probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> gs enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> ov reg w ( <ptr> sd <dot> <noptr> index <dot> <noptr> value <dot> <noptr> n )
<cls> <noptr> c xir read ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> c x usb medi on v complete ( <ptr> u )
<cls> <noptr> pvr context thread func ( <ptr> foo )
<cls> <noptr> nv t close ( <ptr> dev )
<cls> <noptr> bt driver init ( )
<cls> <noptr> skb af synchronize ( <ptr> state <dot> <noptr> timeout <dot> <noptr> addr )
<cls> <noptr> smi ir stop ( <ptr> ir )
<cls> <noptr> td a establish defaults ( <ptr> fe )
<cls> <noptr> set tv freq ( <ptr> c <dot> <noptr> freq )
<cls> <noptr> po set auto white balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> g scm mdq buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> tvp x set pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> flex cop pci read ibi reg ( <ptr> fc <dot> <noptr> r )
<cls> <noptr> ic write reg ( <ptr> adap <dot> <noptr> adr <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> buffer queue ( <ptr> vb )
<cls> <noptr> px p enum fmt ( <ptr> f <dot> <noptr> type )
<cls> <noptr> uds configure partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> process progressive mode ( <ptr> common )
<cls> <noptr> vid ioc try decoder cmd ( <ptr> file <dot> <ptr> priv <dot> <ptr> cmd )
<cls> <noptr> compress raw buf ( <ptr> c x <dot> <ptr> buf <dot> <noptr> size <dot> <noptr> hdr size )
<cls> <noptr> vp fec cdc get buf type ( <ptr> c cdc )
<cls> <noptr> mtp clk setup ( <ptr> mtp )
<cls> <noptr> gss d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> c cdc write dfc entry ( <noptr> index <dot> <ptr> dfc )
<cls> <noptr> bt bright ( <ptr> b tv <dot> <noptr> bright )
<cls> <noptr> write block ( <ptr> c i <dot> <noptr> adr <dot> <ptr> data <dot> <noptr> n )
<cls> <noptr> wl f m fops write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> em xx duplicate dev ( <ptr> dev )
<cls> <noptr> snd cards aa new mixer ( <ptr> chip )
<cls> <noptr> ir raw encode scan code ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> gsc check crop change ( <noptr> tmp w <dot> <noptr> tmp h <dot> <ptr> w <dot> <ptr> h )
<cls> <noptr> img ir ident ( <ptr> priv )
<cls> <noptr> vid out buf prepare ( <ptr> vb )
<cls> <noptr> fdt v register rc ( <ptr> fdt v <dot> <ptr> dev )
<cls> <noptr> set g gain ( <ptr> gsp ca dev <dot> <noptr> global gain )
<cls> <noptr> write field reg ( <ptr> vp dma <dot> <noptr> offset <dot> <noptr> field <dot> <noptr> mask <dot> <noptr> shift )
<cls> <noptr> vivid is last user ( <ptr> dev )
<cls> <noptr> saa raw decode irq ( <ptr> dev )
<cls> <noptr> v l async notifier unbind all sub devs ( <ptr> notifier )
<cls> <noptr> sh ve u open ( <ptr> file )
<cls> <noptr> set gamma ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> exy nos jpeg get timer status ( <ptr> regs )
<cls> <ptr> check os d laced ( )
<cls> <noptr> pt init front end ( <ptr> adap <dot> <ptr> fe )
<cls> <noptr> m xls fread reg ( <ptr> state <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> td a status ( <ptr> fe )
<cls> <noptr> tm read write usb ( <ptr> dev <dot> <noptr> req type <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> noon bulk write reg ( <ptr> sd <dot> <ptr> msg )
<cls> <noptr> mtk mdp m m get buf s ( <ptr> ctx )
<cls> <noptr> fmt x set freq ( <ptr> f m dev <dot> <noptr> freq to set )
<cls> <noptr> n gene command load firmware ( <ptr> dev <dot> <ptr> n gene fw <dot> <noptr> size )
<cls> <noptr> hdc s set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> csi phy try format ( <ptr> csi phy <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <noptr> iv tvs output ( <ptr> file <dot> <ptr> f h <dot> <noptr> out p )
<cls> <noptr> c x and or ( <ptr> client <dot> <noptr> addr <dot> <noptr> and mask <dot> <noptr> or value )
<cls> <noptr> mmp cam irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> dib p get snr ( <ptr> fe )
<cls> <noptr> read hw segment ation data ( <ptr> inst )
<cls> <noptr> adv xx o pch sel ( <ptr> state )
<cls> <noptr> vpx usb out op unlocked ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> csi phy reset ( <ptr> csi phy )
<cls> <noptr> dvb sky usb generic rw ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> ske cg xic read ( <ptr> client <dot> <noptr> addr <dot> <ptr> val )
<cls> <noptr> six radio pre tune ( <ptr> radio <dot> <noptr> func )
<cls> <noptr> c eug fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> r gah w start ( <ptr> r ga )
<cls> <noptr> cam if hw set scaler ( <ptr> vp )
<cls> <noptr> vp beg d v timings ( <ptr> v pbe dev <dot> <ptr> d v timings )
<cls> <noptr> dvb dmx sw filter section filter ( <ptr> feed <dot> <ptr> f )
<cls> <ptr> check mpeg lines ( )
<cls> <noptr> tvp set std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> t dax read ( <ptr> state <dot> <ptr> buf )
<cls> <noptr> c x video mux ( <ptr> core <dot> <noptr> input )
<cls> <noptr> saa set wss ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> c x init scb ( <ptr> c x )
<cls> <noptr> media pipeline start ( <ptr> entity <dot> <ptr> pipe )
<cls> <noptr> adv suspend ( <ptr> dev )
<cls> <noptr> vpx usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> check for device ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> net up unid vbc is lot reset ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> dib ctrl rd ( <ptr> d <dot> <ptr> tx <dot> <noptr> tx len <dot> <ptr> r x <dot> <noptr> r x len )
<cls> <noptr> c x g sliced fmt ( <ptr> sd <dot> <ptr> sv b i )
<cls> <noptr> vivid radio r x enum freq bands ( <ptr> file <dot> <ptr> f h <dot> <ptr> b and )
<cls> <noptr> x box remote initialize ( <ptr> x box remote <dot> <ptr> endpoint in )
<cls> <noptr> mtv driver init ( )
<cls> <noptr> sec oce c acpi probe ( <ptr> s dev )
<cls> <noptr> n gene ic master xfer ( <ptr> adapter <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> preview update contrast ( <ptr> prev <dot> <noptr> contrast )
<cls> <noptr> rca rfc p enable ( <ptr> f cp )
<cls> <ptr> check vb i out nr ( )
<cls> <noptr> command set apc or ( <ptr> gsp ca dev )
<cls> <noptr> ska start ( <ptr> sd )
<cls> <noptr> stb front end algo ( <ptr> fe )
<cls> <noptr> msi w reg ( <ptr> dev <dot> <noptr> data )
<cls> <noptr> stk video register ( <ptr> dev )
<cls> <noptr> saa init dev ( <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> spx write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> fmc set mute mode ( <ptr> f m dev <dot> <noptr> mute mode to set )
<cls> <noptr> mtk jpeg dec set du membership ( <ptr> base <dot> <noptr> member <dot> <noptr> gmc <dot> <noptr> is gray )
<cls> <noptr> hdp vr activate ir ( <ptr> dev )
<cls> <noptr> a fic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> uvc meta v l enum formats ( <ptr> file <dot> <ptr> f h <dot> <ptr> f desc )
<cls> <noptr> f dps fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> hi command ( <ptr> state <dot> <noptr> cmd <dot> <ptr> p result )
<cls> <noptr> vpx usb inout op ( <ptr> d <dot> <ptr> o <dot> <noptr> o len <dot> <ptr> i <dot> <noptr> ilen <dot> <noptr> msec )
<cls> <noptr> vid ioc g aud input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> tc sleep ( <ptr> fe )
<cls> <noptr> adv g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> dib set slave front end ( <ptr> fe <dot> <ptr> fe slave )
<cls> <noptr> cpi ad q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> ak probe ( <ptr> client )
<cls> <noptr> p xac vid ioc enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> smi app update exposure limits ( <ptr> sensor )
<cls> <noptr> init r cmap aver media r mks ( )
<cls> <noptr> adv pkt mem rd ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> sp mfc set slice mode ( <ptr> ctx )
<cls> <noptr> v l async notifier parse fw node endpoints by port ( <ptr> dev <dot> <ptr> notifier <dot> <noptr> asd struct size <dot> <noptr> port <dot> <noptr> parse endpoint )
<cls> <noptr> sp mfc clock off ( )
<cls> <noptr> g d setup ctrls ( <ptr> ctx )
<cls> <noptr> mtk jpeg dec set bs write ptr ( <ptr> base <dot> <noptr> ptr )
<cls> <noptr> wl f m stop ( <ptr> radio )
<cls> <noptr> v pfe g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <ptr> io reg map ( <ptr> io <dot> <noptr> link )
<cls> <noptr> saa thread function ( <ptr> data )
<cls> <noptr> smi app read ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> au media device init ( <ptr> dev <dot> <ptr> udev )
<cls> <noptr> m tread status ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> c x write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> adv setup ( <ptr> sd )
<cls> <noptr> resizer set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> f m r x set region ( <ptr> f m dev <dot> <noptr> region to set )
<cls> <ptr> cec notifier get conn ( <ptr> hdmi dev <dot> <ptr> conn name )
<cls> <noptr> dib set agc config ( <ptr> state <dot> <noptr> b and )
<cls> <noptr> sa axs std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> usb vis ionic read max ( <ptr> usb vision <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> max set bb filter ( <ptr> ctx )
<cls> <noptr> uvc query ctrl ( <ptr> dev <dot> <noptr> query <dot> <noptr> unit <dot> <noptr> int fnum <dot> <noptr> cs <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> ak set ctrl ( <ptr> ctrl )
<cls> <noptr> csi init formats ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> msm isp if register entities ( <ptr> isp if <dot> <ptr> v l dev )
<cls> <noptr> micro tune mtd tf tuner set params ( <ptr> fe )
<cls> <noptr> isl set current ( <ptr> fe )
<cls> <noptr> sp mfc dec ctrls setup ( <ptr> ctx )
<cls> <noptr> td a set inversion ( <ptr> state <dot> <noptr> inversion )
<cls> <ptr> find api info ( <noptr> cmd )
<cls> <noptr> set rds text ( <ptr> f m dev <dot> <ptr> rds text )
<cls> <noptr> eeprom store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> rtl xx u get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <noptr> ov x try frame size ( <ptr> m f <dot> <dptr> size )
<cls> <noptr> max i radio tea x get pins ( <ptr> tea )
<cls> <noptr> pct ve read mac address ( <ptr> d <dot> <noptr> mac )
<cls> <noptr> dib get timeout ( <ptr> state <dot> <noptr> delay <dot> <noptr> mode )
<cls> <noptr> v l stubs jpeg comp ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> mpeg frame header ( <ptr> go <dot> <ptr> buf <dot> <noptr> modulo <dot> <noptr> frame )
<cls> <noptr> dib get version ( <ptr> d <dot> <ptr> hw version <dot> <ptr> rom version <dot> <ptr> ram version <dot> <ptr> fw type )
<cls> <noptr> ite get pulse width bits ( <noptr> freq <dot> <noptr> duty cycle )
<cls> <noptr> clean display buffer ( <ptr> ctx )
<cls> <noptr> clear all mailboxes ( <ptr> it v <dot> <ptr> mb data )
<cls> <noptr> imx write buffered reg ( <ptr> imx <dot> <noptr> address low <dot> <noptr> nr regs <dot> <noptr> value )
<cls> <noptr> radios i query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> capability )
<cls> <noptr> get pending param count ( <ptr> is )
<cls> <noptr> vs pdl list commit continuous ( <ptr> dl )
<cls> <noptr> tm load std ( <ptr> dev <dot> <ptr> set )
<cls> <noptr> m x b init module ( )
<cls> <noptr> ov x set saturation ( <ptr> ov x <dot> <noptr> val )
<cls> <noptr> af checksum ( <ptr> buf <dot> <noptr> len )
<cls> <noptr> venus runtime resume ( <ptr> dev )
<cls> <noptr> tib etc s mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> em xx audio urb init ( <ptr> dev )
<cls> <noptr> mtm set auto exposure ( <ptr> mtm <dot> <noptr> val )
<cls> <noptr> atmel is i wait status ( <ptr> is i <dot> <noptr> wait reset )
<cls> <noptr> mtv enum frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <noptr> ov enum frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <noptr> d wic transfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> snd solo capture volume info ( <ptr> k control <dot> <ptr> info )
<cls> <noptr> iv tvf b init ( )
<cls> <noptr> de interlace runtime resume ( <ptr> device )
<cls> <noptr> any see c is lot ts enable ( <ptr> c i <dot> <noptr> slot )
<cls> <noptr> iv tvf b callback init ( <ptr> dev <dot> <ptr> p )
<cls> <noptr> d ibm c set channel cfg ( <ptr> state <dot> <ptr> ch <dot> <noptr> seq )
<cls> <noptr> mtk irq enable ( <ptr> ir <dot> <noptr> mask )
<cls> <noptr> dr x dap fas i read reg ( <ptr> dev addr <dot> <noptr> addr <dot> <ptr> data <dot> <noptr> flags )
<cls> <noptr> red rat sett x carrier ( <ptr> rc dev <dot> <noptr> carrier )
<cls> <noptr> d ibm bfe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <ptr> mn get dvb front end ( <ptr> client )
<cls> <noptr> mds sleep ( <ptr> fe )
<cls> <noptr> dr x jda pread aud reg ( <ptr> dev addr <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> v pe runtime put ( <ptr> pdev )
<cls> <noptr> nxt load firmware ( <ptr> fe <dot> <ptr> fw )
<cls> <noptr> fdp enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ctrl std cur get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> q com cam ss driver init ( )
<cls> <noptr> m xls f ctrl msg ( <ptr> state <dot> <noptr> cmd <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> v pfe process buffer complete ( <ptr> v pfe )
<cls> <noptr> bt tv bit set sda ( <ptr> data <dot> <noptr> state )
<cls> <noptr> adv x afe query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> z l get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> register fim c is entity ( <ptr> f md <dot> <ptr> is )
<cls> <noptr> m m ols autofocus stop ( <ptr> info )
<cls> <noptr> mt kvp u probe ( <ptr> pdev )
<cls> <noptr> c iner gy tfe set front end ( <ptr> fe )
<cls> <noptr> m r write ( <ptr> gsp ca dev <dot> <noptr> len )
<cls> <noptr> spic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> c pia poll ( <ptr> cam <dot> <ptr> filp <dot> <ptr> wait )
<cls> <noptr> exy nos jpeg set timer ( <ptr> regs <dot> <noptr> time value )
<cls> <noptr> resizer set luma ( <ptr> res <dot> <ptr> luma )
<cls> <noptr> airs pyg fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> r x arb lost ( <ptr> pin <dot> <ptr> poll )
<cls> <noptr> c x dt nr dmd chip id ( <ptr> tn r dmd <dot> <ptr> chip id )
<cls> <noptr> exy nos jpeg set dec components ( <ptr> base <dot> <noptr> n )
<cls> <ptr> ov find mode by ival ( <ptr> ov <dot> <ptr> time per frame )
<cls> <noptr> set audio io ( <ptr> f m dev )
<cls> <noptr> six set freq ( <ptr> radio <dot> <noptr> freq )
<cls> <noptr> ov set aec mode ( <ptr> ov <dot> <noptr> mode )
<cls> <noptr> cams ssub dev notifier bound ( <ptr> async <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> scu command ( <ptr> state <dot> <noptr> cmd <dot> <noptr> parameter len <dot> <ptr> parameter <dot> <noptr> result len <dot> <ptr> result )
<cls> <noptr> isc enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> inp )
<cls> <noptr> pts top dma ( <ptr> adap )
<cls> <noptr> po set blue balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> tw isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> c i of bpt entry enable ( <ptr> cio <dot> <noptr> entry )
<cls> <noptr> b disp dbg dump i vmx ( <ptr> s <dot> <noptr> c <dot> <noptr> c <dot> <noptr> c <dot> <noptr> c )
<cls> <noptr> dib cap trim ( <ptr> state <dot> <ptr> tune state )
<cls> <noptr> via cam write reg ( <ptr> cam <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> d ibm read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> p xac vid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> input work ( <ptr> work )
<cls> <noptr> stv get signal params ( <ptr> fe )
<cls> <ptr> v l f wht find pix fmt ( <noptr> pixel format )
<cls> <ptr> check keep urb ( )
<cls> <noptr> six x set voltage ( <ptr> fe <dot> <noptr> volt )
<cls> <noptr> serial ir init ( )
<cls> <ptr> vim c pix map by pixel format ( <noptr> pixel format )
<cls> <noptr> set agc ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> isp disable interrupts ( <ptr> isp )
<cls> <noptr> raw write ( <ptr> state <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> slot ts enable ( <ptr> ca <dot> <noptr> slot )
<cls> <ptr> pvr hd wget ctrl v l ( <ptr> h dw <dot> <noptr> ctl id )
<cls> <noptr> cec notifier conn unregister ( <ptr> n )
<cls> <noptr> m tt set output control ( <ptr> m tt <dot> <noptr> clear <dot> <noptr> set )
<cls> <noptr> video buf prepare ( <ptr> vb )
<cls> <noptr> mpegts disable ( <ptr> state )
<cls> <noptr> dvb dmx get pes pids ( <ptr> demux <dot> <ptr> pids )
<cls> <noptr> ov reg write ( <ptr> client <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> r pf zpos ( <ptr> vsp <dot> <ptr> r pf )
<cls> <noptr> irl irc read mode ( <ptr> file <dot> <ptr> buffer <dot> <noptr> length )
<cls> <noptr> b disp dbg dump ins ( <ptr> s <dot> <noptr> val )
<cls> <noptr> hopper pci driver init ( )
<cls> <noptr> select service from set ( <noptr> field <dot> <noptr> line <dot> <noptr> set <dot> <noptr> is pal )
<cls> <noptr> mpeg level ( <noptr> lvl )
<cls> <noptr> dtv get front end ( <ptr> fe <dot> <ptr> c <dot> <ptr> pout )
<cls> <noptr> dvb dmx dev buffer read ( <ptr> src <dot> <noptr> non blocking <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> mtk v dec gv ctrl ( <ptr> ctrl )
<cls> <noptr> write i pack ( <ptr> p <dot> <ptr> data <dot> <noptr> count )
<cls> <ptr> sp jpeg find format ( <ptr> ctx <dot> <noptr> pixel format <dot> <noptr> fmt type )
<cls> <noptr> so lov out config ( <ptr> solo dev )
<cls> <noptr> td a write bit ( <ptr> state <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> v l async notifier register ( <ptr> notifier )
<cls> <noptr> opera xilinx load firmware ( <ptr> dev <dot> <ptr> filename )
<cls> <noptr> ov apply fmt ( <ptr> sd )
<cls> <noptr> c x sram channel dump audio ( <ptr> dev <dot> <ptr> ch )
<cls> <noptr> m xls f front end attach at scm h ( <ptr> adap )
<cls> <noptr> gl guess sensor ( <ptr> gsp ca dev <dot> <noptr> vendorid <dot> <noptr> productid )
<cls> <noptr> mn probe ( <ptr> client <dot> <ptr> id )
<cls> <ptr> via find format ( <noptr> pixel format )
<cls> <noptr> c x dif setup ( <ptr> client <dot> <noptr> if hz )
<cls> <noptr> td a driver init ( )
<cls> <noptr> t dax get regulator s ( <ptr> state )
<cls> <noptr> v do a device run ( <ptr> ctx <dot> <noptr> dst <dot> <noptr> src )
<cls> <noptr> l read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> c x message send rcv ( <ptr> state <dot> <ptr> cmd <dot> <noptr> num reg )
<cls> <noptr> bt tv open ( <ptr> file )
<cls> <noptr> mtp write ( <ptr> client <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> sdr cap buf prepare ( <ptr> vb )
<cls> <noptr> c sir xs stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> t mic recv regs ( <ptr> dev <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> tm get reg ( <ptr> dev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index )
<cls> <noptr> skb af get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> h fi parser ( <ptr> core <dot> <ptr> inst <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> b disp hw get h f addr ( <noptr> inc )
<cls> <noptr> omap is pres izer isr frame sync ( <ptr> res )
<cls> <noptr> m lv g std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> venus helper check codec ( <ptr> inst <dot> <noptr> v l pix fmt )
<cls> <noptr> cxf ini dev ( <ptr> pci dev )
<cls> <noptr> adv xcs is stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> scm a lock ( <ptr> state <dot> <ptr> ctrl )
<cls> <noptr> v dec g fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <ptr> dr xxx j attach ( <ptr> ic )
<cls> <noptr> c x load firmware ( <ptr> fe <dot> <ptr> fw )
<cls> <noptr> iv tv firmware check ( <ptr> it v <dot> <ptr> where )
<cls> <noptr> cafe smbus write data ( <ptr> cam <dot> <noptr> addr <dot> <noptr> command <dot> <noptr> value )
<cls> <noptr> tt pci eeprom decode mac ( <ptr> decoded mac <dot> <ptr> encoded mac )
<cls> <noptr> c sir x reset ( <ptr> c sir x )
<cls> <ptr> vbd mas gv addr ( <ptr> buf priv )
<cls> <noptr> v l f wht validate fmt ( <ptr> info <dot> <noptr> width div <dot> <noptr> height div <dot> <noptr> components num <dot> <noptr> pix enc )
<cls> <noptr> t dax enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> mtm try ctrl ( <ptr> ctrl )
<cls> <noptr> ene transmit ( <ptr> r dev <dot> <ptr> buf <dot> <noptr> n )
<cls> <noptr> c x usb medi on check int f ( <ptr> int f )
<cls> <noptr> emir change protocol ( <ptr> rc dev <dot> <ptr> rc proto )
<cls> <noptr> ener x setup hw buffer ( <ptr> dev )
<cls> <noptr> venus interface queues init ( <ptr> h dev )
<cls> <noptr> pvr h dw gets n ( <ptr> h dw )
<cls> <noptr> stv xs rate srch fine ( <ptr> state )
<cls> <noptr> sh read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> dib p tune ( <ptr> demo d )
<cls> <noptr> irr cmm encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> pvr io read filter ( <ptr> cp )
<cls> <noptr> v pfe register c cdc device ( <ptr> dev )
<cls> <noptr> t dax disable e did ( <ptr> sd )
<cls> <noptr> fim cmm suspend ( <ptr> fim c )
<cls> <noptr> vid ioc v dec subscribe evt ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> sms end ian handler x message ( <ptr> buffer )
<cls> <noptr> s vendor req ( <ptr> dev <dot> <noptr> request <dot> <noptr> index <dot> <noptr> value <dot> <ptr> transfer buffer <dot> <noptr> transfer buffer length <dot> <noptr> b out )
<cls> <ptr> check g buf size ( )
<cls> <noptr> get ca object length ( <ptr> r )
<cls> <noptr> mds set voltage ( <ptr> fe <dot> <noptr> fe sec voltage )
<cls> <noptr> dib p ctrl tim f ( <ptr> fe <dot> <noptr> op <dot> <noptr> tim f )
<cls> <noptr> mrs set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> v pu decre set ( <ptr> v pu )
<cls> <noptr> coda start encoding ( <ptr> ctx )
<cls> <noptr> noon base config ( <ptr> sd )
<cls> <noptr> ic wait write done ( <ptr> ic adap )
<cls> <noptr> dvb pll configure ( <ptr> fe <dot> <ptr> buf <dot> <noptr> frequency )
<cls> <noptr> av fw cmd ( <ptr> av <dot> <noptr> type <dot> <noptr> com <dot> <noptr> num )
<cls> <noptr> hel ene get tv system ( <ptr> fe )
<cls> <noptr> dvb sky c i ctrl ( <ptr> priv <dot> <noptr> read <dot> <noptr> addr <dot> <noptr> data <dot> <ptr> mem )
<cls> <noptr> ov xs power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> upd probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> v l ctrl g ctrl int ( <ptr> ctrl )
<cls> <noptr> vi u overlay intr ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> six phase diversity idx to mode ( <noptr> idx )
<cls> <noptr> iv tv alsa load ( <ptr> it v )
<cls> <noptr> air spy set if gain ( <ptr> s )
<cls> <noptr> imon remote key lookup ( <ptr> i ctx <dot> <noptr> scan code )
<cls> <noptr> rv ins fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> skb af parse device node ( <ptr> state <dot> <ptr> dev )
<cls> <noptr> scm set color f x ( <ptr> state <dot> <noptr> val )
<cls> <noptr> v pen c encode frame ( <ptr> inst <dot> <ptr> frm buf <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> c xstream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> c cdc has all fields ( <ptr> c cdc )
<cls> <noptr> dst set modulation ( <ptr> state <dot> <noptr> modulation )
<cls> <noptr> tun ers config ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> sp jpeg probe ( <ptr> pdev )
<cls> <noptr> delta enum fmt stream ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> i x v get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> fim c hwc am blk cfg write back ( <ptr> fim c )
<cls> <noptr> snd cards aa capture pointer ( <ptr> sub stream )
<cls> <noptr> x vip graph notify complete ( <ptr> notifier )
<cls> <noptr> venc probe ( <ptr> pdev )
<cls> <noptr> th score init ( <ptr> sd )
<cls> <noptr> ridge ( <ptr> state <dot> <noptr> b enable bridge )
<cls> <noptr> preview enabled cor ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> decode block ( <ptr> p dec <dot> <ptr> p table <dot> <ptr> p table )
<cls> <noptr> af read of d m register ( <ptr> d <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> it init hardware ( <ptr> dev )
<cls> <noptr> get colors ( <ptr> gsp ca dev )
<cls> <noptr> init r cmap video mates ( )
<cls> <noptr> stop preview ( <ptr> dev )
<cls> <noptr> adv xx enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> iv tv get audio input ( <ptr> it v <dot> <noptr> index <dot> <ptr> audio )
<cls> <noptr> x c read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> c x start audio dma ( <ptr> core )
<cls> <noptr> mtm g frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> smi ic set scl ( <ptr> data <dot> <noptr> state )
<cls> <ptr> r cmap get ( <ptr> name )
<cls> <noptr> iv tv irq enc vb icap ( <ptr> it v )
<cls> <noptr> pvr g audio ( <ptr> file <dot> <ptr> priv <dot> <ptr> vin )
<cls> <noptr> dvb front end start ( <ptr> fe )
<cls> <noptr> d ibm c read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> ctrl set afc ( <ptr> is <dot> <noptr> value )
<cls> <noptr> init r cmap tan i xtx max ( )
<cls> <noptr> build msg header ( <ptr> ctx <dot> <noptr> command <dot> <ptr> header )
<cls> <noptr> serial ir timeout ( <ptr> unused )
<cls> <noptr> video mux get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> img iris r hw ( <ptr> priv <dot> <noptr> irq status )
<cls> <noptr> cobalt s input ( <ptr> file <dot> <ptr> priv f h <dot> <noptr> i )
<cls> <noptr> put v l ext controls ( <ptr> file <dot> <ptr> p <dot> <ptr> p )
<cls> <noptr> play audio cb ( <ptr> buf <dot> <noptr> count <dot> <ptr> priv )
<cls> <noptr> c xdr init c ( <ptr> fe )
<cls> <noptr> dib pic enumeration ( <ptr> ic <dot> <noptr> noof demo ds <dot> <noptr> default addr <dot> <noptr> cfg )
<cls> <noptr> c x dt nr dmd dvb t mon carrier offset ( <ptr> tn r dmd <dot> <ptr> offset )
<cls> <noptr> c x in work handler ( <ptr> work )
<cls> <noptr> fim cli teh winit ( <ptr> fim c <dot> <noptr> isp output )
<cls> <noptr> m xls f attach tuner ( <ptr> adap )
<cls> <noptr> stb d vbs set carr freq ( <ptr> state <dot> <noptr> carr freq <dot> <noptr> master clk )
<cls> <noptr> hi x h dir open ( <ptr> r dev )
<cls> <noptr> nv t cir reg write ( <ptr> nv t <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> r card rif enum fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vs ppm suspend ( <ptr> dev )
<cls> <noptr> img ir suspend ( <ptr> dev )
<cls> <noptr> fim c probe ( <ptr> pdev )
<cls> <noptr> uvc ctrl add event ( <ptr> sev <dot> <noptr> elems )
<cls> <noptr> saa alsa init ( )
<cls> <noptr> c x pci quirks ( <ptr> name <dot> <ptr> pci )
<cls> <noptr> lg td q csf tuner set ( <ptr> fe )
<cls> <noptr> m i init pre alt ( <ptr> gsp ca dev )
<cls> <noptr> f m v l vid ioc g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <ptr> saa seq start ( <ptr> s <dot> <ptr> pos )
<cls> <noptr> tp g pattern avg ( <ptr> tp g <dot> <noptr> pat <dot> <noptr> pat )
<cls> <noptr> mantis pci driver init ( )
<cls> <noptr> tms top feed ( <ptr> feed )
<cls> <noptr> omap v out calculate offset ( <ptr> v out )
<cls> <noptr> dib p write tab ( <ptr> state <dot> <ptr> buf )
<cls> <noptr> d m set scl ( <ptr> data <dot> <noptr> state )
<cls> <noptr> v sph go frame end ( <ptr> entity )
<cls> <noptr> csi isr ctx ( <ptr> csi <dot> <ptr> ctx )
<cls> <noptr> ov power ( <ptr> sensor <dot> <noptr> enable )
<cls> <ptr> x vip graph find entity ( <ptr> x dev <dot> <ptr> fw node )
<cls> <ptr> mt attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> dcm i runtime suspend ( <ptr> dev )
<cls> <noptr> solo enc try fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> uvc ioctl g ctrl ( <ptr> file <dot> <ptr> f h <dot> <ptr> ctrl )
<cls> <noptr> csi enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> ter rate cs mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> so i a start ( <ptr> gsp ca dev )
<cls> <noptr> c x start dma ( <ptr> port <dot> <ptr> q <dot> <ptr> buf )
<cls> <noptr> simple set radio freq ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> dib update an again ( <ptr> state <dot> <noptr> an again )
<cls> <ptr> file ctx ( <ptr> file )
<cls> <noptr> init channels ( <ptr> dev )
<cls> <noptr> uvc video decode meta ( <ptr> stream <dot> <ptr> meta buf <dot> <ptr> mem <dot> <noptr> length )
<cls> <noptr> shark led set red ( <ptr> led c dev <dot> <noptr> value )
<cls> <noptr> get v l window ( <ptr> p <dot> <ptr> p <dot> <ptr> aux buf <dot> <noptr> aux space )
<cls> <noptr> td a set params ( <ptr> fe )
<cls> <noptr> mtk mdp mms selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> t mir start ( <ptr> rc )
<cls> <noptr> mt get parameters ( <ptr> fe <dot> <ptr> op )
<cls> <noptr> ov x get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> ska a get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> go usb driver init ( )
<cls> <noptr> sa ats init hw ( <ptr> dev )
<cls> <noptr> x vt c gen write ( <ptr> x vt c <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> dev debug show ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hi assign pad format ( <ptr> mode <dot> <ptr> fmt )
<cls> <noptr> px a camera stop capture ( <ptr> pc dev )
<cls> <noptr> avc tuner dsd ( <ptr> fdt v <dot> <ptr> p )
<cls> <noptr> c xic read ( <ptr> bus <dot> <noptr> reg addr <dot> <ptr> value )
<cls> <noptr> dvb sky sc attach ( <ptr> adap )
<cls> <noptr> d v bring buffer pkt read user ( <ptr> r buf <dot> <noptr> idx <dot> <noptr> offset <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> c xs frequency ( <ptr> sd <dot> <ptr> freq )
<cls> <noptr> q mdb probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> vb prepare buf ( <ptr> q <dot> <ptr> m dev <dot> <ptr> b )
<cls> <noptr> imx reset ( <ptr> priv <dot> <noptr> rst )
<cls> <noptr> v fe set clamp cfg ( <ptr> v fe )
<cls> <noptr> stk pd front end attach ( <ptr> adap )
<cls> <noptr> nxt x write tuner ( <ptr> state <dot> <ptr> data )
<cls> <noptr> c x usb medi on trys fmt vid cap ( <ptr> file <dot> <ptr> f <dot> <noptr> isset )
<cls> <noptr> ene sett x duty cycle ( <ptr> r dev <dot> <noptr> duty cycle )
<cls> <noptr> c x m c init ( <ptr> dev )
<cls> <noptr> r track initialize ( <ptr> isa )
<cls> <noptr> iv tv yuv setup stream frame ( <ptr> it v )
<cls> <ptr> check debug phys addr ( )
<cls> <noptr> configure mpeg output ( <ptr> state <dot> <noptr> b enable output )
<cls> <noptr> nv t write wakeup codes ( <ptr> dev <dot> <ptr> w buf <dot> <noptr> count )
<cls> <noptr> pv rsi attach ( <ptr> adap )
<cls> <noptr> get info ( <ptr> fe )
<cls> <noptr> isp stat buf sync magic ( <ptr> stat <dot> <ptr> buf <dot> <noptr> buf size <dot> <noptr> dir <dot> <ptr> ptr <dot> <noptr> dma addr t <dot> <noptr> long <dot> <noptr> size t <dot> <ptr> ptr )
<cls> <noptr> isp if validate int f status ( <ptr> isp if <dot> <noptr> int f <dot> <noptr> v fe )
<cls> <noptr> iv tv scl delay ( <ptr> it v )
<cls> <noptr> philips sut t set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> nova td front end attach ( <ptr> adap )
<cls> <noptr> r card rif try fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vid ioc v dec query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> as usb driver init ( )
<cls> <noptr> verify planes array ( <ptr> vb <dot> <ptr> b )
<cls> <noptr> stax vip clear register ( <ptr> vip )
<cls> <noptr> mtv init sensor ( <ptr> gsp ca dev )
<cls> <noptr> tc get tune settings ( <ptr> fe <dot> <ptr> settings )
<cls> <noptr> cro sec cec transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> cec msg )
<cls> <noptr> dib pread word ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> stv xx init ( <ptr> gsp ca dev )
<cls> <noptr> vivid cec xfer try worker ( <ptr> work )
<cls> <noptr> rt set pll ( <ptr> priv <dot> <noptr> type <dot> <noptr> freq )
<cls> <noptr> usb pwc probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> isc hist count ( <ptr> isc <dot> <ptr> min <dot> <ptr> max )
<cls> <noptr> v l ctrl log status ( <ptr> file <dot> <ptr> f h )
<cls> <noptr> stb set iterations ( <ptr> state )
<cls> <noptr> check fw load ( <ptr> client <dot> <noptr> size )
<cls> <noptr> video try or set format ( <ptr> fim c <dot> <ptr> f <dot> <noptr> try <dot> <dptr> inp fmt <dot> <dptr> out fmt )
<cls> <noptr> is fw load ( <ptr> dev )
<cls> <noptr> max g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> terra tv audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> jlj start ( <ptr> gsp ca dev )
<cls> <noptr> dvb pll init ( <ptr> fe )
<cls> <noptr> sync ( <ptr> cam <dot> <noptr> frame nr )
<cls> <noptr> go read interrupt ( <ptr> go <dot> <ptr> value <dot> <ptr> data )
<cls> <noptr> c x usb medi on copy samples ( <ptr> dvb dev <dot> <ptr> aux buf <dot> <ptr> bt <dot> <noptr> max line samples <dot> <noptr> val )
<cls> <noptr> h fi sys rel resource done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> px p fixup color ime try cap ( <ptr> ctx <dot> <noptr> dst fourcc <dot> <ptr> ycbcr enc <dot> <ptr> quant ization )
<cls> <noptr> c xxx gpio ic read ack ( <ptr> dev )
<cls> <noptr> x c set analog params ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> dib tuner reset ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> vsp wpf s ctrl ( <ptr> ctrl )
<cls> <noptr> bt dump ( <ptr> encoder )
<cls> <noptr> c xs register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> t dax configure aud out ( <ptr> sd <dot> <noptr> channel assignment )
<cls> <noptr> dib get wb d target ( <ptr> fe )
<cls> <noptr> skb af set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> j l c write ( <ptr> gsp ca dev <dot> <ptr> command )
<cls> <noptr> wpf init controls ( <ptr> wpf )
<cls> <noptr> stv carr get quality ( <ptr> fe <dot> <ptr> lookup )
<cls> <noptr> v pe set clock enable ( <ptr> dev <dot> <noptr> on )
<cls> <noptr> c x process idx data ( <ptr> buf <dot> <ptr> idx )
<cls> <noptr> uvc queue return buffers ( <ptr> queue <dot> <noptr> state )
<cls> <noptr> l gdt read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> pt write reg ( <ptr> pt <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> cobalt probe ( <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> sev pos ( <ptr> sev <dot> <noptr> idx )
<cls> <noptr> stk sensor seth w ( <ptr> dev <dot> <noptr> h start <dot> <noptr> h stop <dot> <noptr> v start <dot> <noptr> v stop )
<cls> <noptr> snd cobalt pcm capture close ( <ptr> sub stream )
<cls> <noptr> v fe set qos ( <ptr> v fe )
<cls> <noptr> ov gain set ( <ptr> sensor <dot> <noptr> auto gain )
<cls> <ptr> v l find nearest size ( <ptr> array <dot> <noptr> array size <dot> <noptr> entry size <dot> <noptr> width offset <dot> <noptr> height offset <dot> <noptr> width <dot> <noptr> height )
<cls> <ptr> vsp get format info ( <ptr> vsp <dot> <noptr> fourcc )
<cls> <noptr> bt tvs ctrl ( <ptr> c )
<cls> <noptr> mtk vcodec dec clock on ( <ptr> pm )
<cls> <noptr> vivid try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> gl short write ( <ptr> d <dot> <noptr> addr <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> scc am if videos ctrl ( <ptr> ctrl )
<cls> <noptr> c x risc buffer ( <ptr> pci <dot> <ptr> risc <dot> <ptr> sg list <dot> <noptr> top offset <dot> <noptr> bottom offset <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines )
<cls> <noptr> n gene error detected ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> mba read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> dib adp fine tune ( <ptr> state <dot> <noptr> max const ell ation )
<cls> <noptr> ce ic master xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> ov read ( <ptr> sd <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> fdt v read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> ska a registered ( <ptr> sd )
<cls> <noptr> ete kic write regs ( <ptr> client <dot> <ptr> regs )
<cls> <noptr> d ibm c read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> v pbe isr odd field ( <ptr> disp obj <dot> <ptr> layer )
<cls> <noptr> as stop stream ( <ptr> dev )
<cls> <noptr> av fed i seq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> ctrl set tre ble ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> fmt x set rds mode ( <ptr> f m dev <dot> <noptr> rds end is )
<cls> <noptr> c cdc enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> snd em xx capture pointer ( <ptr> sub stream )
<cls> <noptr> stv x init ( <ptr> fe )
<cls> <noptr> submit urb s ( <ptr> cam )
<cls> <noptr> l sleep ( <ptr> fe )
<cls> <noptr> sh set spectral inversion ( <ptr> fe <dot> <noptr> inversion )
<cls> <noptr> dtt ufe init ( <ptr> fe )
<cls> <noptr> emma prp dump regs ( <ptr> pc dev )
<cls> <noptr> c xreg dev ( <ptr> c x <dot> <noptr> type )
<cls> <noptr> set vsb leak n gain ( <ptr> demo d )
<cls> <noptr> init bt ( <ptr> b tv )
<cls> <noptr> tcp robe ( <ptr> client )
<cls> <noptr> new to req ( <ptr> ref )
<cls> <noptr> is if configure ( )
<cls> <noptr> dvb net sec ( <ptr> dev <dot> <ptr> pkt <dot> <noptr> pkt len )
<cls> <noptr> recv bytes ( <ptr> dev <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> air spy stop streaming ( <ptr> v q )
<cls> <noptr> c xir write ( <ptr> dev <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> tt usb set channel ( <ptr> tt usb <dot> <noptr> chan id <dot> <noptr> filter type <dot> <noptr> pid )
<cls> <noptr> igu an air r x ( <ptr> urb )
<cls> <noptr> pvr buffer init ( <ptr> b p <dot> <ptr> sp <dot> <noptr> id )
<cls> <noptr> v l ctrl replace ( <ptr> old <dot> <ptr> new )
<cls> <noptr> vid ioc g output ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> i )
<cls> <noptr> dvb front end get event ( <ptr> fe <dot> <ptr> event <dot> <noptr> flags )
<cls> <noptr> m xls fic get data ( <ptr> state <dot> <noptr> index <dot> <ptr> w data <dot> <ptr> r data )
<cls> <noptr> b disp stream on ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> dw close ( <ptr> sd <dot> <ptr> f h )
<cls> <ptr> check xfer debug ( )
<cls> <noptr> fim ch w setrgb alpha ( <ptr> ctx )
<cls> <noptr> enable hw rw function ( <ptr> inst )
<cls> <noptr> usb tvs ctrl ( <ptr> ctrl )
<cls> <noptr> saas top streaming ( <ptr> dev <dot> <ptr> q )
<cls> <noptr> h va open ( <ptr> file )
<cls> <noptr> snd usb tv pcm close ( <ptr> sub stream )
<cls> <noptr> tw x clear queue ( <ptr> vc <dot> <noptr> state )
<cls> <noptr> tt usb dec start ts feed ( <ptr> dvb dmx feed )
<cls> <noptr> scm register spi driver ( <ptr> state )
<cls> <noptr> black bird initialize codec ( <ptr> dev )
<cls> <noptr> cec get device ( <ptr> dev node )
<cls> <noptr> tw set frame ( <ptr> sd <dot> <ptr> width <dot> <ptr> height )
<cls> <noptr> delta push dts ( <ptr> ctx <dot> <noptr> val )
<cls> <ptr> get v l fw node bus conv by mbus ( <noptr> type )
<cls> <noptr> c x u sub medi on v buf queue ( <ptr> vb )
<cls> <noptr> v dec stop capture ( <ptr> inst )
<cls> <noptr> net up unid v bring copy ( <ptr> dma <dot> <ptr> buf )
<cls> <noptr> flex cop dma config timer ( <ptr> fc <dot> <noptr> dma idx <dot> <noptr> cycles )
<cls> <noptr> td a get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> six vid ioc stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <noptr> sp jpeg g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> ov get register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> ene write reg ( <ptr> dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> stv cab get r f lvl ( <ptr> state )
<cls> <noptr> geni atech d vbs set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> air spy start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> cec p int x error inj ( <ptr> pin )
<cls> <noptr> r card rif bond available ( <ptr> sdr <dot> <ptr> np )
<cls> <ptr> isl attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> config )
<cls> <noptr> c x der get carrier offset i ( <ptr> priv <dot> <noptr> bandwidth <dot> <ptr> offset )
<cls> <noptr> c x usb ic func ( <ptr> adapter )
<cls> <noptr> ir do keyup ( <ptr> dev <dot> <noptr> sync )
<cls> <noptr> initstate ( <ptr> state )
<cls> <noptr> l get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> t wh winit ( <ptr> dev )
<cls> <noptr> ov reg read ( <ptr> gsp ca dev <dot> <noptr> reg )
<cls> <noptr> tvp g sliced fmt ( <ptr> sd <dot> <ptr> sv b i )
<cls> <noptr> cobalt enable input ( <ptr> s )
<cls> <noptr> iv tv g pixel aspect ( <ptr> file <dot> <ptr> f h <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> omap isp stats stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> b disp dbg dump sty ( <ptr> s <dot> <noptr> val <dot> <noptr> addr <dot> <ptr> name )
<cls> <noptr> d ibm b sleep ( <ptr> fe )
<cls> <noptr> is presume module pipeline ( <ptr> me )
<cls> <noptr> tt usb c tic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> tws reg ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> si powerup ( <ptr> s dev )
<cls> <noptr> resizer set out addr ( <ptr> res <dot> <noptr> addr )
<cls> <noptr> c x usb medi on cf ref c fld chg ( <ptr> dvb dev <dot> <ptr> bt <dot> <noptr> first field <dot> <noptr> max lines <dot> <noptr> max line samples <dot> <noptr> buf )
<cls> <noptr> ov bayer order ( <ptr> sensor )
<cls> <noptr> deb i irq ( <noptr> cookie )
<cls> <dptr> check def output ( )
<cls> <noptr> stv set symbol rate ( <ptr> int p <dot> <noptr> m clk <dot> <noptr> s rate <dot> <noptr> demo d )
<cls> <noptr> rtl xx u power ctrl ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> v lsp arm ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> m c gpio set ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> adv x hdmi init controls ( <ptr> hdmi )
<cls> <noptr> video ice num frame intervals ( <ptr> file <dot> <ptr> priv <dot> <ptr> fe )
<cls> <noptr> c xxx is blk set audio input ( <ptr> dev <dot> <noptr> audio input )
<cls> <noptr> spc sis clk get ( <ptr> state )
<cls> <noptr> coda bitstream queue ( <ptr> ctx <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> aur c write ( <ptr> ir <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> m spread ( <ptr> client <dot> <noptr> dev <dot> <noptr> addr )
<cls> <noptr> iv tv yuv prep user dma ( <ptr> it v <dot> <ptr> dma <dot> <ptr> args )
<cls> <noptr> b disp irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> c x write cmd ( <ptr> state <dot> <ptr> cmd )
<cls> <noptr> cs read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> ic read reg ( <ptr> adapter <dot> <noptr> adr <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> resizer calc ratios ( <ptr> res <dot> <ptr> input <dot> <ptr> output <dot> <ptr> ratio )
<cls> <ptr> check irc lock mhz ( )
<cls> <noptr> vp fec cdc update raw params ( <ptr> c cdc <dot> <ptr> raw params )
<cls> <noptr> c sit xs stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> vivid vb igen tele text ( <ptr> packet <dot> <noptr> line <dot> <noptr> frame )
<cls> <noptr> serial irt x carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> sub devs tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> net up get card info ( <ptr> ic adap <dot> <ptr> c info )
<cls> <noptr> c x d read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> control r xs edge detection ( <ptr> c <dot> <noptr> edge types )
<cls> <noptr> a speed video off ( <ptr> video )
<cls> <noptr> stv set max symbol rate ( <ptr> int p <dot> <noptr> m clk <dot> <noptr> s rate <dot> <noptr> demo d )
<cls> <noptr> nxt set inversion ( <ptr> state <dot> <noptr> inversion )
<cls> <noptr> find aspect ratio ( <noptr> width <dot> <noptr> height <dot> <ptr> num <dot> <ptr> denom )
<cls> <noptr> stv xx pkts can ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> stv ddb sleep ( <ptr> fe )
<cls> <noptr> check b tres ( <ptr> f h <dot> <noptr> bit )
<cls> <noptr> venc device get ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> fim ch wen auto load ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> s set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> nv tcr write ( <ptr> nv t <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> media dev node unregister prepare ( <ptr> dev node )
<cls> <noptr> uvc status complete ( <ptr> urb )
<cls> <noptr> fim c register driver ( )
<cls> <noptr> tt usb dec stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> get lock status ( <ptr> state <dot> <ptr> p lock status )
<cls> <noptr> m cam vid ioc g fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v pread eeprom ( <ptr> d <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> offset )
<cls> <noptr> coda enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> cade t has rds data ( <ptr> dev )
<cls> <noptr> cam if hw set source format ( <ptr> cam if )
<cls> <noptr> mn x set front end ( <ptr> fe )
<cls> <noptr> ati remote rc close ( <ptr> r dev )
<cls> <noptr> de interlace probe ( <ptr> pdev )
<cls> <noptr> ava v start record ( <ptr> av <dot> <noptr> av <dot> <ptr> dvb dmx feed )
<cls> <ptr> tom i pid dev ( <ptr> sd )
<cls> <noptr> dib set sync wait ( <ptr> state )
<cls> <noptr> b disp dbg dump tty ( <ptr> s <dot> <noptr> val )
<cls> <noptr> stb d vbs sets rate ( <ptr> state )
<cls> <noptr> vi codec encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> ec )
<cls> <noptr> iv tv g fmt vb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> bt tv gpio inout ( <ptr> core <dot> <noptr> mask <dot> <noptr> out bits )
<cls> <noptr> iv tvf b prep frame ( <ptr> it v <dot> <noptr> cmd <dot> <ptr> source <dot> <noptr> dest offset <dot> <noptr> count )
<cls> <noptr> c x d spi device write read ( <ptr> spi <dot> <ptr> tx data <dot> <noptr> tx size <dot> <ptr> r x data <dot> <noptr> r x size )
<cls> <ptr> mtk jpeg get q data ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> td a init ( <ptr> fe )
<cls> <noptr> itec iris r ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> mtm power off ( <ptr> dev )
<cls> <noptr> v dec mmdevice run ( <ptr> priv )
<cls> <noptr> t dax cut u ner set ( <ptr> fe )
<cls> <noptr> stv cab read u cbl cks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> trust s frequency ( <ptr> isa <dot> <noptr> freq )
<cls> <noptr> sa ago read interrupt ( <ptr> go )
<cls> <noptr> dcm i buf init ( <ptr> vb )
<cls> <noptr> register encoders ( <ptr> h va )
<cls> <noptr> iv tv write ( <ptr> filp <dot> <ptr> user buf <dot> <noptr> count <dot> <ptr> pos )
<cls> <noptr> c x irq disable ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> preview config y c pos ( <ptr> prev <dot> <noptr> pixel code )
<cls> <noptr> t dax write mask ( <ptr> state <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> max sleep ( <ptr> fe )
<cls> <noptr> aus register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> spc sis probe ( <ptr> pdev )
<cls> <noptr> sms dvb dvb t set front end ( <ptr> fe )
<cls> <noptr> gpio ir recv irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> coda decode ctrls ( <ptr> ctx )
<cls> <noptr> rtl xx upid filter ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> snd saa cap src info ( <ptr> k control <dot> <ptr> u info )
<cls> <ptr> check fw upload ( )
<cls> <noptr> vid ioc g fmt overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> dib updater f ramp ( <ptr> fe <dot> <noptr> cfg sensitivity )
<cls> <noptr> sa axs raw fmt ( <ptr> sd <dot> <ptr> fmt )
<cls> <noptr> h vah open ( <ptr> p ctx )
<cls> <noptr> get qa mrs err count ( <ptr> dev addr <dot> <ptr> rs errors )
<cls> <noptr> stk try fmt ( <ptr> gsp ca dev <dot> <ptr> fmt )
<cls> <ptr> check meta out nr ( )
<cls> <noptr> wakeup data store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> spx read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <ptr> mds get ic adapter ( <ptr> client )
<cls> <noptr> ir sharp decode init ( )
<cls> <noptr> bt tv input init ( <ptr> b tv )
<cls> <noptr> mtk vcodec dec driver init ( )
<cls> <noptr> pvr h dw gpio chg out ( <ptr> h dw <dot> <noptr> msk <dot> <noptr> val )
<cls> <noptr> vid ioc encoder cmd ( <ptr> file <dot> <ptr> priv <dot> <ptr> cmd )
<cls> <noptr> av link write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> c x stop dma ( <ptr> port )
<cls> <noptr> ska a disconnect ( <ptr> sd )
<cls> <noptr> ov x g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> z l read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> cxx c tuner callback ( <ptr> core <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> m lv g mbus config ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> m start transfer ( <ptr> gsp ca dev )
<cls> <noptr> it disable ( <ptr> dev )
<cls> <noptr> v l printk ioctl ( <ptr> prefix <dot> <noptr> cmd )
<cls> <noptr> iv tv g register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <noptr> iv tv pass through mode ( <ptr> it v <dot> <noptr> enable )
<cls> <ptr> jpeg quant isation tables ( <ptr> length <dot> <noptr> quality )
<cls> <noptr> pct ve usb driver init ( )
<cls> <noptr> exy nos jpeg device run ( <ptr> priv )
<cls> <ptr> check multip m ( )
<cls> <noptr> go snd pcm pointer ( <ptr> sub stream )
<cls> <noptr> pac read reg ( <ptr> gsp ca dev <dot> <noptr> index )
<cls> <noptr> exy nos jpeg get int status ( <ptr> regs )
<cls> <noptr> media read ( <ptr> filp <dot> <ptr> buf <dot> <noptr> sz <dot> <ptr> off )
<cls> <noptr> max set filter coeffs ( <ptr> ctx <dot> <noptr> m sel <dot> <noptr> bank <dot> <ptr> coeffs )
<cls> <noptr> c xxx start stream ( <ptr> dev <dot> <noptr> ep mask )
<cls> <noptr> mtm reg write ( <ptr> client <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> dvb usb remote init ( <ptr> d )
<cls> <noptr> c pia usb change streaming alternate ( <ptr> cam <dot> <noptr> alt )
<cls> <ptr> isp stat buf find ( <ptr> stat <dot> <noptr> look empty )
<cls> <noptr> pt identify ( <ptr> pt )
<cls> <noptr> reg w page ( <ptr> gsp ca dev <dot> <ptr> page <dot> <noptr> len )
<cls> <ptr> iv tv search mailbox ( <ptr> mem <dot> <noptr> size )
<cls> <noptr> fmc prepare ( <ptr> f m dev )
<cls> <noptr> venus helper buffers done ( <ptr> inst <dot> <noptr> state )
<cls> <noptr> ctrl set uio cfg ( <ptr> demo d <dot> <ptr> uio cfg )
<cls> <noptr> tm register extension ( <ptr> ops )
<cls> <noptr> upd a read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> is ight decode ( <ptr> queue <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> spread signal strength ( <ptr> fe <dot> <ptr> signal )
<cls> <noptr> dvb dvr read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> isset fd config roll angle ( <ptr> is <dot> <noptr> val )
<cls> <ptr> check video debug ( )
<cls> <noptr> ov x set color matrix ( <ptr> ov x )
<cls> <noptr> dcm is selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> s )
<cls> <ptr> stv x get dvb front end ( <ptr> client )
<cls> <noptr> fim c lite try crop ( <ptr> fim c <dot> <ptr> r )
<cls> <noptr> uvc ctrl fixup x u info ( <ptr> dev <dot> <ptr> ctrl <dot> <ptr> info )
<cls> <noptr> m chip comp read frame ( <noptr> v <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> zol trix g signal ( <ptr> isa )
<cls> <noptr> tp g fill params pattern ( <ptr> tp g <dot> <noptr> p <dot> <ptr> params )
<cls> <noptr> v l stub try decoder cmd ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> fim c suspend ( <ptr> dev )
<cls> <ptr> check default rds buf ( )
<cls> <ptr> to tvp ( <ptr> sd )
<cls> <noptr> adv g std ( <ptr> sd <dot> <ptr> norm )
<cls> <noptr> lg x get rs frame ensemble ( <ptr> state <dot> <ptr> rs frame ens )
<cls> <noptr> pwc get size ( <ptr> pdev <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> stv set tv freq ( <ptr> dev <dot> <noptr> freq )
<cls> <noptr> gsc set frame size ( <ptr> frame <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> pb set blue balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c x query cap ( <ptr> file <dot> <ptr> core <dot> <ptr> cap )
<cls> <noptr> msi set tuner ( <ptr> dev )
<cls> <noptr> d ibm set output mode ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> af get stream config ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <noptr> keen es ctrl ( <ptr> ctrl )
<cls> <noptr> v l m m ioctl exp buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> eb )
<cls> <noptr> ctrl set crop l ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <ptr> check auto load ( )
<cls> <noptr> h fi session stop done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> fc read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> sti h cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <ptr> v bdc get base sgt ( <ptr> buf )
<cls> <noptr> is res read ( <ptr> dev <dot> <ptr> f h )
<cls> <noptr> sms dvb start feed ( <ptr> feed )
<cls> <noptr> dib ppid filter ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> load scale bw ( <ptr> core )
<cls> <noptr> str c hardware init ( <ptr> dev )
<cls> <noptr> io write clr set ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> fim c adjust m plane format ( <ptr> fmt <dot> <noptr> width <dot> <noptr> height <dot> <ptr> pix )
<cls> <noptr> setrgb quant ization range ( <ptr> sd )
<cls> <noptr> mpegts stop ( <ptr> state )
<cls> <ptr> v l fw node reference get int prop ( <ptr> fw node <dot> <ptr> prop <dot> <noptr> index <dot> <ptr> props <dot> <noptr> n props )
<cls> <noptr> c x d read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> skb af hw set test pattern ( <ptr> state <dot> <noptr> id )
<cls> <noptr> tp g reset source ( <ptr> tp g <dot> <noptr> width <dot> <noptr> height <dot> <noptr> field )
<cls> <noptr> fin tek suspend ( <ptr> pdev <dot> <noptr> state )
<cls> <ptr> check dvb force auto inversion ( )
<cls> <noptr> m xls f set ant path ( <ptr> state <dot> <noptr> ant path )
<cls> <noptr> v l print event subscription ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> write cam control x o ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> c x enable ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> x c set r f frequency ( <ptr> priv <dot> <noptr> freq hz )
<cls> <noptr> dst set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> bt tv irq wakeup top ( <ptr> b tv )
<cls> <noptr> r card rif g fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> saa write out dma ( <ptr> dev <dot> <noptr> which <dot> <ptr> v dma )
<cls> <noptr> saa g input ( <ptr> port <dot> <ptr> i )
<cls> <noptr> wpf configure frame ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> dvb video poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> fdt v set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> hel ene write regs ( <ptr> priv <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> iv tv stop v l encode stream ( <ptr> s <dot> <noptr> g open d )
<cls> <noptr> as cote set params ( <ptr> fe )
<cls> <ptr> mtk mdp find fmt by index ( <noptr> index <dot> <noptr> type )
<cls> <noptr> venus write queue ( <ptr> h dev <dot> <ptr> queue <dot> <ptr> packet <dot> <ptr> r x req )
<cls> <noptr> ir timer repeat ( <ptr> t )
<cls> <noptr> dvb audio write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> fill buf mode ( <ptr> cap <dot> <ptr> data <dot> <noptr> num )
<cls> <noptr> e did write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> dvb usb get hex line ( <ptr> fw <dot> <ptr> h x <dot> <ptr> pos )
<cls> <noptr> csi queue ( <ptr> video <dot> <ptr> buffer )
<cls> <noptr> philips sut y c i set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> vivid update format cap ( <ptr> dev <dot> <noptr> keep controls )
<cls> <noptr> c amic read ( <ptr> sd <dot> <noptr> reg addr )
<cls> <noptr> mtk jpeg parse ( <ptr> param <dot> <ptr> src add rva <dot> <noptr> src size )
<cls> <noptr> red rat learn complete ( <ptr> urb )
<cls> <noptr> tea c probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> h fi session set buffers ( <ptr> inst <dot> <ptr> bd )
<cls> <noptr> scm read ( <ptr> state <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> v levent queue f h ( <ptr> f h <dot> <ptr> ev <dot> <noptr> ts )
<cls> <noptr> net up uni dvb init dev ( <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> dib rc query old firmware ( <ptr> d )
<cls> <noptr> a speed video set resolution ( <ptr> video )
<cls> <noptr> tp g fill plane extras ( <ptr> tp g <dot> <ptr> params <dot> <noptr> p <dot> <noptr> h <dot> <ptr> v buf )
<cls> <noptr> saas ctrl ( <ptr> ctrl )
<cls> <noptr> vi codec stop streaming ( <ptr> q )
<cls> <noptr> stk cancel i soc ( <ptr> dev )
<cls> <noptr> t init ( <ptr> gsp ca dev )
<cls> <noptr> it x set params ( <ptr> fe )
<cls> <noptr> bt tv switch overlay ( <ptr> b tv <dot> <ptr> f h <dot> <ptr> new )
<cls> <noptr> altera hw filt init ( <ptr> config <dot> <noptr> hw filt nr )
<cls> <noptr> init r cmap pinn acle color ( )
<cls> <ptr> pvr hd wget video stream ( <ptr> hp )
<cls> <noptr> cobalt cpl d status ( <ptr> cobalt )
<cls> <noptr> coda try pixel format ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> f mode store ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> isp video buffer queue ( <ptr> buf )
<cls> <noptr> get cur symbol rate ( <ptr> state <dot> <ptr> p symbol rate )
<cls> <ptr> mtk jpeg vb to src buf ( <ptr> vb )
<cls> <noptr> cfg demo d abort tune ( <ptr> state )
<cls> <noptr> hdc s probe ( <ptr> sd )
<cls> <noptr> dw driver init ( )
<cls> <noptr> t dax read activity status regs ( <ptr> sd )
<cls> <noptr> m xlt tuner init ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> v l prio check ( <ptr> global <dot> <noptr> local )
<cls> <noptr> scc am if sub dev get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> bt tv poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> ic read ( <ptr> adap <dot> <noptr> adr <dot> <ptr> msg <dot> <noptr> len <dot> <ptr> answ <dot> <noptr> alen )
<cls> <ptr> check fake ca system ids ( )
<cls> <noptr> exy nos jpeg output raw fmt ( <ptr> regs <dot> <noptr> fmt )
<cls> <noptr> sms board led feedback ( <ptr> core dev <dot> <noptr> led )
<cls> <noptr> v l query menu ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> sms dvb stats not ready ( <ptr> fe )
<cls> <noptr> coda h level ( <noptr> levelid c )
<cls> <noptr> deltas fmt stream ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> smi irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> r ving pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <ptr> rtl sdr get next fill buf ( <ptr> dev )
<cls> <ptr> check iv tv first minor ( )
<cls> <noptr> dmx c cdc suspend ( <ptr> dev )
<cls> <noptr> nv t select logical dev ( <ptr> nv t <dot> <noptr> l dev )
<cls> <noptr> m tt enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> p init ( <ptr> tn r dmd )
<cls> <noptr> x c set tv standard ( <ptr> priv <dot> <noptr> video mode <dot> <noptr> audio mode )
<cls> <noptr> si set mute ( <ptr> s dev <dot> <noptr> mute )
<cls> <noptr> lg sgx xic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> x c set x tal ( <ptr> fe )
<cls> <noptr> j l c stream start cif small ( <ptr> gsp ca dev )
<cls> <ptr> check seek timeout ( )
<cls> <noptr> ca get slot descr ( <ptr> state <dot> <ptr> pca message <dot> <ptr> arg )
<cls> <noptr> meta cap start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> cpi ag fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> hdc s dump ( <ptr> sd )
<cls> <noptr> m chip h size ( )
<cls> <noptr> flash io ( <ptr> dev <dot> <noptr> lnr <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> dw set ctrl ( <ptr> ctrl )
<cls> <noptr> px p try fmt ( <ptr> f <dot> <ptr> fmt )
<cls> <ptr> r jn find data fmt ( <noptr> code <dot> <ptr> fmt <dot> <noptr> n )
<cls> <noptr> via cam fmt post ( <ptr> user fmt <dot> <ptr> sensor fmt )
<cls> <noptr> ctrl freq get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> af streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> sc mic write ( <ptr> client <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> v pdm are set desc list ( <ptr> list )
<cls> <noptr> c xxx send usb command ( <ptr> ic bus <dot> <ptr> req data )
<cls> <noptr> pvr channel limit inputs ( <ptr> cp <dot> <noptr> cms k )
<cls> <noptr> bcm read unc ( <ptr> fe <dot> <ptr> unc )
<cls> <ptr> check gpio tracking ( )
<cls> <noptr> a speed video probe ( <ptr> pdev )
<cls> <noptr> f m irq send flag get cmd ( <ptr> f m dev )
<cls> <noptr> ov x upload quan tables ( <ptr> sd )
<cls> <noptr> dvb sky usb c i set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> bts std output ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> mtm get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> cio sub dev subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <ptr> stv ter attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> e mmap rpp drv init ( )
<cls> <noptr> isset isp afc ( <ptr> is <dot> <noptr> cmd <dot> <noptr> val )
<cls> <noptr> c pia init camera ( <ptr> cam )
<cls> <noptr> init r cmap a link d tum ( )
<cls> <noptr> c xxx codec settings ( <ptr> dev )
<cls> <noptr> valid pix ( <ptr> dev <dot> <noptr> win y <dot> <noptr> win x <dot> <noptr> f by <dot> <noptr> fbx )
<cls> <noptr> tvp xs std ( <ptr> sd <dot> <noptr> std id )
<cls> <ptr> vsp entity get pad format ( <ptr> entity <dot> <ptr> cfg <dot> <noptr> pad )
<cls> <noptr> smi ic set sda ( <ptr> data <dot> <noptr> state )
<cls> <noptr> a zci init ( <ptr> adap )
<cls> <noptr> c x bit set sda ( <ptr> data <dot> <noptr> state )
<cls> <noptr> config demo d ( <ptr> cl <dot> <noptr> clk )
<cls> <noptr> ad open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> is is fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ska a set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> mtk mdp hw set input addr ( <ptr> ctx <dot> <ptr> addr )
<cls> <noptr> sensor write reg ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> flags <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> uvc meta register ( <ptr> stream )
<cls> <noptr> a speed video enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> vsp video resume ( <ptr> vsp )
<cls> <noptr> set exposure ( <ptr> gsp ca dev <dot> <noptr> expo <dot> <noptr> min clock div )
<cls> <noptr> ds read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> tw dump regs ( <ptr> dev )
<cls> <noptr> v lg mod ulator ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> ati remote send packet ( <ptr> ati remote <dot> <noptr> cmd <dot> <ptr> data )
<cls> <noptr> tt usb tuner t dax attach ( <ptr> adap )
<cls> <noptr> m bas stats not ready ( <ptr> fe )
<cls> <noptr> smi hw init ( <ptr> dev )
<cls> <noptr> j pu set q tbl ( <ptr> j pu <dot> <noptr> quality )
<cls> <noptr> vivid cec adap log addr ( <ptr> adap <dot> <noptr> log addr )
<cls> <noptr> vsp uds set alpha ( <ptr> entity <dot> <ptr> dl b <dot> <noptr> alpha )
<cls> <noptr> sms usb resume ( <ptr> int f )
<cls> <noptr> evi ation ( <ptr> state )
<cls> <noptr> m bas get front end ( <ptr> fe )
<cls> <noptr> flite hw set interrupt mask ( <ptr> dev )
<cls> <noptr> tc set front end ( <ptr> fe )
<cls> <noptr> set contrast ( <ptr> gsp ca dev <dot> <noptr> val <dot> <noptr> sat )
<cls> <noptr> c x g fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> tw x contig buf refill ( <ptr> vc <dot> <noptr> pb )
<cls> <noptr> ( <ptr> core <dot> <noptr> mode )
<cls> <noptr> coda memcpy para buf ( <ptr> para buf <dot> <ptr> desc )
<cls> <noptr> stv x send dis eq c msg ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> os d set blink attribute ( <ptr> sd <dot> <noptr> enable <dot> <noptr> blink )
<cls> <noptr> tua set params ( <ptr> fe )
<cls> <noptr> stv cab get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> px p job finish ( <ptr> dev )
<cls> <noptr> sd driver init ( )
<cls> <ptr> check alt ( )
<cls> <noptr> t wxs g desc fill ( <ptr> descs <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> pvr h dw cmd h cwd e mod reset ( <ptr> h dw <dot> <noptr> onoff )
<cls> <noptr> ves set symbol rate ( <ptr> state <dot> <noptr> symbol rate )
<cls> <noptr> dw front end attach ( <ptr> d )
<cls> <noptr> c x dt nr dmd dvb t check ts lock ( <ptr> tn r dmd <dot> <ptr> lock )
<cls> <noptr> flex cop pci isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> c x buf prepare ( <ptr> q <dot> <ptr> dev <dot> <ptr> buf )
<cls> <noptr> ic setattr ( <ptr> dev <dot> <noptr> attr )
<cls> <noptr> mtk jpeg check resolution change ( <ptr> ctx <dot> <ptr> param )
<cls> <noptr> sp csi ssr x buffer ( <ptr> sd <dot> <ptr> buf <dot> <ptr> size )
<cls> <noptr> c xdr init ( <ptr> fe )
<cls> <noptr> lg dta get tune settings ( <ptr> fe <dot> <ptr> fet une settings )
<cls> <noptr> mtv probe ( <ptr> client )
<cls> <noptr> mtk w mask ( <ptr> ir <dot> <noptr> val <dot> <noptr> mask <dot> <noptr> reg )
<cls> <noptr> c x dt nr dmd gpio read sub ( <ptr> tn r dmd <dot> <noptr> id <dot> <ptr> value )
<cls> <noptr> igu an air irq out ( <ptr> urb )
<cls> <noptr> fim c ish w update param ( <ptr> is <dot> <noptr> offset )
<cls> <noptr> tm start feed ( <ptr> feed )
<cls> <noptr> vivid field out ( <ptr> dev <dot> <noptr> field )
<cls> <noptr> shark register leds ( <ptr> shark <dot> <ptr> dev )
<cls> <noptr> c x get priv ( <dptr> priv <dot> <ptr> ic <dot> <noptr> client address )
<cls> <noptr> linear to rec ( <noptr> v )
<cls> <noptr> mrs read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> venus session abort ( <ptr> inst )
<cls> <noptr> usb tv set regs ( <ptr> usb tv <dot> <noptr> regs <dot> <noptr> size )
<cls> <noptr> ovh flip disable ( <ptr> sensor )
<cls> <noptr> stb normalise regs ( <noptr> regs )
<cls> <noptr> c x gpio init ( <ptr> dev )
<cls> <noptr> ds read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> mrs read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> pt init table count ( <ptr> pt )
<cls> <noptr> vpx write fp block ( <ptr> sd <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> net upc is lot reset ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> c xxx afe adjust ref count ( <ptr> dev <dot> <noptr> video input )
<cls> <noptr> asf e read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> e set mixer gain ( <ptr> fe )
<cls> <noptr> vid io cs fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> go usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> tw x disable channel ( <ptr> dev <dot> <noptr> channel )
<cls> <noptr> stv get freq auto ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> iv tv get sda old ( <ptr> data )
<cls> <noptr> c x usb f mdm e tuner attach ( <ptr> adap )
<cls> <noptr> saas std ( <ptr> file <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> meta cap buf request complete ( <ptr> vb )
<cls> <noptr> register fim c entity ( <ptr> f md <dot> <ptr> fim c )
<cls> <noptr> tuner standby ( <ptr> sd )
<cls> <noptr> init r cmap video mate tv pvr ( )
<cls> <noptr> m x write ( <ptr> udev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index )
<cls> <noptr> vb dvb start feed ( <ptr> feed )
<cls> <noptr> msp c detect stereo ( <ptr> client )
<cls> <noptr> c x m sleep timeout ( <noptr> msecs <dot> <noptr> intr )
<cls> <noptr> af is fec mon available ( <ptr> fe <dot> <ptr> available )
<cls> <noptr> xt pgs ctrl ( <ptr> ctrl )
<cls> <noptr> dib risc mem setup cmd ( <ptr> state <dot> <noptr> addr <dot> <noptr> len <dot> <noptr> reading )
<cls> <ptr> find format ( <ptr> f )
<cls> <noptr> six x set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> sp cec runtime suspend ( <ptr> dev )
<cls> <noptr> g d set flip ( <ptr> d <dot> <noptr> r )
<cls> <noptr> v feb us enable wr if ( <ptr> v fe <dot> <noptr> enable )
<cls> <noptr> imon suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> v lg ext ctrls ( <ptr> hdl <dot> <ptr> v dev <dot> <ptr> m dev <dot> <ptr> cs )
<cls> <noptr> c x find handle ( <ptr> c x )
<cls> <noptr> c x dsp detect stereo sap ( <ptr> core )
<cls> <noptr> v pu get v ench w capa ( <ptr> pdev )
<cls> <noptr> sd post reset ( <ptr> int f )
<cls> <noptr> tw reset ( <ptr> client )
<cls> <noptr> fin tek cir regs init ( <ptr> fin tek )
<cls> <noptr> set last buffer ( <ptr> dst buf <dot> <ptr> src buf <dot> <ptr> ctx )
<cls> <noptr> flex copi c write ( <ptr> fc <dot> <noptr> r <dot> <ptr> buf )
<cls> <ptr> dvb card str ( <noptr> c )
<cls> <noptr> c xir probe ( <ptr> dev )
<cls> <noptr> venus process msg sys error ( <ptr> h dev <dot> <ptr> packet )
<cls> <noptr> mtk mdp enum fmt ( <ptr> f <dot> <noptr> type )
<cls> <noptr> t dax set fe ( <ptr> fe )
<cls> <noptr> scaling goodness ( <ptr> sub dev <dot> <noptr> w <dot> <noptr> ask w <dot> <noptr> h <dot> <noptr> ask h <dot> <noptr> flags )
<cls> <noptr> set capture size ( <ptr> go <dot> <ptr> fmt <dot> <noptr> try )
<cls> <noptr> fin tek open ( <ptr> dev )
<cls> <noptr> vid ioc v dec d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> tw timer isr ( <ptr> dev )
<cls> <noptr> uds max width ( <ptr> entity <dot> <ptr> pipe )
<cls> <noptr> vpx us binop unlocked ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> ths probe ( <ptr> client )
<cls> <noptr> uvc query v l menu ( <ptr> chain <dot> <ptr> query menu )
<cls> <noptr> scc am ifs selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> sel )
<cls> <noptr> ccd cv dis r ( <ptr> c cdc )
<cls> <ptr> max from sd ( <ptr> sd )
<cls> <noptr> is igraph init ( <ptr> is i )
<cls> <ptr> format by fourcc ( <noptr> fourcc )
<cls> <noptr> isl voltage boost ( <ptr> fe <dot> <noptr> arg )
<cls> <noptr> set frame rate ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> net upc iop cam ( <ptr> en <dot> <noptr> slot <dot> <noptr> flag <dot> <noptr> read <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> m xls f front end attach mercury m h ( <ptr> adap )
<cls> <noptr> c cdc restore defaults ( )
<cls> <noptr> as dvb dmx stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> dcm i probe ( <ptr> pdev )
<cls> <noptr> scratch mark header ( <ptr> usb vision )
<cls> <noptr> ddb init ( <ptr> dev )
<cls> <noptr> f cvc o cal trigger ( <ptr> priv )
<cls> <noptr> msm csi phy register entity ( <ptr> csi phy <dot> <ptr> v l dev )
<cls> <noptr> cro sec cec driver init ( )
<cls> <noptr> h fi session process buf ( <ptr> inst <dot> <ptr> fd )
<cls> <noptr> lg td q csf set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> dib read ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> c x dt nr dmd check internal cpu status ( <ptr> tn r dmd <dot> <ptr> task completed )
<cls> <noptr> ctrl set iso ( <ptr> is <dot> <noptr> value )
<cls> <noptr> sp mfc buf init ( <ptr> vb )
<cls> <noptr> vpx set pid ( <ptr> adap <dot> <noptr> pid <dot> <noptr> id <dot> <noptr> onoff )
<cls> <noptr> resizer set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> r vin query d v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> cal wr dma config ( <ptr> ctx <dot> <noptr> width )
<cls> <noptr> m xls f front end attach mercury ( <ptr> adap )
<cls> <noptr> vid ioc exp buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> eb )
<cls> <noptr> at b m read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> c x dt nr dmd set cfg ( <ptr> tn r dmd <dot> <noptr> id <dot> <noptr> value )
<cls> <noptr> dvb usb ctrl feed ( <ptr> dvb dmx feed <dot> <noptr> onoff )
<cls> <noptr> l gdt write regs ( <ptr> state <dot> <ptr> regs <dot> <noptr> len )
<cls> <noptr> cobalt query cap ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> vcap )
<cls> <noptr> bt tv g fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> bpf rc pointer rel ( <ptr> sample <dot> <noptr> relx <dot> <noptr> rely )
<cls> <noptr> any see front end attach ( <ptr> adap )
<cls> <noptr> td a set if notch ( <ptr> fe )
<cls> <noptr> v ls priority ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> adv x afe g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> c x alsa d main it ( <ptr> chip <dot> <noptr> nr pages )
<cls> <noptr> c x der freeze regs ( <ptr> priv )
<cls> <noptr> v pfe enum size ( <ptr> file <dot> <ptr> priv <dot> <ptr> f size )
<cls> <noptr> lme get stream config ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <noptr> stv init stats ( <ptr> state )
<cls> <noptr> adv resume ( <ptr> dev )
<cls> <noptr> exy nos jpeg set x ( <ptr> regs <dot> <noptr> x )
<cls> <noptr> dts input ( <ptr> filp <dot> <ptr> p <dot> <noptr> i )
<cls> <noptr> tt usb dec handle irq ( <ptr> urb )
<cls> <noptr> ska a configure video bus ( <ptr> ska a <dot> <noptr> bus type <dot> <noptr> n lanes )
<cls> <noptr> st kac wait transfer complete ( <ptr> dev )
<cls> <noptr> c xs audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> v out )
<cls> <noptr> v l m m query buf ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> buf )
<cls> <noptr> cam i fre initialize ( <ptr> vp )
<cls> <noptr> dump reg ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> v pu enc set param ( <ptr> v pu <dot> <noptr> id <dot> <ptr> enc param )
<cls> <ptr> type name ( <noptr> type )
<cls> <noptr> six radio change func ( <ptr> radio <dot> <noptr> func )
<cls> <noptr> nxt x read bytes ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> sms core notify callbacks ( <ptr> core dev <dot> <ptr> device <dot> <noptr> arrival )
<cls> <noptr> iv tvf b set display window ( <ptr> it v <dot> <ptr> iv tv window )
<cls> <noptr> d mir init ( <ptr> d m )
<cls> <ptr> check buf blocks ( )
<cls> <noptr> usb vision init compression ( <ptr> usb vision )
<cls> <noptr> td a has signal ( <ptr> fe <dot> <ptr> signal )
<cls> <noptr> cam ifs cxx hw set scaler ( <ptr> vp )
<cls> <noptr> write vector ( <ptr> gsp ca dev <dot> <noptr> data )
<cls> <noptr> v pen c init ( <ptr> ctx )
<cls> <noptr> em xx init dev ( <ptr> dev <dot> <ptr> udev <dot> <ptr> int f <dot> <noptr> minor )
<cls> <noptr> techn is atus bic func ( <ptr> adapter )
<cls> <noptr> aud vb register ( <ptr> dev )
<cls> <noptr> pwc decompress ( <ptr> pdev <dot> <ptr> f buf )
<cls> <noptr> stk s ctrl ( <ptr> ctrl )
<cls> <noptr> td a printk ( <ptr> state <dot> <ptr> level <dot> <ptr> func <dot> <ptr> fmt )
<cls> <noptr> r vin get interrupt status ( <ptr> vin )
<cls> <noptr> cxa v log status ( <ptr> sd )
<cls> <noptr> tm set volumes if ( <ptr> dev <dot> <noptr> vol )
<cls> <noptr> sp jpeg buf prepare ( <ptr> vb )
<cls> <noptr> dr x d read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> six radio range is inside of the b and ( <noptr> low <dot> <noptr> high <dot> <noptr> b and )
<cls> <noptr> scc am if vid ioc enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> norm fsc ( <noptr> norm )
<cls> <noptr> ska a stream ( <ptr> ska a <dot> <noptr> enable )
<cls> <noptr> v l pipeline link notify ( <ptr> link <dot> <noptr> flags <dot> <noptr> notification )
<cls> <noptr> h fi session flush done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> c x probe ( <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> sun x iir probe ( <ptr> pdev )
<cls> <noptr> vp if buffer queue ( <ptr> vb )
<cls> <noptr> mtp get format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c cdc get buf type ( )
<cls> <noptr> skb af hw init ( <ptr> state )
<cls> <noptr> ir sony decode init ( )
<cls> <noptr> tv audio set carrier ( <ptr> dev <dot> <noptr> primary <dot> <noptr> secondary )
<cls> <noptr> l gdt x set parameters ( <ptr> fe )
<cls> <ptr> check i soc debug ( )
<cls> <noptr> net up unid v bci read cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> ddb output write ( <ptr> output <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> mce usb dev probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> tt usb ic msg ( <ptr> tt usb <dot> <noptr> addr <dot> <ptr> snd buf <dot> <noptr> snd len <dot> <ptr> rcv buf <dot> <noptr> rcv len )
<cls> <noptr> c x read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> via cam vb prepare ( <ptr> vb )
<cls> <noptr> v fes etc gc override ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> enable )
<cls> <noptr> iv tv setup slice dvb i buf ( <ptr> it v )
<cls> <noptr> v l m m stream on ( <ptr> file <dot> <ptr> m mctx <dot> <noptr> type )
<cls> <noptr> af read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> red rat u stolen ( <noptr> micro sec )
<cls> <noptr> img ir allowed protos ( <ptr> priv )
<cls> <noptr> lp f count tons ( <noptr> count )
<cls> <noptr> sh vou try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> smi port init ( <ptr> port <dot> <noptr> dma chan used )
<cls> <noptr> tua probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> saa probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sa ats start ( <ptr> dev )
<cls> <noptr> a speed video buf s done ( <ptr> video <dot> <noptr> state )
<cls> <noptr> samsung tbm u set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> f m r x get stereo mono ( <ptr> f m dev <dot> <ptr> mode )
<cls> <noptr> v l fill fmt desc ( <ptr> fmt )
<cls> <noptr> pm timeout store ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> ov calc c matrix ( <ptr> info <dot> <noptr> matrix <dot> <noptr> sat <dot> <noptr> hue )
<cls> <noptr> devid show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> t dax set params ( <ptr> fe )
<cls> <noptr> cxx calc audio properties ( <ptr> params )
<cls> <noptr> bt tvs selection ( <ptr> file <dot> <ptr> f <dot> <ptr> sel )
<cls> <noptr> stk vid ioc query buf ( <ptr> filp <dot> <ptr> priv <dot> <ptr> buf )
<cls> <ptr> v pfe get p data ( <ptr> v pfe )
<cls> <noptr> rtl select ( <ptr> mux c <dot> <noptr> chan id )
<cls> <noptr> mtm set pix fmt ( <ptr> mtm <dot> <noptr> code )
<cls> <noptr> v l ctrl handler setup ( <ptr> hdl )
<cls> <noptr> init r cmap z xir dec ( )
<cls> <noptr> ene shutdown ( <ptr> pnp dev )
<cls> <noptr> ven cs fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> pvr io read setup ( <ptr> cp <dot> <ptr> sp )
<cls> <noptr> ce u open ( <ptr> file )
<cls> <noptr> it get irq causes ( <ptr> dev )
<cls> <noptr> adb g d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> ter rate c init ( )
<cls> <noptr> wcf smbus read byte ( <ptr> sd <dot> <ptr> v )
<cls> <noptr> mtk jpeg dec set br z factor ( <ptr> base <dot> <noptr> yscale w <dot> <noptr> yscale h <dot> <noptr> uv scale w <dot> <noptr> uv scale h )
<cls> <noptr> update from auto cluster ( <ptr> master )
<cls> <noptr> z i log ir format ( <ptr> rc dev <dot> <ptr> tx buf <dot> <noptr> count <dot> <ptr> code block )
<cls> <noptr> final package ( <ptr> go <dot> <ptr> code <dot> <noptr> space )
<cls> <ptr> find fmt ( <ptr> pixel format <dot> <ptr> mbus code <dot> <noptr> index )
<cls> <noptr> c pia usb suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> vp bes d v timings ( <ptr> v pbe dev <dot> <ptr> d v timings )
<cls> <noptr> b disp ctx state lock clear ( <noptr> state <dot> <ptr> ctx )
<cls> <noptr> sun ics i update buf addr ( <ptr> csi <dot> <noptr> addr )
<cls> <noptr> vid ioc g fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> stv x set maxs rate ( <ptr> state <dot> <noptr> clk <dot> <noptr> s rate )
<cls> <noptr> m xls f demo d calc snr ( <ptr> state <dot> <ptr> snr )
<cls> <noptr> write gpio ( <ptr> state )
<cls> <noptr> tws fmt ( <ptr> sd <dot> <ptr> m f )
<cls> <noptr> c xdr get tune settings t ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> c x dt nr dmd sets can mode ( <ptr> tn r dmd <dot> <noptr> sys <dot> <noptr> scan mode end )
<cls> <noptr> bt tv tea x set pins ( <ptr> tea <dot> <noptr> pins )
<cls> <noptr> hel ene ic debug ( <ptr> priv <dot> <noptr> reg <dot> <noptr> write <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> ov xic driver init ( )
<cls> <noptr> cpi are set camera ( <ptr> cam )
<cls> <noptr> vps m px driver init ( )
<cls> <noptr> tm dvb unregister ( )
<cls> <noptr> ln b p set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> as usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> mtv configure pixel rate ( <ptr> mtv )
<cls> <noptr> fd ppm runtime suspend ( <ptr> dev )
<cls> <noptr> dvb front end init ( <ptr> fe )
<cls> <noptr> mcc ic notify unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> fw write ( <ptr> client <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> c x d tune ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> vp bit set scl ( <ptr> data <dot> <noptr> state )
<cls> <noptr> isc clk set rate ( <ptr> hw <dot> <noptr> rate <dot> <noptr> parent rate )
<cls> <noptr> digit v driver init ( )
<cls> <noptr> demo d attach dummy ( <ptr> input )
<cls> <noptr> ov xs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> exy nos jpeg stride ( <ptr> regs <dot> <noptr> img fmt <dot> <noptr> width )
<cls> <noptr> recalculate fifo timeout ( <ptr> pc dev <dot> <noptr> p clk )
<cls> <noptr> gss stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> h fi session start done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> sp mfc handle stream complete ( <ptr> ctx )
<cls> <noptr> afr c decode ( <ptr> d <dot> <ptr> data <dot> <noptr> len <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> r track set pins ( <ptr> handle <dot> <noptr> pins )
<cls> <noptr> maxs ctrl r x mode ( <ptr> ctx <dot> <noptr> r x mode )
<cls> <noptr> node update ( <ptr> unit )
<cls> <noptr> sh ve us fmt ( <ptr> ve u file <dot> <ptr> f )
<cls> <noptr> ov try frame size ( <ptr> m f <dot> <dptr> size )
<cls> <noptr> put tab to reg ( <ptr> gsp ca dev <dot> <ptr> tab <dot> <noptr> tab size <dot> <noptr> addr )
<cls> <noptr> saa k world sbt v d toggle agc ( <ptr> dev <dot> <noptr> mode )
<cls> <noptr> f mode show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> tcs ctrl detect tx v ( <ptr> sd )
<cls> <noptr> lg dta spectral inversion ( <ptr> state <dot> <ptr> p <dot> <noptr> inversion )
<cls> <noptr> usb tv chunk to v buf ( <ptr> frame <dot> <ptr> src <dot> <noptr> chunk no <dot> <noptr> odd )
<cls> <noptr> t dax enable tun eric ( <ptr> state )
<cls> <noptr> checkedid ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> sub dev compat ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> fim c ish w stream on ( <ptr> is )
<cls> <noptr> cpi as jpeg comp ( <ptr> file <dot> <ptr> f h <dot> <ptr> parms )
<cls> <ptr> m xlt attach ( <ptr> fe <dot> <ptr> ic <dot> <noptr> addr <dot> <ptr> cfg )
<cls> <noptr> vivid vid caps std ( <ptr> file <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> adv have r x sense ( <ptr> sd )
<cls> <noptr> ov probe ( <ptr> client <dot> <ptr> devid )
<cls> <noptr> omap isp stat suspend ( <ptr> stat )
<cls> <noptr> c x avg sliced fmt ( <ptr> sd <dot> <ptr> sv b i )
<cls> <noptr> d m emit key ( <ptr> work )
<cls> <noptr> sout p ( <noptr> offset <dot> <noptr> value )
<cls> <noptr> sun x iir driver init ( )
<cls> <noptr> tt usb dec process urb ( <ptr> urb )
<cls> <noptr> ov x g frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> afe write byte ( <ptr> dev <dot> <noptr> saddr <dot> <noptr> data )
<cls> <noptr> buffer finish ( <ptr> vb )
<cls> <noptr> af w regs ( <ptr> client <dot> <noptr> cmd <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len <dot> <noptr> lock )
<cls> <noptr> csi phy set clock rates ( <ptr> csi phy )
<cls> <noptr> venus helper set dyn buf mode ( <ptr> inst )
<cls> <noptr> c xxx demo d reset ( <ptr> dev )
<cls> <noptr> m xls f demo d read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> vivid vid out g selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> sel )
<cls> <noptr> m i probe ( <ptr> gsp ca dev )
<cls> <noptr> t vps std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> tp gg interleaved plane ( <ptr> tp g <dot> <noptr> buf line )
<cls> <noptr> v l fw node reference parse ( <ptr> dev <dot> <ptr> notifier <dot> <ptr> prop )
<cls> <noptr> dvb dmx sw filter ( <ptr> demux <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> show val norm ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vp front end init ( <ptr> mantis <dot> <ptr> fe )
<cls> <noptr> d ibm bread snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> c xxx disable ( <ptr> dev )
<cls> <noptr> d m read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> sa ahs driver init ( )
<cls> <noptr> all back ( <ptr> buffer <dot> <noptr> buffer len <dot> <ptr> buffer <dot> <noptr> buffer len <dot> <ptr> dvb dmx filter <dot> <ptr> av )
<cls> <noptr> usb tv audio init ( <ptr> usb tv )
<cls> <ptr> check sensor preferred ( )
<cls> <noptr> c xxx set model ( <ptr> dev )
<cls> <noptr> v l stub query d v timings ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> read pipe completion ( <ptr> pur b )
<cls> <noptr> nv t set reg bit ( <ptr> nv t <dot> <noptr> val <dot> <noptr> reg )
<cls> <noptr> em xx audio i soc irq ( <ptr> urb )
<cls> <noptr> tt usb cmd ( <ptr> tt usb <dot> <ptr> data <dot> <noptr> len <dot> <noptr> need result )
<cls> <noptr> adv xx cec adap enable ( <ptr> adap <dot> <noptr> enable )
<cls> <noptr> ov checkid ( <ptr> sensor )
<cls> <noptr> c x mdl sync for device ( <ptr> s <dot> <ptr> mdl )
<cls> <noptr> c x write regs ( <ptr> state <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> len <dot> <noptr> incr )
<cls> <noptr> set audio start ( <ptr> core <dot> <noptr> mode )
<cls> <noptr> v l unsubscribe event ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> at b m set fe ( <ptr> fe )
<cls> <noptr> reg wi ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> pvr h dw check firmware ( <ptr> h dw )
<cls> <noptr> tcc ec adap log addr ( <ptr> adap <dot> <noptr> log addr )
<cls> <noptr> coda hw init ( <ptr> dev )
<cls> <noptr> fc get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> mars s ctrl ( <ptr> ctrl )
<cls> <noptr> nv tir raw set wakeup filter ( <ptr> dev <dot> <ptr> sc filter )
<cls> <noptr> uvc ioctl enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> m rst probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> vi codec buf out validate ( <ptr> vb )
<cls> <noptr> ctrl channel freq get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> td a set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> stb calc der ot time ( <noptr> s rate )
<cls> <noptr> pluto reset ts ( <ptr> pluto <dot> <noptr> re enable )
<cls> <noptr> d ibm set diversity in ( <ptr> demo d <dot> <noptr> onoff )
<cls> <noptr> ds read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> set osc freq ( <ptr> priv <dot> <noptr> freq )
<cls> <noptr> tw x start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> isc clk set parent ( <ptr> hw <dot> <noptr> index )
<cls> <noptr> wm driver init ( )
<cls> <noptr> tt usb set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> r vin fill hw slot ( <ptr> vin <dot> <noptr> slot )
<cls> <noptr> vpx set pld state ( <ptr> adap <dot> <noptr> state )
<cls> <noptr> v l stub g input ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <ptr> check z v mode ( )
<cls> <noptr> venc if encode ( <ptr> ctx <dot> <noptr> opt <dot> <ptr> frm buf <dot> <ptr> b sbuf <dot> <ptr> result )
<cls> <noptr> pvr s frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> v f )
<cls> <noptr> ves init ( <ptr> fe )
<cls> <noptr> detect a ame i a j ( <ptr> core <dot> <noptr> x <dot> <noptr> n )
<cls> <noptr> next sub range ( <ptr> state )
<cls> <noptr> red rat val to mod freq ( <ptr> ir data )
<cls> <noptr> tmt v audio set mute ( <ptr> dev <dot> <noptr> mute )
<cls> <noptr> au analog stream reset ( <ptr> dev )
<cls> <noptr> str c suspend ( <ptr> dev )
<cls> <noptr> au bulk timeout ( <ptr> t )
<cls> <noptr> multi reg write ( <ptr> client <dot> <ptr> regs <dot> <noptr> num )
<cls> <noptr> f m irq af jump rdf req resp ( <ptr> f m dev )
<cls> <noptr> tlv aic b probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> vb stream off ( <ptr> q <dot> <noptr> type )
<cls> <noptr> em xx set out fmt ( <ptr> dev )
<cls> <noptr> dib fw boot ( <ptr> state <dot> <ptr> code a <dot> <noptr> lena <dot> <ptr> code b <dot> <noptr> len b )
<cls> <noptr> snd tea x set freq ( <ptr> tea )
<cls> <noptr> ca get cainfo ( <ptr> state )
<cls> <noptr> m cam ctl r dma contig ( <ptr> cam )
<cls> <noptr> hgt configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> show filter ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vid cap stop streaming ( <ptr> v q )
<cls> <noptr> spx initial setup ( <ptr> fe <dot> <ptr> fw )
<cls> <noptr> t dax asleep ( <ptr> fe )
<cls> <noptr> e tek set ctrl ( <ptr> ctrl )
<cls> <noptr> input write dvb ( <ptr> input <dot> <ptr> input )
<cls> <noptr> clean irq status ( <noptr> irq status <dot> <ptr> addr )
<cls> <noptr> function ality ( <ptr> adap )
<cls> <noptr> md swr reg val tab ( <ptr> dev <dot> <ptr> tab <dot> <noptr> tablen )
<cls> <noptr> preview update brightness ( <ptr> prev <dot> <noptr> brightness )
<cls> <noptr> sp mfc run res change ( <ptr> ctx )
<cls> <noptr> hel ene sleep ( <ptr> fe )
<cls> <noptr> cec queue msg f h ( <ptr> f h <dot> <ptr> msg )
<cls> <noptr> tm add into dev list ( <ptr> dev )
<cls> <noptr> dmc cdc probe ( <ptr> pdev )
<cls> <noptr> dvb sky identify state ( <ptr> d <dot> <dptr> name )
<cls> <noptr> noon set flip ( <ptr> sd <dot> <noptr> h flip <dot> <noptr> v flip )
<cls> <noptr> avc identify subunit ( <ptr> fdt v )
<cls> <noptr> set params ( <ptr> fe )
<cls> <noptr> stv cab snr power ( <ptr> fe )
<cls> <noptr> c x dt nr dmd dvb t mon l change ( <ptr> tn r dmd <dot> <ptr> l change )
<cls> <noptr> get vsb post rsp cker r ( <ptr> dev addr <dot> <ptr> pck errs <dot> <ptr> pck count )
<cls> <noptr> saa api set vb i format ( <ptr> port )
<cls> <noptr> m chip read ( <noptr> reg )
<cls> <noptr> c x get stereo ( <ptr> core <dot> <ptr> t )
<cls> <noptr> copy arg from user ( <ptr> k arg <dot> <ptr> u arg <dot> <noptr> cmd )
<cls> <noptr> input map show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> msp reset ( <ptr> client )
<cls> <noptr> uvc buffer prepare ( <ptr> vb )
<cls> <noptr> m bas get fec ( <ptr> state <dot> <noptr> layer )
<cls> <noptr> mtk jpeg adjust fmt m plane ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> stb send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> adv rd ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> stv x gets rate ( <ptr> state <dot> <noptr> clk )
<cls> <noptr> saa vb i start streaming ( <ptr> port )
<cls> <noptr> pluto dma map ( <ptr> pluto )
<cls> <noptr> flex cop pcid main it ( <ptr> fc pci )
<cls> <noptr> lg dta power ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> ov write ic ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <ptr> coda product name ( <noptr> product )
<cls> <noptr> put v l frame buffer ( <ptr> p <dot> <ptr> p )
<cls> <noptr> wbc i rid ler x ( <ptr> dev <dot> <noptr> idle )
<cls> <noptr> solo send desc ( <ptr> solo enc <dot> <noptr> skip <dot> <ptr> v buf <dot> <noptr> off <dot> <noptr> size <dot> <noptr> base <dot> <noptr> base size )
<cls> <noptr> stv x set mis ( <ptr> state <dot> <noptr> mis )
<cls> <noptr> solo eeprom cmd ( <ptr> solo dev <dot> <noptr> cmd )
<cls> <noptr> m x init ( <ptr> d <dot> <ptr> rc seq )
<cls> <noptr> adv initialize ( <ptr> sd )
<cls> <noptr> usb am radio probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> odd parity ( <noptr> c )
<cls> <ptr> check soft carrier ( )
<cls> <noptr> tv audios radio ( <ptr> sd )
<cls> <noptr> tea c driver init ( )
<cls> <noptr> is get frame size ( <ptr> is <dot> <ptr> m f )
<cls> <noptr> f m g volatile ctrl ( <ptr> ctrl )
<cls> <noptr> rtl u front end callback ( <ptr> adapter priv <dot> <noptr> component <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> vid ioc query std ( <ptr> file <dot> <ptr> f h <dot> <ptr> norm )
<cls> <noptr> isp videos fmt m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ttc i read cam control ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> exy nos jpeg get fifo status ( <ptr> base )
<cls> <noptr> cio sub dev set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c x stop all captures ( <ptr> c x )
<cls> <noptr> px a camera sensor bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> r vin parallel init ( <ptr> vin )
<cls> <noptr> v l stub try encoder cmd ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> a fwrite register bits ( <ptr> d <dot> <noptr> reg <dot> <noptr> pos <dot> <noptr> len <dot> <noptr> value )
<cls> <noptr> c x set tv audio ( <ptr> core )
<cls> <noptr> c x der sleep t cto active tb and ( <ptr> priv <dot> <noptr> bandwidth )
<cls> <noptr> isp parse of parallel endpoint ( <ptr> dev <dot> <ptr> ve p <dot> <ptr> bus cfg )
<cls> <noptr> sa at dah vr x toggle agc ( <ptr> dev <dot> <noptr> mode )
<cls> <noptr> hdc s set size ( <ptr> sd <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> int log ( <noptr> value )
<cls> <noptr> em xx register snapshot button ( <ptr> dev )
<cls> <noptr> mtm probe ( <ptr> client )
<cls> <ptr> u arr hex ( <noptr> data <dot> <noptr> n <dot> <ptr> buf )
<cls> <noptr> regr ( <ptr> gsp ca dev <dot> <noptr> index <dot> <noptr> len )
<cls> <noptr> dvb t enable of d m token ring ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> fim c is show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> uvc entity match guid ( <ptr> entity <dot> <noptr> guid )
<cls> <noptr> init r cmap we tek play ( )
<cls> <noptr> dcm i enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> iv tv irq enc dma complete ( <ptr> it v )
<cls> <noptr> sa ats stop streaming ( <ptr> v q )
<cls> <noptr> rtl sdr enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> vp fed q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> f m r x get mute mode ( <ptr> f m dev <dot> <ptr> curr mute mode )
<cls> <noptr> c pia set property flip ( <ptr> cam <dot> <noptr> prop val )
<cls> <noptr> ttc is lot reset ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> vivid vid out g f buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> ctrl set hue ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> smi app set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> vivid v big enc craw ( <ptr> data <dot> <ptr> buf <dot> <noptr> sampling rate )
<cls> <noptr> digit v rc query ( <ptr> d <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> m lvs std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> px adm a add tail buf ( <ptr> pc dev <dot> <ptr> buf )
<cls> <noptr> max g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> d m set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> c x set frequency ( <ptr> state <dot> <noptr> frequency )
<cls> <noptr> output ack input ( <ptr> output <dot> <ptr> input )
<cls> <noptr> saa init ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> dvb input attach ( <ptr> input )
<cls> <noptr> sub dev f h init ( <ptr> f h <dot> <ptr> sd )
<cls> <noptr> dvb usb v generic rw ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> tt pci budget deb i read nolock ( <ptr> budget <dot> <noptr> config <dot> <noptr> addr <dot> <noptr> count <dot> <noptr> no busy loop )
<cls> <ptr> m xls attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> config )
<cls> <noptr> state eval path way ok ( <ptr> h dw )
<cls> <noptr> imx enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> ov pll calc params ( <ptr> ov )
<cls> <noptr> c xcopy mdl to user ( <ptr> s <dot> <ptr> mdl <dot> <ptr> u buf <dot> <noptr> u count )
<cls> <noptr> c xs vid ctrl ( <ptr> ctrl )
<cls> <noptr> tw read byte ( <ptr> solo dev <dot> <noptr> chip id <dot> <noptr> tw x off <dot> <noptr> two ff )
<cls> <noptr> si write ( <ptr> fe <dot> <noptr> buf <dot> <noptr> len )
<cls> <noptr> cs probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> c x dio common write one reg ( <ptr> io <dot> <noptr> tgt <dot> <noptr> sub address <dot> <noptr> data )
<cls> <noptr> uvc ctrl get ( <ptr> chain <dot> <ptr> x ctrl )
<cls> <ptr> omap isp get ( <ptr> isp )
<cls> <noptr> noon log status ( <ptr> sd )
<cls> <noptr> ite close ( <ptr> rc dev )
<cls> <noptr> net upc i read cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> l irc prog attach ( <ptr> attr <dot> <ptr> prog )
<cls> <noptr> nov at probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> preview set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> v fe queue buffer ( <ptr> vid <dot> <ptr> buf )
<cls> <noptr> sub dev set power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> sp mfc init hw cmds ( <ptr> dev )
<cls> <noptr> coda jpeg write tables ( <ptr> ctx )
<cls> <noptr> der l c ( <dptr> rl cin <dot> <ptr> dwh tout <dot> <ptr> endof input )
<cls> <noptr> stream zap driver init ( )
<cls> <noptr> fdt v dvb register ( <ptr> fdt v <dot> <ptr> name )
<cls> <noptr> mtk vcodec probe ( <ptr> pdev )
<cls> <noptr> sp mfc set enc params h ( <ptr> ctx )
<cls> <ptr> check r x high carrier freq ( )
<cls> <noptr> tvp set pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> adv write regs ( <ptr> sd <dot> <ptr> regs <dot> <noptr> num )
<cls> <noptr> mcc ic shutdown ( <ptr> cam )
<cls> <noptr> ctrl set crop h ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> vivid fill buff ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> ce u start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> mtk jpeg dec set config ( <ptr> base <dot> <ptr> config <dot> <ptr> bs <dot> <ptr> fb )
<cls> <noptr> pvr init ( )
<cls> <noptr> stv get r f level ( <ptr> int p <dot> <ptr> lookup <dot> <noptr> demo d )
<cls> <noptr> ska try format ( <ptr> m f )
<cls> <noptr> vsp video pipeline init ( <ptr> pipe <dot> <ptr> video )
<cls> <noptr> dib reset stats ( <ptr> fe )
<cls> <noptr> mrs get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> v l print export buffer ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> m tre set excl zones ( <ptr> pas info )
<cls> <noptr> atmel is i driver init ( )
<cls> <ptr> find ref ( <ptr> hdl <dot> <noptr> id )
<cls> <noptr> av deb i read ( <ptr> av <dot> <noptr> config <dot> <noptr> addr <dot> <noptr> count )
<cls> <noptr> bt tv sub register ( <ptr> sub <dot> <ptr> wanted )
<cls> <noptr> isp video capture buffer queue ( <ptr> vb )
<cls> <noptr> gem tek init ( )
<cls> <noptr> d i bag c soft split ( <ptr> state )
<cls> <noptr> irr x platform driver init ( )
<cls> <noptr> iv tv reg dev ( <ptr> it v <dot> <noptr> type )
<cls> <noptr> stv x d vbs track crl ( <ptr> state )
<cls> <noptr> hdp vr read ( <ptr> file <dot> <ptr> buffer <dot> <noptr> count <dot> <ptr> pos )
<cls> <noptr> adv x probe ( <ptr> client )
<cls> <noptr> b disp probe ( <ptr> pdev )
<cls> <noptr> v fe output init addrs ( <ptr> v fe <dot> <ptr> output <dot> <noptr> sync )
<cls> <noptr> h fi event notify ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> vim cca prm ( <ptr> vim c <dot> <ptr> ved )
<cls> <noptr> rtl u fc tuner callback ( <ptr> d <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> uvc suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> d ibm b x fetch to cache ( <ptr> state <dot> <noptr> attr )
<cls> <noptr> iv tv reset tuner gpio ( <ptr> dev <dot> <noptr> component <dot> <noptr> cmd <dot> <noptr> value )
<cls> <noptr> c x der tun etc ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> av vb i write ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> vivid vid outs d v timings ( <ptr> file <dot> <ptr> f h <dot> <ptr> timings )
<cls> <noptr> t dax initial sleep ( <ptr> fe )
<cls> <noptr> b disp hw reset ( <ptr> b disp )
<cls> <noptr> mantis irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> dvb audio poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> af front end attach ( <ptr> adap )
<cls> <noptr> thom son dt txb w ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> v l compat ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> de interlace device run ( <ptr> priv )
<cls> <noptr> stk scan usb ( <ptr> int f <dot> <ptr> udev <dot> <ptr> max pkt size )
<cls> <noptr> msis ctrl ( <ptr> ctrl )
<cls> <noptr> iv tv get audio output ( <ptr> it v <dot> <noptr> index <dot> <ptr> aud output )
<cls> <noptr> fdp field complete ( <ptr> ctx <dot> <ptr> f buf )
<cls> <noptr> rain irq work handler ( <ptr> work )
<cls> <noptr> v l fill pix f m tmp ( <ptr> pix fmt <dot> <noptr> pixel format <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> d ibm c set adp cfg ( <ptr> state <dot> <noptr> q am )
<cls> <noptr> stv xx config ( <ptr> gsp ca dev <dot> <ptr> id )
<cls> <noptr> rt write reg mask ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> bit mask )
<cls> <noptr> std validate ( <ptr> ctrl <dot> <noptr> idx <dot> <noptr> ptr )
<cls> <noptr> fdt v start iso ( <ptr> fdt v )
<cls> <noptr> msp set source ( <ptr> client <dot> <noptr> src )
<cls> <noptr> uvc ioctl req buf s ( <ptr> file <dot> <ptr> f h <dot> <ptr> rb )
<cls> <noptr> fdp configure wpf ( <ptr> ctx <dot> <ptr> job )
<cls> <noptr> solo enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> input )
<cls> <noptr> m i w ( <ptr> gsp ca dev <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> exy nos jpeg set dec bitstream size ( <ptr> base <dot> <noptr> size )
<cls> <noptr> stv read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> no ons stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> ptic prepare ( <ptr> pt <dot> <noptr> addr <dot> <ptr> addr p )
<cls> <noptr> omap isp hist init ( <ptr> isp )
<cls> <noptr> omap v outs ctrl ( <ptr> ctrl )
<cls> <ptr> get frame ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> usb rare mono driver init ( )
<cls> <noptr> saa query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> find plane by offset ( <ptr> q <dot> <noptr> off <dot> <ptr> buffer <dot> <ptr> plane )
<cls> <noptr> coda queue source change event ( <ptr> ctx )
<cls> <noptr> is ic func ( <ptr> adap )
<cls> <noptr> ov reset ( <ptr> client )
<cls> <noptr> go stop streaming ( <ptr> q )
<cls> <ptr> check enable pid filtering ( )
<cls> <noptr> uvc ctrl set zoom ( <ptr> mapping <dot> <noptr> value <dot> <ptr> data )
<cls> <noptr> mrs set fec ( <ptr> state <dot> <noptr> fec )
<cls> <noptr> c cdc config img attr ( <ptr> c cdc <dot> <noptr> col ptn )
<cls> <noptr> vid io cs fmt ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> fim c deactivate capture ( <ptr> fim c )
<cls> <noptr> f dpg fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> adv fill format ( <ptr> state <dot> <ptr> format )
<cls> <noptr> sp mfc un configure common memory ( <ptr> mfc dev )
<cls> <noptr> ov x initialize controls ( <ptr> ov x )
<cls> <noptr> spx micro controller stop ( <ptr> state )
<cls> <noptr> rc core init ( )
<cls> <noptr> wx h to mode ( <ptr> gsp ca dev <dot> <noptr> width <dot> <noptr> height <dot> <noptr> pixel format )
<cls> <noptr> t dax cec read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> c x encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> enc )
<cls> <noptr> bt tv sub bus match ( <ptr> dev <dot> <ptr> drv )
<cls> <noptr> cobalt cobalt c ( <ptr> cobalt <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> solo ic handle write ( <ptr> solo dev )
<cls> <noptr> init r cmap msi digi vox i i ( )
<cls> <noptr> l m get ctrl ( <ptr> ctrl <dot> <noptr> led no )
<cls> <noptr> h va buf prepare ( <ptr> vb )
<cls> <noptr> te axs ctrl ( <ptr> c )
<cls> <noptr> v dec start output ( <ptr> inst )
<cls> <noptr> vim c sca scale pix ( <ptr> const v sca <dot> <noptr> lin <dot> <noptr> col <dot> <ptr> const sink frame )
<cls> <noptr> f m v l fops write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> msp write ( <ptr> client <dot> <noptr> dev <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> m xl x sf tuner f ( <ptr> fe <dot> <noptr> freq <dot> <noptr> bw )
<cls> <noptr> af tuner callback ( <ptr> d <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> dib p tuner read ser par ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> adv x write check ( <ptr> state <dot> <noptr> page <dot> <noptr> reg <dot> <noptr> value <dot> <ptr> error )
<cls> <noptr> pt init tables ( <ptr> pt )
<cls> <noptr> vivid fb init ( <ptr> dev )
<cls> <noptr> iv tv irq dma err ( <ptr> it v )
<cls> <noptr> imx read mb reg ( <ptr> priv <dot> <noptr> addr <dot> <ptr> val <dot> <noptr> nbytes )
<cls> <noptr> dvb t ctrl set inc enable ( <ptr> state <dot> <ptr> enabled )
<cls> <noptr> v fe output update ping addr ( <ptr> v fe <dot> <ptr> output <dot> <noptr> sync )
<cls> <ptr> vbd mas g get dma buf ( <ptr> buf priv <dot> <noptr> flags )
<cls> <noptr> ven cs routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> video buf d q buf ( <ptr> q <dot> <ptr> b <dot> <noptr> non blocking )
<cls> <noptr> stb read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> saa irq vb i ( <ptr> port )
<cls> <noptr> dr xxx j read uc blocks ( <ptr> fe <dot> <ptr> ucb )
<cls> <noptr> imx set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> t vps routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> write chunk ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> iv tvf b get frame buffer ( <ptr> it v <dot> <ptr> fb base <dot> <ptr> fb length )
<cls> <noptr> rc register device ( <ptr> dev )
<cls> <noptr> de interlace job abort ( <ptr> priv )
<cls> <noptr> venc driver init ( )
<cls> <noptr> isp stat try enable ( <ptr> stat )
<cls> <noptr> d m read mac ( <ptr> dev <dot> <ptr> mac )
<cls> <noptr> usb vis ionic read ( <ptr> usb vision <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> vivid sdr enum freq bands ( <ptr> file <dot> <ptr> f h <dot> <ptr> b and )
<cls> <noptr> scm o if get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> net up uni dvb dma enable ( <ptr> dma <dot> <noptr> enable )
<cls> <noptr> c iner gy tfe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> r tracks mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> send control msg ( <ptr> dev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index )
<cls> <noptr> as cote get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> d m gpio clear ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> mtp set mode ( <ptr> mtp <dot> <noptr> clear <dot> <noptr> set )
<cls> <noptr> dr x stop ( <ptr> state )
<cls> <noptr> c x black bird advise acquire ( <ptr> drv )
<cls> <noptr> debug if c parse unsigned number ( <ptr> buf <dot> <noptr> count <dot> <ptr> num ptr )
<cls> <ptr> fc get v l sub dev ( <ptr> client )
<cls> <noptr> g scm m g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> sa axs gpio ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> stax vip init module ( )
<cls> <noptr> pvr buffer set idle ( <ptr> b p )
<cls> <noptr> attach x c ( <ptr> dev <dot> <ptr> cfg )
<cls> <noptr> saa debug fs remove ( )
<cls> <noptr> b disp get addr ( <ptr> ctx <dot> <ptr> vb <dot> <ptr> frame <dot> <ptr> p addr )
<cls> <noptr> aug tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> adv csc conversion mode ( <ptr> sd <dot> <noptr> mode )
<cls> <noptr> init r cmap stream zap ( )
<cls> <noptr> ov init sensor ( <ptr> gsp ca dev )
<cls> <noptr> td a get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> az tech g signal ( <ptr> isa )
<cls> <noptr> im onresume ( <ptr> int f )
<cls> <noptr> dib wait lock ( <ptr> state <dot> <noptr> internal <dot> <noptr> wait ms <dot> <noptr> wait ms <dot> <noptr> wait ms )
<cls> <noptr> r vin query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> wb cir set irq mask ( <ptr> data <dot> <noptr> irq mask )
<cls> <noptr> dvb dmx dev read sec ( <ptr> d fil <dot> <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> spx read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> stk prepare iso ( <ptr> dev )
<cls> <noptr> write ic reg ( <ptr> addr <dot> <noptr> index <dot> <noptr> data )
<cls> <noptr> venus core trigger ssr ( <ptr> core <dot> <noptr> trigger type )
<cls> <noptr> cam if hw enable scaler ( <ptr> vp <dot> <noptr> on )
<cls> <noptr> tea volume ( <noptr> val )
<cls> <noptr> px a camera eof ( <noptr> arg )
<cls> <ptr> check v flip ( )
<cls> <noptr> ska get rotation ( <ptr> sd <dot> <ptr> reg data )
<cls> <noptr> dvb front ends w zigzag auto tune ( <ptr> fe <dot> <noptr> check wrapped )
<cls> <noptr> exy nos jpeg get frame fmt ( <ptr> base )
<cls> <noptr> nxt x micro controller start ( <ptr> state )
<cls> <noptr> dvb demux feed add ( <ptr> feed )
<cls> <ptr> pvr hd wget driver name ( <ptr> h dw )
<cls> <noptr> c x irq enable ( <ptr> dev <dot> <noptr> mask )
<cls> <noptr> wl f m fops read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> spc sis log status ( <ptr> sd )
<cls> <noptr> ov set power on ( <ptr> sensor )
<cls> <noptr> hi x h dir driver init ( )
<cls> <noptr> dib ic enumeration ( <ptr> ic <dot> <noptr> noof demo ds <dot> <noptr> default addr <dot> <noptr> first addr )
<cls> <noptr> spc await status ( <ptr> gsp ca dev )
<cls> <noptr> stv ter read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <ptr> print fourcc ( <noptr> fmt )
<cls> <noptr> c x try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> t wh gen slice head ( <ptr> buf <dot> <noptr> size <dot> <noptr> idr pic id <dot> <noptr> frame gop seqno <dot> <ptr> tail nb bits <dot> <ptr> tail )
<cls> <noptr> dib f winit ( <ptr> state )
<cls> <noptr> rt multi read ( <ptr> priv )
<cls> <ptr> bcm attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> ic read reg ( <ptr> av <dot> <noptr> id <dot> <noptr> reg )
<cls> <noptr> six x send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> af read regi c ( <ptr> d <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> skb aff w parse ( <ptr> dev <dot> <dptr> fw <dot> <noptr> count <dot> <ptr> data )
<cls> <noptr> r vin format size image ( <ptr> pix )
<cls> <noptr> adb csc rgb full limit ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> c x der shutdown to sleep tc ( <ptr> priv )
<cls> <noptr> d ibm b tuner pass ctrl ( <ptr> fe <dot> <noptr> onoff <dot> <noptr> pll addr )
<cls> <noptr> c xir open ( <ptr> rc )
<cls> <noptr> ctrl isdirty input ( <ptr> cptr )
<cls> <noptr> affe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> is i open ( <ptr> file )
<cls> <noptr> fim c isp sub devs stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> c xxx set aud clk freq ( <ptr> client <dot> <noptr> freq )
<cls> <ptr> vsp entity get pad config ( <ptr> entity <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> mt write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> io write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ule bridged snd u ( <ptr> p )
<cls> <noptr> dib read word ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> st start ( <ptr> sd )
<cls> <noptr> m stop transfer ( <ptr> gsp ca dev )
<cls> <noptr> skb af try isp format ( <ptr> m f )
<cls> <noptr> aud vb resume ( <ptr> dev )
<cls> <noptr> d ibm b fifo control ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> sub dev set format ( <ptr> v pfe <dot> <ptr> fmt )
<cls> <noptr> img ir probe raw ( <ptr> priv )
<cls> <noptr> fim c is i tfs param ( <ptr> is <dot> <noptr> update )
<cls> <noptr> z r x xvid io cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> tt usb dec process p va ( <ptr> dec <dot> <ptr> p va <dot> <noptr> length )
<cls> <noptr> ont rol ( <ptr> master reg <dot> <noptr> state )
<cls> <noptr> stk register video device ( <ptr> dev )
<cls> <noptr> os d driver init ( )
<cls> <noptr> em press init ( <ptr> dev )
<cls> <noptr> a speed video on ( <ptr> video )
<cls> <noptr> omap is pc cdc init ( <ptr> isp )
<cls> <noptr> stv x get std ( <ptr> state )
<cls> <noptr> iv tv try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> pluto rw ( <ptr> pluto <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> bits )
<cls> <ptr> fim c pipeline get head ( <ptr> me )
<cls> <noptr> vb i out buf prepare ( <ptr> vb )
<cls> <ptr> x vip of get format ( <ptr> node )
<cls> <noptr> v l f h init ( <ptr> f h <dot> <ptr> v dev )
<cls> <noptr> dib risc mem write ( <ptr> state <dot> <noptr> cmd <dot> <ptr> b )
<cls> <noptr> vi u capture intr ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> g scm m exp buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> eb )
<cls> <noptr> vivid vid outs selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> m m ols get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pvr hd wget streaming ( <ptr> h dw )
<cls> <noptr> digit v ctrl msg ( <ptr> d <dot> <noptr> cmd <dot> <noptr> v v <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> mtk mdp comp clock on ( <ptr> dev <dot> <ptr> comp )
<cls> <noptr> img ir handle data ( <ptr> priv <dot> <noptr> len <dot> <noptr> raw )
<cls> <noptr> ov seth flip ( <ptr> ov <dot> <noptr> value )
<cls> <noptr> ov prog d flt ( <ptr> client )
<cls> <ptr> check tx and r x ( )
<cls> <noptr> parse profile level ( <ptr> core <dot> <noptr> codecs <dot> <noptr> domain <dot> <ptr> data )
<cls> <noptr> clock divider tons ( <noptr> divider )
<cls> <noptr> rt write ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> si set front end dvb t ( <ptr> fe )
<cls> <noptr> c x tuner set params ( <ptr> fe )
<cls> <noptr> v fe link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> usb vision i soc irq ( <ptr> urb )
<cls> <noptr> c x d spi device initialize ( <ptr> spi device <dot> <noptr> mode <dot> <noptr> speed hz )
<cls> <noptr> fim cli tes ctrl ( <ptr> ctrl )
<cls> <ptr> z l attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <noptr> g scm m query buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> rtl reg map write ( <ptr> context <dot> <ptr> data <dot> <noptr> count )
<cls> <noptr> vs pdl list bodies put ( <ptr> dl )
<cls> <noptr> init r cmap c iner gy ( )
<cls> <noptr> az read ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> hist buf pio ( <ptr> hist )
<cls> <noptr> common ( <ptr> gsp ca dev )
<cls> <noptr> coda time per frame tof rate ( <ptr> time per frame )
<cls> <noptr> stv read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> f m r x get rds mode ( <ptr> f m dev <dot> <ptr> curr rds end is )
<cls> <noptr> dib fw set output mode ( <ptr> fe <dot> <noptr> mode )
<cls> <ptr> check cid bg ( )
<cls> <ptr> pvr hd wget bus info ( <ptr> h dw )
<cls> <noptr> v l m m register media controller ( <ptr> m m dev <dot> <ptr> v dev <dot> <noptr> function )
<cls> <noptr> spi x mit ( <ptr> spi dev <dot> <ptr> addr <dot> <noptr> len <dot> <noptr> dir )
<cls> <noptr> vid ioc g std ( <ptr> file <dot> <ptr> f h <dot> <ptr> norm )
<cls> <noptr> saa api modify gpio ( <ptr> dev <dot> <noptr> unitid <dot> <noptr> pin <dot> <noptr> state )
<cls> <ptr> get fw name ( <ptr> client )
<cls> <noptr> r card rif set mdr ( <ptr> sdr )
<cls> <noptr> max load dab p ( <ptr> ctx )
<cls> <noptr> six x sleep ( <ptr> fe )
<cls> <noptr> xcconfig radio ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> v dec h decode ( <ptr> h v dec <dot> <ptr> bs <dot> <ptr> fb <dot> <ptr> res chg )
<cls> <noptr> spc sis enable interrupts ( <ptr> state <dot> <noptr> on )
<cls> <noptr> adv set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> dr xxx j read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> dw open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> td a cal crf cal ( <ptr> fe <dot> <ptr> freq )
<cls> <ptr> check audio d dep ( )
<cls> <ptr> afr c setup match ( <noptr> id <dot> <ptr> table )
<cls> <noptr> iv tv read byte ( <ptr> it v <dot> <ptr> byte <dot> <noptr> nack )
<cls> <noptr> tm start audio dma ( <ptr> chip )
<cls> <noptr> m i pid get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> sp mfc un configure dma memory ( <ptr> mfc dev )
<cls> <noptr> snd cobalt pcm prepare ( <ptr> sub stream )
<cls> <noptr> delta open ( <ptr> file )
<cls> <noptr> si transfer ( <ptr> ic adapter <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> sun ics i buffer queue ( <ptr> vb )
<cls> <noptr> cec error inj open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> css ctrl ( <ptr> ctrl )
<cls> <noptr> fim ch w set input path ( <ptr> ctx )
<cls> <noptr> imx get format code ( <ptr> imx )
<cls> <noptr> av init v l ( <ptr> av )
<cls> <noptr> pb sample cpy ( <ptr> dst <dot> <ptr> src <dot> <noptr> len <dot> <noptr> iss )
<cls> <noptr> pt init adapters ( <ptr> pt )
<cls> <noptr> max init ( <ptr> fe )
<cls> <noptr> ener x read h wpointer ( <ptr> dev )
<cls> <noptr> tea ic write ( <ptr> radio )
<cls> <noptr> irs any o decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> c x set parameters ( <ptr> state )
<cls> <noptr> mt write regs ( <ptr> priv <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> on ( )
<cls> <noptr> px pg fmt ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> black bird start codec ( <ptr> dev )
<cls> <noptr> tw set scale ( <ptr> client <dot> <ptr> scale )
<cls> <noptr> aur c and or ( <ptr> ir <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> value )
<cls> <noptr> mip ids stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> tegra cec adap log addr ( <ptr> adap <dot> <noptr> logical addr )
<cls> <noptr> sp mfc get pic type bot v ( <ptr> ctx )
<cls> <noptr> bt write block ( <ptr> decoder <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> ov write reg ( <ptr> ov <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> find outer frame size ( <ptr> dcm i <dot> <ptr> pix <dot> <ptr> frame size )
<cls> <noptr> set red blue ( <ptr> gsp ca dev <dot> <noptr> blue <dot> <noptr> red )
<cls> <noptr> cur to user ( <ptr> c <dot> <ptr> ctrl )
<cls> <noptr> snd cobalt pcm create ( <ptr> c obsc )
<cls> <noptr> e enum freq bands ( <ptr> sd <dot> <ptr> b and )
<cls> <noptr> mci reset ( <ptr> state )
<cls> <ptr> check debug legacy dish switch ( )
<cls> <noptr> scm set exposure ( <ptr> state <dot> <noptr> auto exp )
<cls> <noptr> mce usb deferred kevent ( <ptr> work )
<cls> <noptr> os d set field inversion ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> six set chan ( <ptr> radio <dot> <noptr> chan )
<cls> <noptr> last show ( <ptr> s <dot> <ptr> data )
<cls> <noptr> c x dt nr dmd dvb t mon sync stat sub ( <ptr> tn r dmd <dot> <ptr> sync stat <dot> <ptr> unlock detected )
<cls> <noptr> vivid start generating vid cap ( <ptr> dev <dot> <ptr> p streaming )
<cls> <noptr> stv write regs ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> c pia q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> stv ddb read snr ( <ptr> fe )
<cls> <noptr> sdr ams how ( <ptr> file <dot> <ptr> k obj <dot> <ptr> a <dot> <ptr> buf <dot> <noptr> off <dot> <noptr> count )
<cls> <noptr> saas tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> tw request encoded frame ( <ptr> input )
<cls> <noptr> media device setup link ( <ptr> m dev <dot> <ptr> arg )
<cls> <noptr> dib set default config ( <ptr> state <dot> <ptr> n )
<cls> <noptr> ccd cls c enable ( <ptr> c cdc <dot> <noptr> enable )
<cls> <noptr> mtk mdp process done ( <ptr> priv <dot> <noptr> vb state )
<cls> <noptr> img ir timings preprocess ( <ptr> timings <dot> <noptr> unit )
<cls> <noptr> saa dsp write l ( <ptr> dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> j pu suspend ( <ptr> dev )
<cls> <noptr> scc am if probe ( <ptr> pdev )
<cls> <noptr> r cmap cmp ( <ptr> key <dot> <ptr> elt )
<cls> <noptr> v l ctrl request clone ( <ptr> hdl <dot> <ptr> from )
<cls> <noptr> snd cobalt pcm playback close ( <ptr> sub stream )
<cls> <noptr> nxt micro controller init ( <ptr> state )
<cls> <noptr> sun ics iv l register ( <ptr> csi )
<cls> <noptr> vim c caps fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> init ( <ptr> b tv )
<cls> <ptr> check output p va ( )
<cls> <noptr> m x pid filter ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> omap v out try format ( <ptr> pix )
<cls> <noptr> sr pcs power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> venc if init ( <ptr> ctx <dot> <noptr> fourcc )
<cls> <noptr> net up uni dvb dma timeout ( <ptr> t )
<cls> <noptr> pt init table ( <ptr> pt <dot> <ptr> table <dot> <ptr> pfn p )
<cls> <ptr> match std ( <noptr> id )
<cls> <noptr> fim c set yuv order ( <ptr> ctx )
<cls> <noptr> m xls init ( <ptr> fe )
<cls> <noptr> v dec if getparam ( <ptr> ctx <dot> <noptr> type <dot> <ptr> out )
<cls> <noptr> tt usb dec boot dsp ( <ptr> dec )
<cls> <noptr> sit x rds buff ( <ptr> s dev <dot> <noptr> mode <dot> <noptr> rds b <dot> <noptr> rds c <dot> <noptr> rds d <dot> <ptr> cb left )
<cls> <noptr> ths s register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> vb ioctl q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> sh vou rega write ( <ptr> vou dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> tv audios frequency ( <ptr> sd <dot> <ptr> freq )
<cls> <noptr> lg x write regs ( <ptr> state <dot> <ptr> regs <dot> <noptr> len )
<cls> <noptr> tvp isr ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> smi app set ctrl ( <ptr> ctrl )
<cls> <noptr> sun ics i runtime suspend ( <ptr> dev )
<cls> <noptr> ctrl clear dirty res ver ( <ptr> cptr )
<cls> <noptr> sun ics is input ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <noptr> configure sensor ( <ptr> cam <dot> <noptr> reqwidth <dot> <noptr> reqheight )
<cls> <noptr> dtv tuner attach ( <ptr> adap )
<cls> <noptr> tm close extension ( <ptr> dev )
<cls> <noptr> stream next buffer ( <ptr> q <dot> <dptr> vb <dot> <noptr> non blocking )
<cls> <noptr> usb am radios ctrl ( <ptr> ctrl )
<cls> <noptr> is i try fmt ( <ptr> is i <dot> <ptr> f <dot> <dptr> current fmt )
<cls> <noptr> a speed video buf queue ( <ptr> vb )
<cls> <noptr> tcg e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> smi ic cfg ( <ptr> dev <dot> <noptr> sw ctl )
<cls> <noptr> mod freq to val ( <noptr> mod freq )
<cls> <noptr> s read video callback ( <ptr> dev <dot> <ptr> pipe info )
<cls> <noptr> dib reset digital ( <ptr> fe <dot> <ptr> cfg )
<cls> <noptr> dst set dis eq c ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> venus set state ( <ptr> h dev <dot> <noptr> state )
<cls> <noptr> rain process msg ( <ptr> rain )
<cls> <noptr> cxa vs raw fmt ( <ptr> sd <dot> <ptr> fmt )
<cls> <noptr> mtk venc set param ( <ptr> ctx <dot> <ptr> param )
<cls> <noptr> omap isp stat isr frame sync ( <ptr> stat )
<cls> <noptr> m xls f init tuner demo d ( <ptr> state )
<cls> <noptr> iv tv v l close ( <ptr> filp )
<cls> <noptr> c x der set front ends ( <ptr> fe )
<cls> <noptr> c xxx swa b ( <ptr> from <dot> <ptr> to <dot> <noptr> len )
<cls> <noptr> c xs input ( <ptr> file <dot> <ptr> f h <dot> <noptr> inp )
<cls> <noptr> usb tvs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> r vin query std ( <ptr> file <dot> <ptr> priv <dot> <ptr> a )
<cls> <noptr> m sps radio ( <ptr> sd )
<cls> <noptr> skb af hw set clocks ( <ptr> state )
<cls> <noptr> flush buffers ( <ptr> chan )
<cls> <noptr> v l clk set rate ( <ptr> clk <dot> <noptr> rate )
<cls> <ptr> sms core get fw filename ( <ptr> core dev <dot> <noptr> mode )
<cls> <noptr> snr show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> sp mfc init hw ( <ptr> dev )
<cls> <noptr> nxt set guard interval ( <ptr> state <dot> <noptr> guard interval )
<cls> <noptr> tt usb identify state ( <ptr> udev <dot> <ptr> props <dot> <dptr> desc <dot> <ptr> cold )
<cls> <noptr> init reg defaults ( )
<cls> <noptr> do auto exposure ( <ptr> gsp ca dev <dot> <noptr> avg lum )
<cls> <noptr> v l m mdq buf ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> buf )
<cls> <noptr> v fe enable irq wm line ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> lineid <dot> <noptr> enable )
<cls> <noptr> t wgt v norms ( <ptr> sd <dot> <ptr> norm )
<cls> <noptr> ene set carrier report ( <ptr> r dev <dot> <noptr> enable )
<cls> <noptr> x guard mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> i cxx xir ( <ptr> h dw <dot> <noptr> ic addr <dot> <ptr> w data <dot> <noptr> w len <dot> <ptr> r data <dot> <noptr> r len )
<cls> <noptr> dvb ca read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> mtk jpeg dec irq ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> iv tv xfer ( <ptr> ic adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> ths config ( <ptr> sd )
<cls> <noptr> l gdt x driver init ( )
<cls> <noptr> dvb usb v adapter front end init ( <ptr> adap )
<cls> <noptr> reg w ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <noptr> byte )
<cls> <noptr> usb vision power off ( <ptr> usb vision )
<cls> <noptr> get r f strength ( <ptr> fe <dot> <ptr> st )
<cls> <noptr> isp video check external sub devs ( <ptr> video <dot> <ptr> pipe )
<cls> <noptr> sp jpeg seth tbl ( <ptr> regs <dot> <ptr> h tbl <dot> <noptr> tab <dot> <noptr> len )
<cls> <noptr> uvc ctrl fill x u info ( <ptr> dev <dot> <ptr> ctrl <dot> <ptr> info )
<cls> <noptr> l irc bpf attach ( <ptr> rc dev <dot> <ptr> prog )
<cls> <noptr> led show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> any see c i polls lot status ( <ptr> c i <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> apt ina pll calculate ( <ptr> dev <dot> <ptr> limits <dot> <ptr> pll )
<cls> <noptr> sp sleep ( <ptr> fe )
<cls> <noptr> spx get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> air spy submit urb s ( <ptr> s )
<cls> <noptr> config vp if params ( <ptr> vp if params <dot> <noptr> channelid <dot> <noptr> found )
<cls> <noptr> m xt dab front end attach ( <ptr> adap )
<cls> <noptr> mtk jpeg dec set dst bank ( <ptr> base <dot> <noptr> addr y <dot> <noptr> addr u <dot> <noptr> addr v )
<cls> <noptr> af copy firmware ( <ptr> d )
<cls> <ptr> get adv state ( <ptr> sd )
<cls> <noptr> t mir int stop ( <ptr> rc )
<cls> <noptr> pm timeouts show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> bt tv bit get sda ( <ptr> data )
<cls> <noptr> mt probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> dvb usb v generic io ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> dcm igraph parse ( <ptr> dcm i <dot> <ptr> node )
<cls> <noptr> quantize inter ( <ptr> coeff <dot> <ptr> deco eff <dot> <noptr> q p )
<cls> <noptr> sp jpeg start ( <ptr> regs )
<cls> <noptr> video read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> go motion regions ( <ptr> go <dot> <ptr> vb )
<cls> <noptr> fdt v init ( )
<cls> <noptr> cec flush ( <ptr> adap )
<cls> <noptr> flite hw clear last capture end ( <ptr> dev )
<cls> <noptr> usb tv start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> im ontouch display timeout ( <ptr> t )
<cls> <noptr> audio to package ( <ptr> go <dot> <ptr> code <dot> <noptr> space )
<cls> <noptr> c x stu ner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> h vas top streaming ( <ptr> v q )
<cls> <noptr> dvb dmx crc ( <ptr> f <dot> <ptr> src <dot> <noptr> len )
<cls> <noptr> vb warn zero bytes used ( <ptr> vb )
<cls> <noptr> pluto read reg ( <ptr> pluto <dot> <noptr> reg )
<cls> <noptr> bt tv g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> id )
<cls> <noptr> isp stat buf sync for cpu ( <ptr> stat <dot> <ptr> buf )
<cls> <noptr> smi dvb sky mrs fe attach ( <ptr> port )
<cls> <noptr> sdr am offsets show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> m tt get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> stk stop hw ( <ptr> dev )
<cls> <noptr> c ecs conn info ( <ptr> adap <dot> <ptr> conn info )
<cls> <noptr> c xxx afe init super block ( <ptr> dev <dot> <noptr> ref count )
<cls> <noptr> fim c isp irqhandler ( <ptr> is )
<cls> <noptr> iv tv disable cc ( <ptr> it v )
<cls> <noptr> c xxx check fw ( <ptr> dev )
<cls> <noptr> irl irc register ( <ptr> dev )
<cls> <noptr> as x cmd get impulse resp ( <ptr> adap <dot> <ptr> isready )
<cls> <noptr> adv set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> r ga buf stop streaming ( <ptr> q )
<cls> <noptr> omap is pc cdc register entities ( <ptr> c cdc <dot> <ptr> v dev )
<cls> <noptr> fdp try fmt capture ( <ptr> ctx <dot> <dptr> fmt info <dot> <ptr> pix )
<cls> <noptr> black bird load firmware ( <ptr> dev )
<cls> <noptr> h fi core suspend ( <ptr> core )
<cls> <noptr> z l set gain params ( <ptr> state <dot> <noptr> c )
<cls> <noptr> fdp m m job abort ( <ptr> priv )
<cls> <noptr> omap isp hist dma done ( <ptr> isp )
<cls> <noptr> enc pre frame start ( <ptr> ctx )
<cls> <noptr> fmc set stereo mono ( <ptr> f m dev <dot> <noptr> mode )
<cls> <noptr> ov set night mode ( <ptr> sensor )
<cls> <noptr> or read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> as stream ctrl ( <ptr> priv <dot> <noptr> acquire <dot> <noptr> el na cfg )
<cls> <noptr> f m r x set stereo mono ( <ptr> f m dev <dot> <noptr> mode )
<cls> <ptr> check adapter nr ( )
<cls> <noptr> dvb dev get free id ( <ptr> adap <dot> <noptr> type )
<cls> <noptr> c sir x async bound ( <ptr> notifier <dot> <ptr> ssub dev <dot> <ptr> asd )
<cls> <noptr> via cam read reg ( <ptr> cam <dot> <noptr> reg )
<cls> <noptr> dvb net eth type trans ( <ptr> skb <dot> <ptr> dev )
<cls> <noptr> dib p spur protect ( <ptr> state <dot> <noptr> r f khz <dot> <noptr> bw )
<cls> <noptr> rev attach ( <ptr> fc <dot> <ptr> ic )
<cls> <noptr> smi app get skip top lines ( <ptr> sub dev <dot> <ptr> lines )
<cls> <noptr> isp if select cid ( <ptr> isp if <dot> <noptr> int f <dot> <noptr> cid <dot> <noptr> v fe <dot> <noptr> enable )
<cls> <noptr> msi probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> s log status ( <ptr> sd )
<cls> <noptr> stb d vbs init calc ( <ptr> state )
<cls> <noptr> up dag register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> m i pid set fmt sink ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> m x driver init ( )
<cls> <noptr> c x video set io ( <ptr> c x )
<cls> <noptr> tx early eom ( <ptr> pin )
<cls> <noptr> sis end startup command ( <ptr> radio )
<cls> <noptr> mtm restore state ( <ptr> mtm )
<cls> <noptr> a speed video enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> calls frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> adb d v timings cap ( <ptr> sd <dot> <ptr> cap )
<cls> <noptr> stv get symbol rate ( <ptr> int p <dot> <noptr> m clk <dot> <noptr> demo d )
<cls> <noptr> dib update tim f ( <ptr> state )
<cls> <noptr> coda seq end work ( <ptr> work )
<cls> <noptr> dvb ca en thread update delay ( <ptr> ca )
<cls> <noptr> dvb sky sport c set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> td a set config ( <ptr> fe <dot> <ptr> priv cfg )
<cls> <noptr> v dec enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> afa fread status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> saa work enc handler ( <ptr> w )
<cls> <noptr> hdp vr poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> ven cv l to h fi ( <noptr> id <dot> <noptr> value )
<cls> <noptr> usb vision adjust compression ( <ptr> usb vision )
<cls> <noptr> iv tv try fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> v l ctrls ctrl area ( <ptr> ctrl <dot> <ptr> area )
<cls> <noptr> v pfe config image format ( <ptr> v pfe <dot> <noptr> std id )
<cls> <noptr> dr x j dap scu atomic read write block ( <ptr> dev addr <dot> <noptr> addr <dot> <noptr> data size <dot> <ptr> data <dot> <noptr> read flag )
<cls> <noptr> r tim r cross ( <ptr> priv <dot> <noptr> i qpoint <dot> <ptr> x direct )
<cls> <noptr> delta vba u queue ( <ptr> vb )
<cls> <noptr> v op v size ( <ptr> vh )
<cls> <noptr> sec oce cir probe ( <ptr> priv )
<cls> <noptr> pvr io read avail ( <ptr> cp )
<cls> <noptr> uvc ioctl d q buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <noptr> vsp dll is thw update pending ( <ptr> dlm )
<cls> <noptr> venus helper vb buf init ( <ptr> vb )
<cls> <noptr> omap v out setup video data ( <ptr> v out )
<cls> <noptr> venc write ( <ptr> sd <dot> <noptr> offset <dot> <noptr> val )
<cls> <noptr> m rst set bb ( <ptr> dev <dot> <noptr> symbol rate k ss <dot> <noptr> lp f offset khz )
<cls> <noptr> nxt x agc reset ( <ptr> state )
<cls> <noptr> e tek init controls ( <ptr> sensor )
<cls> <noptr> dvb sky ic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> dcm is fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> solo set time ( <ptr> solo dev )
<cls> <noptr> c x halt firmware ( <ptr> c x )
<cls> <noptr> f m r x get af switch ( <ptr> f m dev <dot> <ptr> af mode )
<cls> <noptr> uds enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> t dax irq hdc p ( <ptr> state <dot> <ptr> flags )
<cls> <noptr> save camera state ( <ptr> gsp ca dev )
<cls> <noptr> pv ric function ality ( <ptr> adap )
<cls> <noptr> c x dt nr dmd dvb t mon data p lps ( <ptr> tn r dmd <dot> <ptr> plp ids <dot> <ptr> nump lps )
<cls> <noptr> c xxx capture start ( <ptr> dev <dot> <noptr> start <dot> <noptr> media type )
<cls> <noptr> v l print mod ulator ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> fim c is disable clocks ( <ptr> is )
<cls> <noptr> v fe set scale cfg ( <ptr> v fe <dot> <ptr> line )
<cls> <noptr> sp cec enable r x ( <ptr> cec )
<cls> <ptr> check guard checking ( )
<cls> <noptr> uvc test bit ( <ptr> data <dot> <noptr> bit )
<cls> <noptr> ov get frame rate legacy ( <ptr> sd <dot> <ptr> tp f )
<cls> <noptr> preview enabled rk frame ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> stk p front end attach ( <ptr> adap )
<cls> <noptr> is ifconfig culling ( <ptr> cul )
<cls> <ptr> stv cab attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> saas input ( <ptr> port <dot> <noptr> i )
<cls> <noptr> sa aic func ( <ptr> adapter )
<cls> <noptr> m tt set power ( <ptr> m tt <dot> <noptr> on )
<cls> <noptr> fri io streaming ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> l m probe ( <ptr> client <dot> <ptr> devid )
<cls> <noptr> venus helper set output resolution ( <ptr> inst <dot> <noptr> width <dot> <noptr> height <dot> <noptr> buf type )
<cls> <noptr> sd dbg g register ( <ptr> gsp ca dev <dot> <ptr> reg )
<cls> <noptr> tm v l register ( <ptr> dev )
<cls> <noptr> bl chain cmd ( <ptr> state <dot> <noptr> rom offset <dot> <noptr> nrof elements <dot> <noptr> timeout )
<cls> <noptr> iv tv queue move ( <ptr> s <dot> <ptr> from <dot> <ptr> steal <dot> <ptr> to <dot> <noptr> needed bytes )
<cls> <noptr> solo enum frame intervals ( <ptr> file <dot> <ptr> priv <dot> <ptr> f int v )
<cls> <noptr> tc init ( <ptr> fe )
<cls> <noptr> os d disable color key ( <ptr> sd <dot> <noptr> os dwin )
<cls> <noptr> venus enumerate codecs ( <ptr> core <dot> <noptr> type )
<cls> <noptr> vb stream on ( <ptr> q <dot> <noptr> type )
<cls> <noptr> init r cmap dvi com ce ( )
<cls> <noptr> c x init ( <ptr> fe )
<cls> <noptr> go snd pcm prepare ( <ptr> sub stream )
<cls> <noptr> get q am lock status ( <ptr> state <dot> <ptr> p lock status )
<cls> <noptr> v levent dequeue ( <ptr> f h <dot> <ptr> event <dot> <noptr> non blocking )
<cls> <noptr> stm cec irq thread ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> host setup ( <ptr> core )
<cls> <noptr> de interlace prepare format ( <ptr> pix fmt )
<cls> <noptr> hist busy ( <ptr> hist )
<cls> <noptr> snd tmp c m open ( <ptr> sub stream )
<cls> <noptr> coda hw reset ( <ptr> ctx )
<cls> <noptr> af get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <noptr> dst set fec ( <ptr> state <dot> <noptr> fec )
<cls> <noptr> isp core init ( <ptr> isp <dot> <noptr> idle )
<cls> <noptr> cobalt buf init ( <ptr> vb )
<cls> <noptr> me so nao cec irq r x ( <ptr> ao cec )
<cls> <noptr> vivid get video aspect ( <ptr> dev )
<cls> <noptr> ske cg xs power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> td a write mask ( <ptr> state <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> v levent unsubscribe ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> solo pm error isr ( <ptr> solo dev )
<cls> <noptr> m sps routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> bt tv req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> mtk jpeg buf prepare ( <ptr> vb )
<cls> <noptr> ov set auto gain ( <ptr> reg map <dot> <noptr> value )
<cls> <noptr> sp jpeg to user sub sampling ( <ptr> ctx )
<cls> <noptr> l gs gl read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> cam if register video nodes ( <ptr> cam if )
<cls> <ptr> check enable ( )
<cls> <noptr> sms core registry get type ( <ptr> dev path )
<cls> <noptr> msp d thread ( <ptr> data )
<cls> <noptr> em press try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> net up fpga opr w ( <ptr> inter <dot> <noptr> addr <dot> <noptr> val <dot> <noptr> read )
<cls> <noptr> vs pdu pipeline set r wpf format ( <ptr> vsp <dot> <ptr> r wpf <dot> <noptr> pixel format <dot> <noptr> pitch )
<cls> <noptr> m bas get segment count ( <ptr> state <dot> <noptr> layer )
<cls> <noptr> set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> c x dt nr dmd common tune setting ( <ptr> tn r dmd <dot> <noptr> sys <dot> <noptr> en fef int m tnt ctrl )
<cls> <noptr> hack r f set params ( <ptr> dev )
<cls> <noptr> e tek set test pattern ( <ptr> sensor <dot> <noptr> mode )
<cls> <noptr> rb spread bits ( <ptr> r bsp <dot> <noptr> num <dot> <ptr> val )
<cls> <noptr> regr wait ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> fim c cap query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> l gdt afe clock poll ( <ptr> state )
<cls> <noptr> c x set symbol rate ( <ptr> state <dot> <noptr> s rate )
<cls> <noptr> vsp platform driver init ( )
<cls> <ptr> v l clk get ( <ptr> dev <dot> <ptr> id )
<cls> <noptr> tea ic driver init ( )
<cls> <noptr> saa hic send ( <ptr> client <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> encoder on port c ( <ptr> dev )
<cls> <noptr> vid io cs frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> td adi seq c set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> stv x set vit th trac q ( <ptr> state )
<cls> <noptr> scc am if register video node ( <ptr> cam if <dot> <noptr> idx )
<cls> <noptr> l gdt read cr lock status ( <ptr> state <dot> <ptr> locked )
<cls> <ptr> fim c is param str err ( <noptr> error )
<cls> <noptr> mtk md pvp u init ( <ptr> v pu )
<cls> <noptr> ov set pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> z l set params ( <ptr> fe )
<cls> <noptr> j pu buf finish ( <ptr> vb )
<cls> <noptr> init x o ( <ptr> port )
<cls> <noptr> loop sett x carrier ( <ptr> dev <dot> <noptr> carrier )
<cls> <noptr> packet counter start ( <ptr> priv )
<cls> <noptr> command set colour balance ( <ptr> gsp ca dev )
<cls> <noptr> td a shift ( <noptr> val )
<cls> <noptr> c cdc set image window ( <ptr> win )
<cls> <noptr> dts std ( <ptr> filp <dot> <ptr> p <dot> <noptr> norm )
<cls> <noptr> six radios frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vsp probe ( <ptr> pdev )
<cls> <noptr> or mat ( <ptr> gsp ca dev <dot> <noptr> f key <dot> <noptr> val )
<cls> <noptr> d ibm bread ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> cobalt s fmt vid cap ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> sit x tune freq ( <ptr> s dev <dot> <noptr> frequency )
<cls> <noptr> gsp ca coarse grained expo auto gain ( <ptr> gsp ca dev <dot> <noptr> avg lum <dot> <noptr> desired avg lum <dot> <noptr> dead zone )
<cls> <noptr> c sid set test pattern ( <ptr> c sid <dot> <noptr> value )
<cls> <noptr> omap isp stat request statistics ( <ptr> stat <dot> <ptr> data )
<cls> <noptr> mt get if frequency ( <ptr> fe <dot> <ptr> freq )
<cls> <noptr> sh set channel bandwidth ( <ptr> fe <dot> <noptr> bandwidth )
<cls> <noptr> init rc m app v ( )
<cls> <noptr> a vcl nb control ( <ptr> fdt v <dot> <noptr> voltage <dot> <noptr> burst <dot> <noptr> cont tone <dot> <noptr> n rdi seq <dot> <ptr> dis eq cmd )
<cls> <noptr> gpp skus b driver init ( )
<cls> <noptr> f mrp np probe ( <ptr> pdev <dot> <ptr> id )
<cls> <noptr> af read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> it x init ( <ptr> fe )
<cls> <noptr> mtk md ppm resume ( <ptr> dev )
<cls> <ptr> omap isp get ( <ptr> isp <dot> <noptr> irq )
<cls> <noptr> fim ch wen last irq ( <ptr> dev <dot> <noptr> enable )
<cls> <noptr> c x usb medi on set mode ( <ptr> dvb dev <dot> <noptr> digital )
<cls> <noptr> c x pll write reg ( <ptr> fe <dot> <noptr> data )
<cls> <noptr> m m ols log status ( <ptr> sd )
<cls> <noptr> e set ln again ( <ptr> fe )
<cls> <noptr> stv x read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> q mdc probe ( <ptr> client <dot> <ptr> id )
<cls> <ptr> check c x first minor ( )
<cls> <noptr> fmc get mode ( <ptr> f m dev <dot> <ptr> f m mode )
<cls> <noptr> vp if enum d v timings ( <ptr> file <dot> <ptr> priv <dot> <ptr> timings )
<cls> <noptr> vps s probe ( <ptr> pdev )
<cls> <noptr> r card rif sdr register ( <ptr> sdr )
<cls> <noptr> aver media tv stereo audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> lme return status ( <ptr> d )
<cls> <noptr> mtm g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> msi standby ( <ptr> sd )
<cls> <noptr> dib r curb completion ( <ptr> pur b )
<cls> <noptr> au analog stream enable ( <ptr> d )
<cls> <noptr> init r cmap ter rate cci ner gy c pci ( )
<cls> <noptr> v l format block width ( <ptr> info <dot> <noptr> plane )
<cls> <noptr> p wcs ctrl ( <ptr> ctrl )
<cls> <noptr> l gs gxx read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> stb dvb sre acquire ( <ptr> state )
<cls> <noptr> sp jpeg data num int enable ( <ptr> regs <dot> <noptr> enable )
<cls> <noptr> c xs audio sampling freq ( <ptr> c x hdl <dot> <noptr> idx )
<cls> <noptr> k ss routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> tw write byte ( <ptr> solo dev <dot> <noptr> chip id <dot> <noptr> tw x off <dot> <noptr> two ff <dot> <noptr> val )
<cls> <noptr> tvp log status ( <ptr> sd )
<cls> <noptr> tp g print str ( <ptr> tp g <dot> <ptr> base p <dot> <noptr> p <dot> <noptr> first <dot> <noptr> div <dot> <noptr> step <dot> <noptr> y <dot> <noptr> x <dot> <ptr> text <dot> <noptr> len )
<cls> <noptr> get payload size ( <noptr> code )
<cls> <noptr> h encode header ( <ptr> inst <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> vid ioc default ( <ptr> file <dot> <ptr> f h <dot> <noptr> valid prio <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> cam ss disable clocks ( <noptr> n clocks <dot> <ptr> clock )
<cls> <noptr> wpf partition ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> partition <dot> <noptr> partition idx <dot> <ptr> window )
<cls> <noptr> uif enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> tw buf finish ( <ptr> vb )
<cls> <noptr> digit v probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> resizer get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ske cg x config gpio s ( <ptr> priv <dot> <ptr> p data )
<cls> <noptr> via cam try fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> ln b set voltage ( <ptr> dev <dot> <noptr> link <dot> <noptr> input <dot> <noptr> voltage )
<cls> <noptr> r ga cmd set trans info ( <ptr> ctx )
<cls> <noptr> c x usb aux buf head trim ( <ptr> dvb dev <dot> <ptr> aux buf <dot> <noptr> pos )
<cls> <noptr> v l ctrl cluster ( <noptr> n controls <dot> <dptr> controls )
<cls> <noptr> stv x get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> vp ifs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> index )
<cls> <noptr> ctrl isdirty saturation ( <ptr> cptr )
<cls> <noptr> get key hau px vr ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> fmt x set mute mode ( <ptr> f m dev <dot> <noptr> mute mode to set )
<cls> <noptr> aus audio routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> atmel is i parsed t ( <ptr> is i <dot> <ptr> pdev )
<cls> <noptr> vid io cs jpeg comp ( <ptr> file <dot> <ptr> priv <dot> <ptr> jpeg comp )
<cls> <noptr> mtv write ( <ptr> sd <dot> <noptr> addr <dot> <noptr> value )
<cls> <noptr> fim c lite enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ds set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> aur c work ( <ptr> work )
<cls> <noptr> img ir setup hw ( <ptr> priv )
<cls> <noptr> tw mask set ( <ptr> client <dot> <noptr> command <dot> <noptr> mask <dot> <noptr> set )
<cls> <noptr> adv xx write reg seq ( <ptr> sd <dot> <ptr> reg seq )
<cls> <ptr> mds get dvb front end ( <ptr> client )
<cls> <noptr> res get ( <ptr> dev <dot> <noptr> f type )
<cls> <noptr> rtl sdr probe ( <ptr> pdev )
<cls> <noptr> b disp dbg dump xy ( <ptr> s <dot> <noptr> val <dot> <ptr> name )
<cls> <noptr> mt get bandwidth ( <ptr> fe <dot> <ptr> bw )
<cls> <noptr> tegra cec driver init ( )
<cls> <noptr> solo gpio chipset ( <ptr> chip <dot> <noptr> offset <dot> <noptr> value )
<cls> <noptr> saa set x ds ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> exy nos jpeg get output buffer size ( <ptr> ctx <dot> <ptr> f <dot> <noptr> fmt depth )
<cls> <noptr> m tread uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> d ibm bread status ( <ptr> fe <dot> <ptr> stat )
<cls> <ptr> check io ( )
<cls> <noptr> mba write ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ctrl std val to sym ( <ptr> cptr <dot> <noptr> msk <dot> <noptr> val <dot> <ptr> buf ptr <dot> <noptr> buf size <dot> <ptr> len )
<cls> <noptr> fd tvc a app info ( <ptr> fdt v <dot> <ptr> arg )
<cls> <noptr> opera xilinx rw ( <ptr> dev <dot> <noptr> request <dot> <noptr> value <dot> <ptr> data <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> tim b radio vid ioc g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> port has dr x k ( <ptr> ic <dot> <noptr> port )
<cls> <noptr> td a set params ( <ptr> fe <dot> <ptr> params )
<cls> <ptr> fc sub dev to dev ( <ptr> sd )
<cls> <noptr> carrier freq to clock divider ( <noptr> freq )
<cls> <noptr> mcc ic irq ( <ptr> cam <dot> <noptr> irq s )
<cls> <noptr> mtk vcodec dec p won ( <ptr> pm )
<cls> <noptr> skb af set rect and adjust ( <dptr> rects <dot> <noptr> first <dot> <ptr> v )
<cls> <noptr> bt probe ( <ptr> dev <dot> <ptr> pci id )
<cls> <noptr> venc set dac ( <ptr> sd <dot> <noptr> out index )
<cls> <noptr> venus session stop ( <ptr> inst )
<cls> <noptr> sp mfc driver init ( )
<cls> <noptr> vid ioc enum aud out ( <ptr> file <dot> <ptr> f h <dot> <ptr> v out )
<cls> <noptr> vi codec enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> cals fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> d vbos d ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> p arg )
<cls> <noptr> mtv set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> ite shutdown ( <ptr> pdev )
<cls> <noptr> sd reset snapshot ( <ptr> gsp ca dev )
<cls> <noptr> sms usb suspend ( <ptr> int f <dot> <noptr> msg )
<cls> <noptr> venus helper process initial out buf s ( <ptr> inst )
<cls> <noptr> h fi session set property ( <ptr> inst <dot> <noptr> ptype <dot> <ptr> p data )
<cls> <noptr> m c register write ( <ptr> dev <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> write firmware block ( <ptr> state <dot> <noptr> reg <dot> <noptr> size <dot> <ptr> reg dataptr )
<cls> <noptr> c cdc set fb addr ( <noptr> addr )
<cls> <noptr> mantis gpio set bits ( <ptr> mantis <dot> <noptr> bit pos <dot> <noptr> value )
<cls> <noptr> c pia set low power ( <ptr> cam )
<cls> <noptr> smi app get format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pvr dvb internal check ( <ptr> chp )
<cls> <noptr> uvc ioctl exp buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> exp )
<cls> <noptr> ctrl crop tmin get ( <ptr> cptr <dot> <ptr> top )
<cls> <noptr> vs pdl list add body ( <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> dvb vb stream on ( <ptr> ctx )
<cls> <noptr> td a output mode ( <ptr> fe <dot> <noptr> serial )
<cls> <noptr> vsp clu write ( <ptr> clu <dot> <ptr> dl b <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> td adi seq c wait ( <ptr> state )
<cls> <noptr> cec adap g phys addr ( <ptr> adap <dot> <ptr> p arg )
<cls> <noptr> usb vision read reg ( <ptr> usb vision <dot> <noptr> reg )
<cls> <noptr> ccp set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> cam if stop capture ( <ptr> vp )
<cls> <noptr> ce u notify bound ( <ptr> notifier <dot> <ptr> v lsd <dot> <ptr> asd )
<cls> <noptr> vid cap buf prepare ( <ptr> vb )
<cls> <noptr> fmc set rds mode ( <ptr> f m dev <dot> <noptr> rds end is )
<cls> <noptr> mtk jpeg dec set mem stride ( <ptr> base <dot> <noptr> stride y <dot> <noptr> stride uv )
<cls> <noptr> state eval decoder run ( <ptr> h dw )
<cls> <noptr> pvr h dw report clients ( <ptr> h dw <dot> <ptr> buf <dot> <noptr> a cnt )
<cls> <noptr> ov set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> stv get tuner freq ( <ptr> fe )
<cls> <noptr> solo set fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> via cam write reg mask ( <ptr> cam <dot> <noptr> reg <dot> <noptr> value <dot> <noptr> mask )
<cls> <ptr> td a attach ( <ptr> fe <dot> <ptr> ic adap <dot> <noptr> ic addr )
<cls> <noptr> iv tvf b check var ( <ptr> var <dot> <ptr> it v )
<cls> <noptr> sa ats init ( <ptr> dev )
<cls> <noptr> adv xx query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> r tread gain ( <ptr> priv )
<cls> <noptr> alter aci start feed ( <ptr> feed <dot> <noptr> num )
<cls> <noptr> queue job ( <ptr> fdp <dot> <ptr> job )
<cls> <noptr> write shared reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> fc sleep ( <ptr> fe )
<cls> <noptr> six int in callback ( <ptr> urb )
<cls> <noptr> mem cgroup commit charge ( <ptr> page <dot> <ptr> mem cg <dot> <noptr> lru care <dot> <noptr> compound )
<cls> <noptr> si ioctl ( <ptr> sd <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> fim cmm job finish ( <ptr> ctx <dot> <noptr> vb state )
<cls> <noptr> bcm read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> s cms ctrl ( <ptr> ctrl )
<cls> <noptr> init r cmap e ztv ( )
<cls> <ptr> check hard mute ( )
<cls> <noptr> as x cmd start streaming ( <ptr> adap )
<cls> <ptr> check dma buf size ( )
<cls> <noptr> scm o if set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pwc set auto gain expo ( <ptr> pdev )
<cls> <noptr> stv status ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> ddb irq init ( <ptr> dev )
<cls> <noptr> dvb usb nec rc key to event ( <ptr> d <dot> <noptr> key buf <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> dc mig selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> em xx resolution set ( <ptr> dev )
<cls> <noptr> loop set r x carrier range ( <ptr> dev <dot> <noptr> min <dot> <noptr> max )
<cls> <noptr> e set params ( <ptr> dev )
<cls> <noptr> ov write smbus ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> sms core initi r ( <ptr> core dev )
<cls> <noptr> platform device get ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> smi app replace limit ( <ptr> sensor <dot> <noptr> limit <dot> <noptr> val )
<cls> <noptr> ddb ports init ( <ptr> dev )
<cls> <noptr> c xxx is vb i buffer done ( <ptr> dev <dot> <ptr> dma q )
<cls> <noptr> read ber ( <ptr> fe )
<cls> <noptr> coda h sps fixup ( <ptr> ctx <dot> <noptr> width <dot> <noptr> height <dot> <ptr> buf <dot> <ptr> size <dot> <noptr> max size )
<cls> <noptr> vsp video set format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> tw set ctrl val ( <ptr> solo dev <dot> <noptr> ctrl <dot> <noptr> ch <dot> <noptr> val )
<cls> <noptr> t dax irq ddc ( <ptr> state <dot> <ptr> flags )
<cls> <noptr> td adi seq c recv slave reply ( <ptr> fe <dot> <ptr> reply )
<cls> <noptr> init r cmap medi on x digit ainer ( )
<cls> <noptr> ( <ptr> gsp ca dev )
<cls> <noptr> c x der read reg ( <ptr> priv <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> val )
<cls> <ptr> check c its fix ( )
<cls> <noptr> gsc irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> clk div even up ( <noptr> a )
<cls> <noptr> init r cmap k world u ( )
<cls> <noptr> v fe get ( <ptr> v fe )
<cls> <noptr> os d get layer config ( <ptr> sd <dot> <noptr> layer <dot> <ptr> l config )
<cls> <noptr> media device enum links ( <ptr> m dev <dot> <ptr> u links )
<cls> <noptr> tt usb process mux pack ( <ptr> tt usb <dot> <ptr> mux pack <dot> <noptr> len )
<cls> <noptr> ccp mem configure ( <ptr> ccp <dot> <ptr> config )
<cls> <noptr> calculate video dma grab planar ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> dr xx open ( <ptr> state )
<cls> <noptr> sp mfc run dec frame ( <ptr> ctx <dot> <noptr> last frame )
<cls> <noptr> j pu start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> dib set power mode ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> fim c pipeline try format ( <ptr> ctx <dot> <ptr> t fmt <dot> <dptr> fmt id <dot> <noptr> set )
<cls> <noptr> isp pipeline wait preview ( <ptr> isp )
<cls> <noptr> h enc wait venc done ( <ptr> inst )
<cls> <noptr> tw x real fps ( <noptr> index <dot> <noptr> max fps )
<cls> <noptr> q com venus dec driver init ( )
<cls> <noptr> frame stride ( <noptr> w <dot> <noptr> fmt )
<cls> <noptr> dvb play ( <ptr> av <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> non block <dot> <noptr> type )
<cls> <noptr> d ibm c set front end ( <ptr> fe )
<cls> <noptr> sun i video start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> vim c sca set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> print status ( <ptr> gsp ca dev <dot> <ptr> params )
<cls> <noptr> ce u parse platform data ( <ptr> ce udev <dot> <ptr> p data )
<cls> <noptr> init r cmap purple tv ( )
<cls> <noptr> is i enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> init r cmap digital now tiny twin ( )
<cls> <noptr> c x der get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> slv t freeze reg ( <ptr> tn r dmd )
<cls> <noptr> v l match d v timings ( <ptr> t <dot> <ptr> t <dot> <noptr> p clock delta <dot> <noptr> match reduced fps )
<cls> <noptr> em xx stop urb s ( <ptr> dev )
<cls> <noptr> mtk jpeg dec set total mcu ( <ptr> base <dot> <noptr> num )
<cls> <noptr> v spr wpf set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> e tek set frame interval ( <ptr> sub dev <dot> <ptr> fi )
<cls> <noptr> adv query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> td a send dis eq c burst ( <ptr> state <dot> <noptr> burst )
<cls> <noptr> aui soc copy ( <ptr> dev <dot> <ptr> urb )
<cls> <ptr> v l m m buf remove ( <ptr> q ctx )
<cls> <noptr> uvc ctrl add mapping ( <ptr> chain <dot> <ptr> mapping )
<cls> <noptr> iv tv prep dev ( <ptr> it v <dot> <noptr> type )
<cls> <noptr> adv x hdmi set e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> omap is pres izer register entities ( <ptr> res <dot> <ptr> v dev )
<cls> <noptr> ov try frame interval ( <ptr> sensor <dot> <ptr> fi <dot> <noptr> width <dot> <noptr> height )
<cls> <ptr> pt find adapter ( <ptr> fe )
<cls> <noptr> vid ioc g fmt vid cap m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> set l of ( <ptr> state <dot> <noptr> local frequency <dot> <noptr> cutoff frequency )
<cls> <noptr> scm power on ( <ptr> state )
<cls> <noptr> td axis r thread ( <noptr> irq <dot> <ptr> d )
<cls> <noptr> btc x sort clips ( <ptr> clips <dot> <noptr> n clips )
<cls> <noptr> r cg key code from table ( <ptr> dev <dot> <noptr> scan code )
<cls> <noptr> v pu cfg read l ( <ptr> v pu <dot> <noptr> offset )
<cls> <noptr> lme driver init ( )
<cls> <noptr> sh ve u job abort ( <ptr> priv )
<cls> <noptr> l m sub dev init ( <ptr> flash )
<cls> <noptr> delta job ready ( <ptr> priv )
<cls> <noptr> sp jpeg g selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> s )
<cls> <noptr> ov set white balance ( <ptr> ov <dot> <noptr> awb )
<cls> <noptr> handle one ule extension ( <ptr> p )
<cls> <noptr> delta driver init ( )
<cls> <noptr> v pbe stop streaming ( <ptr> v q )
<cls> <noptr> fim c is start firmware ( <ptr> is )
<cls> <noptr> ska a set user gain ( <ptr> client <dot> <noptr> gain )
<cls> <noptr> upd a write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> si function ality ( <ptr> adapter )
<cls> <noptr> cobalt g input ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> i )
<cls> <noptr> ce u fmt m plane ( <ptr> pix )
<cls> <noptr> i crd ( <ptr> sd <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> n )
<cls> <noptr> c x usb medi on priv init ( <ptr> dvb dev )
<cls> <noptr> x vip dma verify format ( <ptr> dma )
<cls> <noptr> t dax enable e did ( <ptr> sd )
<cls> <noptr> ov configure ( <ptr> gsp ca dev )
<cls> <noptr> fim c is load set file ( <ptr> is <dot> <ptr> filename )
<cls> <noptr> sdi soc irq ( <ptr> urb )
<cls> <noptr> saa set std ( <ptr> sd <dot> <noptr> std )
<cls> <ptr> c x vb queue ( <ptr> id )
<cls> <noptr> coda setup i ram ( <ptr> ctx )
<cls> <noptr> mtm enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> cobalt subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> vpx fe read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> g d set cmd ( <ptr> d <dot> <noptr> c )
<cls> <noptr> c xxx config tuner ( <ptr> dev )
<cls> <noptr> cmd buf add ( <ptr> c buf <dot> <noptr> cmd )
<cls> <noptr> demo d attach lg x ( <ptr> chan )
<cls> <ptr> vb to ce u ( <ptr> v buf )
<cls> <noptr> hdp vr transmit buffers ( <ptr> work )
<cls> <noptr> v l print format ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> tea get r f strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> ccp mem enable ( <ptr> ccp <dot> <noptr> enable )
<cls> <noptr> ter rate c htc stick init ( <ptr> dev )
<cls> <noptr> cxa vs video routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> mantis uart setup ( <ptr> mantis <dot> <ptr> params )
<cls> <noptr> l m flash brt ctrl ( <ptr> flash <dot> <noptr> led no <dot> <noptr> brt )
<cls> <noptr> digit val pst ded demo d init ( <ptr> fe )
<cls> <noptr> pvr h dw gpio get dir ( <ptr> h dw <dot> <ptr> dp )
<cls> <noptr> temp m oninit ( <ptr> link <dot> <noptr> first time )
<cls> <noptr> cec gpio probe ( <ptr> pdev )
<cls> <noptr> ov set mode ( <ptr> sd )
<cls> <noptr> adv x read ( <ptr> state <dot> <noptr> page <dot> <noptr> reg )
<cls> <noptr> vivid radio tx s ctrl ( <ptr> ctrl )
<cls> <noptr> r vin subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> mantis pci init ( <ptr> mantis )
<cls> <noptr> ov set gain ( <ptr> sensor <dot> <noptr> gain )
<cls> <noptr> sp mfc run init enc buffers ( <ptr> ctx )
<cls> <noptr> stv x get cold lock ( <ptr> state <dot> <noptr> timeout dmd )
<cls> <noptr> img ir decoder compatible ( <ptr> priv <dot> <ptr> dec )
<cls> <noptr> nv t cir regs init ( <ptr> nv t )
<cls> <ptr> check hw sections ( )
<cls> <noptr> uds output size ( <noptr> input <dot> <noptr> ratio )
<cls> <noptr> c xxx gpio ic end ( <ptr> dev )
<cls> <noptr> v lg ctrl ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> v feb us connect wmt ord i ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> id )
<cls> <noptr> cam if sub dev try format ( <ptr> cam if <dot> <ptr> m f <dot> <noptr> pad )
<cls> <noptr> c xxx gpio ic read byte ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> put q tbl ( <ptr> p <dot> <ptr> q tbl )
<cls> <noptr> x tune ( <ptr> tn r dmd <dot> <noptr> bandwidth <dot> <noptr> clk mode <dot> <noptr> shift frequency khz )
<cls> <noptr> m back irq ( <ptr> c x <dot> <ptr> order )
<cls> <noptr> mt get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> r bsp write bit ( <ptr> r bsp <dot> <noptr> bit )
<cls> <noptr> csi ctx map format ( <ptr> csi )
<cls> <noptr> m c memory write ( <ptr> dev <dot> <noptr> address <dot> <noptr> value )
<cls> <ptr> msi get next fill buf ( <ptr> dev )
<cls> <noptr> saa set video enable ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> td a lookup thermometer ( <ptr> fe )
<cls> <noptr> cec log addr idx ( <ptr> adap <dot> <noptr> log addr )
<cls> <noptr> ov set power ( <ptr> priv <dot> <noptr> on )
<cls> <noptr> net upc i write attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> video buf read stop ( <ptr> q )
<cls> <noptr> scratch get ( <ptr> usb vision <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> set agc if ( <ptr> state <dot> <ptr> pag c cfg <dot> <noptr> is dtv )
<cls> <noptr> adv x initialise clients ( <ptr> state )
<cls> <noptr> start diversity ( <ptr> state )
<cls> <noptr> sh get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> v pref cnt fb ( <ptr> inst <dot> <ptr> idx <dot> <noptr> new idx )
<cls> <noptr> pvr channel init ( <ptr> cp <dot> <ptr> mp )
<cls> <noptr> pvr buffer set buffer ( <ptr> b p <dot> <ptr> ptr <dot> <noptr> cnt )
<cls> <noptr> preview enable chroma suppression ( <ptr> prev <dot> <noptr> enable )
<cls> <noptr> c ill read ( <ptr> c i buf <dot> <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> isset is paw b ( <ptr> is <dot> <noptr> cmd <dot> <noptr> val )
<cls> <noptr> saa hw fini ( <ptr> dev )
<cls> <noptr> av start feed ( <ptr> feed )
<cls> <noptr> fc set params ( <ptr> dev )
<cls> <noptr> isp register entities ( <ptr> isp )
<cls> <noptr> do tuner callback ( <ptr> fe <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> tts read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> taz get r x sub c hans ( <ptr> chip )
<cls> <noptr> pvr h dw commit ctl ( <ptr> h dw )
<cls> <noptr> set control ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <ptr> check vid out nr ( )
<cls> <noptr> mtm write ( <ptr> client <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> venus event notify ( <ptr> core <dot> <noptr> event )
<cls> <noptr> delta vb frame queue ( <ptr> vb )
<cls> <noptr> dcm i formats init ( <ptr> dcm i )
<cls> <noptr> net up spi interrupt ( <ptr> spi )
<cls> <noptr> ov set timings ( <ptr> sensor <dot> <ptr> mode )
<cls> <noptr> m cam write yuv bases ( <ptr> cam <dot> <noptr> frame <dot> <noptr> base )
<cls> <noptr> rt write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ov prob edt ( <ptr> client <dot> <ptr> ov )
<cls> <noptr> saa work vb i handler ( <ptr> w )
<cls> <noptr> a speed video start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> smi app init controls ( <ptr> sensor )
<cls> <noptr> mtm set red balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> stv x driver init ( )
<cls> <noptr> cec gpio p drv init ( )
<cls> <noptr> philip std ml tuner set params ( <ptr> fe )
<cls> <noptr> exy nos jpeg parse q tbl ( <ptr> ctx )
<cls> <noptr> tw write and verify ( <ptr> solo dev <dot> <noptr> addr <dot> <noptr> off <dot> <noptr> val )
<cls> <noptr> av attach ( <ptr> dev <dot> <ptr> pci ext )
<cls> <noptr> sp mfc get dec y a drv ( <ptr> dev )
<cls> <noptr> sd config depth ( <ptr> gsp ca dev <dot> <ptr> id )
<cls> <noptr> dvb dmx disconnect front end ( <ptr> demux )
<cls> <noptr> adv x csi get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> legacy dvb usb set key code ( <ptr> dev <dot> <ptr> ke <dot> <ptr> old key code )
<cls> <noptr> stv get fec ( <ptr> state )
<cls> <noptr> t mir handle key ( <ptr> work )
<cls> <noptr> dib pse tag c min ( <ptr> fe <dot> <noptr> v )
<cls> <noptr> gsp cast art streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> fim c is sub dev enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> c xs audio stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> air star dvb t attach ( <ptr> fc <dot> <ptr> ic )
<cls> <noptr> to h fi raw fmt ( <noptr> v l fmt )
<cls> <noptr> dst get modulation ( <ptr> state )
<cls> <noptr> iv tv u dma fills g array ( <ptr> dma <dot> <noptr> buffer offset <dot> <noptr> buffer offset <dot> <noptr> split )
<cls> <noptr> ds set front end ( <ptr> fe )
<cls> <noptr> bl reg w ( <noptr> val <dot> <noptr> offset )
<cls> <noptr> acket ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> sync device with v l controls ( <ptr> v l flash )
<cls> <noptr> dib p set bandwidth ( <ptr> state <dot> <noptr> bw )
<cls> <noptr> dtv property process get ( <ptr> fe <dot> <ptr> c <dot> <ptr> tvp <dot> <ptr> file )
<cls> <noptr> media device open ( <ptr> filp )
<cls> <noptr> ov set mode direct ( <ptr> sensor <dot> <ptr> mode )
<cls> <noptr> bt tv query std ( <ptr> file <dot> <ptr> f <dot> <ptr> id )
<cls> <noptr> ava v init ( <ptr> av )
<cls> <noptr> s set mode ( <ptr> vc <dot> <ptr> mode )
<cls> <ptr> check iv tvf b card id ( )
<cls> <noptr> pvr hd wget crop cap ( <ptr> h dw <dot> <ptr> pp )
<cls> <noptr> fcs tuner ( <ptr> sd <dot> <ptr> v )
<cls> <noptr> hdp vr try ctrl ( <ptr> ctrl )
<cls> <noptr> flex cop usb urb complete ( <ptr> urb )
<cls> <noptr> h va ctrls setup ( <ptr> ctx )
<cls> <noptr> omap isp preview init ( <ptr> isp )
<cls> <noptr> fdp try fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sa air open ( <ptr> rc )
<cls> <noptr> dvb sky usb driver init ( )
<cls> <noptr> vivid rds generate ( <ptr> rds )
<cls> <noptr> sh read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> adv xaf es ctrl ( <ptr> ctrl )
<cls> <noptr> bt tvs register ( <ptr> file <dot> <ptr> f <dot> <ptr> reg )
<cls> <ptr> check cam debug ( )
<cls> <noptr> init searchparam ( <ptr> state <dot> <ptr> p )
<cls> <noptr> net up unid v bci register ( <ptr> dev <dot> <noptr> num <dot> <ptr> pci dev )
<cls> <noptr> s get algo ( <ptr> fe )
<cls> <noptr> vp fec cdc set image window ( <ptr> c cdc <dot> <ptr> win <dot> <noptr> bpp )
<cls> <noptr> rcs i irq thread ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> adv xx log info frames ( <ptr> sd )
<cls> <noptr> c x der sleep t cto active t ( <ptr> priv <dot> <noptr> bandwidth )
<cls> <noptr> radio is as ctrl ( <ptr> ctrl )
<cls> <noptr> iv tvs audio sampling freq ( <ptr> c x hdl <dot> <noptr> idx )
<cls> <noptr> a zci read attribute mem ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> max round closest ( <noptr> dividend <dot> <noptr> divisor )
<cls> <noptr> hdp vr submit buffers ( <ptr> dev )
<cls> <noptr> ov x set test pattern ( <ptr> ov x <dot> <noptr> value )
<cls> <noptr> v l ctrl sub dev subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> sec oce cir r x ( <ptr> priv )
<cls> <noptr> tim b radio vid ioc stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> d ibm c get front end ( <ptr> fe <dot> <ptr> fep )
<cls> <noptr> v l std to adv ( <noptr> std )
<cls> <noptr> dib tune digital ( <ptr> fe )
<cls> <noptr> airs pys fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> dst ca read ( <ptr> file <dot> <ptr> buffer <dot> <noptr> length <dot> <ptr> offset )
<cls> <noptr> tc set pll ( <ptr> sd )
<cls> <noptr> fd ppm runtime resume ( <ptr> dev )
<cls> <noptr> r jn video probe ( <ptr> client <dot> <ptr> priv )
<cls> <noptr> tt usb dec process urb frame list ( <noptr> data )
<cls> <noptr> set wb ( <ptr> gsp ca dev )
<cls> <noptr> si check rev ( <ptr> s dev )
<cls> <noptr> set i q maf ( <ptr> state <dot> <noptr> active )
<cls> <noptr> sits bus ctrl ( <ptr> fe <dot> <noptr> acquire )
<cls> <noptr> loop sett x duty cycle ( <ptr> dev <dot> <noptr> duty cycle )
<cls> <noptr> z r x xvid io cs fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c x reset device ( <ptr> fe )
<cls> <noptr> ene suspend ( <ptr> pnp dev <dot> <noptr> state )
<cls> <noptr> avc tuner tune q psk ( <ptr> fdt v <dot> <ptr> p )
<cls> <noptr> m anti shif evm work ( <ptr> work )
<cls> <noptr> c xxx sleeps h ( <ptr> dev )
<cls> <noptr> a speed video enum input ( <ptr> file <dot> <ptr> f h <dot> <ptr> inp )
<cls> <noptr> l gdt x read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> aus ctrl ( <ptr> ctrl )
<cls> <noptr> iv tv gen c index ( <ptr> file <dot> <ptr> f h <dot> <ptr> idx )
<cls> <noptr> coda h profile ( <noptr> profileid c )
<cls> <noptr> tc tread status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> tcs read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> v l print std ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> sp mfc handle frame copy time ( <ptr> ctx )
<cls> <noptr> cxa v work handler ( <ptr> work )
<cls> <noptr> saa api ic read ( <ptr> bus <dot> <noptr> addr <dot> <noptr> reg len <dot> <ptr> reg <dot> <noptr> data len <dot> <ptr> data )
<cls> <noptr> ov write array ( <ptr> client <dot> <ptr> vals )
<cls> <noptr> ov set frame fmt ( <ptr> sensor <dot> <ptr> format )
<cls> <noptr> any see write reg ( <ptr> d <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> wl f m vid io cs mod ulator ( <ptr> file <dot> <ptr> priv <dot> <ptr> mod ulator )
<cls> <noptr> em xx ctrl notify ( <ptr> ctrl <dot> <ptr> priv )
<cls> <noptr> preview enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> v peg fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> td a set bandwidth ( <ptr> fe <dot> <noptr> bw )
<cls> <noptr> c sir x probe ( <ptr> pdev )
<cls> <noptr> xt pgp m resume ( <ptr> dev )
<cls> <noptr> is if set win ( <ptr> image win <dot> <noptr> frm fmt <dot> <noptr> ppc )
<cls> <noptr> flite hw capture stop ( <ptr> dev )
<cls> <noptr> ctrl std avail set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> c x dvb bus ctrl ( <ptr> fe <dot> <noptr> acquire )
<cls> <noptr> vs pdu setup lif ( <ptr> dev <dot> <noptr> pipe index <dot> <ptr> cfg )
<cls> <noptr> uvc video stats decode ( <ptr> stream <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> mtk mdp hw set global alpha ( <ptr> ctx )
<cls> <ptr> check use x tal ( )
<cls> <noptr> x sleep dvb t demo d setting ( <ptr> tn r dmd )
<cls> <noptr> a speed video irq res change ( <ptr> video <dot> <noptr> delay )
<cls> <noptr> snd c x alc get ( <ptr> k control <dot> <ptr> value )
<cls> <ptr> find format by pix ( <ptr> v pfe <dot> <noptr> pixel format )
<cls> <noptr> ov set d vpp clk ( <ptr> sensor <dot> <noptr> rate )
<cls> <noptr> pvr h dw render useless ( <ptr> h dw )
<cls> <noptr> cio v l query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> btc x align ( <ptr> win <dot> <ptr> clips <dot> <noptr> n <dot> <noptr> mask )
<cls> <noptr> vivid update format out ( <ptr> dev )
<cls> <noptr> fill vb buffer ( <ptr> vb <dot> <ptr> planes )
<cls> <noptr> a speed video get format ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <ptr> dst ca attach ( <ptr> dst <dot> <ptr> dvb adapter )
<cls> <noptr> c xvid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> ctrl sets rate ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> a speed video read ( <ptr> video <dot> <noptr> reg )
<cls> <ptr> check max memory ( )
<cls> <ptr> pwc get next fill buf ( <ptr> pdev )
<cls> <noptr> ctrl get bass ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> red rat process ir data ( <ptr> r r )
<cls> <noptr> sp cec irqhandler thread ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> x vip set format size ( <ptr> format <dot> <ptr> fmt )
<cls> <noptr> aver media eeprom ( <ptr> b tv )
<cls> <ptr> check debug regs ( )
<cls> <noptr> coda subscribe event ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> l m init device ( <ptr> flash )
<cls> <noptr> vsp video buffer prepare ( <ptr> vb )
<cls> <noptr> is px clk init ( <ptr> isp )
<cls> <noptr> pvr h dw set stream type ( <ptr> h dw <dot> <noptr> config )
<cls> <noptr> ov update digital gain ( <ptr> ov <dot> <noptr> d gain )
<cls> <noptr> t wxs g buf refill ( <ptr> vc <dot> <noptr> pb )
<cls> <noptr> x vip graph d main it one ( <ptr> x dev <dot> <ptr> node )
<cls> <noptr> ov x set b and ing filter ( <ptr> ov x <dot> <noptr> value )
<cls> <noptr> flex cop mac filter ctrl ( <ptr> fc <dot> <noptr> onoff )
<cls> <noptr> get alignment ( <noptr> fourcc <dot> <ptr> w align <dot> <ptr> h align )
<cls> <noptr> sh set serial mode ( <ptr> fe <dot> <noptr> serial )
<cls> <noptr> ml x nv ram read ( <ptr> priv <dot> <noptr> offset <dot> <ptr> val <dot> <noptr> bytes )
<cls> <noptr> preview config input format ( <ptr> prev <dot> <ptr> info )
<cls> <noptr> fdp write lut ( <ptr> fdp <dot> <ptr> lut <dot> <noptr> len <dot> <noptr> base )
<cls> <noptr> check cfg ( <noptr> which <dot> <ptr> cfg )
<cls> <noptr> rtl xx u front end ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> dma callback ( <ptr> data )
<cls> <noptr> tw g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> debug if c count non whitespace ( <ptr> buf <dot> <noptr> count )
<cls> <noptr> alter aci tuner reset ( <ptr> dev <dot> <noptr> cin r )
<cls> <noptr> tms top stream ( <ptr> dev )
<cls> <noptr> px p probe ( <ptr> pdev )
<cls> <noptr> o vgg ain ( <ptr> sd <dot> <ptr> value )
<cls> <noptr> verify planes array core ( <ptr> vb <dot> <ptr> pb )
<cls> <noptr> vivid overlay ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> c xxx load firmware ( <ptr> dev )
<cls> <noptr> m i init post alt ( <ptr> gsp ca dev )
<cls> <noptr> saa dev setup ( <ptr> dev )
<cls> <noptr> solo fill mpeg ( <ptr> solo enc <dot> <ptr> vb <dot> <ptr> vh )
<cls> <noptr> fim c mms fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> c x wakeup ( <ptr> core <dot> <ptr> q <dot> <noptr> count )
<cls> <noptr> hdp vr open ( <ptr> file )
<cls> <noptr> m xl x sf demo d get tps guard interval ( <ptr> state <dot> <ptr> guard )
<cls> <noptr> v pfe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <ptr> check vid mode ( )
<cls> <noptr> sh vou buf prepare ( <ptr> vb )
<cls> <noptr> sr pcs ctrl ( <ptr> ctrl )
<cls> <noptr> em xx hint board ( <ptr> dev )
<cls> <noptr> em xx vol put ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> vpx f pread ( <ptr> sd <dot> <noptr> fp addr )
<cls> <noptr> saa api set debug ( <ptr> dev <dot> <noptr> level )
<cls> <noptr> shark led set blue ( <ptr> led c dev <dot> <noptr> value )
<cls> <noptr> video buf d main it kernel ( <ptr> dma <dot> <noptr> direction <dot> <noptr> nr pages )
<cls> <noptr> vp ifg input ( <ptr> file <dot> <ptr> priv <dot> <ptr> index )
<cls> <noptr> atmel is i handle streaming ( <ptr> is i )
<cls> <noptr> td a get fec ( <ptr> state )
<cls> <noptr> dtt u usb driver init ( )
<cls> <noptr> stv activates mod cod single ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> td await dis eq c fifo ( <ptr> state <dot> <noptr> timeout )
<cls> <noptr> ic recv bytes ( <ptr> ic bus <dot> <noptr> msg )
<cls> <ptr> check ccs cap mode ( )
<cls> <noptr> msp driver init ( )
<cls> <noptr> usb vision set output ( <ptr> usb vision <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> mtk vcodec decre set handler ( <ptr> priv )
<cls> <noptr> flex cop usb v memory req ( <ptr> fc usb <dot> <noptr> req <dot> <noptr> page <dot> <noptr> w address <dot> <ptr> pb buffer <dot> <noptr> buf len )
<cls> <noptr> adb csc coeff ( <ptr> sd <dot> <noptr> a <dot> <noptr> a <dot> <noptr> a <dot> <noptr> a <dot> <noptr> b <dot> <noptr> b <dot> <noptr> b <dot> <noptr> b <dot> <noptr> c <dot> <noptr> c <dot> <noptr> c <dot> <noptr> c )
<cls> <noptr> m xl x sf set device mode ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> vid blk read byte ( <ptr> dev <dot> <noptr> saddr <dot> <ptr> data )
<cls> <noptr> cal complete ctx ( <ptr> ctx )
<cls> <noptr> mce kbd r x timeout ( <ptr> t )
<cls> <noptr> c x der read status s ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> gsc set scaler info ( <ptr> ctx )
<cls> <noptr> d ibm identify ( <ptr> state )
<cls> <noptr> c x der get carrier offset c ( <ptr> priv <dot> <ptr> offset )
<cls> <noptr> venus helper power enable ( <ptr> core <dot> <noptr> session type <dot> <noptr> enable )
<cls> <noptr> m tt g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> vb i start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> pvr context notify ( <ptr> mp )
<cls> <noptr> pcm thread ( <ptr> data )
<cls> <noptr> stb read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> em xx v l suspend ( <ptr> dev )
<cls> <noptr> z r xx start acquire ( <ptr> cam )
<cls> <noptr> avc write ( <ptr> fdt v )
<cls> <noptr> saa dsp wait bit ( <ptr> dev <dot> <noptr> bit )
<cls> <noptr> sp jpeg set q tbl ( <ptr> regs <dot> <ptr> q tbl <dot> <noptr> tab <dot> <noptr> len )
<cls> <noptr> t dax fill format ( <ptr> state <dot> <ptr> format )
<cls> <noptr> prepare sec filters ( <ptr> dvb dmx feed )
<cls> <noptr> ov set register array ( <ptr> ov <dot> <ptr> settings <dot> <noptr> num settings )
<cls> <noptr> adb init setup ( <ptr> sd )
<cls> <noptr> cam if hw set flip ( <ptr> vp )
<cls> <noptr> dump regs ( <ptr> state <dot> <ptr> label )
<cls> <noptr> venus session end ( <ptr> inst )
<cls> <noptr> z l read status reg ( <ptr> state )
<cls> <noptr> tuner stype addr ( <ptr> sd <dot> <ptr> tun setup )
<cls> <noptr> interpolate value ( <noptr> value <dot> <ptr> segments <dot> <noptr> len )
<cls> <noptr> uvc meta v l get format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> cxx xic mux select ( <ptr> mux c <dot> <noptr> chan id )
<cls> <noptr> gpp sk load bcm fw ( <ptr> d )
<cls> <noptr> vbo psv dec stop streaming ( <ptr> q )
<cls> <noptr> m mol ss stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> vid ioc stream on ( <ptr> file <dot> <ptr> f h <dot> <noptr> type )
<cls> <noptr> stv read regs ( <ptr> fe <dot> <noptr> regs <dot> <noptr> start <dot> <noptr> len )
<cls> <noptr> img ir init decoders ( )
<cls> <noptr> ov x enum frame sizes ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> vim c deb get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> dib usb read eeprom byte ( <ptr> d <dot> <noptr> offs <dot> <ptr> val )
<cls> <noptr> med usa set hue ( <ptr> dev <dot> <noptr> hue <dot> <noptr> decoder )
<cls> <noptr> adv xx read reg ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> vivid cec pin events ( <ptr> dev <dot> <ptr> msg <dot> <noptr> n acked )
<cls> <noptr> e tek set pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> z r xx driver init ( )
<cls> <noptr> noon probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mtk v dec update fmt ( <ptr> ctx <dot> <noptr> pixel format )
<cls> <noptr> lme powerup ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> fim c ish wget params ( <ptr> is <dot> <noptr> numargs )
<cls> <noptr> g scm mgf mtm plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> e tek enum frame ival ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <noptr> c eug parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> channels w demux tsk let ( <noptr> data )
<cls> <noptr> snd cards aah w params ( <ptr> sub stream <dot> <ptr> hw params )
<cls> <noptr> ccd cls c program table ( <ptr> c cdc <dot> <noptr> addr )
<cls> <noptr> smi app identify module ( <ptr> sensor )
<cls> <ptr> mtk vcodec get curr ctx ( <ptr> dev )
<cls> <noptr> sa atv audio set volume ( <ptr> dev <dot> <noptr> level )
<cls> <noptr> tvp detect version ( <ptr> core )
<cls> <noptr> dib read word attr ( <ptr> state <dot> <noptr> reg <dot> <noptr> attribute )
<cls> <noptr> rcs i wait phy start ( <ptr> priv )
<cls> <noptr> resizer set y c pos ( <ptr> res <dot> <noptr> pixel code )
<cls> <noptr> e tek reg list tom bus ( <ptr> reg list <dot> <ptr> fmt )
<cls> <noptr> az write ( <ptr> udev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <ptr> z d demo d get dvb front end ( <ptr> pdev )
<cls> <noptr> stv set tone ( <ptr> fe <dot> <noptr> tone off )
<cls> <noptr> net upc i set irq ( <ptr> en <dot> <noptr> irq mode )
<cls> <noptr> sp mfc clean dev int flags ( <ptr> dev )
<cls> <noptr> hack r f submit urb s ( <ptr> dev )
<cls> <noptr> vsp entity route setup ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl b )
<cls> <noptr> or request firmware ( <ptr> fe <dot> <dptr> fw <dot> <ptr> name )
<cls> <noptr> packet counter stop ( <ptr> priv )
<cls> <noptr> h read reg ( <ptr> inst <dot> <noptr> addr )
<cls> <noptr> saa input timer ( <ptr> t )
<cls> <noptr> media ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> m tvs stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> af usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> td a set symbol rate ( <ptr> state <dot> <noptr> s rate )
<cls> <noptr> fim c is ic suspend ( <ptr> dev )
<cls> <noptr> sa aic register ( <ptr> dev )
<cls> <noptr> ov x write array ( <ptr> ov x <dot> <ptr> regs )
<cls> <noptr> video bufio lock ( <ptr> q <dot> <ptr> vb <dot> <ptr> f buf )
<cls> <noptr> gsp ca resume ( <ptr> int f )
<cls> <noptr> td aic bridge ( <ptr> fe <dot> <noptr> close )
<cls> <noptr> v spr wpf set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <ptr> check dual tuner ( )
<cls> <noptr> td a lookup rfb and ( <ptr> fe <dot> <ptr> freq <dot> <ptr> rfb and )
<cls> <noptr> pvr stream achieve buffer count ( <ptr> sp )
<cls> <noptr> em xx vb i supported ( <ptr> dev )
<cls> <noptr> stk vid ioc enum input ( <ptr> filp <dot> <ptr> priv <dot> <ptr> input )
<cls> <noptr> msp c set carrier ( <ptr> client <dot> <noptr> c do <dot> <noptr> c do )
<cls> <noptr> af probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> vb fop write ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> rtl read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> fin tek hw detect ( <ptr> fin tek )
<cls> <noptr> v lapply frm size constraints ( <ptr> width <dot> <ptr> height <dot> <ptr> frm size )
<cls> <noptr> asset tune ( <ptr> priv <dot> <ptr> tune args )
<cls> <noptr> sur c query ( <ptr> d )
<cls> <noptr> hex ium set input ( <ptr> hex ium <dot> <noptr> input )
<cls> <noptr> ati remote driver init ( )
<cls> <noptr> max set r f ( <ptr> priv <dot> <noptr> freq )
<cls> <noptr> ptic write msg ( <ptr> pt <dot> <noptr> addr <dot> <ptr> addr p <dot> <ptr> msg )
<cls> <noptr> c xxx media device init ( <ptr> dev <dot> <ptr> udev )
<cls> <noptr> snd val ( <ptr> gsp ca dev <dot> <noptr> ads <dot> <noptr> val )
<cls> <noptr> hi x h dir resume ( <ptr> dev )
<cls> <ptr> find private ref ( <ptr> hdl <dot> <noptr> id )
<cls> <noptr> vp fec cdc get frame format ( <ptr> c cdc )
<cls> <noptr> iv tv set vps ( <ptr> it v <dot> <noptr> enabled )
<cls> <noptr> iv tv decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> dec )
<cls> <noptr> stk ic read reg ( <ptr> dev <dot> <noptr> addr <dot> <noptr> reg <dot> <ptr> value )
<cls> <noptr> fim ch w set camera source ( <ptr> fim c <dot> <ptr> source )
<cls> <noptr> resizer set start ( <ptr> res <dot> <noptr> left <dot> <noptr> top )
<cls> <noptr> preview set inaddr ( <ptr> prev <dot> <noptr> addr )
<cls> <noptr> adv pkt mem wr ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <ptr> try fmt ( <ptr> sd <dot> <ptr> m f )
<cls> <noptr> ctrl clear dirty crop h ( <ptr> cptr )
<cls> <noptr> v dec decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> cmd )
<cls> <noptr> int buf sunset buffers ( <ptr> inst )
<cls> <noptr> air spy enum fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> nxt x read reg multi byte ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> dvb tsc command ( <ptr> state <dot> <noptr> cmd <dot> <noptr> sub cmd <dot> <noptr> param <dot> <noptr> param <dot> <noptr> param <dot> <noptr> param <dot> <noptr> param )
<cls> <noptr> me so nir probe ( <ptr> pdev )
<cls> <noptr> ves get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> c x irq ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> uvc ioctl try ext ctrls ( <ptr> file <dot> <ptr> f h <dot> <ptr> ctrls )
<cls> <noptr> vs pdu atomic update ( <ptr> dev <dot> <noptr> pipe index <dot> <noptr> r pf index <dot> <ptr> cfg )
<cls> <noptr> tt usb dec stop sec feed ( <ptr> dvb dmx feed )
<cls> <noptr> x c is firmware loaded ( <ptr> fe )
<cls> <noptr> cam if hw set output addr ( <ptr> vp <dot> <ptr> p addr <dot> <noptr> i )
<cls> <noptr> wl f m vid ioc g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> freq )
<cls> <noptr> imx start stream ( <ptr> priv )
<cls> <noptr> port has c x d ( <ptr> port <dot> <ptr> type )
<cls> <noptr> t mir wait ( <ptr> dev <dot> <noptr> state )
<cls> <noptr> mn x sleep ( <ptr> fe )
<cls> <noptr> rtl xx u ctrl msg ( <ptr> d <dot> <ptr> req )
<cls> <noptr> mt write ( <ptr> state <dot> <noptr> reg <dot> <ptr> src <dot> <noptr> count )
<cls> <noptr> h vah fills e inal ( <ptr> p ctx <dot> <noptr> type <dot> <ptr> addr <dot> <ptr> size )
<cls> <noptr> scm o ifs stream ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> do ic probe ( <ptr> h dw <dot> <noptr> addr )
<cls> <noptr> iv tv irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> dvb usb v resume common ( <ptr> d )
<cls> <ptr> smi app validate csi data format ( <ptr> sensor <dot> <noptr> code )
<cls> <noptr> set v scale ( <ptr> sd <dot> <noptr> task <dot> <noptr> yscale )
<cls> <noptr> net up uni dvb request modules ( <ptr> dev )
<cls> <noptr> estimated au size ( <noptr> w <dot> <noptr> h )
<cls> <noptr> c xir start ( <ptr> priv )
<cls> <ptr> check quirks ( )
<cls> <noptr> vpx init ( <ptr> sd <dot> <noptr> val )
<cls> <ptr> fourcc to str ( <noptr> fmt )
<cls> <noptr> ov set binning ( <ptr> sensor <dot> <noptr> enable )
<cls> <noptr> csi set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> au v l close ( <ptr> filp )
<cls> <noptr> yte ( <ptr> budget <dot> <noptr> data )
<cls> <noptr> rt get if frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> init r cmap k had as ( )
<cls> <noptr> iv t vic new ir ( <ptr> it v <dot> <noptr> hw <dot> <ptr> type <dot> <noptr> addr )
<cls> <noptr> v pfe ioctl default ( <ptr> file <dot> <ptr> priv <dot> <noptr> valid prio <dot> <noptr> cmd <dot> <ptr> param )
<cls> <noptr> lend ( <ptr> av <dot> <noptr> window nr )
<cls> <noptr> r x error inj ( <ptr> pin <dot> <noptr> mode offset <dot> <noptr> arg idx <dot> <ptr> arg )
<cls> <noptr> d ibm c read word ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> max i radio tea x set pins ( <ptr> tea <dot> <noptr> pins )
<cls> <noptr> omap is pres izer busy ( <ptr> res )
<cls> <noptr> fdt v read un corrected blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> vsp video pipeline build ( <ptr> pipe <dot> <ptr> video )
<cls> <noptr> m xls f demo d read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> rtl read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> v fe buf update w mon new ( <ptr> v fe <dot> <ptr> output <dot> <ptr> new buf )
<cls> <noptr> sh vou stream config ( <ptr> vou dev )
<cls> <noptr> bt tv calc geo old ( <ptr> b tv <dot> <ptr> geo <dot> <noptr> width <dot> <noptr> height <dot> <noptr> interleaved <dot> <ptr> tv norm )
<cls> <noptr> saa x driver init ( )
<cls> <noptr> solo pm test ( <ptr> solo dev <dot> <noptr> base <dot> <noptr> size )
<cls> <noptr> l gdt write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> max set r x mode ( <ptr> ctx <dot> <noptr> r x mode )
<cls> <noptr> pvr hd wv l store minor number ( <ptr> h dw <dot> <noptr> index <dot> <noptr> v )
<cls> <noptr> flex cop usb read ibi reg ( <ptr> fc <dot> <noptr> reg )
<cls> <noptr> iv tv start decoding ( <ptr> id <dot> <noptr> speed )
<cls> <noptr> c x reads n res no ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> cec transmit attempt do nets ( <ptr> adap <dot> <noptr> status <dot> <noptr> ts )
<cls> <noptr> stv get optim short carr loop ( <noptr> s rate <dot> <noptr> modulation <dot> <noptr> chip id )
<cls> <noptr> bt tv g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> pvr stream init ( <ptr> sp )
<cls> <noptr> mtk mdpi star get compose ( <noptr> target )
<cls> <noptr> stk camera read reg ( <ptr> dev <dot> <noptr> index <dot> <ptr> value )
<cls> <noptr> rt section ( <ptr> priv <dot> <ptr> i qpoint )
<cls> <noptr> enc update hevc q p ctrls range ( <ptr> ctx <dot> <noptr> min <dot> <noptr> max )
<cls> <noptr> c x dt nr dmd gpio write ( <ptr> tn r dmd <dot> <noptr> id <dot> <noptr> value )
<cls> <noptr> eeprom show ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> v l stub g aud out ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> skb af initialize ctrls ( <ptr> state )
<cls> <noptr> c xir init ( <ptr> dev )
<cls> <noptr> at b m get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> v pfe get c cdc image format ( <ptr> v pfe <dot> <ptr> f )
<cls> <noptr> sh vous top streaming ( <ptr> v q )
<cls> <ptr> max from ctrl hdl ( <ptr> h )
<cls> <noptr> snd c x pcm ioctl ( <ptr> sub stream <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> dvb init ( )
<cls> <noptr> b disp buf prepare ( <ptr> vb )
<cls> <noptr> sms dvb read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> ov regr m w ( <ptr> client <dot> <noptr> reg <dot> <noptr> set <dot> <noptr> mask )
<cls> <noptr> c pia usb transfer cmd ( <ptr> cam <dot> <ptr> registers <dot> <noptr> request <dot> <noptr> start <dot> <noptr> count <dot> <noptr> direction )
<cls> <noptr> dib write word attr ( <ptr> state <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> attribute )
<cls> <noptr> loop init ( )
<cls> <noptr> mt kir irq ( <noptr> irq no <dot> <ptr> devid )
<cls> <noptr> cobalt g pixel aspect ( <ptr> file <dot> <ptr> f h <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> fe set params ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> h fi session end done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> ov write array ( <ptr> sd <dot> <ptr> vals )
<cls> <noptr> mtm suspend ( <ptr> mtm )
<cls> <noptr> d v bring buffer init ( <ptr> r buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> v l fw node bus type tom bus ( <noptr> type )
<cls> <noptr> vsp video start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> hack r fg frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> hack r f kill urb s ( <ptr> dev )
<cls> <noptr> cio video link validate ( <ptr> link )
<cls> <ptr> to max i radio ( <ptr> v l dev )
<cls> <noptr> adv g mbus config ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> tw x enable channel ( <ptr> dev <dot> <noptr> channel )
<cls> <noptr> v few m line based ( <ptr> v fe <dot> <noptr> wm <dot> <ptr> pix <dot> <noptr> plane <dot> <noptr> enable )
<cls> <noptr> get next buf ( <ptr> dma q <dot> <dptr> buf )
<cls> <noptr> ska aic driver init ( )
<cls> <noptr> stk set std ( <ptr> dev )
<cls> <noptr> flex cop null filter ctrl ( <ptr> fc <dot> <noptr> onoff )
<cls> <noptr> adv x parsed t ( <ptr> state )
<cls> <noptr> ov start stream ( <ptr> ov )
<cls> <noptr> vsp sub dev set pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt <dot> <ptr> codes <dot> <noptr> n codes <dot> <noptr> min width <dot> <noptr> min height <dot> <noptr> max width <dot> <noptr> max height )
<cls> <noptr> c x repeater mode ( <ptr> state <dot> <noptr> mode <dot> <noptr> start )
<cls> <noptr> media device register ( <ptr> m dev <dot> <ptr> owner )
<cls> <noptr> m i pid probe ( <ptr> client )
<cls> <noptr> sa at da callback ( <ptr> dev <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> exy nos jpeg get stream size ( <ptr> base )
<cls> <noptr> solo dma vin region ( <ptr> solo dev <dot> <noptr> off <dot> <noptr> val <dot> <noptr> reg size )
<cls> <noptr> em xx get key pinn acle usb grey ( <ptr> ic dev <dot> <ptr> protocol <dot> <ptr> scan code )
<cls> <ptr> ves attach ( <ptr> config <dot> <ptr> ic <dot> <noptr> pwm )
<cls> <noptr> dvb dmx dev set buffer size ( <ptr> dmx dev filter <dot> <noptr> size )
<cls> <noptr> c cdc configure ( )
<cls> <noptr> go start encoder ( <ptr> go )
<cls> <noptr> uvc fixup video ctrl ( <ptr> stream <dot> <ptr> ctrl )
<cls> <noptr> hor usa get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> ato h x ( <ptr> dst <dot> <ptr> src )
<cls> <noptr> hi test pattern ( <ptr> hi <dot> <noptr> pattern )
<cls> <noptr> rtl xx u identify state ( <ptr> d <dot> <dptr> name )
<cls> <noptr> uvc ctrl set ( <ptr> handle <dot> <ptr> x ctrl )
<cls> <ptr> check pads tab ilize ( )
<cls> <noptr> saa buffer next ( <ptr> dev <dot> <ptr> q )
<cls> <noptr> uvc scan chain entity ( <ptr> chain <dot> <ptr> entity )
<cls> <noptr> v dec vp init ( <ptr> ctx )
<cls> <noptr> z r xx suspend ( <ptr> int f <dot> <noptr> message )
<cls> <ptr> isp video remote sub dev ( <ptr> video <dot> <ptr> pad )
<cls> <noptr> v pfe handle interlaced irq ( <ptr> v pfe <dot> <noptr> field )
<cls> <noptr> mcs set params ( <ptr> fe )
<cls> <noptr> e gister ( <ptr> fe <dot> <ptr> reg num <dot> <ptr> reg val <dot> <ptr> count )
<cls> <noptr> v total ( <ptr> t )
<cls> <noptr> net up uni dvb pci driver init ( )
<cls> <noptr> tm urb received ( <ptr> urb )
<cls> <noptr> ov configure ( <ptr> sd )
<cls> <noptr> v l printf req b and ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> rt set params ( <ptr> fe )
<cls> <noptr> uda probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mtk mdp m m query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> via cam vbs top streaming ( <ptr> v q )
<cls> <noptr> rcs i enter standby ( <ptr> priv )
<cls> <noptr> m xls f get stream config at scm h ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <noptr> flex cop set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> fri io tuner attach ( <ptr> adap )
<cls> <noptr> r vin read ( <ptr> vin <dot> <noptr> offset )
<cls> <noptr> t dax a set params ( <ptr> fe )
<cls> <ptr> z d demo d get ic adapter ( <ptr> pdev )
<cls> <noptr> em xx read reg req ( <ptr> dev <dot> <noptr> req <dot> <noptr> reg )
<cls> <noptr> j pu irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> v l f wht decode ( <ptr> state <dot> <ptr> pin <dot> <ptr> pout )
<cls> <noptr> mtk jpegs fmt m plane ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> ctrl isdirty hue ( <ptr> cptr )
<cls> <noptr> affe read status ( <ptr> fe <dot> <ptr> stat )
<cls> <noptr> kinect write ( <ptr> udev <dot> <ptr> data <dot> <noptr> w length )
<cls> <noptr> stk x ppid filter ( <ptr> adapter <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> m m ols restore controls ( <ptr> info )
<cls> <noptr> tvp read std ( <ptr> sd )
<cls> <noptr> exy nos jpeg operating ( <ptr> regs )
<cls> <noptr> ext ( <ptr> av )
<cls> <noptr> sub dev do ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> snd c x pcm ( <ptr> chip <dot> <noptr> device <dot> <ptr> name )
<cls> <noptr> it x driver init ( )
<cls> <noptr> nxt setup ( <ptr> fe )
<cls> <noptr> vim c sen enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <ptr> to tuner ( <ptr> sd )
<cls> <noptr> stv ter init ( <ptr> fe )
<cls> <noptr> m lv mask set ( <ptr> client <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> media entity enum init ( <ptr> ent enum <dot> <noptr> idx max )
<cls> <noptr> fps ( <ptr> t )
<cls> <noptr> vid ioc g fmt slice dvb i out ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> sec oce c adap log addr ( <ptr> adap <dot> <noptr> logical addr )
<cls> <noptr> gsc get buf s ( <ptr> ctx )
<cls> <noptr> c i int f polls lot status ( <ptr> ca <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> afa f set front end ( <ptr> fe )
<cls> <noptr> c x usb medi ons std ( <ptr> file <dot> <ptr> f h <dot> <noptr> norm )
<cls> <noptr> pvr encoder write words ( <ptr> h dw <dot> <noptr> offs <dot> <ptr> data <dot> <noptr> d len )
<cls> <noptr> iv tv wait scl ( <ptr> it v <dot> <noptr> val )
<cls> <noptr> vivid vid can loop ( <ptr> dev )
<cls> <noptr> c x msg mpeg output config ( <ptr> state <dot> <noptr> seq )
<cls> <noptr> adv e did rd ( <ptr> sd <dot> <noptr> len <dot> <ptr> buf )
<cls> <noptr> em xx gpio set ( <ptr> dev <dot> <ptr> gpio )
<cls> <noptr> cec queue event f h ( <ptr> f h <dot> <ptr> new ev <dot> <noptr> ts )
<cls> <noptr> as cote enter power save ( <ptr> priv )
<cls> <ptr> check disable usb speed check ( )
<cls> <noptr> flite hw mask dma buffer ( <ptr> dev <dot> <noptr> index )
<cls> <noptr> is px clk enable ( <ptr> hw )
<cls> <noptr> m cam dma sgd one ( <ptr> cam <dot> <noptr> frame )
<cls> <noptr> i sig input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> snd cobalt pcm pointer ( <ptr> sub stream )
<cls> <noptr> venc modify ( <ptr> sd <dot> <noptr> offset <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> m i pid configure from r x ( <ptr> bridge )
<cls> <noptr> venc initialize ( <ptr> sd )
<cls> <noptr> saa register extension ( <ptr> ext )
<cls> <noptr> black bird m box func ( <ptr> priv <dot> <noptr> command <dot> <noptr> in <dot> <noptr> out <dot> <noptr> data )
<cls> <noptr> v l m m buf done and job finish ( <ptr> m m dev <dot> <ptr> m mctx <dot> <noptr> state )
<cls> <noptr> sub dev notifier complete ( <ptr> notifier )
<cls> <noptr> tm open ( <ptr> file )
<cls> <noptr> handle ule extensions ( <ptr> p )
<cls> <noptr> sh vou set fmt vid out ( <ptr> vou dev <dot> <ptr> pix )
<cls> <noptr> c x firmware ondemand ( <ptr> fe )
<cls> <noptr> mpegts dto setup ( <ptr> state <dot> <noptr> o mode )
<cls> <noptr> c sippi enable ( <ptr> ctx )
<cls> <noptr> solo pm dma ( <ptr> solo dev <dot> <noptr> wr <dot> <ptr> sys addr <dot> <noptr> ext addr <dot> <noptr> size <dot> <noptr> repeat <dot> <noptr> ext size )
<cls> <ptr> check max vol ( )
<cls> <noptr> uvc ctrl del event ( <ptr> sev )
<cls> <noptr> preview get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> dib driver init ( )
<cls> <noptr> px a init dma channel ( <ptr> pc dev <dot> <ptr> buf <dot> <noptr> channel <dot> <ptr> sg <dot> <noptr> s glen )
<cls> <noptr> r vin m c validate format ( <ptr> vin <dot> <ptr> sd <dot> <ptr> pad )
<cls> <noptr> usb keen e probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> uvc resume ( <ptr> int f )
<cls> <noptr> stv cab snr read reg ( <ptr> fe <dot> <noptr> avg div )
<cls> <noptr> any see c i read attribute mem ( <ptr> c i <dot> <noptr> slot <dot> <noptr> addr )
<cls> <ptr> check dummy tuner ( )
<cls> <noptr> stv set frequency ( <ptr> fe <dot> <noptr> frequency )
<cls> <noptr> set work bit ( <ptr> ctx )
<cls> <noptr> cxx ctrl query fill ( <ptr> q ctrl <dot> <noptr> min <dot> <noptr> max <dot> <noptr> step <dot> <noptr> def )
<cls> <noptr> delta g fmt frame ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> b disp s selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> cam if hw disable capture ( <ptr> vp )
<cls> <noptr> v l read ( <ptr> filp <dot> <ptr> buf <dot> <noptr> sz <dot> <ptr> off )
<cls> <noptr> x box one attach ( <ptr> adap )
<cls> <noptr> uvc video ctrl size ( <ptr> stream )
<cls> <noptr> ctrl isdirty contrast ( <ptr> cptr )
<cls> <noptr> tvp x write reg ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> get default tuner type ( <ptr> h dw )
<cls> <noptr> rcs icalc mbps ( <ptr> priv <dot> <noptr> bpp )
<cls> <noptr> m xls f tuner get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> pvr dvb notify ( <ptr> adap )
<cls> <noptr> s fill buff ( <ptr> vc <dot> <ptr> buf <dot> <noptr> jpg size )
<cls> <noptr> av deb i write ( <ptr> av <dot> <noptr> config <dot> <noptr> addr <dot> <noptr> val <dot> <noptr> count )
<cls> <noptr> try layer config ( <ptr> sd <dot> <noptr> layer <dot> <ptr> l config )
<cls> <noptr> tw is motion triggered ( <ptr> frame )
<cls> <noptr> solo set motion threshold ( <ptr> solo dev <dot> <noptr> ch <dot> <noptr> val )
<cls> <noptr> dib risc mem read ( <ptr> state <dot> <noptr> cmd <dot> <ptr> b <dot> <noptr> len )
<cls> <noptr> lut set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> cmp read ( <ptr> fdt v <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> srp cic driver init ( )
<cls> <noptr> em xx usb suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> m m ols start monitor ( <ptr> info )
<cls> <ptr> bt tv get pci dev ( <noptr> card )
<cls> <noptr> v dec buf init ( <ptr> vb )
<cls> <noptr> air spy convert stream ( <ptr> s <dot> <ptr> dst <dot> <ptr> src <dot> <noptr> src len )
<cls> <noptr> r card rif stop streaming ( <ptr> v q )
<cls> <noptr> write ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <ptr> v l ioctl get lock ( <ptr> v dev <dot> <ptr> v f h <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <ptr> check h flip ( )
<cls> <noptr> set red balance ( <ptr> gsp ca dev )
<cls> <noptr> stk sensor in b ( <ptr> dev <dot> <noptr> reg <dot> <ptr> val )
<cls> <ptr> via cam next buffer ( <ptr> cam )
<cls> <noptr> v blank ing ( <ptr> t )
<cls> <noptr> c sid link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> r f init ( <ptr> tn r dmd )
<cls> <noptr> cc insert ( <ptr> cc <dot> <noptr> ch )
<cls> <noptr> set operation mode ( <ptr> state <dot> <noptr> o mode )
<cls> <noptr> c xxx audio i soc irq ( <ptr> urb )
<cls> <noptr> au set front end ( <ptr> fe )
<cls> <ptr> v dec try fmt common ( <ptr> inst <dot> <ptr> f )
<cls> <noptr> c x buf queue ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> spread un corrected blocks ( <ptr> fe <dot> <ptr> u blocks )
<cls> <ptr> pvr io read get stream ( <ptr> cp )
<cls> <noptr> bcm bert reset ( <ptr> st )
<cls> <noptr> v dec stop output ( <ptr> inst )
<cls> <noptr> ves xic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> ov x set frame interval ( <ptr> ov x <dot> <ptr> fi )
<cls> <noptr> td a init regs ( <ptr> fe )
<cls> <noptr> cio videos input ( <ptr> file <dot> <ptr> f h <dot> <noptr> input )
<cls> <noptr> m eye ioc still capt ( )
<cls> <noptr> adb g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> mtk jpeg enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> saa gpio setup ( <ptr> dev )
<cls> <noptr> vim c sca get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> c x start dma ( <ptr> dev <dot> <ptr> q <dot> <ptr> buf )
<cls> <noptr> ov enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> hex ium init module ( )
<cls> <noptr> c x mem set io ( <ptr> c x <dot> <ptr> addr <dot> <noptr> val <dot> <noptr> count )
<cls> <noptr> smi app create sub dev ( <ptr> sensor <dot> <ptr> ssd <dot> <ptr> name <dot> <noptr> numpad s )
<cls> <noptr> c x g audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> vin )
<cls> <noptr> icio ( <ptr> adapter <dot> <noptr> adr <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> cod are order enable ( <ptr> ctx )
<cls> <noptr> send ic cmd ( <ptr> pt <dot> <noptr> addr )
<cls> <noptr> c sit x enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> mantis stream control ( <ptr> mantis <dot> <noptr> stream ctl )
<cls> <noptr> avc tuner dsd dvb c ( <ptr> fdt v <dot> <ptr> p )
<cls> <noptr> get disp fb ( <ptr> inst <dot> <dptr> out fb )
<cls> <noptr> exy nos jpeg enc stream bound ( <ptr> regs <dot> <noptr> size )
<cls> <noptr> c x risc decode ( <noptr> risc )
<cls> <noptr> six radio enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> ads duo tuner init ( <ptr> fe )
<cls> <noptr> x c send ic data ( <ptr> priv <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> m bas get inter leaving ( <ptr> state <dot> <noptr> layer )
<cls> <noptr> t dax power mode ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> pt increment table count ( <ptr> pt )
<cls> <noptr> dib set diversity in ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> saa write init tab ( <ptr> sd <dot> <ptr> regs )
<cls> <noptr> sp mfc handle seq done ( <ptr> ctx <dot> <noptr> reason <dot> <noptr> err )
<cls> <noptr> g d set rop ( <ptr> d <dot> <noptr> r )
<cls> <noptr> queue hw job ( <ptr> fdp <dot> <ptr> job )
<cls> <noptr> tuner lookup ( <ptr> adap <dot> <dptr> radio <dot> <dptr> tv )
<cls> <noptr> saa get firmware status ( <ptr> dev )
<cls> <ptr> check video std ( )
<cls> <noptr> v pfe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> stv snd ctrl ( <ptr> gsp ca dev <dot> <noptr> set <dot> <noptr> req <dot> <noptr> val <dot> <noptr> size )
<cls> <noptr> isp parse of endpoints ( <ptr> isp )
<cls> <noptr> adv x afe set video standard ( <ptr> state <dot> <noptr> sdp std )
<cls> <noptr> dump frame ( <ptr> ctx <dot> <ptr> frame )
<cls> <noptr> fdt v dvb init ( <ptr> fe )
<cls> <noptr> command set compression params ( <ptr> gsp ca dev )
<cls> <noptr> px p start ( <ptr> ctx <dot> <ptr> inv b <dot> <ptr> out vb )
<cls> <noptr> sd pre reset ( <ptr> int f )
<cls> <noptr> rv inv l register ( <ptr> vin )
<cls> <noptr> dib p set diversity in ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> r vin disable interrupts ( <ptr> vin )
<cls> <noptr> vi u default settings ( <ptr> vr )
<cls> <noptr> c x clear bridge error ( <ptr> dev )
<cls> <noptr> r vin m c try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> dr x d read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> c i of bpt rearrange ( <ptr> cio <dot> <ptr> q )
<cls> <noptr> vp if buffer prepare ( <ptr> vb )
<cls> <noptr> affe sleep ( <ptr> fe )
<cls> <noptr> v v set exposure ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> mn driver init ( )
<cls> <noptr> fim ch w clear irq ( <ptr> dev )
<cls> <noptr> via cam ctl rc buf s ( <ptr> cam )
<cls> <noptr> mtm dump registers ( <ptr> sd )
<cls> <noptr> hdp vr device init ( <ptr> dev )
<cls> <ptr> af get dvb front end ( <ptr> client )
<cls> <noptr> dvb net stop ( <ptr> dev )
<cls> <noptr> c x usb medi on v query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> ccp get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> csi irq ctx set ( <ptr> isp <dot> <ptr> csi <dot> <noptr> enable )
<cls> <noptr> r vin notify ( <ptr> sd <dot> <noptr> notification <dot> <ptr> arg )
<cls> <noptr> d m xts feed start filtering ( <ptr> ts feed )
<cls> <noptr> has ln b h ( <ptr> ic <dot> <noptr> adr )
<cls> <noptr> msp standard std ( <noptr> std )
<cls> <noptr> ov identify module ( <ptr> ov )
<cls> <noptr> fc sleep ( <ptr> dev )
<cls> <noptr> yuan mp cmt req fw ( <ptr> stream <dot> <dptr> fw )
<cls> <noptr> sort and eliminate ( <ptr> values <dot> <ptr> count )
<cls> <noptr> c i int fwrite attribute mem ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> dib get status ( <ptr> fe )
<cls> <noptr> c xxx tuner callback ( <ptr> ptr <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> v dec open ( <ptr> file )
<cls> <noptr> usb vision write reg irq ( <ptr> usb vision <dot> <noptr> address <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> uvc init video i soc ( <ptr> stream <dot> <ptr> ep <dot> <noptr> gfp flags )
<cls> <noptr> my dvb dmx dev ts card init ( <ptr> dmx dev <dot> <ptr> dvb demux <dot> <ptr> hw front end <dot> <ptr> mem front end <dot> <ptr> dvb adapter )
<cls> <noptr> stk camera disable ( <ptr> gsp ca dev )
<cls> <noptr> vid ioc query buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> buf )
<cls> <ptr> v l ctrls find req obj ( <ptr> hdl <dot> <ptr> req <dot> <noptr> set )
<cls> <noptr> olor ( <ptr> av <dot> <noptr> color <dot> <noptr> r <dot> <noptr> g <dot> <noptr> b <dot> <noptr> blend )
<cls> <noptr> dvb front end get frequency limits ( <ptr> fe <dot> <ptr> freq min <dot> <ptr> freq max <dot> <ptr> tolerance )
<cls> <noptr> init r cmap tivo ( )
<cls> <noptr> regs open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> dvb front end ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <ptr> media request get by fd ( <ptr> m dev <dot> <noptr> request fd )
<cls> <noptr> saa dvb stop streaming ( <ptr> port )
<cls> <noptr> tua bw ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> snd c x volume info ( <ptr> k control <dot> <ptr> info )
<cls> <noptr> ov probe ( <ptr> sd )
<cls> <noptr> his top streaming ( <ptr> hi )
<cls> <noptr> tua get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> c x decode vb i line ( <ptr> sd <dot> <ptr> vb i )
<cls> <noptr> r vin capture start ( <ptr> vin )
<cls> <noptr> td a read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <ptr> check debug latency ( )
<cls> <noptr> vid ioc stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> exy nos jpeg set stream size ( <ptr> base <dot> <noptr> x value <dot> <noptr> y value )
<cls> <noptr> iv tv wait q ( <ptr> wait q )
<cls> <ptr> check audio std ( )
<cls> <noptr> sht un eric func ( <ptr> adapter )
<cls> <noptr> vp uip i handler ( <ptr> v pu )
<cls> <noptr> nxt read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> iv tvf b set col reg ( <noptr> regno <dot> <noptr> red <dot> <noptr> green <dot> <noptr> blue <dot> <noptr> transp <dot> <ptr> info )
<cls> <noptr> m m ols probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> mn x cmn power off ( <ptr> chip )
<cls> <noptr> pcm set freq ( <ptr> dev <dot> <noptr> freq )
<cls> <noptr> imx set digital gain ( <ptr> priv <dot> <noptr> d gain )
<cls> <noptr> max load from rom ( <ptr> ctx )
<cls> <noptr> init dr x k ( <ptr> state )
<cls> <noptr> f m rds parse swap bytes ( <ptr> f m dev <dot> <ptr> rds format )
<cls> <noptr> omap v out vb queue ( <ptr> vb )
<cls> <noptr> sds ctrl ( <ptr> ctrl )
<cls> <noptr> stax vip init one ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> dvb dummy fe read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> e did write block ( <ptr> sd <dot> <noptr> total len <dot> <ptr> val )
<cls> <noptr> cxa v audio set path ( <ptr> c x )
<cls> <noptr> solo enc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> iv tv get sda ( <ptr> it v )
<cls> <ptr> finds of ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> vid ioc enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> saa encoder acquire port ( <ptr> port )
<cls> <noptr> ctrl get crop h ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> ctrl std avail get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> tc function ality ( <ptr> adap )
<cls> <noptr> stk ic register ( <ptr> dev )
<cls> <noptr> flush request modules ( <ptr> dev )
<cls> <noptr> via cam set flip ( <ptr> cam )
<cls> <noptr> dvb ca en poll cam gone ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> spc is lot ts enable ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> c iobuffer done ( <ptr> cio <dot> <noptr> dma chan )
<cls> <noptr> m cam ctl r powerup ( <ptr> cam )
<cls> <noptr> init r cmap rc mce ( )
<cls> <noptr> so log jpeg q p ( <ptr> solo dev <dot> <noptr> ch )
<cls> <noptr> b disp runtime suspend ( <ptr> dev )
<cls> <noptr> vivid isin use ( <ptr> v dev )
<cls> <ptr> check virtual channel ( )
<cls> <noptr> bounds check ( <ptr> dev <dot> <noptr> val <dot> <noptr> min <dot> <noptr> max <dot> <ptr> str )
<cls> <noptr> cam if hw set last irq ( <ptr> vp <dot> <noptr> enable )
<cls> <noptr> isc g parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> vp ifg output ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> clock divider to resolution ( <noptr> divider )
<cls> <noptr> vi codec open ( <ptr> file )
<cls> <noptr> m xic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> show contrast ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> dt enum fmt vid cap ( <ptr> filp <dot> <ptr> p <dot> <ptr> f )
<cls> <noptr> c cdc enable ( <ptr> c cdc <dot> <noptr> enable )
<cls> <noptr> a zci write attribute mem ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> iv tv irq enc start cap ( <ptr> it v )
<cls> <noptr> rc setup r x device ( <ptr> dev )
<cls> <noptr> store imon clock ( <ptr> d <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> is igraph notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> ts reg map lock ( <ptr> dev )
<cls> <noptr> mtp pll disable ( <ptr> mtp )
<cls> <noptr> ctrl cxx get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> n gene stop ( <ptr> dev )
<cls> <noptr> stv set d vbs roll off ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> ovs etag c mode ( <ptr> ov <dot> <noptr> enable )
<cls> <noptr> vpx probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> h vah get stuff ing bytes ( <ptr> task )
<cls> <noptr> sms dvb init ( <ptr> fe )
<cls> <noptr> vpx driver init ( )
<cls> <noptr> bt tv g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> msp xx g thread ( <ptr> data )
<cls> <noptr> vivid videos tuner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> flite hw set out order ( <ptr> dev <dot> <ptr> f )
<cls> <noptr> em xx urb data copy ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> fdp try fmt output ( <ptr> ctx <dot> <dptr> fmt info <dot> <ptr> pix )
<cls> <noptr> video ( <ptr> gsp ca dev )
<cls> <noptr> mtk mdp v pus end msg ( <ptr> msg <dot> <noptr> len <dot> <ptr> v pu <dot> <noptr> id )
<cls> <noptr> av register ( <ptr> av )
<cls> <noptr> dib set is dbt common channel ( <ptr> state <dot> <noptr> seq <dot> <noptr> auto searching )
<cls> <noptr> iv tvs fmt slice dvb i out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> rt set mux ( <ptr> priv <dot> <noptr> freq )
<cls> <noptr> k world d vbs set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> c x register driver ( <ptr> drv )
<cls> <noptr> coda try decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> dc )
<cls> <noptr> gem tek s frequency ( <ptr> isa <dot> <noptr> freq )
<cls> <noptr> em x xic recv bytes ( <ptr> dev <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> c i int f init ( <ptr> budget av )
<cls> <noptr> c x shutdown ( <ptr> dev )
<cls> <noptr> r ving selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> v pbe displays selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> sel )
<cls> <noptr> f wht ( <ptr> block <dot> <ptr> output block <dot> <noptr> stride <dot> <noptr> input step <dot> <noptr> intra )
<cls> <noptr> ic read bytes ( <ptr> state <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> dib write attr ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> attribute )
<cls> <noptr> aud vb start feed ( <ptr> feed )
<cls> <noptr> cec p int x states ( <ptr> pin <dot> <noptr> ts )
<cls> <noptr> z r x xvid ioc query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> try fmt vid cap ( <ptr> gsp ca dev <dot> <ptr> fmt )
<cls> <noptr> isset fd config orientation val ( <ptr> is <dot> <noptr> val )
<cls> <noptr> vb i read timeout ( <ptr> t )
<cls> <noptr> ov x set exposure ( <ptr> ov x <dot> <noptr> exp )
<cls> <noptr> pvr encoder cmd ( <ptr> ctxt <dot> <noptr> cmd <dot> <noptr> arg cnt send <dot> <noptr> arg cnt recv <dot> <ptr> arg p )
<cls> <noptr> c xdr set front end c ( <ptr> fe )
<cls> <noptr> x c get frequency ( <ptr> fe <dot> <ptr> freq )
<cls> <noptr> omap isp stat busy ( <ptr> stat )
<cls> <noptr> mce usb dev driver init ( )
<cls> <noptr> gsp ca input connect ( <ptr> dev )
<cls> <noptr> j pu stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> ccd cls c validate config ( <ptr> c cdc <dot> <ptr> lsc cfg )
<cls> <noptr> adv x link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> c i int f slot ts enable ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> video buf queue dma contig init ( <ptr> q <dot> <ptr> ops <dot> <ptr> dev <dot> <ptr> irq lock <dot> <noptr> type <dot> <noptr> field <dot> <noptr> m size <dot> <ptr> priv <dot> <ptr> ext lock )
<cls> <noptr> scratch get extra ( <ptr> usb vision <dot> <ptr> data <dot> <ptr> ptr <dot> <noptr> len )
<cls> <noptr> any see c i write cam control ( <ptr> c i <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> dib pin its dram ( <ptr> state )
<cls> <noptr> af set front end ( <ptr> fe )
<cls> <noptr> saa x log status ( <ptr> sd )
<cls> <noptr> fill board specific data ( <ptr> dev )
<cls> <noptr> send event ( <ptr> f h <dot> <ptr> ctrl <dot> <noptr> changes )
<cls> <noptr> via cam serial isenabled ( )
<cls> <noptr> saa buffer count ( <noptr> size <dot> <noptr> count )
<cls> <noptr> c xxx do ics can ( <ptr> dev <dot> <noptr> ic port )
<cls> <noptr> vpx status ( <ptr> sd <dot> <ptr> p status <dot> <ptr> p std )
<cls> <noptr> csi phy isr ( <noptr> irq <dot> <ptr> dev )
<cls> <noptr> me son a oce cga driver init ( )
<cls> <noptr> stv check timing lock ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> vps m px g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> opera read mac address ( <ptr> d <dot> <noptr> mac )
<cls> <noptr> v pbe display open ( <ptr> file )
<cls> <noptr> mtk jpeg queue src chg event ( <ptr> ctx )
<cls> <noptr> skb a fic driver init ( )
<cls> <noptr> c x process idx data ( <ptr> s <dot> <ptr> mdl <dot> <ptr> idx )
<cls> <noptr> scm set af soft landing ( <ptr> state )
<cls> <noptr> six x send dis eq c msg ( <ptr> fe <dot> <ptr> m )
<cls> <noptr> isset isp meter ing ( <ptr> is <dot> <noptr> id <dot> <noptr> val )
<cls> <noptr> f m irq af jump set pi mask ( <ptr> f m dev )
<cls> <noptr> m xl x sf demo d get tps guard fft mode ( <ptr> state <dot> <ptr> fft mode )
<cls> <noptr> sa adl wait clr ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> mtk md pvp uip i handler ( <ptr> data <dot> <noptr> len <dot> <ptr> priv )
<cls> <noptr> os d set top margin ( <ptr> sd <dot> <noptr> val )
<cls> <noptr> tcs ctrl audio sampling rate ( <ptr> sd )
<cls> <noptr> mt write ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> c xvid io cs std ( <ptr> file <dot> <ptr> priv <dot> <noptr> tv norms )
<cls> <noptr> vp ifs fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> mtv read ( <ptr> c <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> v pfe read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> afe read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> pkt sys coverage config ( <ptr> pkt <dot> <noptr> mode )
<cls> <noptr> tc work ic poll ( <ptr> work )
<cls> <noptr> c sit x start ( <ptr> c sit x )
<cls> <noptr> ovs auto gain ( <ptr> sd <dot> <noptr> value )
<cls> <noptr> m xls f get stream config m h ( <ptr> fe <dot> <ptr> ts type <dot> <ptr> stream )
<cls> <ptr> tvp get p data ( <ptr> client )
<cls> <noptr> vid ioc venc g fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ype ( <ptr> gsp ca dev )
<cls> <ptr> check switch s video input ( )
<cls> <noptr> v lg ext ctrls common ( <ptr> hdl <dot> <ptr> cs <dot> <ptr> v dev )
<cls> <noptr> fdp set ipc d li ( <ptr> ctx )
<cls> <noptr> vid ioc venc q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> ska open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> smi app register sub dev ( <ptr> sensor <dot> <ptr> ssd <dot> <ptr> sink ssd <dot> <noptr> source pad <dot> <noptr> sink pad <dot> <noptr> link flags )
<cls> <noptr> rtl pid filter ctrl ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> m x mt tuner attach ( <ptr> adap )
<cls> <noptr> f m irqhandler ds start ( <ptr> f m dev )
<cls> <noptr> bts stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> max get bit val ( <noptr> val <dot> <noptr> msb <dot> <noptr> lsb )
<cls> <noptr> c cdc link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <ptr> check enc mpg buf s ( )
<cls> <noptr> tc update controls ( <ptr> sd )
<cls> <noptr> isc try fmt ( <ptr> isc <dot> <ptr> f <dot> <ptr> code )
<cls> <noptr> pvr enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fd )
<cls> <noptr> dump frames status ( <ptr> ctx )
<cls> <noptr> hack r f query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> control tx irq watermark ( <ptr> c <dot> <noptr> level )
<cls> <noptr> v l mmdevice run work ( <ptr> work )
<cls> <noptr> v pu dec end ( <ptr> v pu )
<cls> <noptr> vp if init ( )
<cls> <noptr> coda enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> td a set video std ( <ptr> fe )
<cls> <noptr> f m r x reset station info ( <ptr> f m dev )
<cls> <noptr> sist at work ( <ptr> work )
<cls> <noptr> v lg slice dvb icap ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> ske cg x open ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> vic am set camera power ( <ptr> gsp ca dev <dot> <noptr> state )
<cls> <noptr> vivid vid outs f buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> v l m m req buf s ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> req buf s )
<cls> <noptr> mrs ic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> parse audio stream data ( <ptr> go <dot> <ptr> buf <dot> <noptr> length )
<cls> <noptr> adv csc coeff ( <ptr> sd <dot> <noptr> a <dot> <noptr> a <dot> <noptr> a <dot> <noptr> a <dot> <noptr> b <dot> <noptr> b <dot> <noptr> b <dot> <noptr> b <dot> <noptr> c <dot> <noptr> c <dot> <noptr> c <dot> <noptr> c )
<cls> <noptr> calculate h x o and hy o ( <ptr> v v <dot> <ptr> h psh scale <dot> <ptr> hps ctrl )
<cls> <noptr> vim c cap g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> td a get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> tw disable input ( <ptr> input )
<cls> <noptr> f m v l vid ioc g audio ( <ptr> file <dot> <ptr> priv <dot> <ptr> audio )
<cls> <noptr> str c probe ( <ptr> pdev )
<cls> <noptr> calc interval ( <noptr> fps <dot> <noptr> n <dot> <noptr> d )
<cls> <noptr> dvb usb data complete ( <ptr> stream <dot> <ptr> buffer <dot> <noptr> length )
<cls> <noptr> c x init size ( <ptr> gsp ca dev )
<cls> <noptr> fill buf caps ( <ptr> q <dot> <ptr> caps )
<cls> <noptr> spc sis pm resume ( <ptr> dev <dot> <noptr> runtime )
<cls> <noptr> td adi seq c send burst ( <ptr> fe <dot> <noptr> burst )
<cls> <ptr> rc dev node ( <ptr> dev <dot> <ptr> mode )
<cls> <noptr> de interlace issue dma ( <ptr> ctx <dot> <noptr> op <dot> <noptr> do callback )
<cls> <noptr> cal runtime get ( <ptr> dev )
<cls> <noptr> budget init ( )
<cls> <noptr> sa aic addr to unitid ( <ptr> bus <dot> <noptr> addr )
<cls> <noptr> mtp set output control ( <ptr> mtp <dot> <noptr> clear <dot> <noptr> set )
<cls> <noptr> f m irq af jump set freq ( <ptr> f m dev )
<cls> <ptr> check buffer size ( )
<cls> <noptr> as usb stop stream ( <ptr> dev )
<cls> <noptr> l gs gl get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> smi app ic driver init ( )
<cls> <noptr> vb thread start ( <ptr> q <dot> <noptr> fnc <dot> <ptr> priv <dot> <ptr> thread name )
<cls> <noptr> isp video capture stop streaming ( <ptr> q )
<cls> <noptr> ov set mode ( <ptr> sensor )
<cls> <noptr> usb urb init ( <ptr> stream <dot> <ptr> props )
<cls> <noptr> vivid radio r xs ctrl ( <ptr> ctrl )
<cls> <noptr> media entity setup link ( <ptr> link <dot> <noptr> flags )
<cls> <noptr> set rds len ( <ptr> f m dev <dot> <noptr> type <dot> <noptr> len )
<cls> <noptr> scm o if enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> v l ctrl modify range ( <ptr> ctrl <dot> <noptr> min <dot> <noptr> max <dot> <noptr> step <dot> <noptr> def )
<cls> <noptr> get next vb i buf ( <ptr> dma q <dot> <dptr> buf )
<cls> <noptr> c x irr x v l dev notify ( <ptr> sd <dot> <noptr> events )
<cls> <noptr> net up unid v bci write attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> vid ioc enum output ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> out )
<cls> <ptr> check radio nr ( )
<cls> <noptr> parse codecs mask ( <ptr> codecs <dot> <ptr> domain <dot> <ptr> data )
<cls> <noptr> mtm set frame interval ( <ptr> sub dev <dot> <ptr> fi )
<cls> <noptr> f m irq timeout stage ( <ptr> f m dev <dot> <noptr> stage )
<cls> <noptr> c sect pfe start feed ( <ptr> dvb dmx feed )
<cls> <noptr> tcg register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> nv tcr read ( <ptr> nv t <dot> <noptr> reg )
<cls> <noptr> imx get frame length ( <ptr> priv <dot> <ptr> val )
<cls> <noptr> mtk jpeg dec set compid ( <ptr> base <dot> <noptr> idy <dot> <noptr> idu <dot> <noptr> id v )
<cls> <noptr> a uled ctrl ( <ptr> state <dot> <noptr> led )
<cls> <noptr> check all bounds ( <ptr> dev <dot> <ptr> limits <dot> <ptr> op limits <dot> <ptr> pll <dot> <ptr> opp ll )
<cls> <noptr> x c get noise level ( <ptr> priv <dot> <ptr> noise )
<cls> <noptr> solo snd pcm init ( <ptr> solo dev )
<cls> <noptr> it d sleep ( <ptr> fe )
<cls> <ptr> sh get tun eric adapter ( <ptr> fe )
<cls> <noptr> alc ( <ptr> fe )
<cls> <noptr> m cam check dma buffers ( <ptr> cam )
<cls> <noptr> vim c init ( )
<cls> <noptr> au start analog streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> ir j vc decode init ( )
<cls> <noptr> td a init tuner ( <ptr> fe )
<cls> <noptr> td a setup reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> inversion )
<cls> <noptr> sp mfc watchdog ( <ptr> t )
<cls> <noptr> tw x reset channels ( <ptr> dev <dot> <noptr> ch mask )
<cls> <noptr> noon set params ( <ptr> sd )
<cls> <noptr> g scm m query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <ptr> tor jn ( <ptr> client )
<cls> <noptr> usb am radio resume ( <ptr> int f )
<cls> <noptr> dvb dummy fe init ( <ptr> fe )
<cls> <noptr> skb af hw set alg ( <ptr> state <dot> <noptr> alg <dot> <noptr> enable )
<cls> <noptr> c x der sleeps to actives ( <ptr> priv <dot> <noptr> system <dot> <noptr> symbol rate )
<cls> <noptr> r vin find pad ( <ptr> sd <dot> <noptr> direction )
<cls> <noptr> budget patch dis eq c send burst ( <ptr> fe <dot> <noptr> mini cmd )
<cls> <noptr> s mrt set ( <ptr> state <dot> <noptr> rate )
<cls> <ptr> l gdt x attach ( <ptr> config <dot> <noptr> demo d address <dot> <ptr> ic )
<cls> <noptr> rtl bulk read ( <ptr> client <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> val count )
<cls> <noptr> sub devs radio ( <ptr> sd )
<cls> <noptr> c x driver init ( )
<cls> <noptr> affe set front end ( <ptr> fe )
<cls> <noptr> six stop ( <ptr> radio )
<cls> <noptr> m i pid configure data lane ( <ptr> bridge <dot> <noptr> nb <dot> <noptr> are lanes swap <dot> <ptr> polar ities )
<cls> <noptr> set us coefficients ( <ptr> ctx )
<cls> <noptr> ov init ( <ptr> sd )
<cls> <noptr> irr cmm decode init ( )
<cls> <noptr> c x usb aux buf make space ( <ptr> dvb dev <dot> <ptr> aux buf <dot> <noptr> how much )
<cls> <noptr> is manual mode ( <ptr> c )
<cls> <noptr> ir raw disable protocols ( <ptr> dev <dot> <noptr> protocols )
<cls> <noptr> azi c xfer ( <ptr> adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> cobalt g d v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> seth pre scale ( <ptr> sd <dot> <noptr> task <dot> <noptr> pre scale )
<cls> <noptr> ska a init ( <ptr> sd )
<cls> <noptr> r jne num mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> ska set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> t front end attach ( <ptr> adap )
<cls> <noptr> is if set buf type ( <noptr> buf type )
<cls> <noptr> f get byte ( <ptr> dev )
<cls> <noptr> net upc i interrupt ( <ptr> n dev )
<cls> <noptr> r vin parallel notify unbind ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <noptr> snd solo hw params ( <ptr> ss <dot> <ptr> hw params )
<cls> <noptr> v l ctrl add event ( <ptr> sev <dot> <noptr> elems )
<cls> <noptr> bt tv crop calc limits ( <ptr> c )
<cls> <noptr> stk buffer done ( <ptr> dev )
<cls> <noptr> put v levent ( <ptr> p <dot> <ptr> p )
<cls> <noptr> ctrl isdirty audio mode ( <ptr> cptr )
<cls> <noptr> mtm setup rect ctx ( <ptr> mtm <dot> <ptr> ctx <dot> <ptr> rect <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> six radio init vtable ( <ptr> radio <dot> <noptr> func )
<cls> <noptr> saas input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> stb get devid ( <ptr> state )
<cls> <noptr> sp jpeg stop streaming ( <ptr> q )
<cls> <noptr> pt init buffer ( <ptr> pt <dot> <ptr> buf <dot> <ptr> pfn p )
<cls> <noptr> cams sof parse endpoint node ( <ptr> dev <dot> <ptr> node <dot> <ptr> csd )
<cls> <noptr> z l read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> adv s routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> stv set min symbol rate ( <ptr> int p <dot> <noptr> m clk <dot> <noptr> s rate <dot> <noptr> demo d )
<cls> <noptr> fcs ctrl ( <ptr> ctrl )
<cls> <noptr> ska probe ( <ptr> client )
<cls> <noptr> gl ctrl msg ( <ptr> d <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> br x try format ( <ptr> br x <dot> <ptr> config <dot> <noptr> pad <dot> <ptr> fmt )
<cls> <noptr> c xstream load fw queue ( <ptr> s )
<cls> <noptr> r ving e did ( <ptr> file <dot> <ptr> f h <dot> <ptr> e did )
<cls> <noptr> b tt vtd a set norm ( <ptr> b tv <dot> <noptr> gpio bits )
<cls> <noptr> goto high power ( <ptr> gsp ca dev )
<cls> <noptr> get dvb t lock status ( <ptr> state <dot> <ptr> p lock status )
<cls> <noptr> ov load regs ( <ptr> sensor <dot> <ptr> mode )
<cls> <noptr> dvb sky get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <noptr> c x gpio setup ( <ptr> dev )
<cls> <ptr> d ibm attach ( <ptr> ic adap <dot> <noptr> ic addr <dot> <ptr> cfg )
<cls> <noptr> c cdc try format ( <ptr> c cdc <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <noptr> cobalt stream struct init ( <ptr> cobalt )
<cls> <noptr> c x stop capture ( <ptr> id <dot> <noptr> g open d )
<cls> <noptr> isc set histogram ( <ptr> isc <dot> <noptr> enable )
<cls> <noptr> vid ioc try fmt overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> os denable layer ( <ptr> sd <dot> <noptr> layer <dot> <noptr> other win )
<cls> <noptr> tc set csi color space ( <ptr> sd )
<cls> <noptr> ska enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> gpio reset seq ( <ptr> c x <dot> <noptr> active lo <dot> <noptr> active hi <dot> <noptr> assert msecs <dot> <noptr> recovery msecs )
<cls> <noptr> adv xx read check ( <ptr> state <dot> <noptr> client page <dot> <noptr> reg )
<cls> <noptr> em press signal update ( <ptr> work )
<cls> <noptr> pulse send ( <ptr> ser io <dot> <ptr> command <dot> <noptr> cmd len )
<cls> <noptr> stb check data ( <ptr> state )
<cls> <noptr> c x enum input ( <ptr> core <dot> <ptr> i )
<cls> <noptr> vid ioc overlay ( <ptr> file <dot> <ptr> f h <dot> <noptr> on )
<cls> <noptr> m tt probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> max i radio probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> igor plug usb driver init ( )
<cls> <noptr> c x dt nr dmd dvb t mon snr ( <ptr> tn r dmd <dot> <ptr> snr )
<cls> <noptr> omap isp ccp register entities ( <ptr> ccp <dot> <ptr> v dev )
<cls> <noptr> init r cmap nec ter rate cci ner gy xs ( )
<cls> <noptr> buf size v l ext controls ( <ptr> p <dot> <ptr> size )
<cls> <noptr> usb ma radio suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> em x xir suspend ( <ptr> dev )
<cls> <noptr> csi phy stream off ( <ptr> csi phy )
<cls> <noptr> sms to bw ( <noptr> value )
<cls> <noptr> b disp debug fs create ( <ptr> b disp )
<cls> <noptr> flex cop dvb start feed ( <ptr> dvb dmx feed )
<cls> <noptr> reg w array ( <ptr> gsp ca dev <dot> <ptr> ptr <dot> <noptr> len )
<cls> <noptr> m tms register ( <ptr> sd <dot> <ptr> reg )
<cls> <ptr> media entity other ( <ptr> entity <dot> <ptr> link )
<cls> <noptr> clear pt ( <ptr> p )
<cls> <noptr> m nxt isvalid clk ( <noptr> adc kt <dot> <noptr> if freq )
<cls> <noptr> td a set voltage ( <ptr> state <dot> <noptr> voltage )
<cls> <noptr> m sps frequency ( <ptr> sd <dot> <ptr> freq )
<cls> <noptr> get key pv ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> d suv error ( <ptr> ctx )
<cls> <noptr> c xdr driver init ( )
<cls> <noptr> c x usb medi ong std ( <ptr> file <dot> <ptr> f h <dot> <ptr> norm )
<cls> <noptr> v l async notifier has async sub dev ( <ptr> notifier <dot> <ptr> asd <dot> <noptr> this index )
<cls> <noptr> u mt probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> saa buffer activate ( <ptr> buf <dot> <noptr> i )
<cls> <noptr> m lvs ctrl ( <ptr> ctrl )
<cls> <noptr> tm set standard ( <ptr> dev )
<cls> <noptr> sa ago mod init ( )
<cls> <noptr> dib ic func ( <ptr> adapter )
<cls> <noptr> rc open ( <ptr> r dev )
<cls> <noptr> av os d cmd ( <ptr> av <dot> <ptr> dc )
<cls> <noptr> tt usb dec fed vbs dis eq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> bt tv g f buf ( <ptr> file <dot> <ptr> f <dot> <ptr> fb )
<cls> <noptr> af read register bits ( <ptr> d <dot> <noptr> reg <dot> <noptr> pos <dot> <noptr> len <dot> <ptr> value )
<cls> <noptr> j pu resume ( <ptr> dev )
<cls> <noptr> v lg priority ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> mtk m dps ctrl ( <ptr> ctrl )
<cls> <ptr> dvb dummy f eq am attach ( )
<cls> <noptr> is cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> m tt power off ( <ptr> priv )
<cls> <noptr> v l prio init ( <ptr> global )
<cls> <noptr> s start acquire ( <ptr> vc )
<cls> <noptr> igor plug usb cmd ( <ptr> ir <dot> <noptr> cmd )
<cls> <noptr> iv tv get input ( <ptr> it v <dot> <noptr> index <dot> <ptr> input )
<cls> <noptr> dvb dmx add front end ( <ptr> demux <dot> <ptr> front end )
<cls> <noptr> sun ics i query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> saas std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> tp g get pat lines ( <ptr> tp g )
<cls> <noptr> dvb play kernel ( <ptr> av <dot> <ptr> buf <dot> <noptr> count <dot> <noptr> non block <dot> <noptr> type )
<cls> <ptr> skb aff wget seq ( <ptr> state <dot> <noptr> seqid )
<cls> <noptr> dmx dev unlock ( <ptr> v q )
<cls> <noptr> dvb front end wakeup ( <ptr> fe )
<cls> <noptr> cobalt d v timings cap ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> cap )
<cls> <noptr> bpf rc repeat ( <ptr> sample )
<cls> <noptr> snd tea x val to freq ( <ptr> tea <dot> <noptr> val )
<cls> <noptr> power down q am ( <ptr> state )
<cls> <noptr> spc a clk smart init ( <ptr> gsp ca dev )
<cls> <noptr> ctrl isdirty tre ble ( <ptr> cptr )
<cls> <noptr> mtv enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> c x usb rc query ( <ptr> d )
<cls> <noptr> sensor write ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> px am bus image size ( <ptr> m f <dot> <noptr> bytes per line <dot> <noptr> height )
<cls> <noptr> addin dtd ( <ptr> ctx <dot> <noptr> port )
<cls> <noptr> smi app stop streaming ( <ptr> sensor )
<cls> <noptr> c i int f deinit ( <ptr> budget av )
<cls> <noptr> lme get adapter count ( <ptr> d )
<cls> <noptr> j l c write reg ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> scm spi write ( <ptr> state <dot> <ptr> addr <dot> <noptr> len <dot> <noptr> tx size )
<cls> <noptr> c xxx get video line ( <ptr> dev <dot> <ptr> dma q <dot> <noptr> save av <dot> <ptr> pbuffer <dot> <noptr> buffer size )
<cls> <noptr> net upc is lot status ( <ptr> dev <dot> <noptr> pci status )
<cls> <noptr> compute tps ( <ptr> op )
<cls> <noptr> uvc v l get format ( <ptr> stream <dot> <ptr> fmt )
<cls> <noptr> c x usb medi on v process aux buf ( <ptr> c x dev <dot> <noptr> reset )
<cls> <noptr> dib get adc power ( <ptr> fe <dot> <noptr> mode )
<cls> <noptr> write bitmap word ( <ptr> go )
<cls> <noptr> z r xx fill buff ( <ptr> cam <dot> <ptr> buf <dot> <noptr> jpg size )
<cls> <noptr> get sig strength ( <ptr> demo d <dot> <ptr> sig strength )
<cls> <noptr> mtm set green balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c x usb ddm b tuner attach ( <ptr> adap )
<cls> <noptr> fdt vdi seq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> gpp sk get fw version ( <ptr> d <dot> <ptr> fw vers )
<cls> <noptr> po set gain ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c x usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <ptr> check mpeg line size ( )
<cls> <noptr> resizer set phase ( <ptr> res <dot> <noptr> h phase <dot> <noptr> v phase )
<cls> <noptr> pt proc dma ( <ptr> adap )
<cls> <noptr> sun ics i buffer fill all ( <ptr> csi )
<cls> <noptr> j pu query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> vid blk write word ( <ptr> dev <dot> <noptr> saddr <dot> <noptr> data )
<cls> <noptr> ov cal delay ( <noptr> cycles )
<cls> <noptr> rain connect ( <ptr> ser io <dot> <ptr> drv )
<cls> <noptr> gpp skus bou top ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> em xx v dev init ( <ptr> dev <dot> <ptr> v fd <dot> <ptr> template <dot> <ptr> type name )
<cls> <noptr> br xs ctrl ( <ptr> ctrl )
<cls> <noptr> vp been umd v timings ( <ptr> v pbe dev <dot> <ptr> timings )
<cls> <noptr> vim c streamer pipeline terminate ( <ptr> stream )
<cls> <noptr> roc ess ors ( <ptr> state )
<cls> <noptr> mrs init ( <ptr> fe )
<cls> <noptr> vivid pre calc copy rects ( <ptr> dev )
<cls> <noptr> stream start ( <ptr> gsp ca dev )
<cls> <noptr> ce u query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> h va device run ( <ptr> priv )
<cls> <noptr> vid ioc try fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> sp jpeg sub sampling decode ( <ptr> ctx <dot> <noptr> sub sampling )
<cls> <noptr> r vin start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> lut configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> vs read ( <ptr> sd <dot> <noptr> index )
<cls> <noptr> fim c ish w stream off ( <ptr> is )
<cls> <noptr> adv x read check ( <ptr> state <dot> <noptr> client page <dot> <noptr> reg )
<cls> <noptr> c xic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <ptr> cam ss find sensor ( <ptr> entity )
<cls> <ptr> sun ics ito dev ( <ptr> csi )
<cls> <noptr> c sippi disable ( <ptr> ctx )
<cls> <noptr> budget patch init ( )
<cls> <noptr> dev mrc register device ( <ptr> parent <dot> <ptr> dev )
<cls> <noptr> dib fw mem mb x sync ( <ptr> state <dot> <noptr> i )
<cls> <noptr> clu configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <ptr> to media device instance ( <ptr> m dev )
<cls> <ptr> check mode ( )
<cls> <noptr> scc am if hw init ( <ptr> cam if <dot> <ptr> vp )
<cls> <noptr> m m ols read rational ( <ptr> sd <dot> <noptr> addr num <dot> <noptr> addr den <dot> <ptr> val )
<cls> <noptr> v pu clock disable ( <ptr> v pu )
<cls> <noptr> az cable star hdc i front end attach ( <ptr> adap )
<cls> <noptr> az usb out op ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> ctrl clear dirty mute ( <ptr> cptr )
<cls> <noptr> sh tuner set params ( <ptr> fe )
<cls> <noptr> dib wakeup ( <ptr> fe )
<cls> <noptr> ctrl get res ver ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> f m r x get dee mph mode ( <ptr> f m dev <dot> <ptr> curr de emphasis mode )
<cls> <noptr> asf e set front end ( <ptr> fe )
<cls> <noptr> resizer video queue ( <ptr> video <dot> <ptr> buffer )
<cls> <noptr> net upi cfi for x ( <ptr> ic )
<cls> <noptr> set radio sleep ( <ptr> fe )
<cls> <noptr> v l print slice dvb icap ( <ptr> arg <dot> <noptr> write only )
<cls> <ptr> check enct sbuf s ( )
<cls> <noptr> c x der send burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> td a lookup pll map ( <ptr> fe <dot> <noptr> map type <dot> <ptr> freq <dot> <ptr> post div <dot> <ptr> div )
<cls> <ptr> check rds buf ( )
<cls> <noptr> c x der d vbs set symbol rate ( <ptr> priv <dot> <noptr> symbol rate )
<cls> <noptr> kinect read ( <ptr> udev <dot> <ptr> data <dot> <noptr> w length )
<cls> <noptr> dvb dmx dev filter timeout ( <ptr> t )
<cls> <noptr> flex cop usb transfer init ( <ptr> fc usb )
<cls> <noptr> c x dt nr dmd gpio set cfg sub ( <ptr> tn r dmd <dot> <noptr> id <dot> <noptr> en <dot> <noptr> mode <dot> <noptr> open drain <dot> <noptr> invert )
<cls> <noptr> coda pic run work ( <ptr> work )
<cls> <ptr> r card rif bond enabled ( <ptr> p )
<cls> <noptr> bt tv enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> adv x hdmi g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> init r cmap ( )
<cls> <noptr> mta ver media x c init ( <ptr> fe )
<cls> <noptr> saa alsa dma map ( <ptr> dev )
<cls> <noptr> fim c is it f mode change ( <ptr> is )
<cls> <noptr> flex cop dump reg ( <ptr> fc <dot> <noptr> reg <dot> <noptr> num )
<cls> <noptr> z d demo d set front end ( <ptr> fe )
<cls> <noptr> c x d write reg ( <ptr> spi <dot> <noptr> sub address <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> techni sat usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> dib xx tuner reset ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> sd stop ( <ptr> gsp ca dev )
<cls> <noptr> fdt v set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> flex cop dvb stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> nxt x init ( <ptr> fe )
<cls> <noptr> saa input fini ( <ptr> dev )
<cls> <noptr> ptic wait ( <ptr> pt )
<cls> <noptr> set dei regs ( <ptr> ctx )
<cls> <noptr> c x dt nr dmd dvb t check l post valid ( <ptr> tn r dmd <dot> <ptr> l post valid )
<cls> <noptr> powerup dvb t ( <ptr> state )
<cls> <noptr> resizer set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> is igraph notify unbind ( <ptr> notifier <dot> <ptr> sd <dot> <ptr> asd )
<cls> <noptr> sp jpeg enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> snd c x prepare ( <ptr> sub stream )
<cls> <noptr> smi app get native size ( <ptr> ssd <dot> <ptr> r )
<cls> <noptr> call get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> v l calc time per frame ( <ptr> t )
<cls> <noptr> iv tv vb i work handler ( <ptr> it v )
<cls> <noptr> init r cmap io data bct ve ( )
<cls> <noptr> tm init digital mode ( <ptr> dev )
<cls> <noptr> c x stop streaming ( <ptr> q )
<cls> <noptr> ska a enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> prepare raw frame ( <ptr> r f <dot> <ptr> info <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> exy nos jpeg set img fmt ( <ptr> base <dot> <noptr> img fmt )
<cls> <ptr> check wait secs ( )
<cls> <noptr> sp jpeg job ready ( <ptr> priv )
<cls> <noptr> set frequency ( <ptr> demo d <dot> <ptr> channel <dot> <noptr> tuner freq offset )
<cls> <noptr> write fw segment ( <ptr> state <dot> <noptr> mem addr <dot> <noptr> total size <dot> <ptr> dataptr )
<cls> <noptr> d ibm set channel ( <ptr> state <dot> <ptr> ch <dot> <noptr> seq )
<cls> <noptr> v l m m poll for data ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> wait )
<cls> <noptr> c x der sleep t cto active ib and ( <ptr> priv <dot> <noptr> bandwidth )
<cls> <noptr> stk xx pid filter ( <ptr> adapter <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> vid io cs std ( <ptr> file <dot> <ptr> f h <dot> <noptr> id )
<cls> <noptr> saa irq alsa done ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> sa ats verifier ( <ptr> buf )
<cls> <noptr> uvc ioctl enum fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> stv ddb read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> nxt set front end ( <ptr> fe )
<cls> <noptr> iv tv g fmt slice dvb i out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> z r x xvid ioc enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> m bas tune ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> seq head to package ( <ptr> go <dot> <ptr> code <dot> <noptr> space <dot> <ptr> ptr <dot> <ptr> <dot> <ptr> ptr )
<cls> <noptr> c x avg register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> mtk venc encode header ( <ptr> priv )
<cls> <noptr> sp jpegs fmt ( <ptr> ct <dot> <ptr> f )
<cls> <noptr> fim c initialize capture sub dev ( <ptr> fim c )
<cls> <ptr> check bt tv debug ( )
<cls> <noptr> cxa vs tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> omap vid setup overlay ( <ptr> v out <dot> <ptr> ov l <dot> <noptr> posx <dot> <noptr> posy <dot> <noptr> out w <dot> <noptr> outh <dot> <noptr> addr )
<cls> <noptr> c x aud irq ( <ptr> chip <dot> <noptr> status <dot> <noptr> mask )
<cls> <noptr> stk d tuner attach ( <ptr> adap )
<cls> <noptr> av cca get mmi ( <ptr> fdt v <dot> <ptr> mmi object <dot> <ptr> len )
<cls> <noptr> adv x afe init ( <ptr> afe )
<cls> <noptr> c mos probe ( <ptr> gsp ca dev )
<cls> <ptr> uvc entity by reference ( <ptr> dev <dot> <noptr> id <dot> <ptr> entity )
<cls> <noptr> send pulse homebrew soft carrier ( <noptr> length <dot> <noptr> edge )
<cls> <noptr> ov set power ( <ptr> ov <dot> <noptr> on )
<cls> <noptr> omap is pprint status ( <ptr> isp )
<cls> <noptr> iv tv encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> enc )
<cls> <noptr> l gs gxx read signal agc ( <ptr> priv <dot> <ptr> signal )
<cls> <noptr> hel ene write reg ( <ptr> priv <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> preview config noise filter ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> td a calci r measure ( <ptr> fe <dot> <ptr> freq )
<cls> <noptr> uvc ioctl g fmt vid out ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> get csi input seq ( <ptr> s dev <dot> <noptr> mbus code <dot> <noptr> pix format )
<cls> <noptr> ic wr ( <ptr> sd <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> n )
<cls> <noptr> m i pid get regulator s ( <ptr> bridge )
<cls> <noptr> j pus top streaming ( <ptr> v q )
<cls> <noptr> c x init on first open ( <ptr> c x )
<cls> <noptr> ths write ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> si adjust pll div l ( <ptr> state <dot> <noptr> div l )
<cls> <noptr> sa ats register ( <ptr> ops )
<cls> <noptr> v l stub g std ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> gsc prepare addr ( <ptr> ctx <dot> <ptr> vb <dot> <ptr> frame <dot> <ptr> addr )
<cls> <noptr> ovs ctrl ( <ptr> ctrl )
<cls> <noptr> iv tv ack ( <ptr> it v )
<cls> <ptr> to ce u sub dev ( <ptr> asd )
<cls> <noptr> pvr context check ( <ptr> mp )
<cls> <noptr> store byte ( <ptr> vb <dot> <noptr> byte )
<cls> <noptr> a speed video start frame ( <ptr> video )
<cls> <noptr> a speed video set d v timings ( <ptr> file <dot> <ptr> f h <dot> <ptr> timings )
<cls> <noptr> get video info ( <ptr> dev <dot> <ptr> vid inf )
<cls> <noptr> dst error bail out ( <ptr> state )
<cls> <noptr> au set format ( <ptr> dev <dot> <noptr> cmd <dot> <ptr> format )
<cls> <noptr> em xx rc unregister ( )
<cls> <noptr> a speed video update sub sampling ( <ptr> video )
<cls> <noptr> iv tv write vb i ( <ptr> it v <dot> <ptr> sliced <dot> <noptr> cnt )
<cls> <noptr> sdp restart ( <ptr> gsp ca dev )
<cls> <noptr> pvr ctrl value to sym ( <ptr> cptr <dot> <noptr> mask <dot> <noptr> val <dot> <ptr> buf <dot> <noptr> max len <dot> <ptr> len )
<cls> <noptr> cafe ctl r power down ( <ptr> m cam )
<cls> <noptr> net u pic reset ( <ptr> ic )
<cls> <noptr> compress sliced buf ( <ptr> c x <dot> <ptr> buf <dot> <noptr> size <dot> <noptr> hdr size )
<cls> <noptr> c x d eric gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> fim c ish w sub ip power off ( <ptr> is )
<cls> <noptr> vim c cap stop streaming ( <ptr> v q )
<cls> <noptr> sd start a ( <ptr> gsp ca dev )
<cls> <noptr> lg spectrum polarity ( <ptr> state <dot> <noptr> inverted )
<cls> <noptr> c x start video dma ( <ptr> dev <dot> <ptr> q <dot> <ptr> buf )
<cls> <noptr> h v adb g perf compute ( <ptr> ctx )
<cls> <noptr> pulse apply persistent config ( <ptr> pulse <dot> <ptr> log addrs <dot> <noptr> pa )
<cls> <noptr> cas end message ( <ptr> state <dot> <ptr> pca message <dot> <ptr> arg )
<cls> <noptr> saa vb i init ( <ptr> dev )
<cls> <noptr> vim m buf out validate ( <ptr> vb )
<cls> <noptr> gpp sk fe set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> tv psd v timings ( <ptr> sd <dot> <ptr> d v timings )
<cls> <noptr> ete kic write reg ( <ptr> client <dot> <noptr> data length <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> map addr to ser par number ( <ptr> msg )
<cls> <noptr> dump read message ( <ptr> fe <dot> <ptr> buf )
<cls> <noptr> ce u init mbus fmt ( <ptr> ce udev )
<cls> <noptr> dib wb d offset ( <ptr> fe )
<cls> <noptr> vld qevent ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> trust s ctrl ( <ptr> ctrl )
<cls> <noptr> cobalt try fmt vid cap ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> isp if select c sid ( <ptr> isp if <dot> <noptr> int f <dot> <noptr> c sid <dot> <noptr> v fe <dot> <noptr> enable )
<cls> <noptr> tw g std ( <ptr> sd <dot> <ptr> norm )
<cls> <ptr> bt tv queue ( <ptr> f h )
<cls> <noptr> j pu probe ( <ptr> pdev )
<cls> <noptr> g sch w set input path ( <ptr> ctx )
<cls> <noptr> em xx check usb descriptor ( <ptr> dev <dot> <ptr> udev <dot> <ptr> int f <dot> <noptr> alt <dot> <noptr> ep <dot> <ptr> has vendor audio <dot> <ptr> has video <dot> <ptr> has dvb )
<cls> <noptr> dib mtune ( <ptr> demo d )
<cls> <noptr> mba read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> ic check for device ( <ptr> ic bus <dot> <noptr> addr )
<cls> <noptr> em xx wake ic ( <ptr> dev )
<cls> <noptr> saa vb i fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> irr x timer cb ( <ptr> timer )
<cls> <noptr> x c init ( <ptr> fe )
<cls> <noptr> sh get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> saa v v cleanup module ( )
<cls> <noptr> vp if set output ( <ptr> vp if cfg <dot> <ptr> ch <dot> <noptr> index )
<cls> <noptr> m tread ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> xt pg probe ( <ptr> pdev )
<cls> <noptr> solo win setup ( <ptr> solo dev <dot> <noptr> ch <dot> <noptr> s x <dot> <noptr> sy <dot> <noptr> ex <dot> <noptr> e y <dot> <noptr> scale )
<cls> <noptr> e tek set gain ( <ptr> sensor <dot> <noptr> gain )
<cls> <noptr> venus clk s get ( <ptr> core )
<cls> <noptr> isp video req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> rb )
<cls> <ptr> vsp video complete buffer ( <ptr> video )
<cls> <noptr> is i camera set bus param ( <ptr> is i )
<cls> <noptr> c x usb dee demo d init ( <ptr> fe )
<cls> <noptr> build table color ( <noptr> rom table <dot> <noptr> p <dot> <noptr> p )
<cls> <noptr> o aded ( <ptr> av )
<cls> <noptr> saa seq stop ( <ptr> s <dot> <ptr> v )
<cls> <noptr> au init ( <ptr> d )
<cls> <noptr> az get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <ptr> check input ( )
<cls> <noptr> venus helper get frames z raw ( <noptr> h fi fmt <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> e tek configure ( <ptr> sensor )
<cls> <noptr> m m ols reg mode ( <ptr> sd <dot> <noptr> mode )
<cls> <noptr> dib reset ( <ptr> fe )
<cls> <noptr> ov x set frame size ( <ptr> ov x )
<cls> <noptr> skb af hw set c is ( <ptr> state )
<cls> <noptr> dvb bt xx task ( <noptr> data )
<cls> <noptr> pvr s audio ( <ptr> file <dot> <ptr> priv <dot> <ptr> v out )
<cls> <noptr> po disconnect ( <ptr> sd )
<cls> <noptr> td apl l calc ( <ptr> fe <dot> <ptr> r div <dot> <ptr> n div <dot> <ptr> icp )
<cls> <ptr> td acd d attach ( <ptr> fe <dot> <ptr> ic <dot> <noptr> adr )
<cls> <noptr> cam ss get pixel clock ( <ptr> entity <dot> <ptr> pixel clock )
<cls> <noptr> ule ext hdr padding ( <ptr> p )
<cls> <noptr> cxa v read ( <ptr> c x <dot> <noptr> addr )
<cls> <noptr> csi phy get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> v ls mod ulator ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> powerup device ( <ptr> state )
<cls> <noptr> ir raw event handle ( <ptr> dev )
<cls> <noptr> fim c capture set default format ( <ptr> fim c )
<cls> <noptr> ths enum d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <ptr> check disable led control ( )
<cls> <noptr> f m powerup ( <ptr> f m dev <dot> <noptr> mode )
<cls> <noptr> c x jpeg ( <ptr> gsp ca dev )
<cls> <noptr> hi x h dir config ( <ptr> priv )
<cls> <noptr> csl as ctrl ( <ptr> ctrl )
<cls> <noptr> ske cg x config gpio ( <noptr> nr <dot> <noptr> val <dot> <ptr> name )
<cls> <noptr> ov set frame rate ( <ptr> sd <dot> <ptr> tp f )
<cls> <noptr> m cam vbs g buf init ( <ptr> vb )
<cls> <noptr> vb icap buf prepare ( <ptr> vb )
<cls> <noptr> samsung smt tuner set params ( <ptr> fe )
<cls> <noptr> v pe open ( <ptr> file )
<cls> <noptr> sp mfc get enc str m size v ( <ptr> dev )
<cls> <ptr> c x enqueue ( <ptr> s <dot> <ptr> mdl <dot> <ptr> q <dot> <noptr> tofront )
<cls> <noptr> c x set gain settings ( <ptr> state <dot> <noptr> power estimation )
<cls> <noptr> c pia enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> r pf configure stream ( <ptr> entity <dot> <ptr> pipe <dot> <ptr> dl <dot> <ptr> dl b )
<cls> <noptr> z r x xvid ioc q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> z l set bandwidth ( <ptr> state <dot> <noptr> fb w )
<cls> <noptr> load slim core fw ( <ptr> fw <dot> <ptr> fe i )
<cls> <noptr> net up eeprom write ( <ptr> ic adap <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> em xx usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> fft to mode ( <ptr> state )
<cls> <noptr> stv x write reg ( <ptr> stv x <dot> <noptr> reg <dot> <noptr> data )
<cls> <ptr> check agc crush ( )
<cls> <noptr> lg dta mpeg tristate ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> regr ( <noptr> offset )
<cls> <noptr> radios is frequency ( <ptr> file <dot> <ptr> p <dot> <ptr> v f )
<cls> <noptr> h fi session unload res ( <ptr> inst )
<cls> <noptr> tt usb ir driver init ( )
<cls> <noptr> r card rif read ( <ptr> ch <dot> <noptr> offset )
<cls> <noptr> l gdt get tune settings ( <ptr> fe <dot> <ptr> fet une settings )
<cls> <noptr> fc get r f strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> radio isa probe ( <ptr> pdev <dot> <noptr> dev )
<cls> <noptr> sq read data ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> size <dot> <noptr> need lock )
<cls> <noptr> m tms power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> pvr stream internal flush ( <ptr> sp )
<cls> <noptr> usb shark probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> t dax encode fec ( <noptr> fec )
<cls> <noptr> td a calc cal pll ( <ptr> fe <dot> <noptr> freq )
<cls> <noptr> video ic probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> cec p into idle ( <ptr> pin )
<cls> <noptr> cal query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> l gdt aag c setup ( <ptr> state <dot> <ptr> p )
<cls> <noptr> v pu init ipi handler ( <ptr> data <dot> <noptr> len <dot> <ptr> priv )
<cls> <noptr> l k dtm exec kmalloc ( )
<cls> <noptr> au qt tuner attach ( <ptr> adap )
<cls> <noptr> or read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> m i pid async bound ( <ptr> notifier <dot> <ptr> ssub dev <dot> <ptr> asd )
<cls> <noptr> max read ( <ptr> ctx <dot> <noptr> idx <dot> <ptr> val )
<cls> <noptr> video irq done ( <ptr> dev <dot> <noptr> st )
<cls> <noptr> delta device run ( <ptr> priv )
<cls> <noptr> v pfe return all buffers ( <ptr> v pfe <dot> <noptr> state )
<cls> <noptr> audio present ( <ptr> sd )
<cls> <noptr> cxa v set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> c x der dvb t set plp config ( <ptr> priv <dot> <noptr> is auto <dot> <noptr> pl pid )
<cls> <noptr> c sect pfe get config ( <ptr> fe i )
<cls> <noptr> saa k world pc u toggle agc ( <ptr> dev <dot> <noptr> mode )
<cls> <noptr> v pbe display g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> powerup q am ( <ptr> state )
<cls> <noptr> omap v out new crop ( <ptr> pix <dot> <ptr> crop <dot> <ptr> win <dot> <ptr> f buf <dot> <ptr> new crop )
<cls> <noptr> m tt reset ( <ptr> m tt )
<cls> <noptr> sp mfc handle init buffers ( <ptr> ctx <dot> <noptr> reason <dot> <noptr> err )
<cls> <noptr> ov get light freq ( <ptr> sensor )
<cls> <noptr> rds cmd ( <ptr> aci <dot> <noptr> cmd <dot> <noptr> data buffer <dot> <noptr> data size )
<cls> <noptr> write flags ( <ptr> state <dot> <noptr> reg <dot> <noptr> data <dot> <noptr> flags )
<cls> <noptr> pvr s ctrl ( <ptr> file <dot> <ptr> priv <dot> <ptr> vc )
<cls> <noptr> cit set contrast ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> tm read ( <ptr> file <dot> <ptr> data <dot> <noptr> count <dot> <ptr> pos )
<cls> <ptr> check timeout ( )
<cls> <noptr> max set nar x mode ( <ptr> ctx <dot> <noptr> r x mode )
<cls> <noptr> f m v l init video device ( <ptr> f m dev <dot> <noptr> radio nr )
<cls> <noptr> stv get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> fc set vh f track ( <ptr> priv <dot> <noptr> freq )
<cls> <noptr> uvc ioctl try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <ptr> get display buffer ( <ptr> ctx )
<cls> <noptr> p xps fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vbo psv dec buf finish ( <ptr> vb )
<cls> <noptr> cit start model ( <ptr> gsp ca dev )
<cls> <noptr> af get post vit err c w count ( <ptr> fe <dot> <ptr> post err count <dot> <ptr> post c w count <dot> <ptr> abort count )
<cls> <noptr> scm gpio assert ( <ptr> priv <dot> <noptr> id )
<cls> <noptr> vs pdl list commit ( <ptr> dl <dot> <noptr> d lflags )
<cls> <noptr> cod await timeout ( <ptr> dev )
<cls> <noptr> isp video open ( <ptr> file )
<cls> <noptr> pkt sys power control ( <ptr> pkt <dot> <noptr> enable )
<cls> <noptr> simple dvb configure ( <ptr> fe <dot> <ptr> buf <dot> <noptr> del sys <dot> <noptr> freq <dot> <noptr> bw )
<cls> <noptr> six usb driver probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> saa api initialized if ( <ptr> port )
<cls> <noptr> pt enable ram ( <ptr> pt )
<cls> <noptr> h f iis r thread ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> imx load default ( <ptr> priv )
<cls> <noptr> adv set power pin ( <ptr> state <dot> <noptr> on )
<cls> <noptr> adv x afe g pixel aspect ( <ptr> sd <dot> <ptr> aspect )
<cls> <noptr> usb rare mono probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> adv read cable det ( <ptr> sd )
<cls> <noptr> hack r fg mod ulator ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> media open ( <ptr> inode <dot> <ptr> filp )
<cls> <noptr> radio enable ( <ptr> b tv )
<cls> <noptr> l gdt read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> twin dir read b ( <ptr> dev <dot> <noptr> addr )
<cls> <noptr> pvr stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> ds load firmware ( <ptr> fe <dot> <ptr> fw )
<cls> <noptr> ptic init ( <ptr> pt )
<cls> <noptr> t vps register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> r ga setup ctrls ( <ptr> ctx )
<cls> <noptr> list size ( <ptr> list )
<cls> <noptr> any see add ic dev ( <ptr> d <dot> <ptr> type <dot> <noptr> addr <dot> <ptr> platform data )
<cls> <noptr> hi x h dir close ( <ptr> r dev )
<cls> <noptr> blend line ( <ptr> dev <dot> <noptr> yoffset <dot> <noptr> xoffset <dot> <ptr> vcap buf <dot> <ptr> vos d buf <dot> <noptr> width <dot> <noptr> pix size )
<cls> <noptr> vpx fe read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> lg x set if ( <ptr> state )
<cls> <noptr> hel ene init ( <ptr> fe )
<cls> <noptr> sun i video close ( <ptr> file )
<cls> <noptr> c x set freq via ops ( <ptr> dev <dot> <ptr> f )
<cls> <noptr> dvb front end sleep until ( <ptr> wake time <dot> <noptr> add use c )
<cls> <noptr> xt pg close ( <ptr> sub dev <dot> <ptr> f h )
<cls> <noptr> c x g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> send command ( <ptr> state <dot> <noptr> size <dot> <ptr> buf )
<cls> <ptr> sms core get buffer ( <ptr> core dev )
<cls> <noptr> pv ric xfer ( <ptr> ic adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> d ibm c read status ( <ptr> fe <dot> <ptr> stat )
<cls> <noptr> m cam init clk ( <ptr> m cam )
<cls> <noptr> dvb dmx dev start feed ( <ptr> dmx dev <dot> <ptr> filter <dot> <ptr> feed )
<cls> <noptr> vpx fp status ( <ptr> sd )
<cls> <noptr> register fim c lite entity ( <ptr> f md <dot> <ptr> fim c lite )
<cls> <noptr> pluto get scl ( <ptr> data )
<cls> <noptr> tws power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> vi codec probe ( <ptr> pdev )
<cls> <noptr> dst pio disable ( <ptr> state )
<cls> <noptr> set red balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> dvb dmx remove front end ( <ptr> demux <dot> <ptr> front end )
<cls> <noptr> c x usb aux buf append urb ( <ptr> dvb dev <dot> <ptr> aux buf <dot> <ptr> urb )
<cls> <noptr> vsp video pipeline run partition ( <ptr> pipe <dot> <ptr> dl <dot> <noptr> partition )
<cls> <noptr> e standby ( <ptr> sd )
<cls> <noptr> adt vk audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> c pia save camera state ( <ptr> cam )
<cls> <noptr> pb init controls ( <ptr> sd )
<cls> <noptr> pkt session get property x ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> ptype )
<cls> <noptr> control tx enable ( <ptr> c <dot> <noptr> enable )
<cls> <noptr> spx read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> debuginfo show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> vb dma contig clear max seg size ( <ptr> dev )
<cls> <noptr> em xx init usb xfer ( <ptr> dev <dot> <noptr> mode <dot> <noptr> xfer bulk <dot> <noptr> num buf s <dot> <noptr> max pkt size <dot> <noptr> packet multiplier <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <ptr> ctrl to ctx ( <ptr> c )
<cls> <noptr> csi phy routing cfg ( <ptr> phy <dot> <noptr> iface <dot> <noptr> on <dot> <noptr> ccp stro be )
<cls> <noptr> video icp m runtime suspend ( <ptr> dev )
<cls> <noptr> mt calc nominal rate ( <ptr> state <dot> <noptr> bandwidth <dot> <ptr> buf )
<cls> <noptr> td a calc main pll ( <ptr> fe <dot> <noptr> freq )
<cls> <noptr> vpx usb out op ( <ptr> d <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <ptr> d ibm get ic master ( <ptr> demo d <dot> <noptr> int f <dot> <noptr> g ating )
<cls> <noptr> a fwrite of d m register ( <ptr> d <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> dib p get agc values ( <ptr> fe <dot> <ptr> agc global <dot> <ptr> agc <dot> <ptr> agc <dot> <ptr> wb d )
<cls> <noptr> az resume ( <ptr> int f )
<cls> <noptr> dvb t set profile ( <ptr> tn r dmd <dot> <noptr> profile )
<cls> <noptr> sms usb send request ( <ptr> context <dot> <ptr> buffer <dot> <noptr> size )
<cls> <noptr> dvb generic ioctl ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> adv s detect tx v ctrl ( <ptr> sd )
<cls> <noptr> video init ( <ptr> dev <dot> <ptr> v v )
<cls> <noptr> rtl xx u init ( <ptr> d )
<cls> <noptr> bluebird patch d vic o firmware download ( <ptr> udev <dot> <ptr> fw )
<cls> <noptr> flex cop dis eq c send master cmd ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> ctrl set crop w ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> wb cir init ( )
<cls> <noptr> rame ( <ptr> sd )
<cls> <noptr> bpf rc pointer rel ( <noptr> sample <dot> <noptr> relx <dot> <noptr> rely <dot> <noptr> ur <dot> <noptr> ur )
<cls> <noptr> nx tic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> av irq ( <ptr> dev <dot> <ptr> isr )
<cls> <noptr> iv tv u dma start ( <ptr> it v )
<cls> <noptr> c x unload queues ( <ptr> s )
<cls> <ptr> venc sub dev init ( <ptr> v l dev <dot> <ptr> venc name )
<cls> <noptr> gpio irt x ( <ptr> dev <dot> <ptr> tx buf <dot> <noptr> count )
<cls> <noptr> adb s stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> isp ifconfig irq ( <ptr> isp if <dot> <noptr> int f <dot> <noptr> v fe <dot> <noptr> enable )
<cls> <noptr> ctrl get mute ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> fim c capture config update ( <ptr> ctx )
<cls> <noptr> c xxx stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> sp jpeg try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sq c command ( <ptr> gsp ca dev <dot> <noptr> command <dot> <noptr> index )
<cls> <noptr> max set bandwidth ( <ptr> priv <dot> <noptr> bw )
<cls> <noptr> gsp ca frame add ( <ptr> gsp ca dev <dot> <noptr> packet type <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> dib fw tune ( <ptr> fe )
<cls> <noptr> dst get tuning algo ( <ptr> fe )
<cls> <noptr> usb ma radio driver init ( )
<cls> <noptr> omap isp stat register entities ( <ptr> stat <dot> <ptr> v dev )
<cls> <ptr> tea attach ( <ptr> fe <dot> <ptr> ic adap <dot> <noptr> ic addr )
<cls> <noptr> ln b p enable high ln b voltage ( <ptr> fe <dot> <noptr> arg )
<cls> <noptr> r jn set rect ( <ptr> client <dot> <noptr> regx <dot> <noptr> reg y <dot> <noptr> regx y <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> cec gpio enable irq ( <ptr> adap )
<cls> <noptr> cec config log addr ( <ptr> adap <dot> <noptr> idx <dot> <noptr> log addr )
<cls> <noptr> rain send ( <ptr> rain <dot> <ptr> command )
<cls> <noptr> dvb net filter sec set ( <ptr> dev <dot> <dptr> sec filter <dot> <ptr> mac <dot> <ptr> mac mask )
<cls> <noptr> has get front end ( <ptr> fe )
<cls> <noptr> pvr buffer get count ( <ptr> b p )
<cls> <noptr> vim m buf request complete ( <ptr> vb )
<cls> <noptr> dib read attr ( <ptr> state <dot> <noptr> reg <dot> <ptr> b <dot> <noptr> len <dot> <noptr> attribute )
<cls> <noptr> ctrl streaming enabled get ( <ptr> cptr <dot> <ptr> vp )
<cls> <ptr> check enc pcm buf s ( )
<cls> <noptr> isp video enum input ( <ptr> file <dot> <ptr> f h <dot> <ptr> input )
<cls> <noptr> isp if set int f cmd ( <ptr> isp if <dot> <noptr> cmd <dot> <noptr> int f <dot> <noptr> v fe <dot> <noptr> vc )
<cls> <noptr> venus are queues empty ( <ptr> h dev )
<cls> <noptr> m xl x sf demo d get tps modulation ( <ptr> state <dot> <ptr> modulation )
<cls> <noptr> vsp sub dev get pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> get key purple tv ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> vid io cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> tc subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> isp video getparam ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> ts sleep ( <ptr> fe )
<cls> <noptr> c iner gy tfe sleep ( <ptr> fe )
<cls> <noptr> ic set status ( <ptr> dev <dot> <noptr> status )
<cls> <noptr> legacy dvb usb remote init ( <ptr> d )
<cls> <noptr> sec oce ctx done ( <ptr> adap <dot> <noptr> status val )
<cls> <noptr> stb get m clk ( <ptr> state )
<cls> <noptr> v l enum fmt ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> mt calibrate ( <ptr> priv )
<cls> <noptr> v spr wpf get selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> mts pur check ( <ptr> fe <dot> <noptr> f <dot> <noptr> f <dot> <noptr> spectrum from <dot> <noptr> spectrum to )
<cls> <noptr> solo thread try ( <ptr> solo dev )
<cls> <noptr> tegra cec resume ( <ptr> pdev )
<cls> <noptr> tw x audio irq ( <ptr> dev <dot> <noptr> requests <dot> <noptr> pb status )
<cls> <noptr> cec adap g caps ( <ptr> adap <dot> <ptr> p arg )
<cls> <noptr> f m v l fops open ( <ptr> file )
<cls> <noptr> c xxx enable analog tuner ( <ptr> dev )
<cls> <noptr> venus helper get frames z ( <noptr> v l fmt <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> net up spi setup ( <ptr> spi )
<cls> <noptr> cio notifier unbind ( <ptr> notifier <dot> <ptr> sd <dot> <ptr> asd )
<cls> <noptr> scm set contrast ( <ptr> state <dot> <noptr> val )
<cls> <noptr> send video command ( <ptr> pdev <dot> <noptr> index <dot> <ptr> buf <dot> <noptr> buf len )
<cls> <noptr> bt tv try fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> gpp sk fe out ( <ptr> priv <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> m i pid read reg ( <ptr> bridge <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> rti q ( <ptr> priv <dot> <ptr> i q pont )
<cls> <noptr> em xx pct ve set l na ( <ptr> fe )
<cls> <noptr> c x stop dma ( <ptr> dev )
<cls> <noptr> ov mod reg ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> c x sw irq disable cpu ( <ptr> c x <dot> <noptr> val )
<cls> <noptr> bcm write bytes ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> c x dt nr dmd dvb t mon data plp error ( <ptr> tn r dmd <dot> <ptr> plp error )
<cls> <noptr> pv ric read ( <ptr> h dw <dot> <noptr> ic addr <dot> <ptr> data <dot> <noptr> d len <dot> <ptr> res <dot> <noptr> r len )
<cls> <noptr> gold root ( <noptr> gold )
<cls> <noptr> ene clear reg mask ( <ptr> dev <dot> <noptr> reg <dot> <noptr> mask )
<cls> <noptr> v pbe display g output ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> fin tek cir l dev init ( <ptr> fin tek )
<cls> <noptr> stv set v iter b iac q ( <ptr> int p <dot> <noptr> demo d )
<cls> <noptr> saa x g vb i data ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> m c gpio enable ( <ptr> dev <dot> <noptr> mask <dot> <noptr> as output )
<cls> <noptr> rcs i set pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> pv ric core done ( <ptr> h dw )
<cls> <noptr> init irq reg ( <ptr> b tv )
<cls> <noptr> td mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> smi app read only ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> len <dot> <ptr> val )
<cls> <noptr> fc init ( <ptr> dev )
<cls> <noptr> video do ioctl ( <ptr> file <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> mtk chk period ( <ptr> ir )
<cls> <noptr> smi app sysfs nvm read ( <ptr> dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> e tek stream on ( <ptr> sensor )
<cls> <noptr> scm o ifs frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> de interlace job ready ( <ptr> priv )
<cls> <noptr> dr x d set front end ( <ptr> fe )
<cls> <noptr> mtk jpeg calc mcu ( <ptr> param )
<cls> <noptr> vim c sent pgs format ( <ptr> v sen )
<cls> <noptr> gpp sk fe send dis eq c msg ( <ptr> fe <dot> <ptr> m )
<cls> <noptr> adp set power ( <ptr> sub dev <dot> <noptr> on )
<cls> <noptr> v levent pending ( <ptr> f h )
<cls> <noptr> tp g calc frame line ( <ptr> tp g <dot> <noptr> src y <dot> <noptr> field )
<cls> <noptr> t dax set e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> c x der sleep t cto active c ( <ptr> priv <dot> <noptr> bandwidth )
<cls> <noptr> pluto set scl ( <ptr> data <dot> <noptr> state )
<cls> <noptr> d tcs init controls ( <ptr> gsp ca dev )
<cls> <noptr> uvc parse control ( <ptr> dev )
<cls> <noptr> adv g frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> exy nos jpeg clk set ( <ptr> base )
<cls> <noptr> sa await for deb i done ( <ptr> dev <dot> <noptr> no busy loop )
<cls> <noptr> iv tv get scl ( <ptr> it v )
<cls> <noptr> set ctrl lock ( <ptr> f h <dot> <ptr> ctrl <dot> <ptr> c )
<cls> <noptr> saa encoder start streaming ( <ptr> port )
<cls> <noptr> sdr cap buf request complete ( <ptr> vb )
<cls> <noptr> spl l tune ( <ptr> fe )
<cls> <noptr> cic x d attach ( <ptr> port <dot> <noptr> bitrate )
<cls> <noptr> is ppm suspend ( <ptr> dev )
<cls> <noptr> t dax a set analog params ( <ptr> fe <dot> <ptr> params )
<cls> <noptr> c x read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> l gs gxx set ad mode ( <ptr> priv )
<cls> <noptr> dst set polar ization ( <ptr> state )
<cls> <noptr> lg dta mpeg mode ( <ptr> state <dot> <noptr> mode )
<cls> <noptr> coda probe ( <ptr> pdev )
<cls> <noptr> mt pic driver init ( )
<cls> <noptr> hel ene get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> scc am ifstream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> phy tec mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> v pfe try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> x vip get format by code ( <noptr> code )
<cls> <ptr> sh attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> az techs frequency ( <ptr> isa <dot> <noptr> freq )
<cls> <noptr> sp clr pending r x ( <ptr> cec )
<cls> <noptr> t dax parsed t ( <ptr> state )
<cls> <noptr> saa cmd wait ( <ptr> dev <dot> <noptr> seqno )
<cls> <ptr> check vb debug ( )
<cls> <noptr> parse raw formats ( <ptr> core <dot> <noptr> codecs <dot> <noptr> domain <dot> <ptr> data )
<cls> <noptr> so lop mis r ( <ptr> solo dev <dot> <noptr> id )
<cls> <noptr> m tt ctrl freeze ( <ptr> m tt <dot> <noptr> freeze )
<cls> <noptr> dib set gpio ( <ptr> fe <dot> <noptr> num <dot> <noptr> dir <dot> <noptr> val )
<cls> <noptr> media graph walk start ( <ptr> graph <dot> <ptr> entity )
<cls> <noptr> max probe ( <ptr> client )
<cls> <noptr> r vin parallel notify complete ( <ptr> notifier )
<cls> <noptr> r vin group link notify ( <ptr> link <dot> <noptr> flags <dot> <noptr> notification )
<cls> <noptr> c x api ( <ptr> c x <dot> <noptr> cmd <dot> <noptr> args <dot> <noptr> data )
<cls> <noptr> calculate clipping registers rect ( <ptr> dev <dot> <ptr> f h <dot> <ptr> v dma <dot> <ptr> clip format <dot> <ptr> arb tr ctrl <dot> <noptr> field )
<cls> <noptr> vivid vid caps ctrl ( <ptr> ctrl )
<cls> <noptr> dt init board ( <ptr> pd )
<cls> <noptr> radio tea set freq ( <ptr> tea )
<cls> <noptr> copy streams ( <ptr> data <dot> <noptr> len <dot> <ptr> urb )
<cls> <noptr> iv tvf b restore ( <ptr> it v )
<cls> <noptr> resizer set source ( <ptr> res <dot> <noptr> source )
<cls> <noptr> m xls get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> stv x algo ( <ptr> state )
<cls> <noptr> m bas get stats ( <ptr> fe <dot> <noptr> status nr )
<cls> <ptr> c x risc field ( <ptr> r p <dot> <ptr> sg list <dot> <noptr> offset <dot> <noptr> sync line <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines <dot> <noptr> lp i <dot> <noptr> jump )
<cls> <noptr> mtk vcodec dec set default params ( <ptr> ctx )
<cls> <noptr> calculate snr ( <noptr> mse <dot> <noptr> c )
<cls> <noptr> x vip dma get format ( <ptr> file <dot> <ptr> f h <dot> <ptr> format )
<cls> <noptr> h wparam copy ( <ptr> dst <dot> <ptr> src )
<cls> <noptr> module init n gene ( )
<cls> <noptr> simple post tune ( <ptr> fe <dot> <ptr> buffer <dot> <noptr> div <dot> <noptr> config <dot> <noptr> cb )
<cls> <noptr> exy nos jpeg select dec h tbl ( <ptr> base <dot> <noptr> c <dot> <noptr> x )
<cls> <noptr> kodi com r mux sel ( <ptr> b tv <dot> <noptr> input )
<cls> <noptr> c cdc ioctl ( <ptr> sd <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> r card rif start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> get strength ( <ptr> state <dot> <ptr> strength )
<cls> <noptr> cec gpio disable irq ( <ptr> adap )
<cls> <noptr> t dax manual h pd ( <ptr> sd <dot> <noptr> mode )
<cls> <noptr> vb req unbind ( <ptr> obj )
<cls> <noptr> dib set layer ( <ptr> state <dot> <noptr> layer index <dot> <noptr> max const ell ation )
<cls> <noptr> pvr h dw state report ( <ptr> h dw <dot> <ptr> buf <dot> <noptr> a cnt )
<cls> <noptr> wl f m set seek ( <ptr> radio <dot> <noptr> wraparound <dot> <noptr> seek upward <dot> <noptr> level )
<cls> <noptr> iri mon encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> dib demo d restart ( <ptr> state )
<cls> <noptr> cir dump regs ( <ptr> fin tek )
<cls> <ptr> find sensor format ( <ptr> m f )
<cls> <noptr> c cdc enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> goto low power ( <ptr> gsp ca dev )
<cls> <noptr> imon incoming packet ( <ptr> i ctx <dot> <ptr> urb <dot> <noptr> int f )
<cls> <ptr> mtk mdp try fmt m plane ( <ptr> ctx <dot> <ptr> f )
<cls> <ptr> to sn div tv card ( <ptr> v l dev )
<cls> <noptr> techn is atus brc query ( <ptr> d )
<cls> <noptr> v op channel ( <ptr> vh )
<cls> <noptr> mtk mdp clock off ( <ptr> mdp )
<cls> <noptr> m basic write reg ( <ptr> state <dot> <noptr> ic addr <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> d wx read mac address ( <ptr> d <dot> <noptr> mac )
<cls> <noptr> ov try fmt internal ( <ptr> sd <dot> <ptr> fmt <dot> <dptr> ret fmt <dot> <dptr> ret w size )
<cls> <noptr> init r cmap dnt v lived v bt pro ( )
<cls> <noptr> ovh flip enable ( <ptr> sensor )
<cls> <noptr> digit v front end attach ( <ptr> adap )
<cls> <noptr> stop ( <ptr> state )
<cls> <noptr> vps s regr ( <noptr> offset )
<cls> <noptr> dib read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> stv x blind search ( <ptr> state )
<cls> <noptr> adv audio setup ( <ptr> sd )
<cls> <noptr> iv tvs std enc ( <ptr> it v <dot> <noptr> std )
<cls> <noptr> mt set reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> v l printf rmi val enum ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> zol trix s mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> c xxx g chip info ( <ptr> file <dot> <ptr> f h <dot> <ptr> chip )
<cls> <noptr> m xls f demo d read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> flex cop wan set speed ( <ptr> fc <dot> <noptr> s )
<cls> <noptr> adb driver init ( )
<cls> <noptr> set brightness ( <ptr> gsp ca dev <dot> <noptr> val <dot> <noptr> sat )
<cls> <noptr> c x input init ( <ptr> dev )
<cls> <noptr> sun ics i resource request ( <ptr> s dev <dot> <ptr> pdev )
<cls> <noptr> skb af isc is sub dev ( <ptr> sd )
<cls> <noptr> ddb irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> cxx c win fast h plus callback ( <ptr> core <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> h sit set format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <ptr> vim c sen process frame ( <ptr> ved <dot> <ptr> sink frame )
<cls> <noptr> send unknown ( <ptr> gsp ca dev <dot> <noptr> sensor )
<cls> <noptr> ml x xfer ( <ptr> data <dot> <ptr> buf )
<cls> <noptr> mtm g mbus config ( <ptr> sd <dot> <ptr> cfg )
<cls> <noptr> iv tv g f buf ( <ptr> file <dot> <ptr> f h <dot> <ptr> fb )
<cls> <noptr> t das ctrl ( <ptr> ctrl )
<cls> <noptr> iv tvf b init vid mode ( <ptr> it v )
<cls> <noptr> vb ioctl prepare buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> ska a get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> vid ioc enum fmt meta cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> r card rif driver init ( )
<cls> <noptr> isp stat buf sync for device ( <ptr> stat <dot> <ptr> buf )
<cls> <noptr> ce usb driver init ( )
<cls> <noptr> sp mfc set enc frame buffer v ( <ptr> ctx <dot> <noptr> y addr <dot> <noptr> c addr )
<cls> <noptr> check firmware ( <ptr> av )
<cls> <noptr> rtl xx u wr regs ( <ptr> d <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> imx set selection crop ( <ptr> imx <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> venc if set param ( <ptr> ctx <dot> <noptr> type <dot> <ptr> in )
<cls> <noptr> omap is pc cdc restore context ( <ptr> isp )
<cls> <noptr> img ir write timings ( <ptr> priv <dot> <ptr> regs <dot> <noptr> type )
<cls> <noptr> tw setup ( <ptr> solo dev <dot> <noptr> dev addr )
<cls> <noptr> gpio read ( <ptr> dev <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> m read sensor ( <ptr> sd <dot> <noptr> address <dot> <ptr> ic data <dot> <noptr> len )
<cls> <noptr> iv tv set sda ( <ptr> it v <dot> <noptr> state )
<cls> <noptr> mds read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> f m v l vid io cs freq ( <ptr> file <dot> <ptr> priv <dot> <ptr> freq )
<cls> <noptr> sp mfc irq ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> az tech set pins ( <ptr> handle <dot> <noptr> pins )
<cls> <noptr> fmc send cmd ( <ptr> f m dev <dot> <noptr> f mop <dot> <noptr> type <dot> <ptr> payload <dot> <noptr> payload len <dot> <ptr> response <dot> <ptr> response len )
<cls> <noptr> af probe ( <ptr> d )
<cls> <noptr> ov power off ( <ptr> sd )
<cls> <noptr> net up altera fpga rw ( <ptr> device <dot> <noptr> flag <dot> <noptr> data <dot> <noptr> read )
<cls> <noptr> vim c sen adjust fmt ( <ptr> fmt )
<cls> <noptr> v pbe buffer queue ( <ptr> vb )
<cls> <noptr> se get feature ( <ptr> gsp ca dev <dot> <noptr> selector )
<cls> <noptr> dev dbg obj ( <ptr> event name <dot> <ptr> g obj )
<cls> <noptr> iv tv expand service set ( <ptr> fmt <dot> <noptr> is pal )
<cls> <noptr> fim c lite req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> req buf s )
<cls> <noptr> six set led state ( <ptr> radio <dot> <noptr> led state )
<cls> <noptr> asf e read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> cam mode ( <ptr> c i <dot> <noptr> mode )
<cls> <noptr> scc am if query buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> em xx copy vb i ( <ptr> dev <dot> <ptr> buf <dot> <ptr> usb buf <dot> <noptr> len )
<cls> <noptr> exy nos jpeg set encout fmt ( <ptr> base <dot> <noptr> out fmt )
<cls> <noptr> vid ioc enum freq bands ( <ptr> file <dot> <ptr> f h <dot> <ptr> b and )
<cls> <ptr> c x attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> av wait msg state ( <ptr> av <dot> <noptr> flags )
<cls> <noptr> find resolution ( <ptr> sd <dot> <ptr> m f <dot> <ptr> type <dot> <ptr> resolution )
<cls> <noptr> sa ahs set bitrate ( <ptr> client <dot> <ptr> h )
<cls> <noptr> ccp print status ( <ptr> ccp )
<cls> <noptr> stv recv slave reply ( <ptr> fe <dot> <ptr> reply )
<cls> <noptr> mtk vcodec enc ctrls setup ( <ptr> ctx )
<cls> <noptr> fim c resume ( <ptr> dev )
<cls> <noptr> spc ecu n mask tx interrupts ( <ptr> cec )
<cls> <noptr> bt tv gpio enable ( <noptr> card <dot> <noptr> mask <dot> <noptr> data )
<cls> <noptr> z r xx read video callback ( <ptr> cam <dot> <ptr> pipe info <dot> <ptr> pur b )
<cls> <noptr> csi phy lanes disable ( <ptr> csi phy <dot> <ptr> cfg )
<cls> <noptr> mtk jpeg dec set dec mode ( <ptr> base <dot> <noptr> mode )
<cls> <noptr> c x usb gpio tuner ( <ptr> d <dot> <noptr> onoff )
<cls> <noptr> td a lookup cid target ( <ptr> fe <dot> <ptr> freq <dot> <ptr> cid target <dot> <ptr> count limit )
<cls> <noptr> saa video init ( <ptr> dev )
<cls> <noptr> so i a init ( <ptr> gsp ca dev )
<cls> <noptr> initial set ( <ptr> state )
<cls> <noptr> ead ( <ptr> state <dot> <noptr> reg <dot> <ptr> data <dot> <noptr> flags )
<cls> <noptr> sp jpeg runtime resume ( <ptr> dev )
<cls> <noptr> m xls f probe port expander ( <ptr> state )
<cls> <noptr> airs pyg tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <noptr> mtk jpeg verify align ( <noptr> val <dot> <noptr> align <dot> <noptr> reg )
<cls> <noptr> z lic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> init adb hdrs ( <ptr> ctx )
<cls> <noptr> vivid ycbcr enc cap ( <ptr> dev )
<cls> <noptr> saa x write regs ( <ptr> sd <dot> <ptr> regs )
<cls> <noptr> dvb dmx dev feed start ( <ptr> filter )
<cls> <noptr> f m v l vid io cs audio ( <ptr> file <dot> <ptr> priv <dot> <ptr> audio )
<cls> <noptr> ic read regs ( <ptr> adapter <dot> <noptr> adr <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> count )
<cls> <noptr> ds write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> t mir int stop ( <ptr> dev )
<cls> <noptr> m eye irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> d v bring buffer flush spin lock wakeup ( <ptr> r buf )
<cls> <noptr> drop hardware ( )
<cls> <noptr> vivid radios frequency ( <ptr> file <dot> <ptr> p freq <dot> <ptr> v f )
<cls> <noptr> m xls f front end attach m h ( <ptr> adap )
<cls> <noptr> c x der read snr ( <ptr> fe )
<cls> <noptr> j te v post stream off ( <ptr> sensor )
<cls> <noptr> skb a fic write ( <ptr> state <dot> <noptr> addr <dot> <noptr> val )
<cls> <ptr> air spy get next fill buf ( <ptr> s )
<cls> <noptr> bt tv prepare buffer ( <ptr> q <dot> <ptr> b tv <dot> <ptr> buf <dot> <ptr> fmt <dot> <noptr> width <dot> <noptr> height <dot> <noptr> field )
<cls> <noptr> pvr ctrl get cnt ( <ptr> cptr )
<cls> <noptr> msp wake thread ( <ptr> client )
<cls> <noptr> p xac vid ioc enum fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> video buf pages tos g ( <dptr> pages <dot> <noptr> nr pages <dot> <noptr> offset <dot> <noptr> size )
<cls> <noptr> avc tuner status ( <ptr> fdt v <dot> <ptr> stat )
<cls> <noptr> v l minor number show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> stv std vbs single ( <ptr> int p <dot> <noptr> l dpc mode <dot> <noptr> demo d )
<cls> <noptr> tm audio init ( <ptr> dev )
<cls> <noptr> lg dta get front end algo ( <ptr> fe )
<cls> <noptr> six usb driver init ( )
<cls> <noptr> video ics fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> gdi eeprom ( <ptr> core <dot> <ptr> eeprom data )
<cls> <noptr> write attribute mem x o ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> c x try fmt vb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> tv audios routing ( <ptr> sd <dot> <noptr> input <dot> <noptr> output <dot> <noptr> config )
<cls> <noptr> c x function ality ( <ptr> adap )
<cls> <noptr> c x set v co ( <ptr> state )
<cls> <noptr> ssi w ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> ec read reg ( <ptr> state <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> rtl reg map read ( <ptr> context <dot> <ptr> reg buf <dot> <noptr> reg size <dot> <ptr> val buf <dot> <noptr> val size )
<cls> <noptr> exy nos jpeg select dec q tbl ( <ptr> base <dot> <noptr> c <dot> <noptr> x )
<cls> <noptr> new to user ( <ptr> c <dot> <ptr> ctrl )
<cls> <ptr> check hdp vr debug ( )
<cls> <noptr> isp enable interrupts ( <ptr> isp )
<cls> <noptr> c xir stop ( <ptr> priv )
<cls> <noptr> rtl u get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <noptr> vid ioc g fmt vid out m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sms board l na control ( <ptr> core dev <dot> <noptr> onoff )
<cls> <noptr> stv xic gate ctrl ( <ptr> state <dot> <noptr> enable )
<cls> <noptr> configure td a xfe ( <ptr> dev <dot> <ptr> cdec conf <dot> <ptr> tuner conf )
<cls> <noptr> z i log tx duty cycle ( <ptr> dev <dot> <noptr> duty cycle )
<cls> <noptr> stv x chk signal ( <ptr> state )
<cls> <noptr> writer e gfp ( <ptr> client <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> delta g fmt stream ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> is if get pixel format ( )
<cls> <noptr> saa x decode vps ( <ptr> dst <dot> <ptr> p )
<cls> <noptr> cit set brightness ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> td ado config ( <ptr> fe )
<cls> <noptr> r card rif suspend ( <ptr> dev )
<cls> <noptr> ctrl set brightness ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> vivid vid outs ctrl ( <ptr> ctrl )
<cls> <noptr> flite hw set dma buffer ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> h fi session load res done ( <ptr> core <dot> <ptr> inst <dot> <ptr> packet )
<cls> <noptr> t dax find tuner ( <ptr> fe )
<cls> <ptr> imx get hw cfg ( <ptr> dev )
<cls> <noptr> f m r x set mute mode ( <ptr> f m dev <dot> <noptr> mute mode to set )
<cls> <noptr> p xac vid ioc g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> check src dst sizes ( <ptr> ctx )
<cls> <noptr> v l async register fw node sub dev ( <ptr> sd <dot> <noptr> asd struct size <dot> <ptr> ports <dot> <noptr> num ports <dot> <noptr> parse endpoint )
<cls> <noptr> af wr reg mask ( <ptr> d <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> get resource ( <noptr> f type )
<cls> <noptr> em xx set video format ( <ptr> dev <dot> <noptr> fourcc <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> v l f wht encode ( <ptr> state <dot> <ptr> pin <dot> <ptr> pout )
<cls> <noptr> avd i seq c send ( <ptr> av <dot> <noptr> len <dot> <ptr> msg <dot> <noptr> burst )
<cls> <noptr> gpp sk fe send dis eq c burst ( <ptr> fe <dot> <noptr> burst )
<cls> <noptr> td a initialize ( <ptr> chip )
<cls> <noptr> adv bt samsung t dt cdh tuner calc regs ( <ptr> fe <dot> <ptr> pll buf <dot> <noptr> buf len )
<cls> <noptr> stm cec irqhandler ( <noptr> irq <dot> <ptr> arg )
<cls> <noptr> mantis dvb start feed ( <ptr> dvb dmx feed )
<cls> <noptr> c xxx set power mode ( <ptr> dev <dot> <noptr> mode )
<cls> <ptr> sms core translate msg ( <noptr> msg type )
<cls> <noptr> t daa set aud mode ( <ptr> chip <dot> <noptr> mode )
<cls> <noptr> load per instance ( <ptr> inst )
<cls> <noptr> tc get detected timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> six ic driver init ( )
<cls> <noptr> c xxx s frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> bt tv bit get scl ( <ptr> data )
<cls> <noptr> dvb vb is streaming ( <ptr> ctx )
<cls> <noptr> stk ic write reg ( <ptr> dev <dot> <noptr> addr <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> cs ids ctrl ( <ptr> ctrl )
<cls> <noptr> uif get selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> show associate remote ( <ptr> d <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> hack r f copy stream ( <ptr> dev <dot> <ptr> dst <dot> <ptr> src <dot> <noptr> src len )
<cls> <noptr> uvc v l set format ( <ptr> stream <dot> <ptr> fmt )
<cls> <noptr> rc core dvb usb remote init ( <ptr> d )
<cls> <noptr> so los std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std )
<cls> <noptr> h fi session deinit ( <ptr> inst )
<cls> <noptr> r ga buf queue ( <ptr> vb )
<cls> <ptr> vbd cdma buf ops v map ( <ptr> d buf )
<cls> <noptr> solo spar m ( <ptr> file <dot> <ptr> priv <dot> <ptr> sp )
<cls> <noptr> sp cec reset ( <ptr> cec )
<cls> <noptr> px p enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> to bt ( <ptr> sd )
<cls> <noptr> read attribute mem x o ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> cio irq ( <noptr> irq <dot> <ptr> cio ptr )
<cls> <noptr> d ibm read word ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> dvb fnc ( <ptr> vb <dot> <ptr> priv )
<cls> <noptr> cec adap un configure ( <ptr> adap )
<cls> <noptr> ptic emit ( <ptr> pt <dot> <noptr> addr <dot> <noptr> busy <dot> <noptr> read enable <dot> <noptr> clock <dot> <noptr> data <dot> <noptr> next addr )
<cls> <noptr> tc gpio reset ( <ptr> state )
<cls> <noptr> sd int pkts can ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> write pc card ( <ptr> c i <dot> <noptr> address <dot> <ptr> data <dot> <noptr> n )
<cls> <noptr> write c reg ( <ptr> c i <dot> <noptr> data <dot> <noptr> mask )
<cls> <noptr> sample cpy ( <ptr> dst <dot> <ptr> src <dot> <noptr> len <dot> <noptr> iss )
<cls> <noptr> mtm get pad selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> c x der read agc gain tt ( <ptr> priv <dot> <noptr> del sys )
<cls> <noptr> d ibm c init ( <ptr> demo d )
<cls> <noptr> e did verify crc ( <ptr> sd <dot> <noptr> segment )
<cls> <noptr> net up jtag io ( <ptr> device <dot> <noptr> tms <dot> <noptr> td i <dot> <noptr> read t do )
<cls> <noptr> mt compute freq ( <ptr> fe <dot> <noptr> r fin <dot> <noptr> if <dot> <noptr> if <dot> <noptr> spectrum from <dot> <noptr> spectrum to <dot> <ptr> buf <dot> <ptr> ret sel <dot> <noptr> x ogc )
<cls> <noptr> uvc parse format ( <ptr> dev <dot> <ptr> streaming <dot> <ptr> format <dot> <dptr> intervals <dot> <ptr> buffer <dot> <noptr> buf len )
<cls> <noptr> rca rfc p platform driver init ( )
<cls> <noptr> preview ioctl ( <ptr> sd <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> stv ter get m clk ( <ptr> state <dot> <noptr> ext cl khz )
<cls> <noptr> v l rot to dss rot ( <noptr> v l rotation <dot> <ptr> rotation <dot> <noptr> mirror )
<cls> <noptr> c xxx irq vb i callback ( <ptr> urb )
<cls> <noptr> tt usb result ( <ptr> tt usb <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> c cdc set win ( <ptr> image win <dot> <noptr> frm fmt <dot> <noptr> ppc )
<cls> <noptr> stv x swal go ( <ptr> state )
<cls> <noptr> ter rate cs frequency ( <ptr> isa <dot> <noptr> freq )
<cls> <noptr> set agc config ( <ptr> priv <dot> <noptr> min <dot> <noptr> max <dot> <noptr> hold loop )
<cls> <noptr> uvc video next buffers ( <ptr> stream <dot> <dptr> video buf <dot> <dptr> meta buf )
<cls> <noptr> dr xxx j get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> mrs read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> v levent src merge ( <ptr> old <dot> <ptr> new )
<cls> <noptr> bt tv d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> b )
<cls> <noptr> cxf lat iron read ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> cam if hw reset ( <ptr> cam if )
<cls> <noptr> cobalt g fmt vid cap ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> f )
<cls> <noptr> s init fe ( <ptr> fe )
<cls> <noptr> nxt x read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> v l print encoder cmd ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> saa pci quirks ( <ptr> dev )
<cls> <noptr> au init tuner ( <ptr> dev )
<cls> <noptr> adv g std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> c x get inversion ( <ptr> state <dot> <ptr> inversion )
<cls> <noptr> any see get rc config ( <ptr> d <dot> <ptr> rc )
<cls> <noptr> tw interrupts disable ( <ptr> dev )
<cls> <ptr> check am sound ( )
<cls> <noptr> ov set gain ( <ptr> ov <dot> <noptr> gain )
<cls> <noptr> v pbe display query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> d ibm reset pll common ( <ptr> state <dot> <ptr> bw )
<cls> <noptr> stax vip resume ( <ptr> pdev )
<cls> <noptr> v fe isr reg update ( <ptr> v fe <dot> <noptr> lineid )
<cls> <noptr> v l stub g jpeg comp ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> adv x fill optional d v timings ( <ptr> timings )
<cls> <noptr> c xcode c settings ( <ptr> dev )
<cls> <noptr> adv xx set offset ( <ptr> sd <dot> <noptr> auto offset <dot> <noptr> offset a <dot> <noptr> offset b <dot> <noptr> offset c )
<cls> <noptr> bt tv crop adjust ( <ptr> c <dot> <ptr> b <dot> <noptr> width <dot> <noptr> height <dot> <noptr> field )
<cls> <noptr> v fe hw version read ( <ptr> v fe <dot> <ptr> dev )
<cls> <noptr> flite hw dump regs ( <ptr> dev <dot> <ptr> label )
<cls> <noptr> c pia dbg dump registers ( <ptr> cam )
<cls> <noptr> et eks stream ( <ptr> sub dev <dot> <noptr> streaming )
<cls> <noptr> imx enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> preview set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> start deb i dma ( <ptr> av <dot> <noptr> dir <dot> <noptr> addr <dot> <noptr> len )
<cls> <noptr> v l stub enum aud out ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> alter aci slot reset ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> ctrl set meter ing ( <ptr> is <dot> <noptr> value )
<cls> <noptr> fim c isp sub dev registered ( <ptr> sd )
<cls> <noptr> c cdc set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> v pbe initialize ( <ptr> dev <dot> <ptr> v pbe dev )
<cls> <noptr> saa bus dump msg ( <ptr> dev <dot> <ptr> m <dot> <ptr> buf )
<cls> <ptr> check m m ols debug ( )
<cls> <noptr> uvc export buffer ( <ptr> queue <dot> <ptr> exp )
<cls> <noptr> calc plane ( <noptr> width <dot> <noptr> height )
<cls> <noptr> sh ve uis r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> isvalid data ( <ptr> ctx <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> c x bit get scl ( <ptr> data )
<cls> <noptr> uvc ctrl add info ( <ptr> dev <dot> <ptr> ctrl <dot> <ptr> info )
<cls> <noptr> r jn set clock ( <ptr> client )
<cls> <noptr> tcs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> td a get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> f m r x set rds mode ( <ptr> f m dev <dot> <noptr> rds end is )
<cls> <noptr> iv tvs std ( <ptr> file <dot> <ptr> f h <dot> <noptr> std )
<cls> <ptr> e tek reg list find type ( <ptr> meta <dot> <noptr> type )
<cls> <noptr> em xx hash mem ( <ptr> buf <dot> <noptr> length <dot> <noptr> bits )
<cls> <noptr> t dax log info frame ( <ptr> sd <dot> <noptr> addr )
<cls> <noptr> omap is pres izer isr ( <ptr> res )
<cls> <noptr> c x set inversion ( <ptr> state <dot> <noptr> inversion )
<cls> <noptr> r cmap register ( <ptr> map )
<cls> <noptr> t dax irq audio ( <ptr> state <dot> <ptr> flags )
<cls> <noptr> l gs gxx get afc phase ( <ptr> priv )
<cls> <noptr> e pu cmd ( <ptr> c x <dot> <noptr> sw )
<cls> <noptr> preview config blk adj ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> uvc query v l ctrl ( <ptr> chain <dot> <ptr> ctrl <dot> <ptr> mapping <dot> <ptr> v l ctrl )
<cls> <noptr> c x init ( <ptr> gsp ca dev )
<cls> <noptr> m x parser c state ( <ptr> d <dot> <noptr> rc state <dot> <ptr> state )
<cls> <noptr> vp ude cip i handler ( <ptr> data <dot> <noptr> len <dot> <ptr> priv )
<cls> <noptr> v l pipeline pm use ( <ptr> entity <dot> <noptr> use )
<cls> <noptr> debug pmt ( <ptr> msg <dot> <noptr> length )
<cls> <noptr> es ctrl ( <ptr> ctrl )
<cls> <noptr> sp jpeg query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> vid ioc try fmt vid cap m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check freq ( )
<cls> <noptr> msp xx g set source ( <ptr> client <dot> <noptr> reg <dot> <noptr> in )
<cls> <noptr> venc set properties ( <ptr> inst )
<cls> <noptr> v prc query ( <ptr> d )
<cls> <noptr> dib set bandwidth ( <ptr> fe <dot> <noptr> bw )
<cls> <noptr> v l print query cap ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> c xs fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> em xx color levels set default ( <ptr> dev )
<cls> <noptr> sync chk ( <ptr> state <dot> <ptr> vir m )
<cls> <noptr> smi app get selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> vim c cap start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> sn div tv pcm trigger ( <ptr> sub stream <dot> <noptr> cmd )
<cls> <noptr> mn set front end ( <ptr> fe )
<cls> <noptr> c i x o attach ( <ptr> port )
<cls> <noptr> six fops read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> d ibm update tim f ( <ptr> state )
<cls> <noptr> rain drv init ( )
<cls> <noptr> csi timing config ( <ptr> isp <dot> <ptr> csi <dot> <ptr> timing )
<cls> <noptr> skb afg frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> pvr ctrl get v lid ( <ptr> cptr )
<cls> <noptr> c x usb medi one num input ( <ptr> file <dot> <ptr> f h <dot> <ptr> inp )
<cls> <noptr> fim c job abort ( <ptr> priv )
<cls> <noptr> c x usb medi on get ( <ptr> dvb dev <dot> <noptr> open type )
<cls> <noptr> saa g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> isc awb work ( <ptr> w )
<cls> <noptr> em xx read reg req len ( <ptr> dev <dot> <noptr> req <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <ptr> get dec codec ops ( )
<cls> <ptr> mt attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> vbd cmap dma buf ( <ptr> mem priv )
<cls> <noptr> air spy disconnect ( <ptr> int f )
<cls> <noptr> video mux set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sd format )
<cls> <noptr> v few m set frame drop period ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> per )
<cls> <noptr> m xlt get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> iv tv g output ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> iv tv pcm work handler ( <ptr> it v )
<cls> <noptr> vivid cap update frame period ( <ptr> dev )
<cls> <noptr> csi recv config ( <ptr> isp <dot> <ptr> csi <dot> <ptr> curr ctrl )
<cls> <noptr> skb af is bound target ( <noptr> target )
<cls> <noptr> wl f mir qthread handler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> vid io cs audio ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> dib restart agc ( <ptr> state )
<cls> <noptr> p xac vid ioc try fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ov detect ( <ptr> sd )
<cls> <noptr> adp get fault ( <ptr> flash )
<cls> <noptr> pvr h dw cpu reset assert ( <ptr> h dw <dot> <noptr> val )
<cls> <noptr> v l query buf ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> mbs to bw ( <ptr> inst <dot> <noptr> mbs <dot> <ptr> avg <dot> <ptr> peak )
<cls> <noptr> it d read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> mtk jpeg dec set pause mcu idx ( <ptr> base <dot> <noptr> idx )
<cls> <noptr> c x g std ( <ptr> file <dot> <ptr> f h <dot> <ptr> std )
<cls> <noptr> os d set zoom ( <ptr> sd <dot> <noptr> layer <dot> <noptr> h zoom <dot> <noptr> v zoom )
<cls> <noptr> c sect pfe driver init ( )
<cls> <noptr> mds update bits ( <ptr> dev <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> tc set hdmi hdc p ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> z r x xvid ioc stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> hdp vr set options ( <ptr> dev )
<cls> <noptr> usb vision probe ( <ptr> int f <dot> <ptr> devid )
<cls> <noptr> start urb transfer ( <ptr> dev )
<cls> <ptr> of get next port ( <ptr> parent <dot> <ptr> prev )
<cls> <ptr> v bdc get user ptr ( <ptr> dev <dot> <noptr> v addr <dot> <noptr> size <dot> <noptr> dma dir )
<cls> <noptr> sh ve u configure ( <ptr> ve u )
<cls> <noptr> port has dr x ks ( <ptr> port )
<cls> <noptr> vbd mas g finish ( <ptr> buf priv )
<cls> <noptr> tuner islocked ( <noptr> status )
<cls> <noptr> pvr s input ( <ptr> file <dot> <ptr> priv <dot> <noptr> inp )
<cls> <ptr> check chroma agc ( )
<cls> <noptr> adv xx isr ( <ptr> sd <dot> <noptr> status <dot> <ptr> handled )
<cls> <noptr> reset ( <ptr> state )
<cls> <noptr> m x pid filter ( <ptr> adap <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> f m irq send int msk cmd ( <ptr> f m dev )
<cls> <noptr> fin tek enable cir irq ( <ptr> fin tek )
<cls> <noptr> m xls f ics w xfer msg ( <ptr> state <dot> <ptr> msg )
<cls> <noptr> venus isvalid state ( <ptr> h dev )
<cls> <noptr> usb vision set audio ( <ptr> usb vision <dot> <noptr> audio channel )
<cls> <noptr> az tuner attach ( <ptr> adap )
<cls> <noptr> cobalt node register ( <ptr> cobalt <dot> <noptr> node )
<cls> <noptr> venc init session ( <ptr> inst )
<cls> <noptr> tt usb ir brightness get ( <ptr> led dev )
<cls> <ptr> check allocators ( )
<cls> <noptr> sun ics i dma register ( <ptr> csi <dot> <noptr> irq )
<cls> <noptr> c xxx set video alternate ( <ptr> dev )
<cls> <noptr> ts open ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> zol trix s stereo ( <ptr> isa <dot> <noptr> stereo )
<cls> <noptr> read pwm ( <ptr> mantis )
<cls> <noptr> m i pid set fmt source ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> dib read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> vb req buf s ( <ptr> q <dot> <ptr> req )
<cls> <noptr> adv s std ( <ptr> sd <dot> <noptr> norm )
<cls> <ptr> check tv antenna ( )
<cls> <noptr> hdp vr config call ( <ptr> dev <dot> <noptr> value <dot> <noptr> val buf )
<cls> <noptr> mantis risc program ( <ptr> mantis )
<cls> <noptr> isp video get selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> vss frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> stv x get car freq ( <ptr> state <dot> <noptr> m clk )
<cls> <noptr> get it vc reg ( <ptr> dev <dot> <noptr> gpio direction <dot> <ptr> val ptr )
<cls> <noptr> ptic end ( <ptr> pt <dot> <noptr> addr )
<cls> <noptr> imon panel key lookup ( <ptr> i ctx <dot> <noptr> code )
<cls> <noptr> imx binning goodness ( <ptr> imx <dot> <noptr> w <dot> <noptr> ask w <dot> <noptr> h <dot> <noptr> ask h <dot> <noptr> flags )
<cls> <noptr> ov set red balance ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> black bird fini ( )
<cls> <noptr> video buf dma map ( <ptr> dev <dot> <ptr> dma )
<cls> <noptr> m bas get blk error ( <ptr> fe <dot> <noptr> layer <dot> <ptr> error <dot> <ptr> count )
<cls> <noptr> ddb unmap ( <ptr> dev )
<cls> <noptr> r jn reg init ( <ptr> client )
<cls> <ptr> check dis eq c method ( )
<cls> <noptr> hdc s probe x ( <ptr> sd )
<cls> <noptr> ir sony decode ( <ptr> dev <dot> <noptr> ev )
<cls> <noptr> v l fw node put link ( <ptr> link )
<cls> <noptr> calc con ( <ptr> output <dot> <ptr> con <dot> <ptr> con <dot> <noptr> flags )
<cls> <noptr> de interlace query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> ptic master xfer ( <ptr> adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <ptr> c cdc get crop ( <ptr> c cdc <dot> <ptr> cfg <dot> <noptr> which )
<cls> <noptr> vivid sdr stu ner ( <ptr> file <dot> <ptr> f h <dot> <ptr> vt )
<cls> <noptr> sh ve u reg write ( <ptr> ve u <dot> <noptr> reg <dot> <noptr> value )
<cls> <ptr> check picc ( )
<cls> <noptr> cobalt sd v timings ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> timings )
<cls> <noptr> skb afs frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> os d start layer ( <ptr> sd <dot> <noptr> layer <dot> <noptr> fb base phys <dot> <noptr> cbc rof st )
<cls> <noptr> dib tuner xfer ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> v l print u ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> tw x g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> dvb bt xx probe ( <ptr> sub )
<cls> <noptr> au is init ( <ptr> dev )
<cls> <noptr> l k dtm write buddy after free ( )
<cls> <noptr> black bird stop codec ( <ptr> dev )
<cls> <noptr> usb vision write reg ( <ptr> usb vision <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> c xxx init ctrl pin status ( <ptr> dev )
<cls> <noptr> mtp set selection ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> v pbe get std info ( <ptr> v pbe dev <dot> <noptr> std id )
<cls> <noptr> pvr read register ( <ptr> h dw <dot> <noptr> reg <dot> <ptr> data )
<cls> <noptr> venus helper get ts metadata ( <ptr> inst <dot> <noptr> timestamp us <dot> <ptr> v buf )
<cls> <noptr> h va try fmt stream ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c x dio spi read reg ( <ptr> io <dot> <noptr> tgt <dot> <noptr> sub address <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> m sig fmt sdr cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> mtk jpeg set dec dst ( <ptr> ctx <dot> <ptr> param <dot> <ptr> dst buf <dot> <ptr> fb )
<cls> <noptr> v pfe poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> z d demo d init ( <ptr> fe )
<cls> <noptr> via cams parm ( <ptr> filp <dot> <ptr> priv <dot> <ptr> parm )
<cls> <noptr> adv x hdmi g pixel aspect ( <ptr> sd <dot> <ptr> aspect )
<cls> <noptr> pvr stream set buffer count ( <ptr> sp <dot> <noptr> cnt )
<cls> <noptr> histo buffer prepare ( <ptr> vb )
<cls> <noptr> exy nos jpeg r start ( <ptr> regs )
<cls> <noptr> pwc set leds ( <ptr> pdev <dot> <noptr> on value <dot> <noptr> off value )
<cls> <noptr> v do await for completion ( <ptr> ctx )
<cls> <noptr> pvr h dw dev ok ( <ptr> h dw )
<cls> <noptr> q mdb init ( <ptr> fe )
<cls> <noptr> me so nao cec irq ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> v uis arid c ( <noptr> sar )
<cls> <noptr> sa air close ( <ptr> rc )
<cls> <noptr> redirect show ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf )
<cls> <ptr> delta stream info str ( <ptr> s <dot> <ptr> str <dot> <noptr> len )
<cls> <noptr> af read of d m registers ( <ptr> d <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> len )
<cls> <noptr> ctrl get hue ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> media entity get fw node pad ( <ptr> entity <dot> <ptr> fw node <dot> <noptr> direction flags )
<cls> <noptr> c pia usb stream resume ( <ptr> cam )
<cls> <noptr> mantis front end shutdown ( <ptr> mantis )
<cls> <noptr> n gene command ( <ptr> dev <dot> <ptr> com )
<cls> <noptr> exy nos jpeg try crop ( <ptr> ctx <dot> <ptr> r )
<cls> <noptr> imon find endpoints ( <ptr> i ctx <dot> <ptr> iface desc )
<cls> <noptr> c x d sleep ( <ptr> fe )
<cls> <noptr> rv ins input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> sd pkts can jang gu ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> net u pic remove ( <ptr> n dev <dot> <noptr> bus num )
<cls> <noptr> seth v flip ( <ptr> gsp ca dev <dot> <noptr> h flip <dot> <noptr> v flip )
<cls> <noptr> rain interrupt ( <ptr> ser io <dot> <noptr> data <dot> <noptr> flags )
<cls> <noptr> exy nos jpeg parse huff tbl ( <ptr> ctx )
<cls> <noptr> vid io cs fmt vb icap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> isp if set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> dib set rfr amp ( <ptr> state <dot> <ptr> cfg )
<cls> <noptr> cod asp arm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> sh vou start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> mtk jpeg stop streaming ( <ptr> q )
<cls> <noptr> l m enable ctrl ( <ptr> flash <dot> <noptr> led no <dot> <noptr> on )
<cls> <noptr> c x usb ddm b streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> av link read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> uvc video clock decode ( <ptr> stream <dot> <ptr> buf <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> pluto irq ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> img ir sony scan code ( <noptr> len <dot> <noptr> raw <dot> <noptr> enabled protocols <dot> <ptr> request )
<cls> <noptr> mt get status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> v pfe g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> sp mfc set dec frame buffer v ( <ptr> ctx )
<cls> <noptr> m write sensor ( <ptr> sd <dot> <noptr> address <dot> <ptr> ic data <dot> <noptr> len )
<cls> <noptr> pkt sys init ( <ptr> pkt <dot> <noptr> arch type )
<cls> <noptr> tw power off ( <ptr> priv )
<cls> <noptr> fmt x set pwr lvl ( <ptr> f m dev <dot> <noptr> new pwr lvl )
<cls> <noptr> vivid thread sdr cap ( <ptr> data )
<cls> <noptr> m cam buffer done ( <ptr> cam <dot> <noptr> frame <dot> <ptr> v buf )
<cls> <noptr> snd cobalt pcm playback open ( <ptr> sub stream )
<cls> <noptr> cam if hw set camera bus ( <ptr> cam if )
<cls> <noptr> au v l resume ( <ptr> dev )
<cls> <noptr> int go ert zel ( <noptr> x <dot> <noptr> n <dot> <noptr> freq )
<cls> <noptr> saa api ic write ( <ptr> bus <dot> <noptr> addr <dot> <noptr> data len <dot> <ptr> data )
<cls> <noptr> nxt x sleep ( <ptr> fe )
<cls> <noptr> rcs i start ( <ptr> priv )
<cls> <noptr> c sect pfe error irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> mtk jpeg enum fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> tt usb boot dsp ( <ptr> tt usb )
<cls> <noptr> pvr h dw cpu f wget ( <ptr> h dw <dot> <noptr> offs <dot> <ptr> buf <dot> <noptr> cnt )
<cls> <noptr> wbc irt x ( <ptr> dev <dot> <ptr> b <dot> <noptr> count )
<cls> <noptr> wq set multicast list ( <ptr> work )
<cls> <noptr> pwc dec decompress ( <ptr> pdev <dot> <ptr> src <dot> <ptr> dst )
<cls> <noptr> cec ioctl ( <ptr> filp <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> isp if select clk mux ( <ptr> isp if <dot> <noptr> int f <dot> <noptr> c sid <dot> <noptr> v fe <dot> <noptr> enable )
<cls> <noptr> uvc status stop ( <ptr> dev )
<cls> <noptr> vid ioc try fmt vid overlay ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> get bit error rate ( <ptr> state <dot> <ptr> ber numerator <dot> <ptr> ber denominator )
<cls> <noptr> v dec g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> s )
<cls> <noptr> uvc event streaming ( <ptr> dev <dot> <ptr> status <dot> <noptr> len )
<cls> <noptr> r card rif g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> skb af set power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> stv set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> sub dev get format ( <ptr> v pfe <dot> <ptr> fmt )
<cls> <noptr> v fe isr sof ( <ptr> v fe <dot> <noptr> lineid )
<cls> <noptr> ska a set awb ( <ptr> ska a <dot> <noptr> awb )
<cls> <noptr> lg dta search ( <ptr> fe )
<cls> <ptr> stb attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <noptr> igu ana irt x ( <ptr> dev <dot> <ptr> tx buf <dot> <noptr> count )
<cls> <noptr> msm v fe sub dev init ( <ptr> cam ss <dot> <ptr> v fe <dot> <ptr> res <dot> <noptr> id )
<cls> <noptr> dvb t calc snr ( <ptr> tn r dmd <dot> <noptr> reg value <dot> <ptr> snr )
<cls> <noptr> pipeline pm power one ( <ptr> entity <dot> <noptr> change )
<cls> <ptr> c sit x get pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ce u enum frame intervals ( <ptr> file <dot> <ptr> f h <dot> <ptr> f ival )
<cls> <noptr> sms dvb update per slices ( <ptr> client <dot> <ptr> p )
<cls> <noptr> radio sig frequency ( <ptr> file <dot> <ptr> p <dot> <ptr> v f )
<cls> <noptr> se write req ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> silent )
<cls> <noptr> uvc ioctl g fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> v l calc aspect ratio ( <noptr> hor landscape <dot> <noptr> vert portrait )
<cls> <noptr> req buf s capture ( <ptr> dev <dot> <ptr> ctx <dot> <ptr> req buf s )
<cls> <noptr> usb d sbr suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> c pia enum input ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> m chip vr j setup ( <noptr> mode )
<cls> <noptr> stv set inversion ( <ptr> state <dot> <noptr> inversion )
<cls> <noptr> aus stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> dtg input ( <ptr> filp <dot> <ptr> p <dot> <ptr> i )
<cls> <noptr> b disp hw update ( <ptr> ctx )
<cls> <noptr> mtv init ( <ptr> gsp ca dev )
<cls> <noptr> v fe isr reset ack ( <ptr> v fe )
<cls> <noptr> snd c x volume put ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> usb vision set video format ( <ptr> usb vision <dot> <noptr> format )
<cls> <noptr> isc try validate formats ( <ptr> isc )
<cls> <noptr> valid service line ( <noptr> field <dot> <noptr> line <dot> <noptr> is pal )
<cls> <noptr> dvb front end get step size ( <ptr> fe )
<cls> <noptr> flex cop pci probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> samsung smt set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> ov calc pixel rate ( <ptr> sensor )
<cls> <noptr> x tune ( <ptr> tn r dmd <dot> <noptr> sys <dot> <noptr> en fef int m tnt ctrl )
<cls> <noptr> d ibm c pid parse ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> cpl d read ( <ptr> cobalt <dot> <noptr> offset )
<cls> <noptr> spc sis pm suspend ( <ptr> dev <dot> <noptr> runtime )
<cls> <noptr> h dw name show ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> fill profile level ( <ptr> cap <dot> <ptr> data <dot> <noptr> num )
<cls> <noptr> radios tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> ska dump registers ( <ptr> sd )
<cls> <noptr> snd c x pcm hw params ( <ptr> sub stream <dot> <ptr> params )
<cls> <ptr> delta frame info str ( <ptr> f <dot> <ptr> str <dot> <noptr> len )
<cls> <noptr> venus helper set color format ( <ptr> inst <dot> <noptr> pix fmt )
<cls> <noptr> norm max w ( <ptr> dev )
<cls> <noptr> ov detect ( <ptr> ov )
<cls> <noptr> smi ic get sda ( <ptr> data )
<cls> <noptr> c x send dis eq c msg ( <ptr> fe <dot> <ptr> cmd )
<cls> <noptr> af wr reg val tab ( <ptr> dev <dot> <ptr> tab <dot> <noptr> tablen )
<cls> <noptr> af sleep ( <ptr> fe )
<cls> <noptr> d v bring buffer write user ( <ptr> r buf <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> sn div tv pcm pointer ( <ptr> sub stream )
<cls> <noptr> or set ts param ( <ptr> fe <dot> <noptr> is punct ured )
<cls> <noptr> mtk jpeg open ( <ptr> file )
<cls> <noptr> d dbset led ( <ptr> dev <dot> <noptr> num <dot> <noptr> val )
<cls> <noptr> saa enum fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vivid stream ings ctrl ( <ptr> ctrl )
<cls> <noptr> cams spm domain off ( <ptr> cam ss <dot> <noptr> id )
<cls> <noptr> snd solo pcm copy user ( <ptr> ss <dot> <noptr> channel <dot> <noptr> pos <dot> <ptr> dst <dot> <noptr> count )
<cls> <noptr> adv g pixel aspect ( <ptr> sd <dot> <ptr> aspect )
<cls> <noptr> rc key down ( <ptr> dev <dot> <noptr> protocol <dot> <noptr> scan code <dot> <noptr> toggle )
<cls> <noptr> x vt c put ( <ptr> x vt c )
<cls> <noptr> cobalt als apb pcm data ( <ptr> c obsc <dot> <ptr> pcm data <dot> <noptr> skip <dot> <noptr> samples )
<cls> <noptr> c x restart vb i queue ( <ptr> dev <dot> <ptr> q )
<cls> <noptr> ad bsd v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> c ill reset ( <ptr> c i buf <dot> <ptr> file <dot> <noptr> slots <dot> <ptr> slot )
<cls> <noptr> c sect pfe probe ( <ptr> pdev )
<cls> <noptr> as x context rsp parse ( <ptr> p rsp <dot> <noptr> procid )
<cls> <noptr> dts top streaming ( <ptr> q )
<cls> <noptr> wl f m vid io cs audio ( <ptr> file <dot> <ptr> priv <dot> <ptr> audio )
<cls> <ptr> check sample period ( )
<cls> <noptr> flex cop pass dmx packets ( <ptr> fc <dot> <ptr> buf <dot> <noptr> no )
<cls> <noptr> stb get bandwidth ( <ptr> fe <dot> <ptr> bandwidth )
<cls> <noptr> g sch w set in image rgb ( <ptr> ctx )
<cls> <noptr> pvr v lio setup ( <ptr> f h )
<cls> <noptr> v l print ext controls ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> x c set config ( <ptr> fe <dot> <ptr> priv cfg )
<cls> <noptr> tw fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c x usb medi on v complete handle urb ( <ptr> c x dev <dot> <ptr> aux buf reset )
<cls> <noptr> isp video try fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> adv xx setup format ( <ptr> state )
<cls> <noptr> rtl update bits ( <ptr> client <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> lme identify state ( <ptr> d <dot> <dptr> name )
<cls> <ptr> check jpeg enable ( )
<cls> <noptr> cobalt alsa announce pcm data ( <ptr> c obsc <dot> <ptr> pcm data <dot> <noptr> skip <dot> <noptr> samples )
<cls> <noptr> de interlace runtime suspend ( <ptr> device )
<cls> <noptr> t efs tuner ( <ptr> sd <dot> <ptr> v )
<cls> <noptr> fim c lite sub dev get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> x c signal ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> ic is read busy ( <ptr> ic adap )
<cls> <noptr> skb af rescale ( <ptr> r <dot> <ptr> v <dot> <ptr> n <dot> <ptr> d )
<cls> <noptr> ce u runtime resume ( <ptr> dev )
<cls> <noptr> locked gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> imx identify module ( <ptr> imx )
<cls> <noptr> e tek close ( <ptr> sd <dot> <ptr> f h )
<cls> <noptr> sp jpeg input raw mode ( <ptr> regs <dot> <noptr> mode )
<cls> <noptr> check array args ( <noptr> cmd <dot> <ptr> p arg <dot> <ptr> array size <dot> <dptr> user ptr <dot> <dptr> kernel ptr )
<cls> <noptr> td a powers can ( <ptr> fe <dot> <ptr> freq in <dot> <ptr> freq out )
<cls> <noptr> saa enable overlay ( <ptr> f h )
<cls> <noptr> vpx usb driver init ( )
<cls> <noptr> v l m m ioctl d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> saa bus get ( <ptr> dev <dot> <ptr> msg <dot> <ptr> buf <dot> <noptr> peek only )
<cls> <noptr> m m ols irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> v l ctrl request setup ( <ptr> req <dot> <ptr> main hdl )
<cls> <ptr> totp g ( <ptr> sub dev )
<cls> <noptr> video ic driver init ( )
<cls> <ptr> check c i bitrate ( )
<cls> <noptr> adv xx read info frame ( <ptr> sd <dot> <noptr> index <dot> <ptr> frame )
<cls> <noptr> em x xic timeout ( <ptr> dev )
<cls> <noptr> descriptor list loopback ( <ptr> desc )
<cls> <noptr> af tua tuner callback ( <ptr> d <dot> <noptr> cmd <dot> <noptr> arg )
<cls> <noptr> ctrl cxx set ( <ptr> cptr <dot> <noptr> m <dot> <noptr> v )
<cls> <noptr> vb icap buf request complete ( <ptr> vb )
<cls> <noptr> mtk mdp m m queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> isp video try fmt ( <ptr> isp <dot> <ptr> pix m <dot> <dptr> fmt )
<cls> <noptr> sp jpeg compressed size ( <ptr> regs )
<cls> <ptr> vb plane v addr ( <ptr> vb <dot> <noptr> plane no )
<cls> <noptr> get stereo ( <ptr> dev )
<cls> <noptr> v lg ext ctrls ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> sh get status bits ( <ptr> state )
<cls> <noptr> venus helper set multi stream ( <ptr> inst <dot> <noptr> out en <dot> <noptr> out en )
<cls> <noptr> tm call fill buf ( <ptr> dev <dot> <noptr> type <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> mtk mdp ctx state isset ( <ptr> ctx <dot> <noptr> mask )
<cls> <noptr> wl f m vid ioc stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> tuner )
<cls> <ptr> x vip graph find dma ( <ptr> x dev <dot> <noptr> port )
<cls> <noptr> usb urb complete ( <ptr> urb )
<cls> <noptr> scm get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> t power x ( <ptr> tn r dmd <dot> <noptr> on )
<cls> <noptr> register formats ( <ptr> delta )
<cls> <noptr> fim c get scaler factor ( <noptr> src <dot> <noptr> tar <dot> <ptr> ratio <dot> <ptr> shift )
<cls> <noptr> bpf rc repeat ( <noptr> sample <dot> <noptr> ur <dot> <noptr> ur <dot> <noptr> ur <dot> <noptr> ur )
<cls> <noptr> video buf status ( <ptr> q <dot> <ptr> b <dot> <ptr> vb <dot> <noptr> type )
<cls> <noptr> coda buf queue ( <ptr> vb )
<cls> <noptr> v l ctrl fill ( <noptr> id <dot> <dptr> name <dot> <ptr> type <dot> <ptr> min <dot> <ptr> max <dot> <ptr> step <dot> <ptr> def <dot> <ptr> flags )
<cls> <noptr> fim c get sensor frame desc ( <ptr> sensor <dot> <ptr> plane fmt <dot> <noptr> num planes <dot> <noptr> try )
<cls> <noptr> cobalt nodes register ( <ptr> cobalt )
<cls> <noptr> dvb ca poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> flex cop usb write ibi reg ( <ptr> fc <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> vid ioc venc g selection ( <ptr> file <dot> <ptr> priv <dot> <ptr> s )
<cls> <ptr> rca rfc p get device ( <ptr> f cp )
<cls> <noptr> samsung smt stv set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> ov get default format ( <ptr> sd <dot> <ptr> format )
<cls> <noptr> ska alog status ( <ptr> sd )
<cls> <noptr> power down vsb ( <ptr> demo d <dot> <noptr> primary )
<cls> <noptr> te f probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> cobalt enum output ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> out )
<cls> <noptr> ce z l front end attach ( <ptr> adap )
<cls> <noptr> saa api get load info ( <ptr> dev <dot> <ptr> i )
<cls> <noptr> pvr stream set callback ( <ptr> sp <dot> <noptr> func <dot> <ptr> data )
<cls> <noptr> show type ( <ptr> class dev <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> fim c prepare dma offset ( <ptr> ctx <dot> <ptr> f )
<cls> <noptr> dst check cap mt ( <ptr> state <dot> <ptr> pca message <dot> <ptr> hw buffer )
<cls> <noptr> c i int fread cam control ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> l gs gl set front end ( <ptr> fe )
<cls> <noptr> ovs fmt ( <ptr> sd <dot> <ptr> m f )
<cls> <noptr> snd tea x write ( <ptr> tea <dot> <noptr> val )
<cls> <noptr> tc master xfer ( <ptr> adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> at b m read status ( <ptr> fe <dot> <ptr> fe status )
<cls> <ptr> spc sis try format ( <ptr> m f )
<cls> <ptr> check rgb on ( )
<cls> <noptr> c x video irq ( <ptr> dev <dot> <noptr> chan num <dot> <noptr> status )
<cls> <noptr> r bsp write bits ( <ptr> r bsp <dot> <noptr> num <dot> <noptr> value )
<cls> <noptr> iv tv audio set io ( <ptr> it v )
<cls> <noptr> m cam v bre queue buf s ( <ptr> v q <dot> <noptr> state )
<cls> <noptr> sts ctrl ( <ptr> ctrl )
<cls> <noptr> c x alsa init callback ( <ptr> dev <dot> <ptr> data )
<cls> <noptr> ccd cls c busy ( <ptr> c cdc )
<cls> <noptr> bs init ( <ptr> s <dot> <ptr> buf <dot> <noptr> size )
<cls> <noptr> de interlace enum frame sizes ( <ptr> file <dot> <ptr> priv <dot> <ptr> f size )
<cls> <noptr> start cif cam ( <ptr> gsp ca dev )
<cls> <noptr> is tuner ( <ptr> dev <dot> <ptr> bus <dot> <ptr> msg <dot> <noptr> tuner type )
<cls> <noptr> tvp g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> a fwrite tuner registers ( <ptr> d <dot> <noptr> reg <dot> <ptr> values <dot> <noptr> len )
<cls> <noptr> intensity to led brightness ( <ptr> ctrl <dot> <noptr> intensity )
<cls> <noptr> z d demo dic master xfer ( <ptr> adapter <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> fim c lite stream off ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> ete kic read reg ( <ptr> client <dot> <noptr> data length <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> dib p demo d reset ( <ptr> state )
<cls> <noptr> solo mpe config ( <ptr> solo dev )
<cls> <noptr> mantis dma start ( <ptr> mantis )
<cls> <noptr> ov reg read ( <ptr> client <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> cec read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> c x dt nr dmd gpio read ( <ptr> tn r dmd <dot> <noptr> id <dot> <ptr> value )
<cls> <noptr> avc tuner get ts ( <ptr> fdt v )
<cls> <noptr> alter aci slot ts ctl ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> vb core queue init ( <ptr> q )
<cls> <noptr> sp mfc close mfc inst ( <ptr> dev <dot> <ptr> ctx )
<cls> <noptr> imx g frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> dib set sub channel p rbs ( <ptr> state <dot> <noptr> init p rbs )
<cls> <noptr> tw video init ( <ptr> dev )
<cls> <noptr> pkt session set property xx ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> ptype <dot> <ptr> p data )
<cls> <noptr> af reg map read ( <ptr> context <dot> <ptr> reg buf <dot> <noptr> reg size <dot> <ptr> val buf <dot> <noptr> val size )
<cls> <noptr> grun dig tuner set params ( <ptr> fe )
<cls> <noptr> de interlace queue cleanup ( <ptr> v q <dot> <noptr> state )
<cls> <noptr> afe read byte ( <ptr> dev <dot> <noptr> saddr <dot> <ptr> data )
<cls> <noptr> dib download firmware ( <ptr> udev <dot> <ptr> fw )
<cls> <noptr> sh vou init ( )
<cls> <noptr> j pu enum fmt out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> v l m m poll ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> wait )
<cls> <noptr> omap v out prepare vrf b ( <ptr> v out <dot> <ptr> vb )
<cls> <noptr> m eye io cs params ( <ptr> jp )
<cls> <noptr> iv tv g frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> upd read ( <ptr> sd <dot> <noptr> reg )
<cls> <noptr> v pbe get mode info ( <ptr> v pbe dev <dot> <ptr> mode <dot> <noptr> output index )
<cls> <noptr> dr x check firmware ( <ptr> demo d <dot> <ptr> m c data <dot> <noptr> size )
<cls> <noptr> c x input r xwork handler ( <ptr> dev <dot> <noptr> events )
<cls> <noptr> solo pmd made sc ( <ptr> solo dev <dot> <ptr> desc <dot> <noptr> desc dma <dot> <noptr> desc cnt )
<cls> <noptr> au card setup ( <ptr> dev )
<cls> <noptr> me so nao cec wait busy ( <ptr> ao cec )
<cls> <noptr> sdp write and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> m i pid configure clk lane ( <ptr> bridge )
<cls> <noptr> tc num csi lanes needed ( <ptr> sd )
<cls> <noptr> fim c is cpu set power ( <ptr> is <dot> <noptr> on )
<cls> <noptr> l gs init ( <ptr> priv )
<cls> <noptr> find res type ( <noptr> code )
<cls> <noptr> tvp query std ( <ptr> sd <dot> <ptr> std id )
<cls> <noptr> c xxx m box func ( <ptr> priv <dot> <noptr> command <dot> <noptr> in <dot> <noptr> out <dot> <noptr> data )
<cls> <noptr> vb core d q buf ( <ptr> q <dot> <ptr> p index <dot> <ptr> pb <dot> <noptr> non blocking )
<cls> <noptr> sn div tv pcm ioctl ( <ptr> sub stream <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> dib read lock ( <ptr> fe )
<cls> <noptr> mtk v dec worker ( <ptr> work )
<cls> <noptr> parse token ( <ptr> ptr <dot> <noptr> len <dot> <ptr> val ptr <dot> <ptr> names <dot> <noptr> name cnt )
<cls> <noptr> v bdc finish ( <ptr> buf priv )
<cls> <noptr> repeat period ( <noptr> protocol )
<cls> <noptr> size to scale ( <ptr> dev <dot> <noptr> width <dot> <noptr> height <dot> <ptr> h scale <dot> <ptr> v scale )
<cls> <noptr> pvr hd wget eeprom addr ( <ptr> h dw )
<cls> <ptr> v pbe current encoder info ( <ptr> v pbe dev )
<cls> <noptr> usb cypress write mem ( <ptr> udev <dot> <noptr> addr <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> img iris r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> altera poll c is lot status ( <ptr> en <dot> <noptr> slot <dot> <noptr> open )
<cls> <noptr> scc ami fopen ( <ptr> file )
<cls> <noptr> d m read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> exy nos jpeg set jpeg addr ( <ptr> ctx )
<cls> <noptr> vp uip i register ( <ptr> pdev <dot> <noptr> id <dot> <noptr> handler <dot> <ptr> name <dot> <ptr> priv )
<cls> <noptr> exy nos jpeg proc mode ( <ptr> regs <dot> <noptr> mode )
<cls> <noptr> collect channels ( <ptr> fdt v <dot> <ptr> pid c <dot> <noptr> pid )
<cls> <noptr> prepare dma buf ( <ptr> vb )
<cls> <noptr> tv audios tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> c ecs mode ( <ptr> adap <dot> <ptr> f h <dot> <ptr> p arg )
<cls> <noptr> v dec output conf ( <ptr> inst )
<cls> <noptr> reg read ( <ptr> state <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> c x der tunes ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> vim m buf prepare ( <ptr> vb )
<cls> <noptr> via cam ctl r image ( <ptr> cam )
<cls> <noptr> c cdc get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> rep read ( <ptr> sd <dot> <noptr> reg )
<cls> <ptr> mtm find mode ( <ptr> mtm <dot> <noptr> req fps <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> v l stub d v timings cap ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> dr x k set parameters ( <ptr> fe )
<cls> <noptr> video buf queues g init ( <ptr> q <dot> <ptr> ops <dot> <ptr> dev <dot> <ptr> irq lock <dot> <noptr> type <dot> <noptr> field <dot> <noptr> m size <dot> <ptr> priv <dot> <ptr> ext lock )
<cls> <noptr> af get statistic ( <ptr> fe )
<cls> <noptr> dib p auto search is irq ( <ptr> demo d )
<cls> <noptr> mantis d max fer ( <noptr> data )
<cls> <noptr> ov parsed t ( <ptr> dev <dot> <ptr> info )
<cls> <noptr> su streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> saa set vps ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> uvc scan chain forward ( <ptr> chain <dot> <ptr> entity <dot> <ptr> prev )
<cls> <noptr> regr ( <ptr> sd <dot> <noptr> index )
<cls> <noptr> st vdi seq c init ( <ptr> fe )
<cls> <noptr> parse hex line ( <ptr> fw data <dot> <ptr> addr <dot> <ptr> data <dot> <ptr> data length <dot> <ptr> addr has changed )
<cls> <noptr> saa hw init ( <ptr> dev )
<cls> <noptr> video buf queue cancel ( <ptr> q )
<cls> <noptr> mtk jpeg do parse ( <ptr> param <dot> <ptr> src add rva <dot> <noptr> src size )
<cls> <noptr> vp dma get list stat ( <ptr> vp dma <dot> <noptr> irq num )
<cls> <noptr> bpf rc key down ( <noptr> sample <dot> <noptr> protocol <dot> <noptr> scan code <dot> <noptr> toggle <dot> <noptr> ur )
<cls> <noptr> vi uint r ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> dw vcm resume ( <ptr> dev )
<cls> <noptr> get key pixel view ( <ptr> ir <dot> <ptr> protocol <dot> <ptr> scan code <dot> <ptr> toggle )
<cls> <noptr> mtk jpeg dec set sampling factor ( <ptr> base <dot> <noptr> comp num <dot> <noptr> y w <dot> <noptr> y h <dot> <noptr> u w <dot> <noptr> u h <dot> <noptr> vw <dot> <noptr> vh )
<cls> <noptr> mtk jpeg try fmt vid cap m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> cal stop streaming ( <ptr> v q )
<cls> <noptr> pvr h dw cpu f wget enabled ( <ptr> h dw )
<cls> <noptr> iv tv v l read ( <ptr> filp <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> pos )
<cls> <noptr> init v pbe layer ( <noptr> i <dot> <ptr> disp dev <dot> <ptr> pdev )
<cls> <noptr> m cam dma contig done ( <ptr> cam <dot> <noptr> frame )
<cls> <noptr> saa dvb pause port ( <ptr> port )
<cls> <noptr> coda k fifo sync to device write ( <ptr> ctx )
<cls> <noptr> venus suspend ( <ptr> core )
<cls> <noptr> l gs gxx set mode manual ( <ptr> priv )
<cls> <noptr> isc clk isenabled ( <ptr> hw )
<cls> <ptr> lg attach ( <ptr> config <dot> <ptr> ic adap )
<cls> <noptr> ov x edge ctrl ( <ptr> priv )
<cls> <noptr> vb i out buf request complete ( <ptr> vb )
<cls> <noptr> red rat get firmware rev ( <ptr> r r )
<cls> <noptr> wl f m set rds ( <ptr> radio <dot> <noptr> new mode )
<cls> <noptr> ctrl clear dirty crop w ( <ptr> cptr )
<cls> <noptr> m write bridge ( <ptr> sd <dot> <noptr> address <dot> <noptr> ic data )
<cls> <noptr> vb write ( <ptr> q <dot> <ptr> data <dot> <noptr> count <dot> <ptr> p pos <dot> <noptr> non blocking )
<cls> <noptr> l m led set ctrl ( <ptr> ctrl )
<cls> <noptr> c x init dev ( <ptr> pci dev <dot> <ptr> pci id )
<cls> <noptr> usb tv setup capture ( <ptr> usb tv )
<cls> <noptr> v l ctrl request unbind ( <ptr> obj )
<cls> <ptr> dvb dev node ( <ptr> dev <dot> <ptr> mode )
<cls> <noptr> v l src change event subscribe ( <ptr> f h <dot> <ptr> sub )
<cls> <noptr> usb vision find header ( <ptr> usb vision )
<cls> <noptr> vivid radio tx poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> x c get h sync freq ( <ptr> priv <dot> <ptr> h sync freq hz )
<cls> <noptr> scm set powerline freq ( <ptr> state <dot> <noptr> val )
<cls> <noptr> iv tv v api ( <ptr> it v <dot> <noptr> cmd <dot> <noptr> args )
<cls> <noptr> hi cfg command ( <ptr> state )
<cls> <noptr> red rat enable detector ( <ptr> r r )
<cls> <noptr> coda copy firmware ( <ptr> dev <dot> <ptr> const buf <dot> <noptr> size )
<cls> <noptr> ize ( <ptr> state <dot> <noptr> symbol rate <dot> <noptr> q am size )
<cls> <noptr> omnis g dma start ( <ptr> s <dot> <ptr> desc )
<cls> <noptr> h va queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <ptr> check pids off ( )
<cls> <noptr> br x enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> dst command ( <ptr> state <dot> <ptr> data <dot> <noptr> len )
<cls> <ptr> check metac apn r ( )
<cls> <noptr> helen expon ( <ptr> priv )
<cls> <noptr> pvr upload firmware ( <ptr> h dw )
<cls> <noptr> mba read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> v l clk unlock driver ( <ptr> clk )
<cls> <noptr> r vin group get ( <ptr> vin )
<cls> <noptr> dvb net feed start ( <ptr> dev )
<cls> <noptr> stv x start search ( <ptr> state )
<cls> <noptr> via cam start engine ( <ptr> cam )
<cls> <noptr> j l c get firmware id ( <ptr> gsp ca dev )
<cls> <noptr> a speed video setup video ( <ptr> video )
<cls> <noptr> fmc get freq ( <ptr> f m dev <dot> <ptr> cur tuned frq )
<cls> <noptr> bt make risc ( <ptr> bt )
<cls> <noptr> buffer setup ( <ptr> q <dot> <ptr> count <dot> <ptr> size )
<cls> <noptr> fim c capture resume ( <ptr> fim c )
<cls> <noptr> dvb usb v generic rw locked ( <ptr> d <dot> <ptr> w buf <dot> <noptr> w len <dot> <ptr> r buf <dot> <noptr> r len )
<cls> <noptr> ov enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> v spr wpf enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> pipeline pm power ( <ptr> entity <dot> <noptr> change <dot> <ptr> graph )
<cls> <noptr> dump command io ( <ptr> dev )
<cls> <noptr> d ibm restart agc ( <ptr> state )
<cls> <noptr> img ir set filter ( <ptr> priv <dot> <ptr> filter )
<cls> <ptr> v bdc cookie ( <ptr> buf priv )
<cls> <noptr> iv tv u dma prepare ( <ptr> it v )
<cls> <noptr> ov do get pad format ( <ptr> ov <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c x dvb register ( <ptr> stream )
<cls> <noptr> mca msg next buffer ( <ptr> cam )
<cls> <noptr> cobalt flash probe ( <ptr> cobalt )
<cls> <noptr> tvp x get pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> pvr wm sub dev update ( <ptr> h dw <dot> <ptr> sd )
<cls> <noptr> px am bus bytes per line ( <noptr> width <dot> <ptr> m f )
<cls> <noptr> sp mfc set dec stream buffer v ( <ptr> ctx <dot> <noptr> buf addr <dot> <noptr> start num byte <dot> <noptr> buf size )
<cls> <noptr> v ls fmt ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> init dvb dev ( )
<cls> <noptr> cafe smbus xfer ( <ptr> adapter <dot> <noptr> addr <dot> <noptr> flags <dot> <noptr> rw <dot> <noptr> command <dot> <noptr> size <dot> <ptr> data )
<cls> <noptr> c x probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> x vip graph d main it ( <ptr> x dev )
<cls> <noptr> m tt set power ( <ptr> sub dev <dot> <noptr> on )
<cls> <noptr> show streaming ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> black bird register video ( <ptr> dev )
<cls> <noptr> mds get front end ( <ptr> fe <dot> <ptr> c )
<cls> <ptr> pvr hd wget device identifier ( <ptr> h dw )
<cls> <noptr> vsp video calculate partition ( <ptr> pipe <dot> <ptr> partition <dot> <noptr> div size <dot> <noptr> index )
<cls> <noptr> saa x odd parity ( <noptr> c )
<cls> <noptr> t daa initialize ( <ptr> chip )
<cls> <noptr> atmel isc driver init ( )
<cls> <noptr> sic read reg ( <ptr> state <dot> <noptr> ic addr <dot> <noptr> reg )
<cls> <noptr> ov set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> z l read ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> via came num frame sizes ( <ptr> filp <dot> <ptr> priv <dot> <ptr> sizes )
<cls> <noptr> az read mac addr ( <ptr> adap <dot> <noptr> mac )
<cls> <noptr> avg fps ( <ptr> t )
<cls> <noptr> i crd reg ( <ptr> sd <dot> <noptr> reg <dot> <noptr> n )
<cls> <noptr> ks and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> and v <dot> <noptr> or v )
<cls> <noptr> c xxx dif set standard ( <ptr> dev <dot> <noptr> standard )
<cls> <noptr> call enum d v timings ( <ptr> sd <dot> <ptr> dvt )
<cls> <noptr> vivid grab controls ( <ptr> dev <dot> <noptr> grab )
<cls> <noptr> v dec inst init ( <ptr> inst )
<cls> <ptr> debug f cpc type ( <noptr> ctype )
<cls> <noptr> ov set jpeg timings ( <ptr> sensor <dot> <ptr> mode )
<cls> <noptr> stv ddb init ( <ptr> state )
<cls> <noptr> pvr dvb ctrl feed ( <ptr> dvb dmx feed <dot> <noptr> onoff )
<cls> <noptr> vs pdu insert uif ( <ptr> vsp <dot> <ptr> pipe <dot> <ptr> uif <dot> <ptr> prev <dot> <noptr> prev pad <dot> <ptr> next <dot> <noptr> next pad )
<cls> <noptr> img ir setup raw ( <ptr> priv )
<cls> <noptr> x vip dma stop streaming ( <ptr> v q )
<cls> <noptr> media request object unbind ( <ptr> obj )
<cls> <noptr> is wh g ( <ptr> nv t )
<cls> <noptr> vb ops venc buf prepare ( <ptr> vb )
<cls> <ptr> fim c is str err ( <noptr> error )
<cls> <noptr> fim cmd register platform entities ( <ptr> f md <dot> <ptr> parent )
<cls> <noptr> set auto gain ( <ptr> gsp ca dev )
<cls> <noptr> ccd cls c error handler ( <ptr> c cdc )
<cls> <noptr> v pe buf queue ( <ptr> vb )
<cls> <noptr> d dbport match ic ( <ptr> port )
<cls> <noptr> hdc s start ( <ptr> sd )
<cls> <noptr> stk ic busy wait ( <ptr> dev <dot> <noptr> wait bit mask )
<cls> <ptr> stk next buffer ( <ptr> dev )
<cls> <noptr> h aae wb ioctl ( <ptr> sd <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> do command ( <ptr> gsp ca dev <dot> <noptr> command <dot> <noptr> a <dot> <noptr> b <dot> <noptr> c <dot> <noptr> d )
<cls> <noptr> os denable color key ( <ptr> sd <dot> <noptr> os dwin <dot> <noptr> color key <dot> <noptr> pix fmt )
<cls> <noptr> r card rif stop channel ( <ptr> ch )
<cls> <noptr> v lg parm cap ( <ptr> v dev <dot> <ptr> sd <dot> <ptr> a )
<cls> <ptr> check mute freq ( )
<cls> <ptr> ov to dev ( <ptr> sensor )
<cls> <noptr> stk write ac ( <ptr> dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> set ic page ( <ptr> info <dot> <ptr> client <dot> <noptr> reg )
<cls> <noptr> img ir j vc filter ( <ptr> in <dot> <ptr> out <dot> <noptr> protocols )
<cls> <noptr> solo ic init ( <ptr> solo dev )
<cls> <noptr> sp jpeg power on ( <ptr> regs )
<cls> <noptr> sun i video link validate ( <ptr> link )
<cls> <noptr> it get tx used slots ( <ptr> dev )
<cls> <noptr> pvr enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> vi )
<cls> <noptr> affe init ( <ptr> fe )
<cls> <noptr> s rst ( <ptr> state )
<cls> <noptr> saa overlay ( <ptr> file <dot> <ptr> priv <dot> <noptr> on )
<cls> <ptr> c x dequeue ( <ptr> s <dot> <ptr> q )
<cls> <noptr> dvb bt xx load card ( <ptr> card <dot> <noptr> type )
<cls> <noptr> adb wr ( <ptr> sd <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> m tread signal strength ( <ptr> fe <dot> <ptr> signal strength )
<cls> <noptr> c x get input ( <ptr> c x <dot> <noptr> index <dot> <ptr> input )
<cls> <noptr> ske cg x set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> skb a fic read ( <ptr> state <dot> <noptr> addr )
<cls> <noptr> ddb init boards ( <ptr> dev )
<cls> <noptr> v l spi sub dev init ( <ptr> sd <dot> <ptr> spi <dot> <ptr> ops )
<cls> <noptr> bt tv g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> scratch inc extra ptr ( <ptr> ptr <dot> <noptr> len )
<cls> <noptr> delta try fmt stream ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> cit get clock div ( <ptr> gsp ca dev )
<cls> <noptr> pwc camera power ( <ptr> pdev <dot> <noptr> power )
<cls> <noptr> v pfe query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <ptr> to vpx ( <ptr> sd )
<cls> <noptr> affe power ( <ptr> fe <dot> <noptr> on )
<cls> <noptr> fin tek cir reg write ( <ptr> fin tek <dot> <noptr> val <dot> <noptr> offset )
<cls> <noptr> a vir init ( <ptr> av )
<cls> <noptr> ska a get pix fmt index ( <ptr> ska a <dot> <ptr> m f )
<cls> <noptr> vp fec cdc config raw ( <ptr> c cdc )
<cls> <noptr> dib usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> fim c capture open ( <ptr> file )
<cls> <noptr> x c get signal ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> red rat set timeout ( <ptr> rc dev <dot> <noptr> timeout ns )
<cls> <ptr> check vb i buf s ( )
<cls> <ptr> cec notifier cec adap register ( <ptr> hdmi dev <dot> <ptr> conn name <dot> <ptr> adap )
<cls> <noptr> m xls fic check fifo ( <ptr> state )
<cls> <noptr> sr u enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> ts set tuner r f ( <ptr> fe )
<cls> <noptr> vbd mas g prepare ( <ptr> buf priv )
<cls> <noptr> r ving fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> mt get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> c x set funcs ( <ptr> v dev )
<cls> <noptr> t pgp recalculate colors ( <ptr> tp g )
<cls> <noptr> nodeid ( <ptr> node )
<cls> <noptr> sh ve up drv init ( )
<cls> <ptr> front end to d m dev ( <ptr> fe )
<cls> <noptr> f m r x get b and freq range ( <ptr> f m dev <dot> <ptr> bot freq <dot> <ptr> top freq )
<cls> <noptr> sp jpeg try ctrl ( <ptr> ctrl )
<cls> <noptr> stv xx read bridge ( <ptr> sd <dot> <noptr> address <dot> <ptr> ic data )
<cls> <noptr> init hi ( <ptr> state )
<cls> <noptr> mantis ca write cam ctl ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr <dot> <noptr> data )
<cls> <noptr> coda encoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> ec )
<cls> <noptr> mant ists control ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> print time ( <ptr> s )
<cls> <noptr> sh vsb lookup snr ( <ptr> fe <dot> <ptr> snr <dot> <noptr> v )
<cls> <noptr> sh vou open ( <ptr> file )
<cls> <noptr> twe num frame sizes ( <ptr> file <dot> <ptr> priv <dot> <ptr> f size )
<cls> <noptr> saa resume ( <ptr> pci dev )
<cls> <noptr> t dax set aud mode ( <ptr> chip <dot> <noptr> mode )
<cls> <noptr> v l m m buf queue ( <ptr> m mctx <dot> <ptr> v buf )
<cls> <noptr> m xlt set bw bits ( <ptr> state <dot> <noptr> bw )
<cls> <noptr> g sch w set out image rgb ( <ptr> ctx )
<cls> <noptr> verify preview ( <ptr> dev <dot> <ptr> win <dot> <noptr> try )
<cls> <noptr> media device register entity ( <ptr> m dev <dot> <ptr> entity )
<cls> <noptr> vid io cs fmt sdr cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> lg dta set inversion auto ( <ptr> state <dot> <noptr> enabled )
<cls> <ptr> check tolerance ( )
<cls> <ptr> l irc mode func proto ( <noptr> func id <dot> <ptr> prog )
<cls> <noptr> v l enum std ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> c x usb medi on fet s bus ctrl ( <ptr> fe <dot> <noptr> acquire )
<cls> <noptr> img ir symbol timing ( <ptr> timing <dot> <noptr> tolerance <dot> <noptr> clock hz <dot> <noptr> pd shift <dot> <noptr> w shift )
<cls> <ptr> c x audio register ( <ptr> dev )
<cls> <noptr> vivid rds gen fill ( <ptr> rds <dot> <noptr> freq <dot> <noptr> alt )
<cls> <noptr> preview config h med ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> saa api audio mute ( <ptr> port <dot> <noptr> mute )
<cls> <noptr> c x d ric gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> mtv probe ( <ptr> client <dot> <ptr> did )
<cls> <noptr> trust g signal ( <ptr> isa )
<cls> <noptr> cfg ts pad mux ( <ptr> state <dot> <noptr> enable serial ts )
<cls> <noptr> imx set gain ( <ptr> imx <dot> <noptr> value )
<cls> <noptr> c cdc configure a law ( <ptr> c cdc )
<cls> <noptr> spx correct offsets ( <ptr> state <dot> <ptr> p <dot> <noptr> actual freq )
<cls> <noptr> tx error inj ( <ptr> pin <dot> <noptr> mode offset <dot> <noptr> arg idx <dot> <ptr> arg )
<cls> <ptr> v l dev to radio ( <ptr> d )
<cls> <noptr> x c get frame lines ( <ptr> priv <dot> <ptr> frame lines )
<cls> <noptr> delayed process buf func ( <ptr> work )
<cls> <noptr> stv set ts param ( <ptr> fe <dot> <noptr> is punct ured )
<cls> <noptr> c pia query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> vc )
<cls> <noptr> venus helper vb buf queue ( <ptr> vb )
<cls> <noptr> sun i video buffer queue ( <ptr> vb )
<cls> <noptr> it set carrier params ( <ptr> dev <dot> <noptr> high freq <dot> <noptr> use demo d ulator <dot> <noptr> carrier freq bits <dot> <noptr> allowance bits <dot> <noptr> pulse width bits )
<cls> <noptr> adv xx irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> tx clk tx s max pulse width ( <ptr> c <dot> <noptr> ns <dot> <ptr> divider )
<cls> <noptr> histo get format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ske cg x registered ( <ptr> sd )
<cls> <noptr> c x dt nr dmd dvb t mon snr diver ( <ptr> tn r dmd <dot> <ptr> snr <dot> <ptr> snr main <dot> <ptr> snr sub )
<cls> <ptr> l attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> ak xs std output ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> audio mute ( <ptr> b tv <dot> <noptr> mute )
<cls> <ptr> micro tune attach ( <ptr> fe <dot> <ptr> ic adap <dot> <noptr> ic addr )
<cls> <noptr> tt usb process frame ( <ptr> tt usb <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> c x v len c poll ( <ptr> filp <dot> <ptr> wait )
<cls> <noptr> sh q am lookup snr ( <ptr> fe <dot> <ptr> snr <dot> <noptr> v )
<cls> <ptr> check radio range ( )
<cls> <noptr> au probe i cir ( <ptr> dev )
<cls> <noptr> v fe try crop ( <ptr> line <dot> <ptr> cfg <dot> <ptr> rect <dot> <noptr> which )
<cls> <noptr> m xls f config gpio pins ( <ptr> state <dot> <ptr> gpio cfg )
<cls> <noptr> set line modes ( <ptr> ctx )
<cls> <noptr> td age trx sub c hans ( <ptr> chip )
<cls> <noptr> show model ( <ptr> cd <dot> <ptr> attr <dot> <ptr> buf )
<cls> <noptr> isp pipeline resume ( <ptr> pipe )
<cls> <noptr> wcf ic w ( <ptr> sd <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> dvb net init ( <ptr> adap <dot> <ptr> dvb net <dot> <ptr> dmx )
<cls> <noptr> call enum frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <noptr> r card rif buf s clear ( <dptr> buf <dot> <noptr> bit )
<cls> <noptr> tw log status ( <ptr> sd )
<cls> <noptr> solo motion detected ( <ptr> solo enc )
<cls> <noptr> stk iso chandler ( <ptr> urb )
<cls> <noptr> au ana logic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> dvb dummy fe set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> t dax get e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> ads duo tuner sleep ( <ptr> fe )
<cls> <noptr> u ner ( <noptr> tuner type )
<cls> <noptr> cio queues init ( <ptr> cio )
<cls> <noptr> uvc queue stream off ( <ptr> queue <dot> <noptr> type )
<cls> <noptr> m tms ctrl ( <ptr> ctrl )
<cls> <noptr> jpeg bound align image ( <ptr> ctx <dot> <ptr> w <dot> <noptr> w min <dot> <noptr> w max <dot> <noptr> w align <dot> <ptr> h <dot> <noptr> h min <dot> <noptr> h max <dot> <noptr> h align )
<cls> <noptr> bt device control ( <ptr> bt <dot> <noptr> cmd <dot> <ptr> mp )
<cls> <ptr> vb to j pu buffer ( <ptr> vb )
<cls> <noptr> video buf d main it user ( <ptr> dma <dot> <noptr> direction <dot> <noptr> data <dot> <noptr> size )
<cls> <noptr> ov x get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ov write reg ( <ptr> sensor <dot> <noptr> reg <dot> <noptr> len <dot> <noptr> val )
<cls> <noptr> is px clk re calc rate ( <ptr> hw <dot> <noptr> parent rate )
<cls> <ptr> r ga lookup draw pos ( <ptr> offsets <dot> <noptr> rotate mode <dot> <noptr> mir r mode )
<cls> <noptr> c i int f interrupt ( <noptr> data )
<cls> <noptr> sms board dvb event ( <ptr> client <dot> <noptr> event )
<cls> <noptr> l gdt x read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> stv xx read sensor ( <ptr> sd <dot> <noptr> address <dot> <ptr> value )
<cls> <noptr> em x xic xfer ( <ptr> ic adap <dot> <noptr> msgs <dot> <noptr> num )
<cls> <noptr> c x irt x v l dev notify ( <ptr> sd <dot> <noptr> events )
<cls> <noptr> rc validates can code ( <noptr> proto <dot> <noptr> scan code )
<cls> <noptr> vb ioctl d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> p )
<cls> <noptr> spc sis start stream ( <ptr> state )
<cls> <noptr> bt tv rc timer end ( <ptr> t )
<cls> <noptr> h vas fmt frame ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> d m gpio and or ( <ptr> dev <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> tw get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> gsp ca dev probe ( <ptr> int f <dot> <ptr> id <dot> <ptr> sd desc <dot> <noptr> dev size <dot> <ptr> module )
<cls> <noptr> dib set gpio ( <ptr> d <dot> <noptr> gpio <dot> <noptr> gpio dir <dot> <noptr> gpio val )
<cls> <noptr> saa pack verifier ( <ptr> buf )
<cls> <ptr> find dev ( <ptr> ic adap <dot> <noptr> ic addr )
<cls> <noptr> v l m m exp buf ( <ptr> file <dot> <ptr> m mctx <dot> <ptr> eb )
<cls> <noptr> tm set mute sif ( <ptr> dev <dot> <noptr> mute )
<cls> <noptr> t mic register ( <ptr> dev )
<cls> <noptr> bcm set freq ( <ptr> st <dot> <noptr> freq )
<cls> <noptr> irl irc transmit ir ( <ptr> file <dot> <ptr> buf <dot> <noptr> n <dot> <ptr> p pos )
<cls> <noptr> cam if get scaler factor ( <noptr> src <dot> <noptr> tar <dot> <ptr> ratio <dot> <ptr> shift )
<cls> <noptr> em xx audio setup ( <ptr> dev )
<cls> <noptr> irqhandler ( <noptr> irq <dot> <ptr> devid )
<cls> <noptr> px p soft reset ( <ptr> dev )
<cls> <noptr> vb poll ( <ptr> q <dot> <ptr> file <dot> <ptr> wait )
<cls> <noptr> thom son dtt demo d init ( <ptr> fe )
<cls> <noptr> m log status ( <ptr> sd )
<cls> <noptr> pvr h dw report unlocked ( <ptr> h dw <dot> <noptr> which <dot> <ptr> buf <dot> <noptr> a cnt )
<cls> <noptr> command resume ( <ptr> gsp ca dev )
<cls> <noptr> pvr s std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std )
<cls> <noptr> rtl sdr buf prepare ( <ptr> vb )
<cls> <noptr> lg dta read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> thom son dtt tuner calc regs ( <ptr> fe <dot> <ptr> pll buf <dot> <noptr> buf len )
<cls> <noptr> g scm m try fmt m plane ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> imx set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> h fi session unset buffers ( <ptr> inst <dot> <ptr> bd )
<cls> <noptr> vivid cec find dest adap ( <ptr> dev <dot> <ptr> adap <dot> <noptr> dest )
<cls> <noptr> mtk jpeg pm resume ( <ptr> dev )
<cls> <noptr> sa ahs get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> a fwrite word agc ( <ptr> d <dot> <noptr> reg hi <dot> <noptr> reg lo <dot> <noptr> pos <dot> <noptr> len <dot> <noptr> value )
<cls> <noptr> v dec if init ( <ptr> ctx <dot> <noptr> fourcc )
<cls> <noptr> gos ctrl ( <ptr> ctrl )
<cls> <noptr> init format ( <ptr> fmt )
<cls> <ptr> video buf queue to v addr ( <ptr> q <dot> <ptr> buf )
<cls> <noptr> store filter ( <ptr> device <dot> <ptr> attr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> igu an air probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> clamp roundup ( <noptr> x <dot> <noptr> min <dot> <noptr> max <dot> <noptr> alignment )
<cls> <noptr> f vs audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> btc x screen clips ( <noptr> swidth <dot> <noptr> sheight <dot> <ptr> win <dot> <ptr> clips <dot> <noptr> n )
<cls> <ptr> find str ( <ptr> haystack <dot> <noptr> hlen <dot> <ptr> needle <dot> <noptr> n len )
<cls> <noptr> z l read ber ( <ptr> fe <dot> <ptr> ber )
<cls> <noptr> tp g fill buffer ( <ptr> tp g <dot> <noptr> std <dot> <noptr> p <dot> <ptr> v buf )
<cls> <noptr> cod adecoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> dc )
<cls> <noptr> g scm menu m fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> preview config csc ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> m xls f usb driver init ( )
<cls> <noptr> au read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> mtk jpeg queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> skb af set frame interval ( <ptr> state <dot> <ptr> fi )
<cls> <noptr> f m irqhandler ds data get cmd resp ( <ptr> f m dev )
<cls> <noptr> dib cfg gpio ( <ptr> st <dot> <noptr> num <dot> <noptr> dir <dot> <noptr> val )
<cls> <noptr> ks driver init ( )
<cls> <noptr> ks query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> os prey eeprom ( <ptr> b tv <dot> <noptr> ee )
<cls> <noptr> ts probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> sub dev do ioctl lock ( <ptr> file <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> sh ve u stream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <noptr> c pia usb complete ( <ptr> urb )
<cls> <noptr> dcm igraph init ( <ptr> dcm i )
<cls> <noptr> stb do div ( <noptr> n <dot> <noptr> d )
<cls> <noptr> fim c is general irqhandler ( <ptr> is )
<cls> <ptr> iv tv find hw ( <ptr> it v <dot> <noptr> hw )
<cls> <noptr> v pfe driver init ( )
<cls> <noptr> cafe smbus read done ( <ptr> m cam )
<cls> <noptr> sms usb onresponse ( <ptr> urb )
<cls> <noptr> c x streams setup ( <ptr> c x )
<cls> <noptr> v fe reserve wm ( <ptr> v fe <dot> <noptr> lineid )
<cls> <noptr> iv tv api ( <ptr> it v <dot> <noptr> cmd <dot> <noptr> args <dot> <noptr> data )
<cls> <noptr> v l fw node endpoint parse ( <ptr> fw node <dot> <ptr> ve p )
<cls> <noptr> vb wait for done vb ( <ptr> q <dot> <noptr> non blocking )
<cls> <noptr> mantis cas lot reset ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> bt tvs fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> bt tv input fini ( <ptr> b tv )
<cls> <noptr> x c set signal source ( <ptr> priv <dot> <noptr> r f mode )
<cls> <noptr> display close ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> b disp hw build all nodes ( <ptr> ctx )
<cls> <noptr> sp jpeg start streaming ( <ptr> q <dot> <noptr> count )
<cls> <noptr> is register rc ( <ptr> r )
<cls> <noptr> tw video start dma ( <ptr> dev <dot> <ptr> buf )
<cls> <noptr> isc clk prepare ( <ptr> hw )
<cls> <noptr> max set csm mode ( <ptr> ctx <dot> <noptr> new mode )
<cls> <noptr> norm vb i pack ( <noptr> norm )
<cls> <noptr> v l print crop cap ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> nxt x read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> c x v l dev notify init ( <ptr> dev )
<cls> <noptr> dvb net sec callback ( <ptr> buffer <dot> <noptr> buffer len <dot> <ptr> buffer <dot> <noptr> buffer len <dot> <ptr> filter <dot> <ptr> buffer flags )
<cls> <noptr> cpi as fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> boot msp xx ( <ptr> b tv <dot> <noptr> pin )
<cls> <noptr> coda jpeg encode ctrls ( <ptr> ctx )
<cls> <noptr> vb core poll ( <ptr> q <dot> <ptr> file <dot> <ptr> wait )
<cls> <noptr> control tx level invert ( <ptr> dev <dot> <noptr> invert )
<cls> <noptr> alter aci init ( <ptr> config <dot> <noptr> cin r )
<cls> <ptr> notifier to dcm i ( <ptr> n )
<cls> <noptr> fim cli tes selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> v pen c wait venc done ( <ptr> inst )
<cls> <noptr> venc ioctl ( <ptr> sd <dot> <noptr> cmd <dot> <ptr> arg )
<cls> <noptr> bt tv print irq bits ( <noptr> print <dot> <noptr> mark )
<cls> <noptr> v l print frm size enum ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> td a read thermometer ( <ptr> fe )
<cls> <noptr> six radio add new custom ( <ptr> radio <dot> <noptr> idx )
<cls> <ptr> check no comb ( )
<cls> <noptr> pluto probe ( <ptr> pdev <dot> <ptr> ent )
<cls> <noptr> msis tuner ( <ptr> sd <dot> <ptr> v )
<cls> <noptr> au z l front end attach ( <ptr> adap )
<cls> <noptr> uvc ioctl g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> x c get frequency ( <ptr> fe <dot> <ptr> frequency )
<cls> <noptr> video buf d main it ( <ptr> dma )
<cls> <noptr> at b m read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> af wr regs ( <ptr> d <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> check device status ( <ptr> priv )
<cls> <noptr> ic isbusy wait ( <ptr> dev )
<cls> <noptr> dvb usb generic write ( <ptr> d <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> tw x g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> v dec set properties ( <ptr> inst )
<cls> <noptr> v pu dec init ( <ptr> v pu )
<cls> <noptr> c x der set reg bits ( <ptr> priv <dot> <noptr> addr <dot> <noptr> reg <dot> <noptr> data <dot> <noptr> mask )
<cls> <noptr> bt tv g fmt vb icap ( <ptr> file <dot> <ptr> f <dot> <ptr> frt )
<cls> <noptr> v l query ext ctrl ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> stab ilize ( <noptr> a <dot> <noptr> b <dot> <noptr> timeout <dot> <noptr> threshold )
<cls> <noptr> m xls f tuner read reg ( <ptr> state <dot> <noptr> addr <dot> <ptr> data )
<cls> <noptr> sin p ( <noptr> offset )
<cls> <noptr> ir handle key ( <ptr> b tv )
<cls> <noptr> philips cut u ner set params ( <ptr> fe )
<cls> <ptr> v pfe check format ( <ptr> v pfe dev <dot> <ptr> pix fmt )
<cls> <noptr> a identify state ( <ptr> udev <dot> <ptr> props <dot> <dptr> desc <dot> <ptr> cold )
<cls> <noptr> e probe ( <ptr> client <dot> <ptr> id )
<cls> <noptr> c sid set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> vpx fp write ( <ptr> sd <dot> <noptr> fp addr <dot> <noptr> data )
<cls> <noptr> td a set ( <ptr> sd )
<cls> <noptr> mantis front end power ( <ptr> mantis <dot> <noptr> power )
<cls> <noptr> iv tvs ctrl ( <ptr> ctrl )
<cls> <noptr> m tt get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> tt usb stop feed ( <ptr> dvb dmx feed )
<cls> <noptr> vs g frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> lut enum frame size ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <ptr> tuner paramname ( <noptr> type )
<cls> <noptr> ic wr and or ( <ptr> sd <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> val )
<cls> <noptr> req to new ( <ptr> ref )
<cls> <noptr> ves setup reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> inversion )
<cls> <noptr> pt demo d write ( <ptr> adap <dot> <ptr> data <dot> <noptr> num )
<cls> <noptr> vp if try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> me so nir set mask ( <ptr> ir <dot> <noptr> reg <dot> <noptr> mask <dot> <noptr> value )
<cls> <noptr> jp ubound align image ( <ptr> w <dot> <noptr> w min <dot> <noptr> w max <dot> <noptr> w align <dot> <ptr> h <dot> <noptr> h min <dot> <noptr> h max <dot> <noptr> h align )
<cls> <ptr> cit finds of ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> usb tv select input ( <ptr> usb tv <dot> <noptr> input )
<cls> <noptr> me so nao cec irq setup ( <ptr> ao cec <dot> <noptr> enable )
<cls> <noptr> coda read ( <ptr> dev <dot> <noptr> reg )
<cls> <noptr> uvc input init ( <ptr> dev )
<cls> <noptr> c x read ( <ptr> client <dot> <noptr> addr )
<cls> <noptr> init r cmap tan i xtx mini ( )
<cls> <noptr> ad write ( <ptr> coil <dot> <noptr> data )
<cls> <noptr> scc am ifq buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> tw g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> bcm get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <ptr> check model number ( )
<cls> <noptr> m tvs register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> sopen ( <ptr> file )
<cls> <ptr> m cam to cam ( <ptr> m cam )
<cls> <noptr> rcs i confirm start vme ( <ptr> priv )
<cls> <noptr> solo enc g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <ptr> td a attach ( <ptr> fe <dot> <noptr> addr <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> sms core module init ( )
<cls> <noptr> c x lookup fec mod ( <ptr> state <dot> <noptr> d <dot> <noptr> m <dot> <noptr> f )
<cls> <noptr> me son a oce cga transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> invert mode ( <ptr> filter )
<cls> <noptr> format ctx ( <ptr> s <dot> <ptr> ctx )
<cls> <noptr> vivid g fmt vb icap ( <ptr> dev <dot> <ptr> vb i )
<cls> <noptr> pluto get sda ( <ptr> data )
<cls> <noptr> af download firmware new ( <ptr> d <dot> <ptr> fw )
<cls> <noptr> gsp case t default mode ( <ptr> gsp ca dev )
<cls> <noptr> reg w ( <ptr> gsp ca dev <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> j l c read ( <ptr> gsp ca dev )
<cls> <noptr> f m r x set rssi threshold ( <ptr> f m dev <dot> <noptr> rssi lvl to set )
<cls> <noptr> c xvid ioc try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> resizer set filters ( <ptr> res <dot> <ptr> h coeff <dot> <ptr> v coeff )
<cls> <noptr> av fe init ( <ptr> fe )
<cls> <ptr> mtk jpeg find format ( <ptr> ctx <dot> <noptr> pixel format <dot> <noptr> fmt type )
<cls> <noptr> omap is pha af init ( <ptr> isp )
<cls> <noptr> m bas get modulation ( <ptr> state <dot> <noptr> layer )
<cls> <noptr> vb verify memory type ( <ptr> q <dot> <noptr> memory <dot> <noptr> type )
<cls> <noptr> v fe set crop cfg ( <ptr> v fe <dot> <ptr> line )
<cls> <noptr> iv tv yuv prep frame ( <ptr> it v <dot> <ptr> args )
<cls> <noptr> gs query d v timings ( <ptr> sd <dot> <ptr> timings )
<cls> <noptr> m i pid configure from r xspeed ( <ptr> bridge )
<cls> <noptr> cobalt g register ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> reg )
<cls> <ptr> fdp prepare job ( <ptr> ctx )
<cls> <noptr> is if driver init ( )
<cls> <noptr> mtk mdp hw set out size ( <ptr> ctx )
<cls> <noptr> irr c decode init ( )
<cls> <noptr> nv t driver init ( )
<cls> <noptr> sub dev g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> af add ic dev ( <ptr> d <dot> <ptr> type <dot> <noptr> addr <dot> <ptr> platform data <dot> <ptr> adapter )
<cls> <noptr> isc clk determine rate ( <ptr> hw <dot> <ptr> req )
<cls> <ptr> td a attach ( <ptr> config <dot> <ptr> ic <dot> <noptr> pwm )
<cls> <noptr> philips tsa tuner set params ( <ptr> fe )
<cls> <noptr> z r xx prepare ( <ptr> cam )
<cls> <noptr> ma set stereo ( <ptr> radio <dot> <noptr> stereo )
<cls> <noptr> c x wakeup ( <ptr> port <dot> <ptr> q <dot> <noptr> count )
<cls> <noptr> sp micro controller stop ( <ptr> state )
<cls> <noptr> csi get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> c x cancel out work orders ( <ptr> c x )
<cls> <noptr> vsp irqhandler ( <noptr> irq <dot> <ptr> data )
<cls> <noptr> ctrl clear dirty resh or ( <ptr> cptr )
<cls> <noptr> dr xxx j set front end ( <ptr> fe )
<cls> <noptr> a zci slot reset ( <ptr> ca <dot> <noptr> slot )
<cls> <noptr> cxx xic register ( <ptr> bus )
<cls> <noptr> au read reg ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> am gxx read ( <ptr> dev <dot> <noptr> type <dot> <noptr> attr <dot> <noptr> channel <dot> <ptr> val )
<cls> <noptr> msp g tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> n gene ic function ality ( <ptr> adap )
<cls> <noptr> m cam frame complete ( <ptr> cam <dot> <noptr> frame )
<cls> <noptr> fim c is ic runtime resume ( <ptr> dev )
<cls> <noptr> tw x query std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std )
<cls> <noptr> r vin parallel notify bound ( <ptr> notifier <dot> <ptr> sub dev <dot> <ptr> asd )
<cls> <ptr> sd to csi ( <ptr> sd )
<cls> <noptr> aus input ( <ptr> dev <dot> <noptr> index )
<cls> <noptr> scratch put ( <ptr> usb vision <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> adv xx core init ( <ptr> sd )
<cls> <noptr> sh set q am am hum mode ( <ptr> fe )
<cls> <noptr> tt usb dec fed v bt get tune settings ( <ptr> fe <dot> <ptr> fe settings )
<cls> <noptr> ctrl set oob ( <ptr> demo d <dot> <ptr> oob param )
<cls> <noptr> dvb i soc copy ( <ptr> dev <dot> <ptr> urb )
<cls> <noptr> opera usb ic msg xfer ( <ptr> dev <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> emma prp job abort ( <ptr> priv )
<cls> <noptr> fim c sub dev set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> pvr stream buffer count ( <ptr> sp <dot> <noptr> cnt )
<cls> <noptr> wcf configure ( <ptr> sd )
<cls> <ptr> check leds ( )
<cls> <noptr> pvr stream get stats ( <ptr> sp <dot> <ptr> stats <dot> <noptr> zero counts )
<cls> <noptr> d m dma map ( <ptr> dev )
<cls> <noptr> cobalt stop streaming ( <ptr> q )
<cls> <ptr> check dvb power down on sleep ( )
<cls> <noptr> video buf wait on ( <ptr> q <dot> <ptr> vb <dot> <noptr> non blocking <dot> <noptr> intr )
<cls> <noptr> c sid set stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> via cams input ( <ptr> filp <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> max write ( <ptr> ctx <dot> <noptr> idx <dot> <noptr> val )
<cls> <noptr> a uic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> sh ve u enum fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> exy nos jpeg set timer count ( <ptr> base <dot> <noptr> size )
<cls> <noptr> ds send dis eq c msg ( <ptr> fe <dot> <ptr> d )
<cls> <noptr> px b cud init ( <ptr> dev )
<cls> <noptr> sit x tune status ( <ptr> s dev <dot> <noptr> int ack <dot> <ptr> frequency <dot> <ptr> power <dot> <ptr> ant cap <dot> <ptr> noise )
<cls> <noptr> d ibm bic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> c x initstruct ( <ptr> c x )
<cls> <noptr> mtk mdp comp getid ( <ptr> dev <dot> <ptr> node <dot> <noptr> comp type )
<cls> <noptr> isp if get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> uvc buffer queue ( <ptr> vb )
<cls> <noptr> m tic gate ctrl ( <ptr> fe <dot> <noptr> enable )
<cls> <noptr> iv tv irq dec vb ire insert ( <ptr> it v )
<cls> <noptr> c eus fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check tv standard ( )
<cls> <noptr> s mid max fer ( <noptr> data )
<cls> <noptr> solo gpio chip get direction ( <ptr> chip <dot> <noptr> offset )
<cls> <noptr> flite hw set dma window ( <ptr> dev <dot> <ptr> f )
<cls> <noptr> sp jpeg sub sampling mode ( <ptr> regs <dot> <noptr> mode )
<cls> <noptr> node req ( <ptr> fdt v <dot> <noptr> addr <dot> <ptr> data <dot> <noptr> len <dot> <noptr> t code )
<cls> <ptr> t dax attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <ptr> spx attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> ths s stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> fim c lite sub dev set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> sr u enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> set work bit irq save ( <ptr> ctx )
<cls> <noptr> div round integer ( <noptr> x <dot> <noptr> y )
<cls> <noptr> ir resize table ( <ptr> dev <dot> <ptr> r cmap <dot> <noptr> gfp flags )
<cls> <noptr> preview try format ( <ptr> prev <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <noptr> skb af hw patch ( <ptr> state )
<cls> <noptr> firmware download ( <ptr> state <dot> <ptr> m bin <dot> <noptr> m bin len )
<cls> <noptr> dcm igraph notify complete ( <ptr> notifier )
<cls> <noptr> ctrl std detect get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> as x cmd set tune ( <ptr> adap <dot> <ptr> p tune )
<cls> <noptr> bt tv tea x get pins ( <ptr> tea )
<cls> <noptr> t dax g input status ( <ptr> sd <dot> <ptr> status )
<cls> <noptr> snd saa volume put ( <ptr> k control <dot> <ptr> u control )
<cls> <ptr> check r x low carrier freq ( )
<cls> <ptr> check pinn acle remote ( )
<cls> <noptr> ate ( <ptr> state <dot> <noptr> mcl khz )
<cls> <noptr> de interlace buf queue ( <ptr> vb )
<cls> <noptr> saa tuner callback ( <ptr> priv <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> sp mfc clear cmds ( <ptr> dev )
<cls> <noptr> vp fec cdc set params ( <ptr> c cdc <dot> <ptr> params )
<cls> <noptr> omap is pcs iis r ( <ptr> csi )
<cls> <noptr> port has stv ( <ptr> port )
<cls> <noptr> ske cg x init sensor ( <ptr> sd )
<cls> <noptr> vid ioc try selection ( <ptr> file <dot> <ptr> prv <dot> <ptr> s )
<cls> <noptr> sp jpeg try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> uvc ioctl query cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> cap )
<cls> <noptr> v l stub enum audio ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> vid io csh w freq seek ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> mtm update geom timing ( <ptr> sensor )
<cls> <ptr> c xdr attach ( <ptr> config <dot> <ptr> adapter <dot> <ptr> gpio chip base )
<cls> <noptr> coda q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> emulate delivery system ( <ptr> fe <dot> <noptr> del sys )
<cls> <noptr> stv read reg ( <ptr> int p <dot> <noptr> reg )
<cls> <noptr> mci set tuner ( <ptr> fe <dot> <noptr> tuner <dot> <noptr> on )
<cls> <noptr> tw query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> pca set gpio ( <ptr> state <dot> <noptr> gpio <dot> <noptr> val )
<cls> <noptr> adv x csi init ( <ptr> state <dot> <ptr> tx )
<cls> <noptr> pvr g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> vt )
<cls> <noptr> wl f m write fw ( <ptr> core <dot> <ptr> fw <dot> <noptr> len )
<cls> <noptr> v fe get ub size ( <noptr> v f eid )
<cls> <noptr> vid ioc g fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> hii c driver init ( )
<cls> <noptr> stb set bandwidth ( <ptr> fe <dot> <noptr> bandwidth )
<cls> <noptr> c x start v l encode stream ( <ptr> s )
<cls> <noptr> sun ics i buffer mark done ( <ptr> csi <dot> <noptr> slot <dot> <noptr> sequence )
<cls> <noptr> start viv itar cam ( <ptr> gsp ca dev )
<cls> <noptr> net up uni dvb buf prepare ( <ptr> vb )
<cls> <noptr> scc am ifstream on ( <ptr> file <dot> <ptr> priv <dot> <noptr> type )
<cls> <ptr> cro sec cec find hdmi dev ( <ptr> dev <dot> <dptr> conn )
<cls> <noptr> set ctrl ( <ptr> f h <dot> <ptr> ctrl <dot> <noptr> ch flags )
<cls> <noptr> vid ioc enum d v timings ( <ptr> file <dot> <ptr> f h <dot> <ptr> timings )
<cls> <noptr> cal g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> h vag fmt stream ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> v l ctrl del event ( <ptr> sev )
<cls> <noptr> set reg ( <ptr> client <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> fdp vid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> ov get exp ( <ptr> ov <dot> <ptr> ctrl )
<cls> <ptr> vb tom vb ( <ptr> vb )
<cls> <noptr> stb dis eq c init ( <ptr> state )
<cls> <noptr> snd c xxx prepare ( <ptr> sub stream )
<cls> <noptr> v levent src replace ( <ptr> old <dot> <ptr> new )
<cls> <noptr> stv iir filt init ( <ptr> state <dot> <noptr> bandwidth <dot> <noptr> demo d x tal value )
<cls> <noptr> rb spread sev ( <ptr> r bsp <dot> <ptr> val )
<cls> <noptr> sp mfc init hw ops ( <ptr> dev )
<cls> <ptr> or attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> m cam vid io cs register ( <ptr> file <dot> <ptr> priv <dot> <ptr> reg )
<cls> <noptr> fim c register capture device ( <ptr> fim c <dot> <ptr> v l dev )
<cls> <noptr> v few m set subsample ( <ptr> v fe <dot> <noptr> wm )
<cls> <noptr> team ute ( <ptr> radio <dot> <noptr> on )
<cls> <noptr> v l m m ioctl stateless try decoder cmd ( <ptr> file <dot> <ptr> f h <dot> <ptr> dc )
<cls> <noptr> twe num mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> skb af clear error ( <ptr> state )
<cls> <noptr> snd c x switch get ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> hdp vr set bitrate ( <ptr> dev )
<cls> <noptr> ov set mode exposure calc ( <ptr> sensor <dot> <ptr> mode )
<cls> <noptr> saa set output format ( <ptr> dev <dot> <noptr> palette )
<cls> <noptr> fdp queue field ( <ptr> ctx <dot> <ptr> f buf )
<cls> <noptr> gpp sk front end attach ( <ptr> adap )
<cls> <noptr> c xir irqhandler ( <ptr> sd <dot> <noptr> status <dot> <ptr> handled )
<cls> <ptr> check irr c remote gap ( )
<cls> <noptr> msp resume ( <ptr> dev )
<cls> <noptr> mtk mdp m m stop streaming ( <ptr> q )
<cls> <noptr> omap isp preview register entities ( <ptr> prev <dot> <ptr> v dev )
<cls> <noptr> vs pdu pipeline setup br x ( <ptr> vsp <dot> <ptr> pipe )
<cls> <noptr> philip std ax tuner sleep ( <ptr> fe )
<cls> <noptr> sp mfc clock on ( )
<cls> <noptr> wb cir set wakeup filter ( <ptr> rc <dot> <ptr> filter )
<cls> <noptr> isc clk enable ( <ptr> hw )
<cls> <noptr> sms core onresponse ( <ptr> core dev <dot> <ptr> cb )
<cls> <noptr> stm cec driver init ( )
<cls> <noptr> fim c lite clear event counters ( <ptr> fim c )
<cls> <noptr> mtk md pvp u handle init ack ( <ptr> msg )
<cls> <noptr> max write bit ( <ptr> ctx <dot> <noptr> idx <dot> <noptr> bit <dot> <noptr> new val )
<cls> <noptr> adv x hdmi get e did ( <ptr> sd <dot> <ptr> e did )
<cls> <noptr> cams ssub dev notifier complete ( <ptr> async )
<cls> <noptr> d ibm cfe get tune settings ( <ptr> fe <dot> <ptr> tune )
<cls> <noptr> c x der read agc gain c ( <ptr> priv <dot> <noptr> del sys )
<cls> <noptr> via came num fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> fmt )
<cls> <noptr> swp freq calc uation ( <ptr> state <dot> <noptr> i <dot> <noptr> v <dot> <ptr> v <dot> <noptr> vmax <dot> <noptr> vmin <dot> <noptr> sig min <dot> <noptr> fos c <dot> <noptr> afc ex freq <dot> <noptr> swp ofs <dot> <ptr> sig )
<cls> <ptr> v l ctrl request hdl find ( <ptr> req <dot> <ptr> parent )
<cls> <noptr> copy reg bits ( <ptr> reg pair <dot> <ptr> reg pair )
<cls> <noptr> or set parameters ( <ptr> fe )
<cls> <noptr> s rus ctrl ( <ptr> ctrl )
<cls> <noptr> dib ic xfer ( <ptr> adap <dot> <ptr> msg <dot> <noptr> num )
<cls> <noptr> sony b tfm px s std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> dr x dap fas i write reg ( <ptr> dev addr <dot> <noptr> addr <dot> <noptr> data <dot> <noptr> flags )
<cls> <noptr> j pu set tbl ( <ptr> j pu <dot> <noptr> reg <dot> <ptr> tbl <dot> <noptr> len )
<cls> <noptr> isc set pipeline ( <ptr> isc <dot> <noptr> pipeline )
<cls> <noptr> stun e ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <ptr> vb to csi buffer ( <ptr> p )
<cls> <noptr> tc disable e did ( <ptr> sd )
<cls> <noptr> as x cmd turn on ( <ptr> adap )
<cls> <noptr> scc am if sub dev enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <ptr> check enc vb i buffers ( )
<cls> <noptr> dvb sky usb set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> so log parm ( <ptr> file <dot> <ptr> priv <dot> <ptr> sp )
<cls> <noptr> v few ord per line by bytes ( <noptr> bytes per line )
<cls> <noptr> unlock tuner ( <ptr> state )
<cls> <noptr> iv tv dma enc start ( <ptr> s )
<cls> <noptr> h aaf validate params ( <ptr> af <dot> <ptr> new conf )
<cls> <noptr> r vin enum input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> dr x k read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> cec v gpio irqhandler ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> pvr std fill ( <ptr> std <dot> <noptr> id )
<cls> <noptr> hdc s reg write seq ( <ptr> sd <dot> <noptr> reg <dot> <ptr> vals <dot> <noptr> len )
<cls> <noptr> sms core register device ( <ptr> params <dot> <dptr> core dev <dot> <noptr> gfp buf flags <dot> <ptr> m dev )
<cls> <noptr> mpegts configure pins ( <ptr> state <dot> <noptr> mpeg enable )
<cls> <noptr> saa g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> px a camera dma irq v ( <ptr> data )
<cls> <noptr> ov x power off ( <ptr> priv )
<cls> <noptr> stv ter checks y r ( <ptr> state )
<cls> <noptr> fim c get format ( <ptr> frame <dot> <ptr> f )
<cls> <noptr> x vt c generator start ( <ptr> x vt c <dot> <ptr> config )
<cls> <noptr> wcf set crop window ( <ptr> sd )
<cls> <noptr> c x v dev init ( <ptr> core <dot> <ptr> pci <dot> <ptr> v fd <dot> <ptr> template <dot> <ptr> type )
<cls> <noptr> pvr context enter ( <ptr> mp )
<cls> <noptr> cal buffer prepare ( <ptr> vb )
<cls> <noptr> sms core put buffer ( <ptr> core dev <dot> <ptr> cb )
<cls> <ptr> pc dev to dev ( <ptr> pc dev )
<cls> <noptr> m cam vid ioc g register ( <ptr> file <dot> <ptr> priv <dot> <ptr> reg )
<cls> <noptr> dib pread unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> x c sleep ( <ptr> fe )
<cls> <noptr> vb req queue ( <ptr> obj )
<cls> <noptr> c x irr xs parameters ( <ptr> sd <dot> <ptr> p )
<cls> <noptr> six vid ioc enum freq bands ( <ptr> file <dot> <ptr> priv <dot> <ptr> b and )
<cls> <noptr> ov get frame interval ( <ptr> sub dev <dot> <ptr> fi )
<cls> <noptr> vb i close ( <ptr> dev <dot> <ptr> file )
<cls> <noptr> c x v l open ( <ptr> filp )
<cls> <noptr> dib x master ic read ( <ptr> mst <dot> <ptr> msg )
<cls> <noptr> divide ( <noptr> n <dot> <noptr> d <dot> <ptr> quotient i <dot> <ptr> quotient f )
<cls> <noptr> scm fill mbus fmt ( <ptr> m f <dot> <ptr> fs <dot> <noptr> code )
<cls> <noptr> c x usb medi on return buffers ( <ptr> c x dev <dot> <noptr> re queue )
<cls> <noptr> iv tv yuv u dma frame ( <ptr> it v <dot> <ptr> args )
<cls> <ptr> get q data ( <ptr> ctx <dot> <noptr> type )
<cls> <noptr> c cdc enable output tos dram ( <noptr> en )
<cls> <noptr> enable tuner ( <ptr> state <dot> <noptr> tuner <dot> <noptr> enable )
<cls> <ptr> uvc entity byid ( <ptr> dev <dot> <noptr> id )
<cls> <noptr> ov set saturation ( <ptr> ov <dot> <noptr> value )
<cls> <noptr> dib xx tuner sleep ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> ak init controls ( <ptr> dev vcm )
<cls> <noptr> via cam g input ( <ptr> filp <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> dvb video add event ( <ptr> av <dot> <ptr> event )
<cls> <noptr> solo enc set fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ic slave did ack ( <ptr> ic adap )
<cls> <noptr> vb dma contig set max seg size ( <ptr> dev <dot> <noptr> size )
<cls> <noptr> pac write regs ( <ptr> gsp ca dev <dot> <noptr> index <dot> <ptr> buffer <dot> <noptr> length )
<cls> <noptr> pvr dvb front end init ( <ptr> adap )
<cls> <noptr> vim c cap query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> sensor write mask ( <ptr> gsp ca dev <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <ptr> pvr full eeprom fetch ( <ptr> h dw )
<cls> <noptr> isp pipeline enable ( <ptr> pipe <dot> <noptr> mode )
<cls> <noptr> m xlr f driver init ( )
<cls> <noptr> dvb dmx dev init ( <ptr> dmx dev <dot> <ptr> dvb adapter )
<cls> <noptr> mtv g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> dcm i start streaming ( <ptr> v q <dot> <noptr> count )
<cls> <noptr> as usb xfer cmd ( <ptr> bus adap <dot> <ptr> send buf <dot> <noptr> send buf len <dot> <ptr> recvbuf <dot> <noptr> recvbuf len )
<cls> <ptr> check dol by ( )
<cls> <noptr> saas vb i data ( <ptr> sd <dot> <ptr> data )
<cls> <noptr> class check ( <ptr> hdl <dot> <noptr> which )
<cls> <noptr> pvr sub dev set control ( <ptr> h dw <dot> <noptr> id <dot> <ptr> name <dot> <noptr> val )
<cls> <noptr> solo motion config ( <ptr> solo dev )
<cls> <noptr> c eus parm ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> em xx video unregister ( )
<cls> <noptr> upd g register ( <ptr> sd <dot> <ptr> reg )
<cls> <noptr> meta out stop streaming ( <ptr> v q )
<cls> <noptr> af get front end ( <ptr> fe <dot> <ptr> c )
<cls> <noptr> td a set inv w ref ( <ptr> fe <dot> <noptr> sample freq hz <dot> <noptr> bw )
<cls> <noptr> skb af configure regulator s ( <ptr> state )
<cls> <noptr> c xxx api cmd ( <ptr> dev <dot> <noptr> command <dot> <noptr> input cnt <dot> <noptr> output cnt )
<cls> <noptr> bt query std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> fixed get rate ( <ptr> clk )
<cls> <noptr> gs driver init ( )
<cls> <ptr> check type ( )
<cls> <noptr> skb af gpio de assert ( <ptr> state <dot> <noptr> id )
<cls> <ptr> d ibm b attach ( <ptr> config <dot> <ptr> ic <dot> <ptr> xfer ops )
<cls> <noptr> vps s select c cdc source ( <noptr> src sel )
<cls> <noptr> saa dvb stop feed ( <ptr> feed )
<cls> <ptr> cobalt ic regs ( <ptr> cobalt <dot> <noptr> idx )
<cls> <noptr> video user copy ( <ptr> file <dot> <noptr> cmd <dot> <noptr> arg <dot> <noptr> func )
<cls> <noptr> video ic try fmt vid cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> usb vis ionic write ( <ptr> usb vision <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> d m hw init ( <ptr> dev )
<cls> <noptr> ske cg x write ( <ptr> client <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> mtv set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> uvc dequeue buffer ( <ptr> queue <dot> <ptr> buf <dot> <noptr> non blocking )
<cls> <noptr> tw query std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std )
<cls> <noptr> te f sig str ( <ptr> client )
<cls> <noptr> set illum in ators ( <ptr> gsp ca dev <dot> <noptr> top <dot> <noptr> bottom )
<cls> <noptr> vim c cap try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ctx show ( <ptr> s <dot> <ptr> data )
<cls> <ptr> check enc yuv buffers ( )
<cls> <noptr> img iris r raw ( <ptr> priv <dot> <noptr> irq status )
<cls> <noptr> sh ve u req buf s ( <ptr> file <dot> <ptr> priv <dot> <ptr> req buf s )
<cls> <noptr> is px clk calc divider ( <ptr> rate <dot> <noptr> parent rate )
<cls> <noptr> vivid meta cap fill buff ( <ptr> dev <dot> <ptr> buf <dot> <noptr> so e )
<cls> <noptr> aud vb suspend ( <ptr> dev )
<cls> <noptr> cec d qevent ( <ptr> adap <dot> <ptr> f h <dot> <noptr> block <dot> <ptr> p arg )
<cls> <noptr> tvp read ( <ptr> sd <dot> <noptr> addr )
<cls> <noptr> ov xx configure ( <ptr> sd )
<cls> <noptr> flex cop pid control ( <ptr> fc <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> g vb ctv pci audio ( <ptr> b tv <dot> <ptr> t <dot> <noptr> set )
<cls> <noptr> six get register ( <ptr> radio <dot> <noptr> reg nr )
<cls> <noptr> p table copy ( <ptr> buf <dot> <noptr> start <dot> <noptr> size <dot> <noptr> pt pages )
<cls> <noptr> board fly video ( <ptr> dev )
<cls> <ptr> device of ( <ptr> fdt v )
<cls> <noptr> sk as power ( <ptr> sd <dot> <noptr> on )
<cls> <noptr> preview config cfa ( <ptr> prev <dot> <ptr> params )
<cls> <noptr> dvb dummy fe sleep ( <ptr> fe )
<cls> <noptr> solo eeprom e wen ( <ptr> solo dev <dot> <noptr> wen )
<cls> <noptr> m i pid write reg ( <ptr> bridge <dot> <noptr> reg <dot> <noptr> val )
<cls> <noptr> vbd q buf ( <ptr> vb )
<cls> <noptr> msp query std ( <ptr> sd <dot> <ptr> id )
<cls> <noptr> simple config lookup ( <ptr> fe <dot> <ptr> t params <dot> <ptr> frequency <dot> <ptr> config <dot> <ptr> cb )
<cls> <noptr> r vin dma register ( <ptr> vin <dot> <noptr> irq )
<cls> <noptr> video icp m runtime resume ( <ptr> dev )
<cls> <noptr> mn xs tune ( <ptr> chip <dot> <ptr> c )
<cls> <noptr> dib p wakeup ( <ptr> demo d )
<cls> <noptr> cmp break pp connection ( <ptr> fdt v <dot> <noptr> plug <dot> <noptr> channel )
<cls> <noptr> venus helper vb start streaming ( <ptr> inst )
<cls> <noptr> dev node clear ( <ptr> v dev )
<cls> <noptr> omap is ps bl enable ( <ptr> isp <dot> <noptr> res )
<cls> <noptr> chip thread ( <ptr> data )
<cls> <noptr> air star ats c attach ( <ptr> fc <dot> <ptr> ic )
<cls> <noptr> ov x set flip ( <ptr> ov x )
<cls> <noptr> saa irq encoder ( <ptr> port )
<cls> <noptr> scc am if prepare buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> b )
<cls> <noptr> sa ads preset error bit ( <ptr> dev )
<cls> <noptr> int buf s set buffer ( <ptr> inst <dot> <noptr> type )
<cls> <noptr> v pfe stop c cdc capture ( <ptr> v pfe dev )
<cls> <noptr> m i pid get link freq from cid pixel rate ( <ptr> bridge <dot> <ptr> sub dev )
<cls> <noptr> igu an air receiver ( <ptr> ir <dot> <noptr> enable )
<cls> <ptr> check multi planar ( )
<cls> <noptr> am gxx isvisible ( <ptr> drv data <dot> <noptr> type <dot> <noptr> attr <dot> <noptr> channel )
<cls> <noptr> s stop acquire ( <ptr> vc )
<cls> <noptr> d dbport attach ( <ptr> port )
<cls> <noptr> cobalt cpl d set freq ( <ptr> cobalt <dot> <noptr> fout )
<cls> <noptr> vim c cap enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <noptr> vp if query std ( <ptr> file <dot> <ptr> priv <dot> <ptr> std id )
<cls> <ptr> venus helper find buf ( <ptr> inst <dot> <noptr> type <dot> <noptr> idx )
<cls> <noptr> usb tv start ( <ptr> usb tv )
<cls> <noptr> go ic xfer ( <ptr> go <dot> <noptr> addr <dot> <noptr> read <dot> <noptr> command <dot> <noptr> flags <dot> <ptr> data )
<cls> <noptr> seth flip ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <ptr> check tm a mode ( )
<cls> <noptr> dib firmware download ( <ptr> state <dot> <noptr> risc id <dot> <noptr> key <dot> <ptr> code <dot> <noptr> len )
<cls> <noptr> c xvid ioc g fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> vim c sca enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> tw get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> is if open ( <ptr> device )
<cls> <noptr> snd c x switch put ( <ptr> k control <dot> <ptr> value )
<cls> <noptr> imx set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> init r cmap fly dvb ( )
<cls> <noptr> init ( <ptr> c i )
<cls> <noptr> gsp ca buffer finish ( <ptr> vb )
<cls> <noptr> c x g std ( <ptr> sd <dot> <ptr> std )
<cls> <noptr> spc sis get fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> ite driver init ( )
<cls> <noptr> ovs gain ( <ptr> sd <dot> <noptr> value )
<cls> <noptr> mt set d nc output enable ( <ptr> state <dot> <noptr> nvalue )
<cls> <noptr> exy nos jpeg h tbl ac ( <ptr> regs <dot> <noptr> t )
<cls> <noptr> v l dbg g register ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> vbd vbs top feed ( <ptr> feed )
<cls> <noptr> ske cg x power on ( <ptr> priv )
<cls> <noptr> c x buffer prepare ( <ptr> vb )
<cls> <noptr> dvb usb v reset resume ( <ptr> int f )
<cls> <noptr> write hw segment ation data ( <ptr> inst )
<cls> <noptr> c x set gpio pin direction ( <ptr> dev <dot> <noptr> pin number <dot> <noptr> pin logic value )
<cls> <noptr> dib set vga ( <ptr> fe <dot> <noptr> onoff )
<cls> <noptr> b disp ctrls create ( <ptr> ctx )
<cls> <noptr> dib p update tim f ( <ptr> state )
<cls> <noptr> m mol ss ctrl ( <ptr> ctrl )
<cls> <ptr> check mtk v l dbg level ( )
<cls> <noptr> vp ifs std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std id )
<cls> <noptr> wb cir resume ( <ptr> device )
<cls> <noptr> vs set fmt ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> h fi core ping ( <ptr> core )
<cls> <noptr> se set feature ( <ptr> gsp ca dev <dot> <noptr> selector <dot> <noptr> param )
<cls> <noptr> vid ioc v dec g fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> msp write dsp ( <ptr> client <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> usb tx callback ( <ptr> urb )
<cls> <ptr> check flip ( )
<cls> <noptr> fim c lite g selection ( <ptr> file <dot> <ptr> f h <dot> <ptr> sel )
<cls> <noptr> bt tv query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> preview config average r ( <ptr> prev <dot> <noptr> average )
<cls> <noptr> tcs stream ( <ptr> sd <dot> <noptr> enable )
<cls> <noptr> omap isp sub clk enable ( <ptr> isp <dot> <noptr> res )
<cls> <noptr> coda d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> lg x set reg bit ( <ptr> state <dot> <noptr> reg <dot> <noptr> bit <dot> <noptr> onoff )
<cls> <noptr> iv tvf b set var ( <ptr> it v <dot> <ptr> var )
<cls> <noptr> t dax aln again ( <ptr> fe <dot> <noptr> high <dot> <ptr> params )
<cls> <noptr> to pixel rate ( <noptr> f index )
<cls> <noptr> z r x xvid ioc try fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> pvr g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> v f )
<cls> <noptr> fdt v stop iso ( <ptr> fdt v )
<cls> <noptr> cade t set freq ( <ptr> dev <dot> <noptr> freq )
<cls> <noptr> cit model packet ( <ptr> gsp ca dev )
<cls> <noptr> c x dt nr dmd dvb t mon version ( <ptr> tn r dmd <dot> <ptr> ver )
<cls> <noptr> get gpio pin params ( <noptr> pin num <dot> <ptr> p translated pin num <dot> <ptr> p group num <dot> <ptr> p group cfg )
<cls> <noptr> stv xx write sensor bytes ( <ptr> sd <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> adv xx subscribe event ( <ptr> sd <dot> <ptr> f h <dot> <ptr> sub )
<cls> <noptr> p xac vid io cs fmt vid cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> enable input ( <ptr> sd )
<cls> <ptr> check os d left ( )
<cls> <noptr> vpx write block ( <ptr> sd <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> uvc probe video ( <ptr> stream <dot> <ptr> probe )
<cls> <noptr> so log init ( <ptr> solo dev )
<cls> <noptr> x c load ic sequence ( <ptr> fe <dot> <ptr> ic sequence )
<cls> <noptr> vbo psv dec buf prepare ( <ptr> vb )
<cls> <noptr> d m set sda ( <ptr> data <dot> <noptr> state )
<cls> <noptr> uvc register terms ( <ptr> dev <dot> <ptr> chain )
<cls> <ptr> tw select norm ( <noptr> norm <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> v l f h open ( <ptr> filp )
<cls> <noptr> vid ioc g frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> get f rid x ( <ptr> gsp ca dev )
<cls> <noptr> v levent queue f h ( <ptr> f h <dot> <ptr> ev )
<cls> <noptr> venus load fw ( <ptr> core <dot> <ptr> fw name <dot> <ptr> mem phys <dot> <ptr> mem size )
<cls> <noptr> techni sat usb power ctrl ( <ptr> d <dot> <noptr> level )
<cls> <noptr> sp jpeg x ( <ptr> regs <dot> <noptr> x )
<cls> <noptr> cio videog input ( <ptr> file <dot> <ptr> f h <dot> <ptr> input )
<cls> <noptr> me son a oce cga dual div clk enable ( <ptr> hw )
<cls> <noptr> si write property ( <ptr> s dev <dot> <noptr> prop <dot> <noptr> val )
<cls> <noptr> c xxx is blk update power control ( <ptr> dev <dot> <noptr> av mode )
<cls> <noptr> sun ics i set stream ( <ptr> csi <dot> <noptr> enable )
<cls> <noptr> af download firmware ( <ptr> d <dot> <ptr> fw )
<cls> <noptr> send space homebrew ( )
<cls> <noptr> lme enable pid ( <ptr> d <dot> <noptr> index <dot> <noptr> pid out )
<cls> <noptr> v lvb q enable media source ( <ptr> q )
<cls> <noptr> cam if hw set test pattern ( <ptr> cam if <dot> <noptr> pattern )
<cls> <noptr> c xir fini ( <ptr> core )
<cls> <noptr> dvb set m c filter ( <ptr> dev <dot> <ptr> addr )
<cls> <noptr> em dvb init ha upp auge wint v dual hdd vb ( <ptr> dev )
<cls> <noptr> set cfg mem ( <ptr> tn r dmd <dot> <noptr> tgt <dot> <noptr> bank <dot> <noptr> address <dot> <noptr> value <dot> <noptr> bit mask )
<cls> <noptr> alter aci read attribute mem ( <ptr> en <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> ic read n ( <ptr> adapter <dot> <noptr> adr <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> c xs stream vb i fmt ( <ptr> c x hdl <dot> <noptr> fmt )
<cls> <noptr> lg dta set q am ( <ptr> state <dot> <noptr> modulation )
<cls> <noptr> c x v config apply ( <ptr> client )
<cls> <noptr> rc mode ( <ptr> data )
<cls> <noptr> affe refresh state ( <ptr> fe )
<cls> <noptr> h vah w probe ( <ptr> pdev <dot> <ptr> h va )
<cls> <noptr> si register ic adapter ( <ptr> radio )
<cls> <noptr> isp if try format ( <ptr> line <dot> <ptr> cfg <dot> <noptr> pad <dot> <ptr> fmt <dot> <noptr> which )
<cls> <ptr> ec attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> aure start dvb streaming ( <ptr> work )
<cls> <noptr> media poll ( <ptr> filp <dot> <ptr> poll )
<cls> <noptr> vp fec cdc set pixel format ( <ptr> c cdc <dot> <noptr> pix fmt )
<cls> <noptr> cobalt buf prepare ( <ptr> vb )
<cls> <noptr> uvc ctrl fill event ( <ptr> chain <dot> <ptr> ev <dot> <ptr> ctrl <dot> <ptr> mapping <dot> <noptr> value <dot> <noptr> changes )
<cls> <noptr> d ibm b x count ( <ptr> state <dot> <noptr> risc id <dot> <noptr> attr )
<cls> <noptr> dvb usb adapter front end init ( <ptr> adap )
<cls> <noptr> mtk jpeg device run ( <ptr> priv )
<cls> <noptr> ov set power on ( <ptr> ov )
<cls> <noptr> stb wakeup ( <ptr> fe )
<cls> <noptr> ska ag frame interval ( <ptr> sd <dot> <ptr> fi )
<cls> <noptr> c sit x check lanes ( <ptr> c sit x )
<cls> <noptr> dvb cae nread data ( <ptr> ca <dot> <noptr> slot <dot> <ptr> e buf <dot> <noptr> e count )
<cls> <noptr> dst set symbol rate ( <ptr> state <dot> <noptr> s rate )
<cls> <noptr> isp video pix tom bus ( <ptr> pix <dot> <ptr> mbus )
<cls> <noptr> vim c deb enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> set drive strength ( <ptr> state <dot> <noptr> ts drive strength )
<cls> <ptr> tor are mono dev ( <ptr> v l dev )
<cls> <ptr> ipc open param str ( <ptr> p <dot> <ptr> str <dot> <noptr> len )
<cls> <noptr> validate stateless params flags ( <ptr> params <dot> <ptr> cur info )
<cls> <noptr> stk vid ioc query cap ( <ptr> filp <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> pulse width count tons ( <noptr> count <dot> <noptr> divider )
<cls> <noptr> uvc stop streaming ( <ptr> v q )
<cls> <noptr> net up unid vbc is lot ts ctl ( <ptr> en <dot> <noptr> slot )
<cls> <noptr> a speed video init jpeg table ( <ptr> table <dot> <noptr> yuv )
<cls> <noptr> c x setup slice dvb i mdl ( <ptr> c x )
<cls> <noptr> sh vou rega set ( <ptr> vou dev <dot> <noptr> reg <dot> <noptr> value <dot> <noptr> mask )
<cls> <ptr> check test image ( )
<cls> <noptr> irs any o encode ( <noptr> protocol <dot> <noptr> scan code <dot> <ptr> events <dot> <noptr> max )
<cls> <noptr> v pu wdt reg handler ( <ptr> pdev <dot> <ptr> ptr <dot> <ptr> priv <dot> <noptr> id )
<cls> <noptr> a speed video enum format ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> tc set csi ( <ptr> sd )
<cls> <noptr> adv set pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> tvp registered ( <ptr> sd )
<cls> <noptr> c x der set tone ( <ptr> fe <dot> <noptr> tone )
<cls> <noptr> adv xx write block ( <ptr> state <dot> <noptr> client page <dot> <noptr> init reg <dot> <ptr> val <dot> <noptr> val len )
<cls> <noptr> mrs write reg ( <ptr> state <dot> <noptr> reg <dot> <noptr> data )
<cls> <noptr> net u pic init ( <ptr> n dev <dot> <noptr> bus num )
<cls> <ptr> check stv single ( )
<cls> <noptr> r card rif g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> vt )
<cls> <noptr> mci handler ( <ptr> priv )
<cls> <noptr> af pid filter ( <ptr> adap <dot> <noptr> index <dot> <noptr> pid <dot> <noptr> onoff )
<cls> <noptr> sh read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> vp dma enable list complete irq ( <ptr> vp dma <dot> <noptr> irq num <dot> <noptr> list num <dot> <noptr> enable )
<cls> <noptr> em x xir init ( <ptr> dev )
<cls> <noptr> legacy dvb usb get key map index ( <ptr> ke <dot> <ptr> key map <dot> <noptr> key map size )
<cls> <noptr> au media device register ( <ptr> dev <dot> <ptr> udev )
<cls> <noptr> td a need cal onstartup ( <ptr> cfg )
<cls> <noptr> fmc transfer rds from internal buff ( <ptr> f m dev <dot> <ptr> file <dot> <ptr> buf <dot> <noptr> count )
<cls> <noptr> ov x update exposure ctrl ( <ptr> ov x )
<cls> <noptr> usb vision parse compress ( <ptr> usb vision <dot> <ptr> p copy len )
<cls> <noptr> enable irq s ( <ptr> ctx )
<cls> <noptr> stv set symbol rate ( <ptr> fe <dot> <noptr> s rate )
<cls> <noptr> vivid vid caps parm ( <ptr> file <dot> <ptr> priv <dot> <ptr> parm )
<cls> <noptr> mtk v dec unlock ( <ptr> ctx )
<cls> <noptr> bcm read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <noptr> stv gets w loop params ( <ptr> int p <dot> <ptr> frequency inc <dot> <ptr> sw timeout <dot> <ptr> steps <dot> <noptr> demo d )
<cls> <noptr> ctrl isdirty crop w ( <ptr> cptr )
<cls> <ptr> mtk v dec find format ( <ptr> f )
<cls> <noptr> sis end command ( <ptr> s dev <dot> <noptr> command <dot> <noptr> args <dot> <noptr> arg n <dot> <noptr> response <dot> <noptr> resp n <dot> <noptr> use cs )
<cls> <noptr> stk vid ioc enum frame sizes ( <ptr> filp <dot> <ptr> priv <dot> <ptr> frm s )
<cls> <noptr> cobalt gets dnr ( <ptr> sd )
<cls> <noptr> vivid s fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> ccd cls c is configured ( <ptr> c cdc )
<cls> <noptr> opera ic xfer ( <ptr> adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <ptr> stack pop ( <ptr> graph )
<cls> <noptr> mrs send dis eq c msg ( <ptr> fe <dot> <ptr> m )
<cls> <noptr> c x sw irq enable ( <ptr> c x <dot> <noptr> val )
<cls> <noptr> sub dev poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> handle f cp ( <ptr> card <dot> <ptr> request <dot> <noptr> t code <dot> <noptr> destination <dot> <noptr> source <dot> <noptr> generation <dot> <noptr> offset <dot> <ptr> payload <dot> <noptr> length <dot> <ptr> callback data )
<cls> <noptr> v few m enable ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> enable )
<cls> <noptr> typhoon init ( )
<cls> <noptr> usb r x callback int f ( <ptr> urb )
<cls> <noptr> sh ve us fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> cobalt enum input ( <ptr> file <dot> <ptr> priv f h <dot> <ptr> inp )
<cls> <noptr> me son a oce cga dual div clk disable ( <ptr> hw )
<cls> <noptr> temp handler ( <ptr> data )
<cls> <ptr> check radio txn r ( )
<cls> <noptr> stv xx write bridge ( <ptr> sd <dot> <noptr> address <dot> <noptr> ic data )
<cls> <noptr> v lg tuner ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> arg )
<cls> <noptr> pvr buffer set queued ( <ptr> b p )
<cls> <noptr> ov init settings ( <ptr> gsp ca dev )
<cls> <noptr> tango ir handle nec ( <ptr> ir )
<cls> <noptr> gs probe ( <ptr> spi )
<cls> <noptr> de interlace try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> cxx ctrl get menu ( <ptr> p <dot> <noptr> id )
<cls> <noptr> uif enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> pix format set size ( <ptr> f <dot> <ptr> fmt <dot> <noptr> width <dot> <noptr> height )
<cls> <noptr> read regs ( <ptr> state <dot> <noptr> reg <dot> <ptr> val <dot> <noptr> len )
<cls> <noptr> t dax set format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> td area duc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <noptr> pvr g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> stk sensor sleep ( <ptr> dev )
<cls> <noptr> adv xx get format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> f wht decode frame ( <ptr> cf <dot> <noptr> hdr flags <dot> <noptr> components num <dot> <noptr> width <dot> <noptr> height <dot> <ptr> ref <dot> <noptr> ref stride <dot> <noptr> ref chroma stride <dot> <ptr> dst <dot> <noptr> dst stride <dot> <noptr> dst chroma stride )
<cls> <noptr> mantis pci probe ( <ptr> pdev <dot> <ptr> pci id )
<cls> <noptr> stb d vbs gets rate ( <ptr> state )
<cls> <noptr> hevc level ( <noptr> lvl )
<cls> <noptr> iv tv set scl ( <ptr> it v <dot> <noptr> state )
<cls> <noptr> tw power on ( <ptr> priv )
<cls> <noptr> smi port irq ( <ptr> port <dot> <noptr> int status )
<cls> <noptr> ven cout num buffers ( <ptr> inst <dot> <ptr> num )
<cls> <noptr> avc cainfo ( <ptr> fdt v <dot> <ptr> app info <dot> <ptr> len )
<cls> <ptr> hack r f get next buffer ( <ptr> dev <dot> <ptr> buffer list )
<cls> <noptr> vid ioc g mod ulator ( <ptr> file <dot> <ptr> f h <dot> <ptr> a )
<cls> <noptr> ttc i write cam control ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address <dot> <noptr> value )
<cls> <noptr> sun ics i buffer fill slot ( <ptr> csi <dot> <noptr> slot )
<cls> <noptr> vi codec queue setup ( <ptr> v q <dot> <ptr> n buffers <dot> <ptr> n planes <dot> <noptr> sizes <dot> <ptr> alloc devs )
<cls> <noptr> adv dbg dumped id ( <noptr> lvl <dot> <noptr> debug <dot> <ptr> sd <dot> <noptr> segment <dot> <ptr> buf )
<cls> <noptr> mtp restore blc ( <ptr> mtp )
<cls> <noptr> radio is as tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <ptr> v l m mctx init ( <ptr> m m dev <dot> <ptr> drv priv <dot> <ptr> ptr <dot> <ptr> <dot> <ptr> ptr )
<cls> <ptr> sd to msi dev ( <ptr> sd )
<cls> <noptr> sun i sub dev notify complete ( <ptr> notifier )
<cls> <noptr> tws std ( <ptr> file <dot> <ptr> priv <dot> <noptr> std )
<cls> <noptr> c x usb aver streaming ctrl ( <ptr> adap <dot> <noptr> onoff )
<cls> <noptr> gdp drv init ( )
<cls> <noptr> philips sdc i set symbol rate ( <ptr> fe <dot> <noptr> s rate <dot> <noptr> ratio )
<cls> <noptr> ma radio set volume ( <ptr> radio <dot> <noptr> vol to set )
<cls> <noptr> dib fw set component bus speed ( <ptr> fe <dot> <noptr> speed )
<cls> <noptr> saa disable overlay ( <ptr> f h )
<cls> <noptr> dvb filter pest s init ( <ptr> pts <dot> <noptr> pid <dot> <ptr> cb <dot> <ptr> priv )
<cls> <noptr> six set b and ( <ptr> radio <dot> <noptr> b and )
<cls> <noptr> init r cmap geek box ( )
<cls> <ptr> dvb dmx get front ends ( <ptr> demux )
<cls> <noptr> c ecg mode ( <ptr> adap <dot> <ptr> f h <dot> <ptr> p arg )
<cls> <ptr> to snd c x card ( <ptr> v l dev )
<cls> <noptr> isc runtime suspend ( <ptr> dev )
<cls> <noptr> dvb get front end ( <ptr> fe <dot> <ptr> pout )
<cls> <noptr> n gene start ( <ptr> dev )
<cls> <noptr> reg w mask ( <ptr> sd <dot> <noptr> index <dot> <noptr> value <dot> <noptr> mask )
<cls> <noptr> isc clk un prepare ( <ptr> hw )
<cls> <ptr> get enc codec ops ( )
<cls> <noptr> c sit x get pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> copy multiple xed ( <ptr> ptr <dot> <noptr> len <dot> <ptr> urb )
<cls> <noptr> si read snr ( <ptr> fe <dot> <ptr> snr )
<cls> <ptr> x vip get format by fourcc ( <noptr> fourcc )
<cls> <noptr> stb init calc ( <ptr> state )
<cls> <noptr> wcf pkts can ( <ptr> gsp ca dev <dot> <ptr> data <dot> <noptr> len )
<cls> <noptr> c xxx read modify write icd word ( <ptr> dev <dot> <noptr> dev addr <dot> <noptr> saddr <dot> <noptr> mask <dot> <noptr> value )
<cls> <noptr> mtk jpeg job ready ( <ptr> priv )
<cls> <noptr> dvb usb v media device init ( <ptr> adap )
<cls> <ptr> v pfe attach ( <ptr> d )
<cls> <noptr> c cdc set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> mtv hw config ( <ptr> mtv )
<cls> <noptr> x c wait for lock ( <ptr> priv )
<cls> <noptr> stk camera probe ( <ptr> interface <dot> <ptr> id )
<cls> <noptr> dmx section feed release filter ( <ptr> feed <dot> <ptr> filter )
<cls> <noptr> venus hw version ( <ptr> h dev )
<cls> <noptr> vsp entity link setup sink ( <ptr> source pad <dot> <ptr> sink pad <dot> <noptr> flags )
<cls> <noptr> reg w riv ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> index <dot> <noptr> value )
<cls> <noptr> c i int fread attribute mem ( <ptr> ca <dot> <noptr> slot <dot> <noptr> address )
<cls> <noptr> v lbound align image ( <ptr> w <dot> <noptr> w min <dot> <noptr> w max <dot> <noptr> w align <dot> <ptr> h <dot> <noptr> h min <dot> <noptr> h max <dot> <noptr> h align <dot> <noptr> s align )
<cls> <noptr> oper arc query ( <ptr> dev <dot> <ptr> event <dot> <ptr> state )
<cls> <noptr> si set params ( <ptr> fe )
<cls> <noptr> dst get front end ( <ptr> fe <dot> <ptr> p )
<cls> <noptr> em xx dvb fini ( <ptr> dev )
<cls> <noptr> td a calibrate r f ( <ptr> fe <dot> <noptr> freq )
<cls> <noptr> adv set field mode ( <ptr> state )
<cls> <noptr> igu an air resume ( <ptr> int f )
<cls> <noptr> cal clr c ( <ptr> buf <dot> <noptr> len )
<cls> <noptr> stv x set m clk ( <ptr> state <dot> <noptr> m clk <dot> <noptr> clk )
<cls> <ptr> hor usa attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <noptr> stk vid ioc d q buf ( <ptr> filp <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> fly video gpio ( <ptr> b tv )
<cls> <noptr> dvb usb device init ( <ptr> int f <dot> <ptr> props <dot> <ptr> owner <dot> <dptr> du <dot> <ptr> adapter nums )
<cls> <noptr> m xl x sf demo d get fec lock status ( <ptr> state <dot> <ptr> fec lock )
<cls> <noptr> set parameters ( <ptr> fe )
<cls> <noptr> x vip graph init ( <ptr> x dev )
<cls> <noptr> c xs frequency ( <ptr> file <dot> <ptr> f h <dot> <ptr> v f )
<cls> <noptr> set if freq ( <ptr> priv <dot> <noptr> freq )
<cls> <noptr> reset ule ( <ptr> p )
<cls> <noptr> register device ( <ptr> v pbe display layer <dot> <ptr> disp dev <dot> <ptr> pdev )
<cls> <noptr> video try fmt ( <ptr> video <dot> <ptr> f )
<cls> <noptr> scc am if vid io cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> get vsb mer ( <ptr> dev addr <dot> <ptr> mer )
<cls> <noptr> v few m get ping pong status ( <ptr> v fe <dot> <noptr> wm )
<cls> <noptr> ir raw gen manchester ( <dptr> ev <dot> <noptr> max <dot> <ptr> timings <dot> <noptr> n <dot> <noptr> data )
<cls> <noptr> ctrl cxx get v lflags ( <ptr> cptr )
<cls> <noptr> fin tek config mode enable ( <ptr> fin tek )
<cls> <ptr> check dtv input ( )
<cls> <noptr> x vip composite driver init ( )
<cls> <noptr> au tuner callback ( <ptr> priv <dot> <noptr> component <dot> <noptr> command <dot> <noptr> arg )
<cls> <noptr> init all fb lists ( <ptr> inst )
<cls> <ptr> c x handle to stream ( <ptr> c x <dot> <noptr> handle )
<cls> <noptr> em xx vol info ( <ptr> k control <dot> <ptr> info )
<cls> <noptr> h encode pps ( <ptr> inst <dot> <ptr> b sbuf <dot> <ptr> bs size )
<cls> <noptr> skb af writen seq ( <ptr> state <dot> <ptr> n seq )
<cls> <noptr> px adm a stop channels ( <ptr> pc dev )
<cls> <noptr> set stream modes ( <ptr> state <dot> <ptr> p )
<cls> <noptr> fops poll ( <ptr> file <dot> <ptr> wait )
<cls> <noptr> solo is motion on ( <ptr> solo enc )
<cls> <noptr> pvr c x sub dev update ( <ptr> h dw <dot> <ptr> sd )
<cls> <noptr> c x usb ddm b front end attach ( <ptr> adap )
<cls> <noptr> m tread register ( <ptr> state <dot> <noptr> reg )
<cls> <noptr> c x usb mt front end attach ( <ptr> adap )
<cls> <noptr> de interlace enum fmt ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> scc am if vid ioc g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> via came num frame intervals ( <ptr> filp <dot> <ptr> priv <dot> <ptr> interval )
<cls> <noptr> delta ipc cb ( <ptr> r pdev <dot> <ptr> data <dot> <noptr> len <dot> <ptr> priv <dot> <noptr> src )
<cls> <noptr> simple set dvb ( <ptr> fe <dot> <ptr> buf <dot> <noptr> del sys <dot> <noptr> frequency <dot> <noptr> bandwidth )
<cls> <noptr> px pg fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> tt usb dec video pest scb ( <ptr> priv <dot> <ptr> data )
<cls> <ptr> check ich w ( )
<cls> <noptr> t dax write buf ( <ptr> state <dot> <noptr> reg <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> sms core start device ( <ptr> core dev )
<cls> <noptr> set green ( <ptr> gsp ca dev <dot> <noptr> val )
<cls> <noptr> c i of bpt init ( <ptr> cio <dot> <ptr> q )
<cls> <noptr> r vin buffer prepare ( <ptr> vb )
<cls> <ptr> check adjust compression ( )
<cls> <noptr> cxx log status ( <ptr> p <dot> <ptr> prefix )
<cls> <noptr> c ecs phys addr ( <ptr> adap <dot> <noptr> phys addr <dot> <noptr> block )
<cls> <noptr> isc clk re calc rate ( <ptr> hw <dot> <noptr> parent rate )
<cls> <noptr> snd em xx capture open ( <ptr> sub stream )
<cls> <ptr> to x vip entity ( <ptr> asd )
<cls> <noptr> stream zap resume ( <ptr> int f )
<cls> <noptr> mrs set voltage ( <ptr> fe <dot> <noptr> volt )
<cls> <noptr> me son a oce cga dual div clk isenabled ( <ptr> hw )
<cls> <noptr> p wcs input ( <ptr> file <dot> <ptr> f h <dot> <noptr> i )
<cls> <noptr> dvb dummy fe set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> preview params switch ( <ptr> prev )
<cls> <noptr> set low light boost ( <ptr> cam )
<cls> <noptr> cxa v init ( <ptr> c x )
<cls> <ptr> mtk jpeg f h to ctx ( <ptr> f h )
<cls> <noptr> tv audios std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> iv tvf b prep dec dma to device ( <ptr> it v <dot> <noptr> iv tv dest addr <dot> <ptr> user buf <dot> <noptr> size inbytes )
<cls> <noptr> or load firmware ( <ptr> fe <dot> <ptr> fw )
<cls> <noptr> ov x handle button ( <ptr> gsp ca dev <dot> <noptr> state )
<cls> <noptr> sa ahs init ( <ptr> sd <dot> <noptr> leading null bytes )
<cls> <noptr> cur to new ( <ptr> ctrl )
<cls> <noptr> ic gate ctrl ( <ptr> dev <dot> <noptr> val )
<cls> <noptr> or read status ( <ptr> fe <dot> <ptr> status )
<cls> <ptr> check once ( )
<cls> <noptr> tuner afc status ( <noptr> status )
<cls> <noptr> vp if query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> m tread ( <ptr> state <dot> <noptr> sub address <dot> <ptr> p data <dot> <noptr> cnt )
<cls> <noptr> pvr h dw initialize ( <ptr> h dw <dot> <ptr> ptr <dot> <ptr> callback data )
<cls> <noptr> ctrl signal get ( <ptr> cptr <dot> <ptr> vp )
<cls> <ptr> c x der attach tc ( <ptr> cfg <dot> <ptr> ic )
<cls> <noptr> px a camera get formats ( <ptr> v l dev <dot> <noptr> idx <dot> <ptr> x late )
<cls> <ptr> x c assign firmware ( <noptr> chip id )
<cls> <noptr> is if seth wif params ( <ptr> params )
<cls> <noptr> iv tvf b init io ( <ptr> it v )
<cls> <ptr> t dax attach ( <ptr> fe <dot> <noptr> addr <dot> <ptr> ic <dot> <noptr> has loop through )
<cls> <noptr> ske cg x load firmware ( <ptr> sd )
<cls> <ptr> check i soc ( )
<cls> <noptr> dib set wb d ref ( <ptr> fe <dot> <noptr> value )
<cls> <noptr> cafe pci resume ( <ptr> pdev )
<cls> <noptr> cobalt hdl info get ( <ptr> cobalt )
<cls> <noptr> alp std be tuner set params ( <ptr> fe )
<cls> <ptr> six x attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> saa h probe ( <ptr> client <dot> <ptr> id )
<cls> <ptr> e tek reg list find mode ival ( <ptr> meta <dot> <ptr> current reg list <dot> <ptr> time per frame )
<cls> <ptr> media request state str ( <noptr> state )
<cls> <noptr> log times ( <noptr> value )
<cls> <noptr> stv cabal go ( <ptr> state <dot> <ptr> p )
<cls> <ptr> check output types ( )
<cls> <ptr> check ada c ( )
<cls> <noptr> v spr wpf init ctrls ( <ptr> r wpf <dot> <noptr> n controls )
<cls> <noptr> imx enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> tt usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> wl f m vid ioc g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> snc command ( <ptr> gsp ca dev <dot> <ptr> command )
<cls> <noptr> m cam vid ioc g parm ( <ptr> filp <dot> <ptr> priv <dot> <ptr> a )
<cls> <noptr> vid ioc spar m ( <ptr> file <dot> <ptr> priv <dot> <ptr> a )
<cls> <noptr> v l m m ioctl prepare buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> pwc set exposure auto ( <ptr> pdev )
<cls> <noptr> vpx init pid filter ( <ptr> adap )
<cls> <noptr> six vid io cs frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> freq )
<cls> <noptr> h fi session continue ( <ptr> inst )
<cls> <noptr> sd init controls a ( <ptr> gsp ca dev )
<cls> <noptr> mtk jpeg bound align image ( <ptr> w <dot> <noptr> w min <dot> <noptr> w max <dot> <noptr> w align <dot> <ptr> h <dot> <noptr> h min <dot> <noptr> h max <dot> <noptr> h align )
<cls> <noptr> c ecs log addrs ( <ptr> adap <dot> <ptr> log addrs <dot> <noptr> block )
<cls> <noptr> ska a power on ( <ptr> ska a )
<cls> <ptr> vsp entity remote pad ( <ptr> pad )
<cls> <noptr> vi codec buf prepare ( <ptr> vb )
<cls> <noptr> r ga buf prepare ( <ptr> vb )
<cls> <noptr> sp jpegs fmt vid cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> f m r x seek ( <ptr> f m dev <dot> <noptr> seek upward <dot> <noptr> wraparound <dot> <noptr> spacing )
<cls> <noptr> std equal ( <ptr> ctrl <dot> <noptr> idx <dot> <noptr> ptr <dot> <noptr> ptr )
<cls> <noptr> stv get m clk freq ( <ptr> int p <dot> <noptr> ext clk )
<cls> <ptr> check one adapter ( )
<cls> <noptr> fim c lite sub dev get selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <ptr> c x risc field ( <ptr> r p <dot> <ptr> sg list <dot> <noptr> offset <dot> <noptr> sync line <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines <dot> <noptr> jump )
<cls> <ptr> i x v attach ( <ptr> fe <dot> <ptr> config <dot> <ptr> ic )
<cls> <noptr> ovs sat hue ( <ptr> sd <dot> <noptr> sat <dot> <noptr> hue )
<cls> <noptr> fim c lite set default config ( <ptr> fim c )
<cls> <noptr> ln b h set voltage ( <ptr> fe <dot> <noptr> voltage )
<cls> <noptr> omap v out try window ( <ptr> f buf <dot> <ptr> new win )
<cls> <noptr> dvb dmx sw filter packet type ( <ptr> feed <dot> <ptr> buf )
<cls> <noptr> os d set blending factor ( <ptr> sd <dot> <noptr> os dwin <dot> <noptr> blend )
<cls> <noptr> six radio fops read ( <ptr> file <dot> <ptr> buf <dot> <noptr> count <dot> <ptr> p pos )
<cls> <noptr> c x usb medi on check alt setting ( <ptr> as )
<cls> <noptr> omap v out vrf b buffer setup ( <ptr> v out <dot> <ptr> count <dot> <noptr> start index )
<cls> <ptr> err str ( <noptr> err )
<cls> <noptr> ( <ptr> b tv )
<cls> <noptr> c x try fmt slice dvb icap ( <ptr> file <dot> <ptr> f h <dot> <ptr> fmt )
<cls> <noptr> store dec table ( <ptr> inst )
<cls> <noptr> os d request layer ( <ptr> sd <dot> <noptr> layer )
<cls> <noptr> wms frequency ( <ptr> sd <dot> <ptr> freq )
<cls> <noptr> c x der sleep t cto active i ( <ptr> priv <dot> <noptr> bandwidth )
<cls> <noptr> c xxx usb probe ( <ptr> interface <dot> <ptr> id )
<cls> <ptr> dvb bt xx match ( <noptr> bt tv nr <dot> <ptr> b tt vpc idev )
<cls> <noptr> coda register device ( <ptr> dev <dot> <noptr> i )
<cls> <ptr> nxt x attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> saas tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> mtk vcodec dec queue init ( <ptr> priv <dot> <ptr> src v q <dot> <ptr> dst v q )
<cls> <noptr> sms core register hot plug ( <noptr> hot plug )
<cls> <noptr> dcm i try fmt ( <ptr> dcm i <dot> <ptr> f <dot> <dptr> sd format <dot> <ptr> sd frame size )
<cls> <noptr> t dax detect std ( <ptr> state <dot> <ptr> timings )
<cls> <noptr> init r cmap nebula ( )
<cls> <ptr> check default radio region ( )
<cls> <noptr> isc buffer queue ( <ptr> vb )
<cls> <ptr> tw risc field ( <ptr> r p <dot> <ptr> sg list <dot> <noptr> offset <dot> <noptr> sync line <dot> <noptr> bpl <dot> <noptr> padding <dot> <noptr> lines <dot> <noptr> jump )
<cls> <noptr> get optim c loop ( <ptr> state <dot> <noptr> mod cod <dot> <noptr> pilots )
<cls> <noptr> sp mfc enc calc src size v ( <ptr> ctx )
<cls> <noptr> mantis pcm cia init ( <ptr> ca )
<cls> <noptr> dvb sky read mac addr ( <ptr> adap <dot> <noptr> mac )
<cls> <noptr> stk vid ioc g input ( <ptr> filp <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> cxx xic check for device ( <ptr> ic adap <dot> <ptr> msg )
<cls> <noptr> c xic register ( <ptr> c x <dot> <noptr> idx )
<cls> <noptr> wl f m radio probe ( <ptr> pdev )
<cls> <noptr> me so nao cec transmit ( <ptr> adap <dot> <noptr> attempts <dot> <noptr> signal free time <dot> <ptr> msg )
<cls> <noptr> query lock ( <ptr> sd )
<cls> <noptr> write reg m ( <ptr> c i <dot> <noptr> reg <dot> <noptr> val <dot> <noptr> mask )
<cls> <noptr> scm try format ( <ptr> state <dot> <ptr> cfg <dot> <ptr> fmt <dot> <dptr> fs )
<cls> <noptr> c sir x parsed t ( <ptr> c sir x )
<cls> <noptr> or read buf ( <ptr> state <dot> <ptr> buf <dot> <noptr> len )
<cls> <noptr> cxa vs frequency ( <ptr> sd <dot> <ptr> freq )
<cls> <noptr> x vip d main it ( <ptr> x dev <dot> <ptr> dma <dot> <noptr> type <dot> <noptr> port )
<cls> <ptr> ln b p attach ( <ptr> fe <dot> <ptr> ic )
<cls> <noptr> uda driver init ( )
<cls> <noptr> c x alsa announce pcm data ( <ptr> c x sc <dot> <ptr> pcm data <dot> <noptr> numbytes )
<cls> <noptr> put byte write ( <ptr> c buf <dot> <noptr> val )
<cls> <noptr> vid ioc try fmt sdr cap ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> tws ctrl ( <ptr> ctrl )
<cls> <noptr> c iner gy t usb probe ( <ptr> int f <dot> <ptr> id )
<cls> <noptr> f set line ( <ptr> dev <dot> <noptr> line <dot> <noptr> lvl )
<cls> <noptr> m xlt set x tal freq bits ( <ptr> state <dot> <noptr> x tal freq )
<cls> <noptr> tea initialize ( <ptr> chip )
<cls> <ptr> r card rif get f buf ( <ptr> sdr )
<cls> <noptr> wl f m vid ioc g mod ulator ( <ptr> file <dot> <ptr> priv <dot> <ptr> mod ulator )
<cls> <noptr> input change ( <ptr> client )
<cls> <noptr> wcf mode init regs ( <ptr> sd )
<cls> <ptr> check tx sim ( )
<cls> <noptr> six radios hw freq seek ( <ptr> file <dot> <ptr> priv <dot> <ptr> seek )
<cls> <noptr> h fi create ( <ptr> core <dot> <ptr> ops )
<cls> <noptr> bt tv apply geo ( <ptr> b tv <dot> <ptr> geo <dot> <noptr> odd )
<cls> <noptr> c xvid io cs input ( <ptr> file <dot> <ptr> priv <dot> <noptr> i )
<cls> <noptr> exy nos jpeg set q tbl lum ( <ptr> regs <dot> <noptr> quality )
<cls> <noptr> h v adb g perf begin ( <ptr> ctx )
<cls> <noptr> mtk jpeg probe ( <ptr> pdev )
<cls> <noptr> rtl get tune settings ( <ptr> fe <dot> <ptr> s )
<cls> <noptr> mtk vcodec dec clock off ( <ptr> pm )
<cls> <noptr> dib p tuner rw ser par ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> d v bring buffer empty ( <ptr> r buf )
<cls> <noptr> omap v out calculate vrf b offset ( <ptr> v out )
<cls> <noptr> vp fec cdc set frame format ( <ptr> c cdc <dot> <noptr> frm fmt )
<cls> <noptr> r tread cache reg ( <ptr> priv <dot> <noptr> reg )
<cls> <noptr> m tread signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> stk sensor init ( <ptr> dev )
<cls> <noptr> md ( <ptr> gsp ca dev <dot> <ptr> command )
<cls> <noptr> vid io cs fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sh ve u try fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c xxx init v bii soc ( <ptr> dev <dot> <noptr> max packets <dot> <noptr> num buf s <dot> <noptr> max pkt size <dot> <ptr> ptr <dot> <ptr> ptr )
<cls> <noptr> ov set exposure ( <ptr> sensor <dot> <noptr> exposure )
<cls> <noptr> delta vb frame finish ( <ptr> vb )
<cls> <noptr> bt tv irq switch video ( <ptr> b tv )
<cls> <noptr> iv tv set output mode ( <ptr> it v <dot> <noptr> mode )
<cls> <noptr> az read ( <ptr> udev <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <noptr> six radio g register ( <ptr> file <dot> <ptr> f h <dot> <ptr> reg )
<cls> <ptr> af get ic adapter ( <ptr> client )
<cls> <noptr> ske cg x try frame size ( <ptr> m f <dot> <dptr> size )
<cls> <noptr> venus write l ( <ptr> h dev <dot> <noptr> reg <dot> <noptr> value )
<cls> <noptr> v l stub enum frame sizes ( <ptr> ops <dot> <ptr> file <dot> <ptr> f h <dot> <ptr> p )
<cls> <noptr> rv insets lot addr ( <ptr> vin <dot> <noptr> slot <dot> <noptr> addr )
<cls> <noptr> flex cop eeprom l rc read ( <ptr> fc <dot> <noptr> addr <dot> <ptr> buf <dot> <noptr> len <dot> <noptr> retries )
<cls> <ptr> ic adapter from chan ( <ptr> chan )
<cls> <ptr> check de ( )
<cls> <ptr> v spr wpf get crop ( <ptr> r wpf <dot> <ptr> config )
<cls> <noptr> stv xl dpc mode ( <ptr> state <dot> <noptr> l dpc mode )
<cls> <noptr> go usb read interrupt ( <ptr> go )
<cls> <noptr> dvb register c imac ( <ptr> port )
<cls> <noptr> coda prepare decode ( <ptr> ctx )
<cls> <noptr> td a volume ( <noptr> val )
<cls> <noptr> dvb usb adapter dvb init ( <ptr> adap <dot> <ptr> adapter nums )
<cls> <ptr> dib get ic master ( <ptr> fe <dot> <noptr> int f <dot> <noptr> g ating )
<cls> <noptr> int cos ( <noptr> x )
<cls> <noptr> per fopen ( <ptr> inode <dot> <ptr> file )
<cls> <noptr> init r cmap d m nec ( )
<cls> <noptr> emma prp buf queue ( <ptr> vb )
<cls> <noptr> ov entity init cfg ( <ptr> sub dev <dot> <ptr> cfg )
<cls> <noptr> videog fmt ( <ptr> file <dot> <ptr> f h <dot> <ptr> f )
<cls> <noptr> c xxx dvb bus ctrl ( <ptr> fe <dot> <noptr> acquire )
<cls> <noptr> vid ioc g fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> sms board load modules ( <noptr> id )
<cls> <noptr> fdp stop streaming ( <ptr> q )
<cls> <noptr> validate sku ( <ptr> state )
<cls> <noptr> ov write regs ( <ptr> client <dot> <noptr> width <dot> <noptr> code <dot> <ptr> alt s )
<cls> <noptr> detect b tsc ( <ptr> core <dot> <noptr> x <dot> <noptr> n )
<cls> <noptr> c x irq get mask ( <ptr> dev )
<cls> <noptr> go smbus xfer ( <ptr> adapter <dot> <noptr> addr <dot> <noptr> flags <dot> <noptr> read write <dot> <noptr> command <dot> <noptr> size <dot> <ptr> data )
<cls> <noptr> gsp ca return all buffers ( <ptr> gsp ca dev <dot> <noptr> state )
<cls> <noptr> c xdr set front end t ( <ptr> fe )
<cls> <noptr> uvc color space ( <noptr> prim aries )
<cls> <noptr> av os d capability ( <ptr> av <dot> <ptr> cap )
<cls> <noptr> write ic ( <ptr> tr <dot> <noptr> n )
<cls> <noptr> sms core set gpio ( <ptr> core dev <dot> <noptr> pin <dot> <noptr> level )
<cls> <noptr> ctrl audio modes present get ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> fim c is link setup ( <ptr> entity <dot> <ptr> local <dot> <ptr> remote <dot> <noptr> flags )
<cls> <noptr> init r cmap npg tech ( )
<cls> <noptr> delta open decoder ( <ptr> ctx <dot> <noptr> stream format <dot> <noptr> pixel format <dot> <dptr> p dec )
<cls> <noptr> ves read uc blocks ( <ptr> fe <dot> <ptr> uc blocks )
<cls> <ptr> video buf to v addr ( <ptr> buf )
<cls> <noptr> m eye ioc sync ( <ptr> file <dot> <ptr> f h <dot> <ptr> i )
<cls> <noptr> v dec ctrl init ( <ptr> inst )
<cls> <noptr> scm enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> v dec buf done ( <ptr> inst <dot> <noptr> buf type <dot> <noptr> tag <dot> <noptr> bytes used <dot> <noptr> data offset <dot> <noptr> flags <dot> <noptr> h fi flags <dot> <noptr> timestamp us )
<cls> <noptr> g lic function ality ( <ptr> adapter )
<cls> <noptr> six usb driver suspend ( <ptr> int f <dot> <noptr> message )
<cls> <noptr> ds set carrier offset ( <ptr> fe <dot> <noptr> carrier offset khz )
<cls> <noptr> f m v l vid io csh w freq seek ( <ptr> file <dot> <ptr> priv <dot> <ptr> seek )
<cls> <noptr> put v l buffer ( <ptr> p <dot> <ptr> p )
<cls> <noptr> wb cir init hw ( <ptr> data )
<cls> <noptr> aus std ( <ptr> sd <dot> <noptr> std )
<cls> <noptr> rcs i get pad format ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> si attach ( <ptr> port <dot> <ptr> adapter <dot> <ptr> fe <dot> <noptr> addr bit <dot> <ptr> cfg )
<cls> <noptr> clear page movable ( <ptr> page )
<cls> <ptr> simple tuner attach ( <ptr> fe <dot> <ptr> ic adap <dot> <noptr> ic addr <dot> <noptr> type )
<cls> <noptr> c cdc open ( <ptr> device )
<cls> <noptr> adv s ctrl ( <ptr> ctrl )
<cls> <ptr> fim c lite sub dev try fmt ( <ptr> fim c <dot> <ptr> cfg <dot> <ptr> format )
<cls> <noptr> sdp csc coeff ( <ptr> sd <dot> <ptr> c )
<cls> <noptr> imx s stream ( <ptr> sub dev <dot> <noptr> enable )
<cls> <noptr> mtm get pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> usb tv g std ( <ptr> file <dot> <ptr> priv <dot> <ptr> norm )
<cls> <noptr> omap isp configure bridge ( <ptr> isp <dot> <noptr> input <dot> <ptr> par cfg <dot> <noptr> shift <dot> <noptr> bridge )
<cls> <noptr> c x pll write ( <ptr> fe <dot> <noptr> buf <dot> <noptr> len )
<cls> <noptr> mds read status ( <ptr> fe <dot> <ptr> status )
<cls> <noptr> v pfe read unc blocks ( <ptr> fe <dot> <ptr> unc )
<cls> <noptr> dvb usb adapter stream init ( <ptr> adap )
<cls> <noptr> cxf ini ( )
<cls> <ptr> dib attach ( <ptr> ops )
<cls> <noptr> buf size v l format ( <ptr> p <dot> <ptr> size )
<cls> <noptr> vivid vid cap g parm ( <ptr> file <dot> <ptr> priv <dot> <ptr> parm )
<cls> <noptr> vivid radio tx write ( <ptr> file <dot> <ptr> buf <dot> <noptr> size <dot> <ptr> offset )
<cls> <ptr> check flicker mode ( )
<cls> <noptr> c x stop audio dma ( <ptr> chip )
<cls> <noptr> iv tvs stream vb i fmt ( <ptr> c x hdl <dot> <noptr> fmt )
<cls> <noptr> em xx irq callback ( <ptr> urb )
<cls> <ptr> v l m m last buf ( <ptr> q ctx )
<cls> <noptr> fd tvc a get mmi ( <ptr> fdt v <dot> <ptr> arg )
<cls> <noptr> pkt session init ( <ptr> pkt <dot> <ptr> cookie <dot> <noptr> session type <dot> <noptr> codec )
<cls> <ptr> to coda video device ( <ptr> v dev )
<cls> <noptr> gpp sk fe in ( <ptr> priv <dot> <noptr> req <dot> <noptr> value <dot> <noptr> index <dot> <ptr> b <dot> <noptr> blen )
<cls> <ptr> check mtk mdp dbg level ( )
<cls> <noptr> tim b radio vid ioc g tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> v )
<cls> <ptr> check t snr packets ( )
<cls> <ptr> check cor ing ( )
<cls> <ptr> check rc device ( )
<cls> <noptr> ir raw edge handle ( <ptr> t )
<cls> <noptr> x vt c parse of ( <ptr> x vt c )
<cls> <noptr> dtt u front end attach ( <ptr> adap )
<cls> <noptr> ctrl get volume ( <ptr> cptr <dot> <ptr> vp )
<cls> <noptr> vivid radio g frequency ( <ptr> file <dot> <ptr> p freq <dot> <ptr> v f )
<cls> <noptr> dt buf prepare ( <ptr> vb )
<cls> <noptr> uvc init video bulk ( <ptr> stream <dot> <ptr> ep <dot> <noptr> gfp flags )
<cls> <noptr> vps m px s radio ( <ptr> sd )
<cls> <noptr> ovs frame interval ( <ptr> sd <dot> <ptr> ival )
<cls> <noptr> nim md front end attach ( <ptr> adap )
<cls> <ptr> m xls f demo d attach ( <ptr> m xl state <dot> <ptr> cfg )
<cls> <noptr> fdt v cainfo ( <ptr> fdt v <dot> <ptr> arg )
<cls> <noptr> r jn sensor scale ( <ptr> sd <dot> <ptr> in w <dot> <ptr> in h <dot> <ptr> out w <dot> <ptr> outh )
<cls> <noptr> iv tv set irq mask ( <ptr> it v <dot> <noptr> mask )
<cls> <noptr> adp update hw ( <ptr> flash )
<cls> <noptr> tm radios ctrl ( <ptr> ctrl )
<cls> <noptr> regr i ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> index <dot> <noptr> len )
<cls> <ptr> qt attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> sp jpeg set hac tbl ( <ptr> regs )
<cls> <noptr> net up uni dvb queue cleanup ( <ptr> dma )
<cls> <ptr> vp if capture get p data ( <ptr> pdev )
<cls> <ptr> check tuner ( )
<cls> <noptr> uvc clock param set ( <ptr> val <dot> <ptr> kp )
<cls> <noptr> tvp set vb i ( <ptr> sd <dot> <noptr> type <dot> <noptr> flags <dot> <noptr> line <dot> <noptr> fields )
<cls> <noptr> bt tv enum fmt vid overlay ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> check vid cap nr ( )
<cls> <noptr> six vid io csh w freq seek ( <ptr> file <dot> <ptr> priv <dot> <ptr> seek )
<cls> <noptr> isc clk get parent ( <ptr> hw )
<cls> <noptr> wp tuner rw ser par ( <ptr> ic adap <dot> <noptr> msg <dot> <noptr> num )
<cls> <noptr> win view volume ( <ptr> b tv <dot> <noptr> volume )
<cls> <noptr> solo set motion block ( <ptr> solo dev <dot> <noptr> ch <dot> <ptr> thresholds )
<cls> <noptr> solo enc stop streaming ( <ptr> q )
<cls> <noptr> omap isp pipeline set stream ( <ptr> pipe <dot> <noptr> state )
<cls> <noptr> v pu dec deinit ( <ptr> v pu )
<cls> <noptr> hel ene read reg ( <ptr> priv <dot> <noptr> reg <dot> <ptr> val )
<cls> <noptr> use c sto dev ( <noptr> use cs <dot> <noptr> array <dot> <noptr> size )
<cls> <noptr> iv tv firmware init ( <ptr> it v )
<cls> <noptr> mtk mdp clock on ( <ptr> mdp )
<cls> <noptr> register dvb ( <ptr> demux <dot> <ptr> adap <dot> <ptr> start feed <dot> <ptr> stop feed <dot> <ptr> fe i )
<cls> <ptr> check disable analog audio ( )
<cls> <noptr> saa api set aspect ratio ( <ptr> port )
<cls> <noptr> vivid vid out g parm ( <ptr> file <dot> <ptr> priv <dot> <ptr> parm )
<cls> <noptr> mtk vcodec wait for done ctx ( <ptr> ctx <dot> <noptr> command <dot> <noptr> timeout ms )
<cls> <noptr> az front end reset ( <ptr> adap )
<cls> <noptr> v l print create buffers ( <ptr> arg <dot> <noptr> write only )
<cls> <noptr> hi enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> xcf w upload ( <ptr> fe <dot> <ptr> desired fw <dot> <ptr> fw )
<cls> <noptr> x c get lock status ( <ptr> priv <dot> <ptr> lock status )
<cls> <noptr> mtv power off ( <ptr> sd )
<cls> <ptr> t dax attach ( <ptr> fe <dot> <noptr> addr <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> sp jpegs fmt vid out ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> az techs mute volume ( <ptr> isa <dot> <noptr> mute <dot> <noptr> vol )
<cls> <noptr> ddb ic add ( <ptr> dev <dot> <ptr> ic <dot> <ptr> reg map <dot> <noptr> link <dot> <noptr> i <dot> <noptr> num )
<cls> <noptr> az tech init ( )
<cls> <noptr> c x get stats ( <ptr> state )
<cls> <ptr> to imx ( <ptr> sd )
<cls> <ptr> check enc idx buffers ( )
<cls> <ptr> check disable rc polling ( )
<cls> <noptr> stk enum frame sizes ( <ptr> gsp ca dev <dot> <ptr> f size )
<cls> <noptr> norms width ( <noptr> norm )
<cls> <noptr> send associate g ( <ptr> i ctx )
<cls> <noptr> bt tv g input ( <ptr> file <dot> <ptr> priv <dot> <ptr> i )
<cls> <noptr> coda h padding ( <noptr> size <dot> <ptr> p )
<cls> <noptr> acknowledged command ( <ptr> gsp ca dev <dot> <noptr> req <dot> <noptr> idx <dot> <noptr> val <dot> <noptr> end code <dot> <noptr> count )
<cls> <ptr> check encoder buffers ( )
<cls> <noptr> sh ve u buf prepare ( <ptr> vb )
<cls> <noptr> cec v gpio irqhandler thread ( <noptr> irq <dot> <ptr> priv )
<cls> <noptr> isp video mbus to pix ( <ptr> video <dot> <ptr> mbus <dot> <ptr> pix )
<cls> <ptr> check crc checking ( )
<cls> <noptr> venus sys set idle message ( <ptr> h dev <dot> <noptr> enable )
<cls> <noptr> flex cop device name ( <ptr> fc <dot> <ptr> prefix <dot> <ptr> suffix )
<cls> <noptr> pvr stu ner ( <ptr> file <dot> <ptr> priv <dot> <ptr> vt )
<cls> <noptr> sp mfc v wait wakeup ( <ptr> dev )
<cls> <noptr> rcs i probe resources ( <ptr> priv <dot> <ptr> pdev )
<cls> <ptr> ccp get format ( <ptr> ccp <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> d wx opr w ( <ptr> dev <dot> <noptr> request <dot> <noptr> value <dot> <noptr> index <dot> <ptr> data <dot> <noptr> len <dot> <noptr> flags )
<cls> <noptr> red rat send cmd ( <noptr> cmd <dot> <ptr> r r )
<cls> <noptr> mtm enum mbus code ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> sa axs tuner ( <ptr> sd <dot> <ptr> vt )
<cls> <noptr> isa pnp fmi probe ( )
<cls> <noptr> d mic xfer ( <ptr> ic adap <dot> <ptr> msgs <dot> <noptr> num )
<cls> <noptr> fill caps ( <ptr> cap <dot> <ptr> data <dot> <noptr> num )
<cls> <noptr> budget start feed ( <ptr> feed )
<cls> <noptr> scc am if sub dev set selection ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> sel )
<cls> <noptr> c sit x set pad format ( <ptr> sub dev <dot> <ptr> cfg <dot> <ptr> fmt )
<cls> <noptr> wl f m vid ioc g audio ( <ptr> file <dot> <ptr> priv <dot> <ptr> audio )
<cls> <noptr> skb afe num frame interval ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fie )
<cls> <noptr> command set sensor fps ( <ptr> gsp ca dev )
<cls> <noptr> vpx front end attach ( <ptr> adap )
<cls> <noptr> solo ence num input ( <ptr> file <dot> <ptr> priv <dot> <ptr> input )
<cls> <noptr> mtk mdp bound align image ( <ptr> w <dot> <noptr> w min <dot> <noptr> w max <dot> <noptr> align w <dot> <ptr> h <dot> <noptr> h min <dot> <noptr> h max <dot> <noptr> align h )
<cls> <noptr> buf prepare ( <ptr> vb )
<cls> <noptr> sun x iir irq ( <noptr> irq no <dot> <ptr> devid )
<cls> <noptr> c xxx query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> mtv power on ( <ptr> mtv )
<cls> <noptr> z r x xvid ioc query cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> cap )
<cls> <noptr> sa axs crystal freq ( <ptr> sd <dot> <noptr> freq <dot> <noptr> flags )
<cls> <noptr> gpio irt x probe ( <ptr> pdev )
<cls> <noptr> fim c lite sub dev enum mbus code ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> code )
<cls> <noptr> cypress load firmware ( <ptr> udev <dot> <ptr> fw <dot> <noptr> type )
<cls> <noptr> ska a enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> slot reset x o ( <ptr> ca <dot> <noptr> slot )
<cls> <ptr> media device get ( <ptr> dev <dot> <ptr> module name <dot> <ptr> owner )
<cls> <noptr> v few m set ub cfg ( <ptr> v fe <dot> <noptr> wm <dot> <noptr> offset <dot> <noptr> depth )
<cls> <ptr> check en cts buffers ( )
<cls> <ptr> d ibm c attach ( <ptr> ic adap <dot> <noptr> ic addr <dot> <ptr> cfg )
<cls> <ptr> dib x get ic adapter ( <ptr> mst <dot> <noptr> int f <dot> <noptr> g ating )
<cls> <noptr> c xxx set audio input ( <ptr> dev <dot> <noptr> input )
<cls> <noptr> c x d spi device write ( <ptr> spi <dot> <ptr> data <dot> <noptr> size )
<cls> <noptr> mtk jpeg decide format ( <ptr> param )
<cls> <noptr> vivid vid cap g pixel aspect ( <ptr> file <dot> <ptr> priv <dot> <noptr> type <dot> <ptr> f )
<cls> <noptr> stv read signal strength ( <ptr> fe <dot> <ptr> strength )
<cls> <noptr> get cxx ident ( <ptr> client )
<cls> <noptr> l gs gxx read status ( <ptr> fe <dot> <ptr> fe status )
<cls> <noptr> set v th default ( <ptr> state )
<cls> <ptr> too v ( <ptr> client )
<cls> <noptr> scc am if d q buf ( <ptr> file <dot> <ptr> priv <dot> <ptr> buf )
<cls> <noptr> buffer prepare ( <ptr> vb )
<cls> <noptr> dei error ( <ptr> ctx )
<cls> <ptr> stb attach ( <ptr> config <dot> <ptr> ic )
<cls> <noptr> adv x parse csi lanes ( <ptr> state <dot> <noptr> port <dot> <ptr> ep )
<cls> <ptr> ov get pad format ( <ptr> ov <dot> <ptr> cfg <dot> <noptr> pad <dot> <noptr> which )
<cls> <noptr> dib xic set speed ( <ptr> ic adap <dot> <noptr> speed )
<cls> <ptr> sp mfc init hw cmds v ( )
<cls> <noptr> airs pys frequency ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <ptr> v l f wht find nth fmt ( <noptr> width div <dot> <noptr> height div <dot> <noptr> components num <dot> <noptr> pix enc <dot> <noptr> start idx )
<cls> <noptr> vivid thread sdr cap tick ( <ptr> dev )
<cls> <noptr> olor ( <ptr> av <dot> <noptr> window nr <dot> <noptr> color depth <dot> <noptr> index <dot> <noptr> color hi <dot> <noptr> color lo )
<cls> <noptr> vid ioc try fmt vid out m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> conv fec ( <noptr> fec )
<cls> <noptr> fim c ctrls create ( <ptr> ctx )
<cls> <ptr> check dec vb i buffers ( )
<cls> <noptr> os denable vid rgb ( <ptr> sd <dot> <noptr> layer )
<cls> <noptr> skb a fwrite ( <ptr> state <dot> <noptr> addr <dot> <noptr> val )
<cls> <noptr> bt tvs tuner ( <ptr> file <dot> <ptr> priv <dot> <ptr> t )
<cls> <noptr> j pu enum fmt cap ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> c x dio spi create ( <ptr> io <dot> <ptr> spi <dot> <noptr> slave select )
<cls> <noptr> vid ioc enum frame intervals ( <ptr> file <dot> <ptr> priv <dot> <ptr> f ival )
<cls> <noptr> alter acio p cam ( <ptr> en <dot> <noptr> slot <dot> <noptr> flag <dot> <noptr> read <dot> <noptr> addr <dot> <noptr> val )
<cls> <ptr> v l async notifier add fw node sub dev ( <ptr> notifier <dot> <ptr> fw node <dot> <noptr> asd struct size )
<cls> <noptr> saa download image ( <ptr> dev <dot> <ptr> src <dot> <noptr> src size <dot> <noptr> d lflags <dot> <ptr> dst <dot> <noptr> dst size )
<cls> <ptr> mt attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg <dot> <noptr> if )
<cls> <noptr> csi phy enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> fim cli tes fmt m plane ( <ptr> file <dot> <ptr> priv <dot> <ptr> f )
<cls> <noptr> snd c x pcm create ( <ptr> c x sc )
<cls> <ptr> rt attach ( <ptr> fe <dot> <ptr> ic <dot> <ptr> cfg )
<cls> <noptr> coda h bitstream pad ( <ptr> ctx <dot> <noptr> size )
<cls> <ptr> m xls f tuner attach ( <ptr> fe <dot> <ptr> m xl state <dot> <ptr> cfg )
<cls> <noptr> media request object bind ( <ptr> req <dot> <ptr> ops <dot> <ptr> priv <dot> <noptr> is buffer <dot> <ptr> obj )
<cls> <noptr> uvc queue allocated ( <ptr> queue )
<cls> <noptr> c xxx copy vb i line ( <ptr> dev <dot> <ptr> dma q <dot> <ptr> p line <dot> <noptr> length <dot> <noptr> field number )
<cls> <noptr> dcm i enum frame sizes ( <ptr> file <dot> <ptr> f h <dot> <ptr> f size )
<cls> <ptr> ov select win ( <noptr> width <dot> <noptr> height )
<cls> <noptr> ovs brightness ( <ptr> sd <dot> <noptr> value )
<cls> <ptr> get enc queue ops ( )
<cls> <noptr> pvr locate firmware ( <ptr> h dw <dot> <dptr> fw entry <dot> <ptr> fw type name <dot> <noptr> fw count <dot> <ptr> fw names )
<cls> <noptr> dst une ( <ptr> fe <dot> <noptr> retun e <dot> <noptr> mode flags <dot> <ptr> delay <dot> <ptr> status )
<cls> <noptr> cxx api ( <ptr> priv <dot> <noptr> func <dot> <noptr> cmd <dot> <noptr> args )
<cls> <noptr> lend ( <ptr> av <dot> <noptr> window nr <dot> <noptr> color depth <dot> <noptr> index <dot> <noptr> blending )
<cls> <noptr> vb dvb register bus ( <ptr> f <dot> <ptr> module <dot> <ptr> adapter priv <dot> <ptr> device <dot> <ptr> m dev <dot> <ptr> adapter nr <dot> <noptr> m fe shared )
<cls> <noptr> s irt xir ( <ptr> dev <dot> <ptr> tx buf <dot> <noptr> count )
<cls> <noptr> mtm init cfg ( <ptr> sd <dot> <ptr> cfg )
<cls> <ptr> read rds samples ( <ptr> core <dot> <ptr> n )
<cls> <noptr> csi phy lanes enable ( <ptr> csi phy <dot> <ptr> cfg <dot> <noptr> pixel clock <dot> <noptr> bpp <dot> <noptr> lane mask )
<cls> <ptr> check vb i buffers ( )
<cls> <noptr> radio sig mod ulator ( <ptr> file <dot> <ptr> p <dot> <ptr> vm )
<cls> <noptr> tw x enum frame sizes ( <ptr> file <dot> <ptr> priv <dot> <ptr> f size )
<cls> <noptr> ovs contrast ( <ptr> sd <dot> <noptr> value )
<cls> <noptr> call enum frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> gen bit mask string ( <noptr> msk <dot> <noptr> val <dot> <noptr> msk only <dot> <dptr> names <dot> <ptr> ptr <dot> <noptr> len )
<cls> <noptr> v dec num buffers ( <ptr> inst <dot> <ptr> in num <dot> <ptr> out num )
<cls> <ptr> v pd mah w list release ( <ptr> vp dma <dot> <noptr> list num )
<cls> <ptr> as attach ( <ptr> name <dot> <ptr> ops <dot> <ptr> priv <dot> <noptr> el na cfg )
<cls> <noptr> skb afe num frame size ( <ptr> sd <dot> <ptr> cfg <dot> <ptr> fse )
<cls> <noptr> hdmi info frame checksum ( <ptr> ptr <dot> <noptr> size )
<cls> <ptr> stv attach ( <ptr> ic <dot> <ptr> cfg <dot> <noptr> nr )
<cls> <noptr> cec register adapter ( <ptr> adap <dot> <ptr> parent )
<cls> <ptr> check enct sbuf size ( )
<cls> <noptr> frac ( <noptr> n <dot> <noptr> d )
<cls> <noptr> skb af bound rect ( <ptr> r <dot> <noptr> width <dot> <noptr> height )

max_length:63